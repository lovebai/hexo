<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android开发之网络编程框架-OkHttp</title>
    <url>/posts/6054/</url>
    <content><![CDATA[<h1 id="OkHttp-简介"><a href="#OkHttp-简介" class="headerlink" title="OkHttp 简介"></a>OkHttp 简介</h1><p>HTTP 是现代应用程序网络的方式。这就是我们交换数据和媒体的方式。有效地执行 HTTP 可以使您的内容加载更快并节省带宽。</p>
<p>OkHttp 是一个默认高效的 HTTP 客户端：</p>
<ul>
<li>HTTP/2 支持允许对同一主机的所有请求共享一个套接字。</li>
<li>连接池减少了请求延迟（如果 HTTP/2 不可用）。</li>
<li>透明 GZIP 缩小了下载大小。</li>
<li>响应缓存完全避免了网络重复请求。</li>
</ul>
<p>当网络出现问题时，OkHttp 坚持不懈：它会默默地从常见的连接问题中恢复。如果您的服务有多个 IP 地址，如果第一次连接失败，OkHttp 将尝试备用地址。这对于 IPv4+IPv6 和冗余数据中心中托管的服务是必要的。OkHttp 支持现代 TLS 功能（TLS 1.3、ALPN、证书固定）。它可以配置为回退以实现广泛的连接。</p>
<span id="more"></span>

<p>使用 OkHttp 很容易。它的请求/响应 API 设计有流畅的构建器和不变性。它支持同步阻塞调用和带有回调的异步调用。</p>
<ul>
<li>官方文档： <a href="">https://square.github.io/okhttp/</a></li>
<li>GitHub：<a href="">https://github.com/square/okhttp/</a></li>
</ul>
<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ul>
<li>请求内容数据（目前来说，数据格式主要是 json，xml 比较少用了）</li>
<li>加载图片（一般来说，图片地址以内容的形式返回到手机端，然后再通过图片地址进行加载到控件中）</li>
<li>上传文件/数据（头像的上传，采集数据的上传，甚至是录像之类的大文件上传）</li>
</ul>
<h1 id="使用框架"><a href="#使用框架" class="headerlink" title="使用框架"></a>使用框架</h1><h2 id="Android-10-Http-访问配置（https-协议略过）"><a href="#Android-10-Http-访问配置（https-协议略过）" class="headerlink" title="Android 10 Http 访问配置（https 协议略过）"></a>Android 10 Http 访问配置（https 协议略过）</h2><p>Android27 以上，默认是不支持 Http 访问的了，需要使用 https，如果你要使用 Http 明文访问，那么需要配置一下。</p>
<p>在清单文件，application 节点，添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">android:networkSecurityConfig=&quot;@xml/network_security_config&quot;</span><br></pre></td></tr></table></figure>

<p>添加 network_security_config.xml 文件，内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">network-security-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">domain-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">&quot;true&quot;</span>&gt;</span>sunofbeaches.com<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">domain-config</span> <span class="attr">cleartextTrafficPermitted</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">&quot;true&quot;</span>&gt;</span>www.sunofbeach.net<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">&quot;true&quot;</span>&gt;</span>imgs.sunofbeaches.com<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">domain-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">domain-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">network-security-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>关于网络安全配置可参考谷歌官方文档：<a href="">https://developer.android.google.cn/training/articles/security-config#manifest</a></p>
<h2 id="声明权限"><a href="#声明权限" class="headerlink" title="声明权限"></a>声明权限</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">implementation(&quot;com.squareup.okhttp3:okhttp:4.2.2&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="异步-GET-请求"><a href="#异步-GET-请求" class="headerlink" title="异步 GET 请求"></a>异步 GET 请求</h2><p>步骤：</p>
<ol>
<li>创建 OkHttpClient</li>
<li>创建请求内容</li>
<li>浏览器根据请求内容创建请求任务</li>
<li>执行请求任务</li>
</ol>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncGet</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//获取商城的分类信息</span></span><br><span class="line">       String url = <span class="string">&quot;https://xxxx.com/api/json&quot;</span>;</span><br><span class="line">       <span class="comment">//1、创建client，理解为创建浏览器</span></span><br><span class="line">       OkHttpClient okHttpClient = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">       <span class="comment">//2、创建请求内容</span></span><br><span class="line">       Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">               .url(url)</span><br><span class="line">               .get()</span><br><span class="line">               .build();</span><br><span class="line">       <span class="comment">//3、用浏览器创建调用任务</span></span><br><span class="line">       Call call = okHttpClient.newCall(request);</span><br><span class="line">       <span class="comment">//4、执行任务</span></span><br><span class="line">       call.enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(<span class="meta">@NotNull</span> Call call,<span class="meta">@NotNull</span> IOException e)</span> </span>&#123;</span><br><span class="line">               Log.d(TAG,<span class="string">&quot;onFailure -- &gt; &quot;</span> + e.toString());</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(<span class="meta">@NotNull</span> Call call,<span class="meta">@NotNull</span> Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">               Log.d(TAG,<span class="string">&quot;response -- &gt; &quot;</span> + response.body().string());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>运行返回结果：</p>
<p><img data-src="1648345886964.png"></p>
<h2 id="同步-GET-请求"><a href="#同步-GET-请求" class="headerlink" title="同步 GET 请求"></a>同步 GET 请求</h2><p>同步请求需自行处理线程的问题，不可以在 UI 主线程中去执行任务。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">public void syncGet(View view) &#123;</span><br><span class="line">        //获取商城的分类信息</span><br><span class="line">        String url = &quot;https://xxxx.com/api/json&quot;;</span><br><span class="line">        //1、创建client，理解为创建浏览器</span><br><span class="line">        OkHttpClient okHttpClient = new OkHttpClient();</span><br><span class="line">        //2、创建请求内容</span><br><span class="line">        Request request = new Request.Builder()</span><br><span class="line">                .url(url)</span><br><span class="line">                .get()</span><br><span class="line">                .build();</span><br><span class="line">        //3、用浏览器创建调用任务</span><br><span class="line">        final Call call = okHttpClient.newCall(request);</span><br><span class="line">        //4、执行任务</span><br><span class="line">        new Thread(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Response response = call.execute();</span><br><span class="line">                    Log.d(TAG,&quot;response -- &gt; &quot; + response.body().string());</span><br><span class="line">                &#125; catch(IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    Log.d(TAG,&quot;failure -- &gt; &quot; + e.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h2><p>与 GET 请求基本相似，下面以搜索接口为例</p>
<p>接口地址：<a href="https://xxxx.com/api/search">https://xxxx.com/api/search</a></p>
<p>参数：keysword -搜索的关键词</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSearch</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;https://xxxx.com/api/search&quot;</span>;</span><br><span class="line">        RequestBody requestBody = <span class="keyword">new</span> FormBody.Builder()</span><br><span class="line">                .add(<span class="string">&quot;keyword&quot;</span>,<span class="string">&quot;电脑&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(url)</span><br><span class="line">                .post(requestBody)</span><br><span class="line">                .build();</span><br><span class="line">        Call call = client.newCall(request);</span><br><span class="line">        call.enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(<span class="meta">@NotNull</span> Call call,<span class="meta">@NotNull</span> IOException e)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG,<span class="string">&quot;onFailure -- &gt; &quot;</span> + e.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(<span class="meta">@NotNull</span> Call call,<span class="meta">@NotNull</span> Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                Log.d(TAG,<span class="string">&quot;response json --&gt; &quot;</span> + response.body().string());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>可以从代码中看出，Formbody 是 RequestBody 的子类，RequestBody 下有两个子类：FormBody、MultipartBody，所以除了提交表单还可以提交文件。</p>
<h2 id="POST-上传单文件"><a href="#POST-上传单文件" class="headerlink" title="POST 上传单文件"></a>POST 上传单文件</h2><p>单文件上传的使用场景一般有：上传头像或者上传日志等</p>
<p>操作文件需先声明权限，因为读取的数据一般是在拓展卡里面，所以一般都需要此权限。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postFile</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;https://127.0.0.1:8080/file/upload&quot;</span>;</span><br><span class="line">        OkHttpClient httpClient = <span class="keyword">new</span> OkHttpClient.Builder().build();</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;/storage/emulated/0/Download/1.jpg&quot;</span>);</span><br><span class="line">        MediaType mediaType = MediaType.parse(<span class="string">&quot;jpeg&quot;</span>);</span><br><span class="line">        RequestBody fileBody = RequestBody.create(file,mediaType);</span><br><span class="line">        RequestBody requestBody = <span class="keyword">new</span> MultipartBody.Builder()</span><br><span class="line">                .addFormDataPart(<span class="string">&quot;file&quot;</span>,file.getName(),fileBody)</span><br><span class="line">                .build();</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder().url(url).post(requestBody).build();</span><br><span class="line">        Call call = httpClient.newCall(request);</span><br><span class="line">        call.enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(<span class="meta">@NotNull</span> Call call,<span class="meta">@NotNull</span> IOException e)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG,<span class="string">&quot;上传失败--&gt; &quot;</span> + e.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(<span class="meta">@NotNull</span> Call call,<span class="meta">@NotNull</span> Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                Log.d(TAG,<span class="string">&quot;上传结果：&quot;</span> + response.body().string());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>返回结果：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&#123;&quot;success&quot;:true,&quot;code&quot;:10000,&quot;message&quot;:&quot;上传成功.文件路径为：E:\\service\\Upload\\1.jpg&quot;,&quot;data&quot;:null&#125;</span><br></pre></td></tr></table></figure>

<p>上传的文件类型可参考这个表：<a href="">https://blog.csdn.net/qyt0147/article/details/80610481</a></p>
<h2 id="POST-上传多文件"><a href="#POST-上传多文件" class="headerlink" title="POST 上传多文件"></a>POST 上传多文件</h2><p>多文件上传需要根据接口程序所提供的参数来。比如接口地址为：<a href="http://127.0.0.1:8080/api/files/uploads%EF%BC%8C%E5%8F%82%E6%95%B0key%E4%B8%BA:files,%E6%89%80%E4%BB%A5%E5%A4%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%8F%82%E6%95%B0%E8%A6%81%E6%B1%82%E5%BF%85%E9%A1%BB%E4%B8%BAfiles%EF%BC%8C%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:8080/api/files/uploads，参数key为:files,所以多文件上传参数要求必须为files，实现代码如下：</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postMultiFile</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;http://127.0.0.1:8080/api/files/upload&quot;</span>;</span><br><span class="line">        OkHttpClient httpClient = <span class="keyword">new</span> OkHttpClient.Builder().build();</span><br><span class="line">        File fileOne = <span class="keyword">new</span> File(<span class="string">&quot;/storage/emulated/0/Download/1.jpg&quot;</span>);</span><br><span class="line">        File fileTwo = <span class="keyword">new</span> File(<span class="string">&quot;/storage/emulated/0/Download/rBsADV3nxtKACoSfAAAPx8jyjF8169.png&quot;</span>);</span><br><span class="line">        File fileThree = <span class="keyword">new</span> File(<span class="string">&quot;/storage/emulated/0/Download/rBsADV2rEz-AIzSoAABi-6nfiqs456.png&quot;</span>);</span><br><span class="line">        MediaType mediaType = MediaType.parse(<span class="string">&quot;jpeg&quot;</span>);</span><br><span class="line">        RequestBody fileOneBody = RequestBody.create(fileOne,mediaType);</span><br><span class="line">        RequestBody fileTwoBody = RequestBody.create(fileTwo,mediaType);</span><br><span class="line">        RequestBody fileThreeBody = RequestBody.create(fileThree,mediaType);</span><br><span class="line">        RequestBody requestBody = <span class="keyword">new</span> MultipartBody.Builder()</span><br><span class="line">                .addFormDataPart(<span class="string">&quot;files&quot;</span>,fileOne.getName(),fileOneBody)</span><br><span class="line">                .addFormDataPart(<span class="string">&quot;files&quot;</span>,fileTwo.getName(),fileTwoBody)</span><br><span class="line">                .addFormDataPart(<span class="string">&quot;files&quot;</span>,fileThree.getName(),fileThreeBody)</span><br><span class="line">                .build();</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder().url(url).post(requestBody).build();</span><br><span class="line">        Call call = httpClient.newCall(request);</span><br><span class="line">        call.enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(<span class="meta">@NotNull</span> Call call,<span class="meta">@NotNull</span> IOException e)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG,<span class="string">&quot;多文件上传失败--&gt; &quot;</span> + e.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(<span class="meta">@NotNull</span> Call call,<span class="meta">@NotNull</span> Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                Log.d(TAG,<span class="string">&quot;多文件上传结果：&quot;</span> + response.body().string());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>返回结果：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&#123;&quot;success&quot;:true,&quot;code&quot;:10000,&quot;message&quot;:&quot;上传成功3个文件，路径：E:/service/Upload&quot;,&quot;data&quot;:null&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p>文件下载也是提供代码实现对网络文件的请求，文件内容在响应头中，只需把它写入文件里面即可，具体代码则不再演示。</p>
<h1 id="关于-Android-权限问题"><a href="#关于-Android-权限问题" class="headerlink" title="关于 Android 权限问题"></a>关于 Android 权限问题</h1><h2 id="Android-6-以下的权限"><a href="#Android-6-以下的权限" class="headerlink" title="Android 6 以下的权限"></a>Android 6 以下的权限</h2><p>Android6.0 以下的权限为安装时权限，如果一个应用跑在 android6.0 以下的系统，那么应用所声明的权限，会在安装的时候提示用户是否允许。还有一种 case 是升级，升级应用的时候，如果有新的权限，那么也会提示用户是否允许，不过呢，基本上很少人使用 android6.0 以下的系统了，所以，我们关注点还是在 6.0 以上的运行时权限获取。</p>
<h2 id="Android-6-以上的权限"><a href="#Android-6-以上的权限" class="headerlink" title="Android 6 以上的权限"></a>Android 6 以上的权限</h2><h3 id="权限的声明"><a href="#权限的声明" class="headerlink" title="权限的声明"></a>权限的声明</h3><p>在配置文件中解析声明即可，如下图所示：</p>
<p><img data-src="1648347914630.png"></p>
<h3 id="权限检查"><a href="#权限检查" class="headerlink" title="权限检查"></a>权限检查</h3><p>危险权限如下图所示：</p>
<p><img data-src="1648348039628.png"></p>
<p>检查权限代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> readPermission = checkSelfPermission(Manifest.permission.READ_CALENDAR);</span><br><span class="line">        <span class="keyword">int</span> writePermission = checkSelfPermission(Manifest.permission.WRITE_CALENDAR);</span><br><span class="line">        <span class="keyword">if</span>(readPermission != PackageManager.PERMISSION_GRANTED || writePermission != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">            <span class="comment">//至少有一个没有权限</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="请求权限"><a href="#请求权限" class="headerlink" title="请求权限"></a>请求权限</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> readPermission = checkSelfPermission(Manifest.permission.READ_CALENDAR);</span><br><span class="line">        <span class="keyword">int</span> writePermission = checkSelfPermission(Manifest.permission.WRITE_CALENDAR);</span><br><span class="line">        <span class="keyword">if</span>(readPermission != PackageManager.PERMISSION_GRANTED || writePermission != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">            <span class="comment">//请求权限</span></span><br><span class="line">            requestPermissions(<span class="keyword">new</span> String[]&#123;Manifest.permission.READ_CALENDAR,Manifest.permission.WRITE_CALENDAR&#125;,PERMISSION_REQUEST_CODE);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="权限请求的结果处理"><a href="#权限请求的结果处理" class="headerlink" title="权限请求的结果处理"></a>权限请求的结果处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode,<span class="meta">@NonNull</span> String[] permissions,<span class="meta">@NonNull</span> <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(requestCode == PERMISSION_REQUEST_CODE) &#123;</span><br><span class="line">           <span class="comment">//判断结果</span></span><br><span class="line">           <span class="keyword">if</span>(grantResults.length == <span class="number">2</span> &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED &amp;&amp; grantResults[<span class="number">1</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">               Log.d(TAG,<span class="string">&quot;has permissions..&quot;</span>);</span><br><span class="line">               <span class="comment">//有权限</span></span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               Log.d(TAG,<span class="string">&quot;no permissionS...&quot;</span>);</span><br><span class="line">               <span class="comment">//没权限</span></span><br><span class="line">               finish();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>重写方法:onRequestPermissionsResult()</p>
<p>以上代码中的结果，是没有做处理的。这里面有一个特殊的 case，就是用户在权限请求时，拒绝了，再次提示时，会有一个勾选框：不再询问。如果用户勾选了不再询问，那么你再次请求同一个权限时，安卓系统不再给出权限请求的提示，用户只可以到设置里开启权限。</p>
<p><img data-src="1648348248442.png"></p>
<p>如果，在 onRequestPermissionsResult 方法中，检查到的结果是无权限，那么，还要判断用户是不是勾选了不再询问，如果是的话，那么用户看不到任何提示。那么可以能通过以下这个方法进行检查：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode,<span class="meta">@NonNull</span> String[] permissions,<span class="meta">@NonNull</span> <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(requestCode == PERMISSION_REQUEST_CODE) &#123;</span><br><span class="line">         <span class="comment">//判断结果</span></span><br><span class="line">         <span class="keyword">if</span>(grantResults.length == <span class="number">2</span> &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED &amp;&amp; grantResults[<span class="number">1</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">             Log.d(TAG,<span class="string">&quot;has permissions..&quot;</span>);</span><br><span class="line">             <span class="comment">//有权限</span></span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             Log.d(TAG,<span class="string">&quot;no permissionS...&quot;</span>);</span><br><span class="line">             <span class="comment">//没权限</span></span><br><span class="line">             <span class="keyword">if</span>(!ActivityCompat.shouldShowRequestPermissionRationale(<span class="keyword">this</span>,</span><br><span class="line">                     Manifest.permission.WRITE_CALENDAR)&amp;&amp;!ActivityCompat.shouldShowRequestPermissionRationale(<span class="keyword">this</span>,</span><br><span class="line">                     Manifest.permission.READ_CALENDAR)) &#123;</span><br><span class="line">                 <span class="comment">//走到这里，说明用户之前用户禁止权限的同时，勾选了不再询问</span></span><br><span class="line">                 <span class="comment">//那么，你需要弹出一个dialog，提示用户需要权限，然后跳转到设置里头去打开。</span></span><br><span class="line">                 Log.d(TAG,<span class="string">&quot;用户之前勾选了不再询问...&quot;</span>);</span><br><span class="line">                 <span class="comment">//<span class="doctag">TODO:</span>弹出一个框框，然后提示用户说需要开启权限。</span></span><br><span class="line">                 <span class="comment">//<span class="doctag">TODO:</span>用户点击确定的时候，跳转到设置里去</span></span><br><span class="line">                 <span class="comment">//Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);</span></span><br><span class="line">                 <span class="comment">//Uri uri = Uri.fromParts(&quot;package&quot;, getPackageName(), null);</span></span><br><span class="line">                 <span class="comment">//intent.setData(uri);</span></span><br><span class="line">                 <span class="comment">////在activity结果范围的地方，再次检查是否有权限</span></span><br><span class="line">                 <span class="comment">//startActivityForResult(intent, PERMISSION_REQUEST_CODE);</span></span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 ActivityCompat.requestPermissions(<span class="keyword">this</span>,</span><br><span class="line">                         <span class="keyword">new</span> String[]&#123;Manifest.permission.WRITE_CALENDAR,Manifest.permission.READ_CALENDAR&#125;, PERMISSION_REQUEST_CODE);</span><br><span class="line">                 <span class="comment">//请求权限</span></span><br><span class="line">                 Log.d(TAG,<span class="string">&quot;请求权限...&quot;</span>);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>End</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>okhttp</tag>
        <tag>网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang-WEB开发-笔记</title>
    <url>/posts/45355/</url>
    <content><![CDATA[<h1 id="Golang-http-标准库"><a href="#Golang-http-标准库" class="headerlink" title="Golang http 标准库"></a>Golang http 标准库</h1><p>http 标准库了 http 客户端和服务器的实现，注意了，客户端实现可以发出 http 请求，并解析响应。服务器可以实现 http server 功能。市面上的所有 golang web 框架都是基于 http 标准库实现的。</p>
<span id="more"></span>

<h2 id="http-标准库客户端功能"><a href="#http-标准库客户端功能" class="headerlink" title="http 标准库客户端功能"></a>http 标准库客户端功能</h2><h3 id="发出-GET-请求"><a href="#发出-GET-请求" class="headerlink" title="发出 GET 请求"></a>发出 GET 请求</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;net/url&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testGet</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// https://www.juhe.cn/box/index/id/73</span></span><br><span class="line">	url := <span class="string">&quot;http://apis.juhe.cn/simpleWeather/query?key=087d7d10f700d20e27bb753cd806e40b&amp;city=北京&quot;</span></span><br><span class="line">	r, err := http.Get(url)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> r.Body.Close()</span><br><span class="line">	b, _ := ioutil.ReadAll(r.Body)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, <span class="keyword">string</span>(b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;reason&quot;</span>: <span class="string">&quot;查询成功!&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;result&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;city&quot;</span>: <span class="string">&quot;北京&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;realtime&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;temperature&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;humidity&quot;</span>: <span class="string">&quot;94&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;info&quot;</span>: <span class="string">&quot;阴&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;wid&quot;</span>: <span class="string">&quot;02&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;direct&quot;</span>: <span class="string">&quot;东北风&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;power&quot;</span>: <span class="string">&quot;2级&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;aqi&quot;</span>: <span class="string">&quot;117&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;future&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;date&quot;</span>: <span class="string">&quot;2021-12-09&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;temperature&quot;</span>: <span class="string">&quot;-1/7℃&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;weather&quot;</span>: <span class="string">&quot;多云转晴&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;wid&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;day&quot;</span>: <span class="string">&quot;01&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;night&quot;</span>: <span class="string">&quot;00&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;direct&quot;</span>: <span class="string">&quot;北风&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;date&quot;</span>: <span class="string">&quot;2021-12-10&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;temperature&quot;</span>: <span class="string">&quot;-1/8℃&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;weather&quot;</span>: <span class="string">&quot;多云&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;wid&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;day&quot;</span>: <span class="string">&quot;01&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;night&quot;</span>: <span class="string">&quot;01&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;direct&quot;</span>: <span class="string">&quot;北风转西南风&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;date&quot;</span>: <span class="string">&quot;2021-12-11&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;temperature&quot;</span>: <span class="string">&quot;-2/10℃&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;weather&quot;</span>: <span class="string">&quot;多云转晴&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;wid&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;day&quot;</span>: <span class="string">&quot;01&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;night&quot;</span>: <span class="string">&quot;00&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;direct&quot;</span>: <span class="string">&quot;北风&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;date&quot;</span>: <span class="string">&quot;2021-12-12&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;temperature&quot;</span>: <span class="string">&quot;-5/4℃&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;weather&quot;</span>: <span class="string">&quot;晴&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;wid&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;day&quot;</span>: <span class="string">&quot;00&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;night&quot;</span>: <span class="string">&quot;00&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;direct&quot;</span>: <span class="string">&quot;西北风转西南风&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;date&quot;</span>: <span class="string">&quot;2021-12-13&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;temperature&quot;</span>: <span class="string">&quot;-6/5℃&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;weather&quot;</span>: <span class="string">&quot;晴&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;wid&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;day&quot;</span>: <span class="string">&quot;00&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;night&quot;</span>: <span class="string">&quot;00&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;direct&quot;</span>: <span class="string">&quot;西南风&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;error_code&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>本实例我们使用到了：<a href="https://www.juhe.cn/box/index/id/73">https://www.juhe.cn/box/index/id/73</a> 天气查询 api</p>
</blockquote>
<h3 id="GET-请求，把一些参数做成变量而不是直接放到-url"><a href="#GET-请求，把一些参数做成变量而不是直接放到-url" class="headerlink" title="GET 请求，把一些参数做成变量而不是直接放到 url"></a>GET 请求，把一些参数做成变量而不是直接放到 url</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testGet2</span><span class="params">()</span></span> &#123;</span><br><span class="line">	params := url.Values&#123;&#125;</span><br><span class="line">	Url, err := url.Parse(<span class="string">&quot;http://apis.juhe.cn/simpleWeather/query&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	params.Set(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;087d7d10f700d20e27bb753cd806e40b&quot;</span>)</span><br><span class="line">	params.Set(<span class="string">&quot;city&quot;</span>, <span class="string">&quot;北京&quot;</span>)</span><br><span class="line">	<span class="comment">//如果参数中有中文参数,这个方法会进行URLEncode</span></span><br><span class="line">	Url.RawQuery = params.Encode()</span><br><span class="line">	urlPath := Url.String()</span><br><span class="line">	fmt.Println(urlPath)</span><br><span class="line">	resp, err := http.Get(urlPath)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">	body, _ := ioutil.ReadAll(resp.Body)</span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="解析-JSON-类型的返回结果"><a href="#解析-JSON-类型的返回结果" class="headerlink" title="解析 JSON 类型的返回结果"></a>解析 JSON 类型的返回结果</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;net/url&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testParseJson</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">type</span> result <span class="keyword">struct</span> &#123;</span><br><span class="line">		Args    <span class="keyword">string</span>            <span class="string">`json:&quot;args&quot;`</span></span><br><span class="line">		Headers <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span> <span class="string">`json:&quot;headers&quot;`</span></span><br><span class="line">		Origin  <span class="keyword">string</span>            <span class="string">`json:&quot;origin&quot;`</span></span><br><span class="line">		Url     <span class="keyword">string</span>            <span class="string">`json:&quot;url&quot;`</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	resp, err := http.Get(<span class="string">&quot;http://httpbin.org/get&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">	body, _ := ioutil.ReadAll(resp.Body)</span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(body))</span><br><span class="line">	<span class="keyword">var</span> res result</span><br><span class="line">	_ = json.Unmarshal(body, &amp;res)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%#v&quot;</span>, res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;args&quot;</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;httpbin.org&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Go-http-client/1.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-61b16029-731c99ba4591c9bd3db53edd&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;115.171.25.28&quot;</span>,</span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://httpbin.org/get&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main.result&#123;Args:<span class="string">&quot;&quot;</span>, Headers:<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">&quot;Accept-Encoding&quot;</span>:<span class="string">&quot;gzip&quot;</span>, <span class="string">&quot;Host&quot;</span>:<span class="string">&quot;httpbin.org&quot;</span>, <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Go-http-client/1.1&quot;</span>, <span class="string">&quot;X-Amzn-Trace-Id&quot;</span>:<span class="string">&quot;Root=1-61b16029-731c99ba4591c9bd3db53edd&quot;</span>&#125;, Origin:<span class="string">&quot;115.171.25.28&quot;</span>, Url:<span class="string">&quot;http://httpbin.org/get&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="GET-请求添加请求头"><a href="#GET-请求添加请求头" class="headerlink" title="GET 请求添加请求头"></a>GET 请求添加请求头</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;net/url&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testAddHeader</span><span class="params">()</span></span> &#123;</span><br><span class="line">	client := &amp;http.Client&#123;&#125;</span><br><span class="line">	req, _ := http.NewRequest(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;http://httpbin.org/get&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	req.Header.Add(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;老郭&quot;</span>)</span><br><span class="line">	req.Header.Add(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;80&quot;</span>)</span><br><span class="line">	resp, _ := client.Do(req)</span><br><span class="line">	body, _ := ioutil.ReadAll(resp.Body)</span><br><span class="line">	fmt.Printf(<span class="keyword">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;args&quot;</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Age&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Host&quot;</span>: <span class="string">&quot;httpbin.org&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Name&quot;</span>: <span class="string">&quot;zhaofan&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;User-Agent&quot;</span>: <span class="string">&quot;Go-http-client/1.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-61b16107-5814e133649862c20ab1c26f&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;origin&quot;</span>: <span class="string">&quot;115.171.25.28&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;http://httpbin.org/get&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="发出-POST-请求"><a href="#发出-POST-请求" class="headerlink" title="发出 POST 请求"></a>发出 POST 请求</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testPost</span><span class="params">()</span></span> &#123;</span><br><span class="line">	path := <span class="string">&quot;http://apis.juhe.cn/simpleWeather/query&quot;</span></span><br><span class="line">	urlValues := url.Values&#123;&#125;</span><br><span class="line">	urlValues.Add(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;087d7d10f700d20e27bb753cd806e40b&quot;</span>)</span><br><span class="line">	urlValues.Add(<span class="string">&quot;city&quot;</span>, <span class="string">&quot;北京&quot;</span>)</span><br><span class="line">	r, err := http.PostForm(path, urlValues)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> r.Body.Close()</span><br><span class="line">	b, _ := ioutil.ReadAll(r.Body)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, <span class="keyword">string</span>(b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>另外一种方式</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testPost2</span><span class="params">()</span></span> &#123;</span><br><span class="line">	urlValues := url.Values&#123;</span><br><span class="line">		<span class="string">&quot;name&quot;</span>: &#123;<span class="string">&quot;老郭&quot;</span>&#125;,</span><br><span class="line">		<span class="string">&quot;age&quot;</span>:  &#123;<span class="string">&quot;80&quot;</span>&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	reqBody := urlValues.Encode()</span><br><span class="line">	resp, _ := http.Post(<span class="string">&quot;http://httpbin.org/post&quot;</span>, <span class="string">&quot;text/html&quot;</span>, strings.NewReader(reqBody))</span><br><span class="line">	body, _ := ioutil.ReadAll(resp.Body)</span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="发送-JSON-数据的-post-请求"><a href="#发送-JSON-数据的-post-请求" class="headerlink" title="发送 JSON 数据的 post 请求"></a>发送 JSON 数据的 post 请求</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testPostJson</span><span class="params">()</span></span> &#123;</span><br><span class="line">	data := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">	data[<span class="string">&quot;site&quot;</span>] = <span class="string">&quot;www.duoke360.com&quot;</span></span><br><span class="line">	data[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;多课网&quot;</span></span><br><span class="line">	bytesData, _ := json.Marshal(data)</span><br><span class="line">	resp, _ := http.Post(<span class="string">&quot;http://httpbin.org/post&quot;</span>, <span class="string">&quot;application/json&quot;</span>, bytes.NewReader(bytesData))</span><br><span class="line">	body, _ := ioutil.ReadAll(resp.Body)</span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用-Client-自定义请求"><a href="#使用-Client-自定义请求" class="headerlink" title="使用 Client 自定义请求"></a>使用 Client 自定义请求</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testClient</span><span class="params">()</span></span> &#123;</span><br><span class="line">	client := http.Client&#123;</span><br><span class="line">		Timeout: time.Second * <span class="number">5</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	url := <span class="string">&quot;http://apis.juhe.cn/simpleWeather/query?key=087d7d10f700d20e27bb753cd806e40b&amp;city=北京&quot;</span></span><br><span class="line">	req, err := http.NewRequest(http.MethodGet, url, <span class="literal">nil</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	req.Header.Add(<span class="string">&quot;referer&quot;</span>, <span class="string">&quot;http://apis.juhe.cn/&quot;</span>)</span><br><span class="line">	res, err2 := client.Do(req)</span><br><span class="line">	<span class="keyword">if</span> err2 != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err2)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> res.Body.Close()</span><br><span class="line">	b, _ := ioutil.ReadAll(res.Body)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, <span class="keyword">string</span>(b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="HTTP-Server"><a href="#HTTP-Server" class="headerlink" title="HTTP Server"></a>HTTP Server</h2><p>使用 golang 实现一个 http server 非常简单，代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testHttpServer</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 请求处理函数</span></span><br><span class="line">	f := <span class="function"><span class="keyword">func</span><span class="params">(resp http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">		io.WriteString(resp, <span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 响应路径,注意前面要有斜杠 /</span></span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/hello&quot;</span>, f)</span><br><span class="line">	<span class="comment">// 设置监听端口，并监听，注意前面要有冒号:</span></span><br><span class="line">	err := http.ListenAndServe(<span class="string">&quot;:9999&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在浏览器输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:9999/hello</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure>

<h3 id="使用-Handler-实现并发处理"><a href="#使用-Handler-实现并发处理" class="headerlink" title="使用 Handler 实现并发处理"></a>使用 Handler 实现并发处理</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> countHandler <span class="keyword">struct</span> &#123;</span><br><span class="line">	mu sync.Mutex <span class="comment">// guards n</span></span><br><span class="line">	n  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *countHandler)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	h.mu.Lock()</span><br><span class="line">	<span class="keyword">defer</span> h.mu.Unlock()</span><br><span class="line">	h.n++</span><br><span class="line">	fmt.Fprintf(w, <span class="string">&quot;count is %d\n&quot;</span>, h.n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testHttpServer2</span><span class="params">()</span></span> &#123;</span><br><span class="line">	http.Handle(<span class="string">&quot;/count&quot;</span>, <span class="built_in">new</span>(countHandler))</span><br><span class="line">	log.Fatal(http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在浏览器输入：<code>http://localhost:8080/count</code>，刷新查看结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">count is 8</span><br></pre></td></tr></table></figure>

<h1 id="Golang-标准库-template"><a href="#Golang-标准库-template" class="headerlink" title="Golang 标准库 template"></a>Golang 标准库 template</h1><p>templates 包定义了数据驱动的文本输出。生成 html 文件的模板在 <code>html/template</code>包下面。模板使用插值语法 <code>&#123;&#123;.var&#125;&#125;</code>格式，也可以使用一些流程控制，例如判断 <code>if else</code>、循环 <code>range</code>还可以使用一些函数，包括内建函数和自定义函数。</p>
<h2 id="第一个模板实例"><a href="#第一个模板实例" class="headerlink" title="第一个模板实例"></a>第一个模板实例</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;text/template&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//数据</span></span><br><span class="line">	name := <span class="string">&quot;ghz&quot;</span></span><br><span class="line">	<span class="comment">//定义模板</span></span><br><span class="line">	muban := <span class="string">&quot;hello, &#123;&#123;.&#125;&#125;&quot;</span></span><br><span class="line">	<span class="comment">//解析模板</span></span><br><span class="line">	tmpl, err := template.New(<span class="string">&quot;test&quot;</span>).Parse(muban)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//执行模板，输出到终端</span></span><br><span class="line">	err = tmpl.Execute(os.Stdout, name)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello, ghz</span><br></pre></td></tr></table></figure>

<h2 id="也可以是结构体"><a href="#也可以是结构体" class="headerlink" title="也可以是结构体"></a>也可以是结构体</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;text/template&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">	Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ghz := Person&#123;<span class="string">&quot;ghz&quot;</span>, <span class="number">80</span>&#125;</span><br><span class="line">	muban := <span class="string">&quot;hello, &#123;&#123;.Name&#125;&#125;, Your age &#123;&#123;.Age&#125;&#125;&quot;</span></span><br><span class="line">	tmpl, err := template.New(<span class="string">&quot;test&quot;</span>).Parse(muban)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	err = tmpl.Execute(os.Stdout, ghz)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>运行结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello, ghz, Your age 80</span><br></pre></td></tr></table></figure>

<h2 id="html-模板"><a href="#html-模板" class="headerlink" title="html 模板"></a>html 模板</h2><p><strong>定义一个 HTML 文件</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test golang template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;&#123;.&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>定义一个 HttpServer</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;html/template&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tmpl</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	t1, err := template.ParseFiles(<span class="string">&quot;test.html&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	t1.Execute(w, <span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	server := http.Server&#123;</span><br><span class="line">		Addr: <span class="string">&quot;127.0.0.1:8080&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/tmpl&quot;</span>, tmpl)</span><br><span class="line">	server.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>客户端访问</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/tmpl</span><br></pre></td></tr></table></figure>

<p><strong>运行结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello，ghz</span><br></pre></td></tr></table></figure>

<h2 id="文本和空格"><a href="#文本和空格" class="headerlink" title="文本和空格"></a>文本和空格</h2><p>模板引擎在进行替换的时候，是完全按照文本格式进行替换的。除了需要评估和替换的地方，所有的行分隔符、空格等等空白都原样保留。所以，<strong>对于要解析的内容，不要随意缩进、随意换行</strong> 。</p>
<p><strong>例如：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="number">23</span>&#125;&#125; &lt; &#123;&#123;<span class="number">45</span>&#125;&#125;        -&gt; <span class="number">23</span> &lt; <span class="number">45</span></span><br><span class="line">&#123;&#123;<span class="number">23</span>&#125;&#125; &lt; &#123;&#123;- <span class="number">45</span>&#125;&#125;      -&gt;  <span class="number">23</span> &lt;<span class="number">45</span></span><br><span class="line">&#123;&#123;<span class="number">23</span> -&#125;&#125; &lt; &#123;&#123;<span class="number">45</span>&#125;&#125;      -&gt;  <span class="number">23</span>&lt; <span class="number">45</span></span><br><span class="line">&#123;&#123;<span class="number">23</span> -&#125;&#125; &lt; &#123;&#123;- <span class="number">45</span>&#125;&#125;    -&gt;  <span class="number">23</span>&lt;<span class="number">45</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>去掉后空格 <code>xxxx -&#125;&#125;</code>，去掉前空格 <code>&#123;&#123;- xxxx`

## 模板注释

注释方式：`&#123;&#123;/* a comment */&#125;&#125;</code>。</p>
</blockquote>
<p>注释后的内容不会被引擎进行替换。但需要注意，注释行在替换的时候也会占用行，所以应该去除前缀和后缀空白，否则会多一空行。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">&#123;&#123;- <span class="comment">/* a comment without prefix/suffix space */</span>&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="comment">/* a comment without prefix/suffix space */</span> -&#125;&#125;</span><br><span class="line">&#123;&#123;- <span class="comment">/* a comment without prefix/suffix space */</span> -&#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="管道-pipeline"><a href="#管道-pipeline" class="headerlink" title="管道 pipeline"></a>管道 pipeline</h2><p>管道就是一系列命令的链式调用。当然，也可以是一个命令，例如：计算表达式的值 <code>&#123;&#123;.&#125;&#125;</code>、<code>&#123;&#123;.Name&#125;&#125;</code>,或者是一个函数调用或者方法调用。</p>
<p>可以使用管道符号 <code>|</code>链接多个命令，用法和 unix 下的管道类似：<code>|</code>前面的命令将运算结果(或返回值)传递给后一个命令的最后一个位置。</p>
<blockquote>
<p>需要注意的是，并非只有使用了 <code>|</code>才是 pipeline。Go template 中，pipeline 的概念是传递数据，只要能产生数据的，都是 pipeline。</p>
</blockquote>
<p>下面是 Pipeline 的几种示例，它们都输出 <code>&quot;output&quot;</code>：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">`&quot;output&quot;`</span>&#125;&#125;</span><br><span class="line">&#123;&#123;printf <span class="string">&quot;%q&quot;</span> <span class="string">&quot;output&quot;</span>&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">&quot;output&quot;</span> | printf <span class="string">&quot;%q&quot;</span>&#125;&#125;</span><br><span class="line">&#123;&#123;printf <span class="string">&quot;%q&quot;</span> (<span class="built_in">print</span> <span class="string">&quot;out&quot;</span> <span class="string">&quot;put&quot;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">&quot;put&quot;</span> | printf <span class="string">&quot;%s%s&quot;</span> <span class="string">&quot;out&quot;</span> | printf <span class="string">&quot;%q&quot;</span>&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">&quot;output&quot;</span> | printf <span class="string">&quot;%s&quot;</span> | printf <span class="string">&quot;%q&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>可以在 HTML 中测试</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test golang template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;&#123;`&quot;output&quot;`&#125;&#125; <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    &#123;&#123;printf &quot;%q&quot; &quot;output&quot;&#125;&#125;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    &#123;&#123;&quot;output&quot; | printf &quot;%q&quot;&#125;&#125;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    &#123;&#123;printf &quot;%q&quot; (print &quot;out&quot; &quot;put&quot;)&#125;&#125;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    &#123;&#123;&quot;put&quot; | printf &quot;%s%s&quot; &quot;out&quot; | printf &quot;%q&quot;&#125;&#125;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    &#123;&#123;&quot;output&quot; | printf &quot;%s&quot; | printf &quot;%q&quot;&#125;&#125;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>运行结果</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;output&quot;</span></span><br><span class="line"><span class="string">&quot;output&quot;</span></span><br><span class="line"><span class="string">&quot;output&quot;</span></span><br><span class="line"><span class="string">&quot;output&quot;</span></span><br><span class="line"><span class="string">&quot;output&quot;</span></span><br><span class="line"><span class="string">&quot;output&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><strong>变量的语法</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 未定义过的变量</span></span><br><span class="line">$<span class="keyword">var</span> := pipeline</span><br><span class="line"><span class="comment">// 已定义过的变量</span></span><br><span class="line">$<span class="keyword">var</span> = pipeline</span><br></pre></td></tr></table></figure>

<p><strong>例如</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Test golang template&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &#123;&#123;$Name := <span class="string">&quot;tom&quot;</span>&#125;&#125;</span><br><span class="line">    &#123;&#123;$Name = <span class="string">&quot;kite&quot;</span>&#125;&#125;</span><br><span class="line">    &#123;&#123;$Name&#125;&#125;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &#123;&#123;$<span class="built_in">len</span> := (<span class="built_in">len</span> <span class="string">&quot;hello,ghz&quot;</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line">    &#123;&#123;$<span class="built_in">len</span>&#125;&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kite</span><br><span class="line">9</span><br></pre></td></tr></table></figure>

<h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p><strong>语法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;if pipeline&#125;&#125; T1 &#123;&#123;end&#125;&#125;</span><br><span class="line">&#123;&#123;if pipeline&#125;&#125; T1 &#123;&#123;else&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br><span class="line">&#123;&#123;if pipeline&#125;&#125; T1 &#123;&#123;else if pipeline&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br><span class="line">&#123;&#123;if pipeline&#125;&#125; T1 &#123;&#123;else&#125;&#125;&#123;&#123;if pipeline&#125;&#125; T0 &#123;&#123;end&#125;&#125;&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>pipeline 为 false 的情况是各种数据对象的 0 值：数值 0，指针或接口是 nil，数组、slice、map 或 string 则是 len 为 0。</p>
</blockquote>
<p>可以使用如下运算符表达式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eq</span><br><span class="line">	Returns the boolean truth of arg1 == arg2</span><br><span class="line">ne</span><br><span class="line">	Returns the boolean truth of arg1 != arg2</span><br><span class="line">lt</span><br><span class="line">	Returns the boolean truth of arg1 &lt; arg2</span><br><span class="line">le</span><br><span class="line">	Returns the boolean truth of arg1 &lt;= arg2</span><br><span class="line">gt</span><br><span class="line">	Returns the boolean truth of arg1 &gt; arg2</span><br><span class="line">ge</span><br><span class="line">	Returns the boolean truth of arg1 &gt;= arg2</span><br></pre></td></tr></table></figure>

<p><strong>实例</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test golang template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;&#123;$Age := 18&#125;&#125; &#123;&#123;if (ge $Age 18)&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>你已经成年！<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    &#123;&#123;else&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>你还未成年！<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    &#123;&#123;end&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>运行结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你已经成年！</span><br></pre></td></tr></table></figure>

<h2 id="循环迭代"><a href="#循环迭代" class="headerlink" title="循环迭代"></a>循环迭代</h2><p><strong>语法</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="keyword">range</span> pipeline&#125;&#125; T1 &#123;&#123;end&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="keyword">range</span> pipeline&#125;&#125; T1 &#123;&#123;<span class="keyword">else</span>&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>range 可以迭代 slice、数组、map 或 channel。迭代的时候，会设置”.”为当前正在迭代的元素。对于第一个表达式，当迭代对象的值为 0 值时，则 range 直接跳过，就像 if 一样。对于第二个表达式，则在迭代到 0 值时执行 else 语句。</p>
</blockquote>
<p><strong>实例演示</strong></p>
<p>go 代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tmpl</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	t1, err := template.ParseFiles(<span class="string">&quot;test.html&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	s := []<span class="keyword">string</span>&#123;<span class="string">&quot;多课网&quot;</span>, <span class="string">&quot;golang 教程&quot;</span>, <span class="string">&quot;老郭&quot;</span>&#125;</span><br><span class="line">	t1.Execute(w, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test golang template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;&#123;range $x := . -&#125;&#125; &#123;&#123;println $x&#125;&#125; &#123;&#123;- end&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>运行结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">多课网 golang 教程 老郭</span><br></pre></td></tr></table></figure>

<h2 id="with…end"><a href="#with…end" class="headerlink" title="with…end"></a>with…end</h2><p>with 用来设置 <code>&quot;.&quot;</code>的值，语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;with pipeline&#125;&#125; T1 &#123;&#123;end&#125;&#125;</span><br><span class="line">&#123;&#123;with pipeline&#125;&#125; T1 &#123;&#123;else&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对于第一种格式，当 pipeline 不为 0 值的时候，点”.”设置为 pipeline 运算的值，否则跳过。对于第二种格式，当 pipeline 为 0 值时，执行 else 语句块，否则”.”设置为 pipeline 运算的值，并执行 T1。</p>
</blockquote>
<p><strong>实例演示</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;with &quot;多课网-golang-老郭&quot;&#125;&#125;&#123;&#123;println .&#125;&#125;&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">多课网-golang-老郭</span><br></pre></td></tr></table></figure>

<h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">and</span><br><span class="line">	返回第</span><br><span class="line">	一个空参数或最后一个参数返回其参数的布尔值 AND ，即</span><br><span class="line">	“and x y”表现为“<span class="keyword">if</span> x then y <span class="keyword">else</span> x”。</span><br><span class="line">	评估所有参数。</span><br><span class="line">call</span><br><span class="line">	返回调用第一个参数的结果，该参数</span><br><span class="line">	必须是一个函数，其余参数作为参数。</span><br><span class="line">	因此，“call .XY <span class="number">1</span> <span class="number">2</span>”在 Go 表示法中是 dot.XY(<span class="number">1</span>, <span class="number">2</span>)，其中</span><br><span class="line">	Y 是函数值字段、映射条目等。</span><br><span class="line">	第一个参数必须是</span><br><span class="line">	产生函数类型值的评估结果（不同于</span><br><span class="line">	预定义的函数，如打印）。该函数必须</span><br><span class="line">	返回一个或两个结果值，其中第二个</span><br><span class="line">	是类型错误。如果参数与函数不匹配</span><br><span class="line">	或返回的错误值为非零，则执行停止。</span><br><span class="line">html</span><br><span class="line">	返回等效</span><br><span class="line">	于其参数文本表示的转义 HTML 。此功能</span><br><span class="line">	在 html/template 中不可用，但有一些例外。</span><br><span class="line">index</span><br><span class="line">	返回通过</span><br><span class="line">	以下参数对其第一个参数进行索引的结果。因此，在 Go 语法中，“索引 x <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>”是</span><br><span class="line">	x[<span class="number">1</span>][<span class="number">2</span>][<span class="number">3</span>]。每个索引项必须是映射、切片或数组。</span><br><span class="line">slice</span><br><span class="line">	slice 返回其第一个参数被</span><br><span class="line">	其余参数切片的结果。因此，<span class="string">&quot;slice x 1 2&quot;</span> 在 Go 语法中是 x[<span class="number">1</span>:<span class="number">2</span>]，</span><br><span class="line">	而 <span class="string">&quot;slice x&quot;</span> 是 x[:]，<span class="string">&quot;slice x 1&quot;</span> 是 x[<span class="number">1</span>:]，</span><br><span class="line">	是 x[<span class="number">1</span>:<span class="number">2</span>:<span class="number">3</span>]。第一个参数必须是字符串、切片或数组。</span><br><span class="line">js</span><br><span class="line">	返回转义的 JavaScript 等效</span><br><span class="line">	于其参数的文本表示。</span><br><span class="line"><span class="built_in">len</span></span><br><span class="line">	返回其参数的整数长度。</span><br><span class="line">not</span><br><span class="line">	返回其单个参数的布尔否定。</span><br><span class="line">or</span><br><span class="line">	通过返回第</span><br><span class="line">	一个非空参数或最后一个参数来返回其参数的布尔 OR ，即</span><br><span class="line">	“or x y”表现为“<span class="keyword">if</span> x then x <span class="keyword">else</span> y”。</span><br><span class="line">	评估所有参数。</span><br><span class="line"><span class="built_in">print</span></span><br><span class="line">	fmt.Sprint</span><br><span class="line">	的别名</span><br><span class="line">printf fmt.Sprintf</span><br><span class="line">	的别名</span><br><span class="line"><span class="built_in">println</span> fmt.Sprint的别名</span><br><span class="line">urlquery</span><br><span class="line">	以适合嵌入 URL 查询的形式</span><br><span class="line">	返回其参数的文本表示的转义值。</span><br><span class="line">	此功能在 html/template 中不可用，但有一些</span><br><span class="line">	例外。</span><br></pre></td></tr></table></figure>

<h2 id="嵌套-template：define-和-template"><a href="#嵌套-template：define-和-template" class="headerlink" title="嵌套 template：define 和 template"></a>嵌套 template：define 和 template</h2><p>define 可以直接在待解析内容中定义一个模板，这个模板会加入到 common 结构组中，并关联到关联名称上。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;template &quot;name&quot;&#125;&#125;</span><br><span class="line">&#123;&#123;template &quot;name&quot; pipeline&#125;&#125;</span><br><span class="line">&#123;&#123;define &quot;name&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实例演示</strong></p>
<p>假设我们有一个 header.html、footer.html 和 index.html，index.html 包含 header.html 和 footer.html</p>
<p>header.html</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;define &quot;header&quot;&#125;&#125;</span><br><span class="line">     &lt;head&gt;</span><br><span class="line">         &lt;title&gt;&#123;&#123;.Title&#125;&#125;&lt;/title&gt;</span><br><span class="line">     &lt;/head&gt;</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>footer.html</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;define &quot;footer&quot;&#125;&#125;</span><br><span class="line">这是footer</span><br><span class="line"></span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;&#123;template &quot;header&quot; .&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    &#123;&#123;template &quot;footer&quot;&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>go code</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;html/template&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tmpl</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	t1, err := template.ParseFiles(<span class="string">&quot;templates/index.html&quot;</span>, <span class="string">&quot;templates/header.html&quot;</span>, <span class="string">&quot;templates/footer.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	t1.Execute(w, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	server := http.Server&#123;</span><br><span class="line">		Addr: <span class="string">&quot;127.0.0.1:8080&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/tmpl&quot;</span>, tmpl)</span><br><span class="line">	server.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是header</span><br><span class="line">首页...</span><br><span class="line">这是footer</span><br></pre></td></tr></table></figure>

<h1 id="HttpRouter"><a href="#HttpRouter" class="headerlink" title="HttpRouter"></a>HttpRouter</h1><p>HttpRouter 是一种轻量级高性能的，golang HTTP 请求路由器。</p>
<p>与 Golang 默认路由相比，此路由器支持路由模式中的<strong>变量</strong> 并匹配请求方法。它还可以更好地扩展。</p>
<p>该路由器针对高性能和小内存占用进行了优化。即使有很长的路径和大量的路线，它也能很好地扩展。压缩动态特里（基数树）结构用于有效匹配。</p>
<p>gin 框架就是以 httprouter 为基础开发的，下面我们来学习一下 httprouter。</p>
<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go get github.com/julienschmidt/httprouter</span><br></pre></td></tr></table></figure>

<h2 id="第一个路由实例"><a href="#第一个路由实例" class="headerlink" title="第一个路由实例"></a>第一个路由实例</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/julienschmidt/httprouter&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(w http.ResponseWriter, r *http.Request, _ httprouter.Params)</span></span> &#123;</span><br><span class="line">	fmt.Fprint(w, <span class="string">&quot;Welcome!\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hello</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</span><br><span class="line">	fmt.Fprintf(w, <span class="string">&quot;hello, %s!\n&quot;</span>, ps.ByName(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	router := httprouter.New()</span><br><span class="line">	router.GET(<span class="string">&quot;/&quot;</span>, Index)</span><br><span class="line">	router.GET(<span class="string">&quot;/hello/:name&quot;</span>, Hello)</span><br><span class="line"></span><br><span class="line">	log.Fatal(http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, router))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在浏览器输入：<code>http://localhost:8080/</code>，输出：<code>Welcome!</code></p>
<p>在浏览器输入：<code>http://localhost:8080/hello/ghz</code>，输出：<code>hello, ghz!</code></p>
<h2 id="http-router-请求方法"><a href="#http-router-请求方法" class="headerlink" title="http router 请求方法"></a>http router 请求方法</h2><p>httprouter 为所有的 HTTP Method 提供了快捷的使用方式，只需要调用对应的方法即可。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span> <span class="title">GET</span><span class="params">(path <span class="keyword">string</span>, handle Handle)</span></span> &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;GET&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span> <span class="title">HEAD</span><span class="params">(path <span class="keyword">string</span>, handle Handle)</span></span> &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;HEAD&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span> <span class="title">OPTIONS</span><span class="params">(path <span class="keyword">string</span>, handle Handle)</span></span> &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;OPTIONS&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span> <span class="title">POST</span><span class="params">(path <span class="keyword">string</span>, handle Handle)</span></span> &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;POST&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span> <span class="title">PUT</span><span class="params">(path <span class="keyword">string</span>, handle Handle)</span></span> &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;PUT&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span> <span class="title">PATCH</span><span class="params">(path <span class="keyword">string</span>, handle Handle)</span></span> &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;PATCH&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span> <span class="title">DELETE</span><span class="params">(path <span class="keyword">string</span>, handle Handle)</span></span> &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;DELETE&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="restful-风格路由"><a href="#restful-风格路由" class="headerlink" title="restful 风格路由"></a>restful 风格路由</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/julienschmidt/httprouter&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(w http.ResponseWriter, r *http.Request, _ httprouter.Params)</span></span> &#123;</span><br><span class="line">    fmt.Fprint(w, <span class="string">&quot;Welcome!\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hello</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;hello, %s!\n&quot;</span>, ps.ByName(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getuser</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</span><br><span class="line">    uid := ps.ByName(<span class="string">&quot;uid&quot;</span>)</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;you are get user %s&quot;</span>, uid)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modifyuser</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</span><br><span class="line">    uid := ps.ByName(<span class="string">&quot;uid&quot;</span>)</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;you are modify user %s&quot;</span>, uid)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteuser</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</span><br><span class="line">    uid := ps.ByName(<span class="string">&quot;uid&quot;</span>)</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;you are delete user %s&quot;</span>, uid)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adduser</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</span><br><span class="line">    <span class="comment">// uid := r.FormValue(&quot;uid&quot;)</span></span><br><span class="line">    uid := ps.ByName(<span class="string">&quot;uid&quot;</span>)</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;you are add user %s&quot;</span>, uid)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    router := httprouter.New()</span><br><span class="line">    router.GET(<span class="string">&quot;/&quot;</span>, Index)</span><br><span class="line">    router.GET(<span class="string">&quot;/hello/:name&quot;</span>, Hello)</span><br><span class="line"></span><br><span class="line">    router.GET(<span class="string">&quot;/user/:uid&quot;</span>, getuser)</span><br><span class="line">    router.POST(<span class="string">&quot;/adduser/:uid&quot;</span>, adduser)</span><br><span class="line">    router.DELETE(<span class="string">&quot;/deluser/:uid&quot;</span>, deleteuser)</span><br><span class="line">    router.PUT(<span class="string">&quot;/moduser/:uid&quot;</span>, modifyuser)</span><br><span class="line"></span><br><span class="line">    log.Fatal(http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, router))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Gin-简介"><a href="#Gin-简介" class="headerlink" title="Gin 简介"></a>Gin 简介</h1><h2 id="Gin-官网"><a href="#Gin-官网" class="headerlink" title="Gin 官网"></a>Gin 官网</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://gin-gonic.com/</span><br></pre></td></tr></table></figure>

<h2 id="gin-简介"><a href="#gin-简介" class="headerlink" title="gin 简介"></a>gin 简介</h2><p>Gin 是一个 golang 的微框架，基于 httprouter，封装比较优雅，API 友好，源码注释比较明确，具有快速灵活，容错方便等特点。</p>
<h2 id="gin-特征"><a href="#gin-特征" class="headerlink" title="gin 特征"></a>gin 特征</h2><p><strong>速度快</strong></p>
<p>基于基数树的路由，内存占用小。没有反射。可预测的 API 性能。</p>
<p><strong>中间件支持</strong></p>
<p>传入的 HTTP 请求可以由中间件链和最终操作处理。例如：Logger、Authorization、GZIP 最后在 DB 中发布一条消息。</p>
<p><strong>Crash-free</strong></p>
<p>Gin 可以捕获 HTTP 请求期间发生的 panic 并恢复它。这样，你的服务器将始终可用。</p>
<p><strong>JSON 验证</strong></p>
<p>Gin 可以解析和验证请求的 JSON - 例如，检查所需值的存在。</p>
<p><strong>路由分组</strong></p>
<p>更好地组织您的路线。需要授权与不需要授权，不同的 API 版本……此外，组可以无限嵌套，而不会降低性能。</p>
<p><strong>错误管理</strong></p>
<p>Gin 提供了一种方便的方法来收集 HTTP 请求期间发生的所有错误。最终，中间件可以将它们写入日志文件、数据库并通过网络发送它们。</p>
<p><strong>内置渲染</strong></p>
<p>Gin 为 JSON、XML 和 HTML 渲染提供了一个易于使用的 API。</p>
<p><strong>可扩展</strong></p>
<p>创建一个新的中间件非常简单，只需查看示例代码即可。</p>
<h2 id="第一个-gin"><a href="#第一个-gin" class="headerlink" title="第一个 gin"></a>第一个 gin</h2><p><strong>安装 gin</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go get -u github.com/gin-gonic/gin</span><br></pre></td></tr></table></figure>

<p><strong>导入项目</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>实现代码</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.Run() <span class="comment">// listen and serve on 0.0.0.0:8080</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行</strong></p>
<p>浏览器输入：<code>http://localhost:8080/ping</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;message&quot;:&quot;pong&quot;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Gin-实现用户登录"><a href="#Gin-实现用户登录" class="headerlink" title="Gin 实现用户登录"></a>Gin 实现用户登录</h1><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="创建一个文件-tempates"><a href="#创建一个文件-tempates" class="headerlink" title="创建一个文件 tempates"></a>创建一个文件 tempates</h3><p>在项目跟目录下面创建给文件夹 tempates，用来保存静态文件</p>
<h3 id="创建一个登录-html-文件"><a href="#创建一个登录-html-文件" class="headerlink" title="创建一个登录 html 文件"></a>创建一个登录 html 文件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">      Username: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Login&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建一个欢迎-html-页面"><a href="#创建一个欢迎-html-页面" class="headerlink" title="创建一个欢迎 html 页面"></a>创建一个欢迎 html 页面</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Welcome<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Welcome, &#123;&#123;.username&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用-Gin-处理逻辑"><a href="#使用-Gin-处理逻辑" class="headerlink" title="使用 Gin 处理逻辑"></a>使用 Gin 处理逻辑</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MyHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">		<span class="string">&quot;hello&quot;</span>: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Login</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	c.HTML(<span class="number">200</span>, <span class="string">&quot;login.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DoLogin</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	username := c.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">	password := c.PostForm(<span class="string">&quot;password&quot;</span>)</span><br><span class="line"></span><br><span class="line">	c.HTML(<span class="number">200</span>, <span class="string">&quot;welcome.html&quot;</span>, gin.H&#123;</span><br><span class="line">		<span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">		<span class="string">&quot;password&quot;</span>: password,</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	e := gin.Default()</span><br><span class="line">	e.LoadHTMLGlob(<span class="string">&quot;templates/*&quot;</span>)</span><br><span class="line"></span><br><span class="line">	e.GET(<span class="string">&quot;/login&quot;</span>, Login)</span><br><span class="line">	e.POST(<span class="string">&quot;/login&quot;</span>, DoLogin)</span><br><span class="line">	e.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Gin-请求参数"><a href="#Gin-请求参数" class="headerlink" title="Gin 请求参数"></a>Gin 请求参数</h1><h2 id="Get-请求参数"><a href="#Get-请求参数" class="headerlink" title="Get 请求参数"></a>Get 请求参数</h2><blockquote>
<p>使用 <code>c.Query(&quot;key&quot;)</code>、或者 <code>c.DefaultQuery(&quot;key&quot;)</code>方法</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestQueryString</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	username := c.Query(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">	site := c.DefaultQuery(<span class="string">&quot;site&quot;</span>, <span class="string">&quot;www.xiaobaibk.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">	c.String(<span class="number">200</span>, <span class="string">&quot;username:%s, site:%s&quot;</span>, username, site)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	e := gin.Default()</span><br><span class="line">	<span class="comment">// url : http://localhost:8080/testQueryString?username=xiaobai&amp;site=baidu.com</span></span><br><span class="line">	e.GET(<span class="string">&quot;/testQueryString&quot;</span>, TestQueryString)</span><br><span class="line"></span><br><span class="line">	e.Run()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username:xiaobai, site:baidu.com</span><br></pre></td></tr></table></figure>

<h2 id="Post-参数"><a href="#Post-参数" class="headerlink" title="Post 参数"></a>Post 参数</h2><p>使用 <code>c.PostForm(&quot;key&quot;)</code>、或者 <code>c.DefaultQuery(&quot;key&quot;)</code>方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DoLogin</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	username := c.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">	password := c.DefaultPostForm(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;123&quot;</span>)</span><br><span class="line"></span><br><span class="line">	c.HTML(<span class="number">200</span>, <span class="string">&quot;welcome.html&quot;</span>, gin.H&#123;</span><br><span class="line">		<span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">		<span class="string">&quot;password&quot;</span>: password,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用 Postman 或者 Post 表单测试</p>
</blockquote>
<h2 id="路劲参数（restful-风格）"><a href="#路劲参数（restful-风格）" class="headerlink" title="路劲参数（restful 风格）"></a>路劲参数（restful 风格）</h2><p>使用 <code>c.Param(&quot;key&quot;)</code>方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestPathParam</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	s := c.Param(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">	c.String(<span class="number">200</span>, <span class="string">&quot;Username:%s&quot;</span>, s)</span><br><span class="line">	<span class="comment">// 输出：Username:ghz</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	e := gin.Default()</span><br><span class="line">	<span class="comment">// http://localhost:8080/hello/ghz</span></span><br><span class="line">	e.GET(<span class="string">&quot;/hello/:username&quot;</span>, TestPathParam)</span><br><span class="line">	e.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="既有-Get-也有-Post"><a href="#既有-Get-也有-Post" class="headerlink" title="既有 Get 也有 Post"></a>既有 Get 也有 Post</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetAndPost</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	page := c.DefaultQuery(<span class="string">&quot;page&quot;</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">	key := c.PostForm(<span class="string">&quot;key&quot;</span>)</span><br><span class="line">	c.String(<span class="number">200</span>, <span class="string">&quot;Page:%s, Key:%s&quot;</span>, page, key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	e := gin.Default()</span><br><span class="line">	<span class="comment">// http://localhost:8080/query?page=1</span></span><br><span class="line">	e.POST(<span class="string">&quot;/query&quot;</span>, TestGetAndPost)</span><br><span class="line">	e.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用 Postman 或者 Post 表单测试</p>
</blockquote>
<h1 id="Gin-表单处理"><a href="#Gin-表单处理" class="headerlink" title="Gin 表单处理"></a>Gin 表单处理</h1><h2 id="创建一个-HTML-表单"><a href="#创建一个-HTML-表单" class="headerlink" title="创建一个 HTML 表单"></a>创建一个 HTML 表单</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>多课网，听老郭讲golang<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户注册页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/register&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">      用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      爱好:</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;swiming&quot;</span> /&gt;</span>游泳</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;basketball&quot;</span> /&gt;</span>篮球</span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;m&quot;</span> /&gt;</span>男</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;f&quot;</span> /&gt;</span>女</span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      城市:</span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shanghai&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Go-code"><a href="#Go-code" class="headerlink" title="Go code"></a>Go code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Regsiter</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	username := c.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">	password := c.PostForm(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">	hobby := c.PostFormArray(<span class="string">&quot;hobby&quot;</span>)</span><br><span class="line">	gender := c.PostForm(<span class="string">&quot;gender&quot;</span>)</span><br><span class="line">	city := c.PostForm(<span class="string">&quot;city&quot;</span>)</span><br><span class="line"></span><br><span class="line">	c.String(<span class="number">200</span>, <span class="string">&quot;Username:%s, Password:%s, hobby:%s, gender:%s, city:%s&quot;</span>, username, password, hobby, gender, city)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GoRegister</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	c.HTML(<span class="number">200</span>, <span class="string">&quot;register.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	e := gin.Default()</span><br><span class="line">	e.LoadHTMLGlob(<span class="string">&quot;templates/*&quot;</span>)</span><br><span class="line">	e.POST(<span class="string">&quot;/register&quot;</span>, Regsiter)</span><br><span class="line">	e.GET(<span class="string">&quot;/register&quot;</span>, GoRegister)</span><br><span class="line">	e.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Username:ghz, Password:123, hobby:[swiming basketball], gender:m, city:beijing</span><br></pre></td></tr></table></figure>

<h1 id="Gin-数据绑定"><a href="#Gin-数据绑定" class="headerlink" title="Gin 数据绑定"></a>Gin 数据绑定</h1><h2 id="绑定-Form-表单"><a href="#绑定-Form-表单" class="headerlink" title="绑定 Form 表单"></a>绑定 Form 表单</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Username <span class="keyword">string</span>   <span class="string">`form:&quot;username&quot;`</span></span><br><span class="line">	Password <span class="keyword">string</span>   <span class="string">`form:&quot;password&quot;`</span></span><br><span class="line">	Hobby    []<span class="keyword">string</span> <span class="string">`form:&quot;hobby&quot;`</span></span><br><span class="line">	Gender   <span class="keyword">string</span>   <span class="string">`form:&quot;gender&quot;`</span></span><br><span class="line">	City     <span class="keyword">string</span>   <span class="string">`form:&quot;city&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Regsiter</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> user User</span><br><span class="line">	c.ShouldBind(&amp;user)</span><br><span class="line">	c.String(<span class="number">200</span>, <span class="string">&quot;User:%s&quot;</span>, user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GoRegister</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	c.HTML(<span class="number">200</span>, <span class="string">&quot;register.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	e := gin.Default()</span><br><span class="line">	e.LoadHTMLGlob(<span class="string">&quot;templates/*&quot;</span>)</span><br><span class="line">	e.POST(<span class="string">&quot;/register&quot;</span>, Regsiter)</span><br><span class="line">	e.GET(<span class="string">&quot;/register&quot;</span>, GoRegister)</span><br><span class="line">	e.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="绑定查询参数"><a href="#绑定查询参数" class="headerlink" title="绑定查询参数"></a>绑定查询参数</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Username <span class="keyword">string</span> <span class="string">`form:&quot;username&quot;`</span></span><br><span class="line">	Password <span class="keyword">string</span> <span class="string">`form:&quot;password&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetBind</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> user User</span><br><span class="line">	err := c.ShouldBind(&amp;user)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	c.String(<span class="number">200</span>, <span class="string">&quot;User:%s&quot;</span>, user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	e := gin.Default()</span><br><span class="line">	<span class="comment">// http://localhost:8080/testGetBind?username=ghz&amp;password=123</span></span><br><span class="line">	e.GET(<span class="string">&quot;/testGetBind&quot;</span>, TestGetBind)</span><br><span class="line">	e.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="路径请求参数绑定"><a href="#路径请求参数绑定" class="headerlink" title="路径请求参数绑定"></a>路径请求参数绑定</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Username <span class="keyword">string</span> <span class="string">`uri:&quot;username&quot;`</span></span><br><span class="line">	Password <span class="keyword">string</span> <span class="string">`uri:&quot;password&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetBind</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> user User</span><br><span class="line">	err := c.ShouldBindUri(&amp;user)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	c.String(<span class="number">200</span>, <span class="string">&quot;User:%s&quot;</span>, user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	e := gin.Default()</span><br><span class="line">	<span class="comment">// http://localhost:8080/testGetBind/ghz/123</span></span><br><span class="line">	e.GET(<span class="string">&quot;/testGetBind/:username/:password&quot;</span>, TestGetBind)</span><br><span class="line">	e.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：结构体和绑定方法的变化</p>
</blockquote>
<h1 id="Gin-访问静态文件集成-BootStrap-框架"><a href="#Gin-访问静态文件集成-BootStrap-框架" class="headerlink" title="Gin 访问静态文件集成 BootStrap 框架"></a>Gin 访问静态文件集成 BootStrap 框架</h1><h2 id="下载-BootStrap"><a href="#下载-BootStrap" class="headerlink" title="下载 BootStrap"></a>下载 BootStrap</h2><p>下载地址：<code>https://getbootstrap.com/</code></p>
<h2 id="添加-bootstrap-css-和-js-文件"><a href="#添加-bootstrap-css-和-js-文件" class="headerlink" title="添加 bootstrap css 和 js 文件"></a>添加 bootstrap css 和 js 文件</h2><p>创建一个 assets 文件夹，将 css 和 js 文件添加到该文件夹</p>
<h2 id="创建-html-文件"><a href="#创建-html-文件" class="headerlink" title="创建 html 文件"></a>创建 html 文件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/assets/css/bootstrap.min.css&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputEmail1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span></span></span><br><span class="line"><span class="tag">            &gt;</span>Email address&lt;/label</span><br><span class="line">          &gt;</span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;email&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">id</span>=<span class="string">&quot;exampleInputEmail1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">aria-describedby</span>=<span class="string">&quot;emailHelp&quot;</span></span></span><br><span class="line"><span class="tag">          /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;emailHelp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-text&quot;</span>&gt;</span></span><br><span class="line">            We&#x27;ll never share your email with anyone else.</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputPassword1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">id</span>=<span class="string">&quot;exampleInputPassword1&quot;</span></span></span><br><span class="line"><span class="tag">          /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3 form-check&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleCheck1&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;exampleCheck1&quot;</span></span></span><br><span class="line"><span class="tag">            &gt;</span>Check me out&lt;/label</span><br><span class="line">          &gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Go-Code"><a href="#Go-Code" class="headerlink" title="Go Code"></a>Go Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Login</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	c.HTML(<span class="number">200</span>, <span class="string">&quot;login.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	e := gin.Default()</span><br><span class="line">	e.LoadHTMLGlob(<span class="string">&quot;templates/*&quot;</span>)</span><br><span class="line"></span><br><span class="line">	e.Static(<span class="string">&quot;/assets&quot;</span>, <span class="string">&quot;./assets&quot;</span>)</span><br><span class="line">	e.StaticFS(<span class="string">&quot;/croot&quot;</span>, http.Dir(<span class="string">&quot;c:/&quot;</span>))</span><br><span class="line">	e.StaticFile(<span class="string">&quot;/favicon.ico&quot;</span>, <span class="string">&quot;./assets/favicon.ico&quot;</span>)</span><br><span class="line"></span><br><span class="line">	e.GET(<span class="string">&quot;/login&quot;</span>, Login)</span><br><span class="line">	e.POST(<span class="string">&quot;/login&quot;</span>, DoLogin)</span><br><span class="line">	e.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Gin-使用中间件"><a href="#Gin-使用中间件" class="headerlink" title="Gin 使用中间件"></a>Gin 使用中间件</h1><p>中间件听起来非常高大上的名字，实际非常简单，就是在请求中间起到拦截作用的处理函数。</p>
<h2 id="Gin-默认中间件"><a href="#Gin-默认中间件" class="headerlink" title="Gin 默认中间件"></a>Gin 默认中间件</h2><p>如果你使用 <code>Gin.Default()</code>实例化 gin 引擎，默认有两个中间件，<code>Logger</code>和 <code>Recovery</code>，分别用来处理日志和处理错误。如果使用 <code>gin.New()</code>需要重新添加。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新建一个没有任何默认中间件的路由</span></span><br><span class="line">r := gin.New()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局中间件</span></span><br><span class="line"><span class="comment">// Logger 中间件将日志写入 gin.DefaultWriter，即使你将 GIN_MODE 设置为 release。</span></span><br><span class="line"><span class="comment">// By default gin.DefaultWriter = os.Stdout</span></span><br><span class="line">r.Use(gin.Logger())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Recovery 中间件会 recover 任何 panic。如果有 panic 的话，会写入 500。</span></span><br><span class="line">r.Use(gin.Recovery())</span><br></pre></td></tr></table></figure>

<h2 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h2><ol>
<li>自定义中间件非常简单，定义一个符合下面格式的处理函数</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(*Context)</span></span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用<code>Use</code>方法调用</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMW</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	c.String(<span class="number">200</span>, <span class="string">&quot;hello,%s&quot;</span>, <span class="string">&quot;ghz&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MyMiddleware1</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;我的第一个中间件&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MyMiddleware2</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;我的第二个中间件&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 	func Default() *Engine &#123;</span></span><br><span class="line"><span class="comment">		debugPrintWARNINGDefault()</span></span><br><span class="line"><span class="comment">		engine := New()</span></span><br><span class="line"><span class="comment">		engine.Use(Logger(), Recovery())</span></span><br><span class="line"><span class="comment">		return engine</span></span><br><span class="line"><span class="comment">	&#125; */</span></span><br><span class="line">	<span class="comment">// e := gin.Default()</span></span><br><span class="line">	<span class="comment">// e := gin.New()</span></span><br><span class="line"></span><br><span class="line">	e := gin.Default()</span><br><span class="line"></span><br><span class="line">	e.Use(MyMiddleware1, MyMiddleware2)</span><br><span class="line"></span><br><span class="line">	e.GET(<span class="string">&quot;testmw&quot;</span>, TestMW)</span><br><span class="line"></span><br><span class="line">	e.Run()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="使用-Gin-BasicAuth-中间件"><a href="#使用-Gin-BasicAuth-中间件" class="headerlink" title="使用 Gin BasicAuth 中间件"></a>使用 Gin BasicAuth 中间件</h1><p>Gin 提供了 BasicAuth 中间件，用来对网站资源的访问保护。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟一些私人数据</span></span><br><span class="line"><span class="keyword">var</span> secrets = gin.H&#123;</span><br><span class="line">	<span class="string">&quot;foo&quot;</span>:    gin.H&#123;<span class="string">&quot;email&quot;</span>: <span class="string">&quot;foo@bar.com&quot;</span>, <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;123433&quot;</span>&#125;,</span><br><span class="line">	<span class="string">&quot;austin&quot;</span>: gin.H&#123;<span class="string">&quot;email&quot;</span>: <span class="string">&quot;austin@example.com&quot;</span>, <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;666&quot;</span>&#125;,</span><br><span class="line">	<span class="string">&quot;lena&quot;</span>:   gin.H&#123;<span class="string">&quot;email&quot;</span>: <span class="string">&quot;lena@guapa.com&quot;</span>, <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;523443&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 路由组使用 gin.BasicAuth() 中间件</span></span><br><span class="line">	<span class="comment">// gin.Accounts 是 map[string]string 的一种快捷方式</span></span><br><span class="line">	authorized := r.Group(<span class="string">&quot;/admin&quot;</span>, gin.BasicAuth(gin.Accounts&#123;</span><br><span class="line">		<span class="string">&quot;foo&quot;</span>:    <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">		<span class="string">&quot;austin&quot;</span>: <span class="string">&quot;1234&quot;</span>,</span><br><span class="line">		<span class="string">&quot;lena&quot;</span>:   <span class="string">&quot;hello2&quot;</span>,</span><br><span class="line">		<span class="string">&quot;manu&quot;</span>:   <span class="string">&quot;4321&quot;</span>,</span><br><span class="line">	&#125;))</span><br><span class="line"></span><br><span class="line">	<span class="comment">// /admin/secrets 端点</span></span><br><span class="line">	<span class="comment">// 触发 &quot;localhost:8080/admin/secrets</span></span><br><span class="line">	authorized.GET(<span class="string">&quot;/secrets&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="comment">// 获取用户，它是由 BasicAuth 中间件设置的</span></span><br><span class="line">		user := c.MustGet(gin.AuthUserKey).(<span class="keyword">string</span>)</span><br><span class="line">		fmt.Println(user)</span><br><span class="line">		<span class="keyword">if</span> secret, ok := secrets[user]; ok &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;user&quot;</span>: user, <span class="string">&quot;secret&quot;</span>: secret&#125;)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;user&quot;</span>: user, <span class="string">&quot;secret&quot;</span>: <span class="string">&quot;NO SECRET :(&quot;</span>&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 监听并在 0.0.0.0:8080 上启动服务</span></span><br><span class="line">	r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在浏览器输入 <code>localhost:8080/admin/secrets</code>时，会弹出一个对话框，要求输入正确的用户名和密码，才能访问资源。</p>
<h1 id="Gin-cookie-的使用"><a href="#Gin-cookie-的使用" class="headerlink" title="Gin cookie 的使用"></a>Gin cookie 的使用</h1><p><code>cookie</code>是服务器向客户端写的一些数据，可以实现像自动登录等功能。</p>
<h2 id="Gin-cookie-的使用-1"><a href="#Gin-cookie-的使用-1" class="headerlink" title="Gin cookie 的使用"></a>Gin cookie 的使用</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Handler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 获得cookie</span></span><br><span class="line">	s, err := c.Cookie(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		s = <span class="string">&quot;ghz&quot;</span></span><br><span class="line">		<span class="comment">// 设置cookie</span></span><br><span class="line">		c.SetCookie(<span class="string">&quot;username&quot;</span>, s, <span class="number">60</span>*<span class="number">60</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;localhost&quot;</span>, <span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	c.String(<span class="number">200</span>, <span class="string">&quot;测试cookie&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	e := gin.Default()</span><br><span class="line">	e.GET(<span class="string">&quot;/test&quot;</span>, Handler)</span><br><span class="line">	e.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>基于安全的考虑，需要给 cookie 加上 <code>Secure</code>和 <code>HttpOnly</code>属性，<code>HttpOnly</code>比较好理解，设置 <code>HttpOnly=true</code>的 cookie 不能被 js 获取到，无法用 <code>document.cookie</code>打出 cookie 的内容。</p>
<p><code>Secure</code>属性是说如果一个 cookie 被设置了 <code>Secure=true</code>，那么这个 cookie 只能用 <code>https</code>协议发送给服务器，用 <code>http</code>协议是不发送的。</p>
</blockquote>
<h1 id="Gin-使用-Session"><a href="#Gin-使用-Session" class="headerlink" title="Gin 使用 Session"></a>Gin 使用 Session</h1><p>因为 http 是无状态、短连接，如何保存客户端和服务器直接的会话状态呢？可以使用 session。</p>
<h2 id="使用-gin-session-中间件"><a href="#使用-gin-session-中间件" class="headerlink" title="使用 gin session 中间件"></a>使用 gin session 中间件</h2><p>gin 本身没有对 session 的支持，可以使用第三方中间件。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> get github.com/gin-contrib/sessions</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-contrib/sessions&quot;</span></span><br></pre></td></tr></table></figure>

<p>该中间件提供了很多后端支持：</p>
<ul>
<li><a href="https://pkg.go.dev/github.com/gin-contrib/sessions#readme-cookie-based">cookie-based</a></li>
<li><a href="https://pkg.go.dev/github.com/gin-contrib/sessions#readme-redis">Redis</a></li>
<li><a href="https://pkg.go.dev/github.com/gin-contrib/sessions#readme-memcached">memcached</a></li>
<li><a href="https://pkg.go.dev/github.com/gin-contrib/sessions#readme-mongodb">MongoDB</a></li>
<li><a href="https://pkg.go.dev/github.com/gin-contrib/sessions#readme-memstore">memstore</a></li>
<li><a href="https://pkg.go.dev/github.com/gin-contrib/sessions#readme-postgresql">PostgreSQL</a></li>
</ul>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;github.com/gin-contrib/sessions&quot;</span></span><br><span class="line">  <span class="string">&quot;github.com/gin-contrib/sessions/cookie&quot;</span></span><br><span class="line">  <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  r := gin.Default()</span><br><span class="line">  store := cookie.NewStore([]<span class="keyword">byte</span>(<span class="string">&quot;secret&quot;</span>))</span><br><span class="line">  r.Use(sessions.Sessions(<span class="string">&quot;mysession&quot;</span>, store))</span><br><span class="line"></span><br><span class="line">  r.GET(<span class="string">&quot;/hello&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    session := sessions.Default(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> session.Get(<span class="string">&quot;hello&quot;</span>) != <span class="string">&quot;world&quot;</span> &#123;</span><br><span class="line">      session.Set(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>)</span><br><span class="line">      session.Save()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c.JSON(<span class="number">200</span>, gin.H&#123;<span class="string">&quot;hello&quot;</span>: session.Get(<span class="string">&quot;hello&quot;</span>)&#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  r.Run(<span class="string">&quot;:8000&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更多内容请参考：<code>https://pkg.go.dev/github.com/gin-contrib/sessions#section-readme</code></p>
<h1 id="Gin-实现-restful-风格的-CRUD"><a href="#Gin-实现-restful-风格的-CRUD" class="headerlink" title="Gin 实现 restful 风格的 CRUD"></a>Gin 实现 restful 风格的 CRUD</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;strconv&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	UId  <span class="keyword">int</span>    <span class="string">`json:&quot;uid&quot;`</span></span><br><span class="line">	Name <span class="keyword">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">	Age  <span class="keyword">int</span>    <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> users = <span class="built_in">make</span>([]User, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	u1 := User&#123;<span class="number">1</span>, <span class="string">&quot;tom&quot;</span>, <span class="number">20</span>&#125;</span><br><span class="line">	u2 := User&#123;<span class="number">2</span>, <span class="string">&quot;kite&quot;</span>, <span class="number">30</span>&#125;</span><br><span class="line">	u3 := User&#123;<span class="number">3</span>, <span class="string">&quot;rose&quot;</span>, <span class="number">40</span>&#125;</span><br><span class="line">	users = <span class="built_in">append</span>(users, u1)</span><br><span class="line">	users = <span class="built_in">append</span>(users, u2)</span><br><span class="line">	users = <span class="built_in">append</span>(users, u3)</span><br><span class="line">	fmt.Println(users)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">find</span><span class="params">(uid <span class="keyword">int</span>)</span> <span class="params">(*User, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i, u := <span class="keyword">range</span> users &#123;</span><br><span class="line">		<span class="keyword">if</span> u.UId == uid &#123;</span><br><span class="line">			<span class="keyword">return</span> &amp;u, i</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span>, <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddUser</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	u4 := User&#123;<span class="number">4</span>, <span class="string">&quot;Joe&quot;</span>, <span class="number">50</span>&#125;</span><br><span class="line">	users = <span class="built_in">append</span>(users, u4)</span><br><span class="line">	c.JSON(<span class="number">200</span>, users)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DelUser</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	uid := c.Param(<span class="string">&quot;uid&quot;</span>)</span><br><span class="line">	id, _ := strconv.Atoi(uid)</span><br><span class="line">	_, i := find(id)</span><br><span class="line">	users = <span class="built_in">append</span>(users[:i], users[i+<span class="number">1</span>:]...)</span><br><span class="line">	c.JSON(<span class="number">200</span>, users)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UpdateUser</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	uid := c.Param(<span class="string">&quot;uid&quot;</span>)</span><br><span class="line">	id, _ := strconv.Atoi(uid)</span><br><span class="line">	u, _ := find(id)</span><br><span class="line">	u.Name = <span class="string">&quot;修改的Name&quot;</span></span><br><span class="line">	c.JSON(<span class="number">200</span>, u)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FindUser</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	uid := c.Param(<span class="string">&quot;uid&quot;</span>)</span><br><span class="line">	id, _ := strconv.Atoi(uid)</span><br><span class="line">	u, _ := find(id)</span><br><span class="line">	c.JSON(<span class="number">200</span>, u)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	e := gin.Default()</span><br><span class="line">	e.GET(<span class="string">&quot;/user/:uid&quot;</span>, FindUser)</span><br><span class="line">	e.PUT(<span class="string">&quot;/user/:uid&quot;</span>, UpdateUser)</span><br><span class="line">	e.DELETE(<span class="string">&quot;/user/:uid&quot;</span>, DelUser)</span><br><span class="line">	e.POST(<span class="string">&quot;/user/&quot;</span>, AddUser)</span><br><span class="line">	e.Run()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Gin-实现路由分组"><a href="#Gin-实现路由分组" class="headerlink" title="Gin 实现路由分组"></a>Gin 实现路由分组</h1><p>假如你的网站有多个模块：博客、教程、视频、问答，每个模块又有多个路由，这样就可以进行路由分组，使用的方法是 router.Group(“分组名称”)</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F1</span><span class="params">(c *gin.Context)</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F2</span><span class="params">(c *gin.Context)</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F3</span><span class="params">(c *gin.Context)</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F4</span><span class="params">(c *gin.Context)</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F5</span><span class="params">(c *gin.Context)</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F6</span><span class="params">(c *gin.Context)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	router := gin.Default()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 博客</span></span><br><span class="line">	<span class="comment">// 访问：http://localhost:8080/blog/list</span></span><br><span class="line">	v1 := router.Group(<span class="string">&quot;/blog&quot;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		v1.POST(<span class="string">&quot;/list&quot;</span>, F1)</span><br><span class="line">		v1.POST(<span class="string">&quot;/post&quot;</span>, F2)</span><br><span class="line">		v1.POST(<span class="string">&quot;/add&quot;</span>, F3)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 视频</span></span><br><span class="line">	<span class="comment">// 访问：http://localhost:8080/video/list</span></span><br><span class="line">	v2 := router.Group(<span class="string">&quot;/video&quot;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		v2.POST(<span class="string">&quot;/list&quot;</span>, F4)</span><br><span class="line">		v2.POST(<span class="string">&quot;/post&quot;</span>, F5)</span><br><span class="line">		v2.POST(<span class="string">&quot;/add&quot;</span>, F6)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Gin-输出渲染"><a href="#Gin-输出渲染" class="headerlink" title="Gin 输出渲染"></a>Gin 输出渲染</h1><p>Gin 支持很多种输出渲染，可以是简单的字符串、JSON、XML、HTML、ProtoBuf。使用的方法如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">c.JSON(<span class="number">200</span>, <span class="literal">nil</span>)</span><br><span class="line">c.XML(<span class="number">200</span>, <span class="literal">nil</span>)</span><br><span class="line">c.HTML(<span class="number">200</span>, <span class="string">&quot;&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">c.ProtoBuf(<span class="number">200</span>, <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure>

<p>这里像字符串、JSON、HTML 我们都用过，这里我们再总结一下。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestJson</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">		<span class="string">&quot;name&quot;</span>: <span class="string">&quot;多课网&quot;</span>,</span><br><span class="line">		<span class="string">&quot;site&quot;</span>: <span class="string">&quot;www.duoke360.com&quot;</span>,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestXML</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	c.XML(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">		<span class="string">&quot;name&quot;</span>: <span class="string">&quot;多课网&quot;</span>,</span><br><span class="line">		<span class="string">&quot;site&quot;</span>: <span class="string">&quot;www.duoke360.com&quot;</span>,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestHtml</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	c.HTML(<span class="number">200</span>, <span class="string">&quot;login.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestString</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	c.String(<span class="number">200</span>, <span class="string">&quot;多课网，老郭讲golang&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	e := gin.Default()</span><br><span class="line"></span><br><span class="line">	e.GET(<span class="string">&quot;/test_json&quot;</span>, TestJson)</span><br><span class="line">	e.GET(<span class="string">&quot;/test_xml&quot;</span>, TestXML)</span><br><span class="line">	e.LoadHTMLGlob(<span class="string">&quot;templates/*&quot;</span>)</span><br><span class="line">	e.GET(<span class="string">&quot;/test_html&quot;</span>, TestHtml)</span><br><span class="line">	e.GET(<span class="string">&quot;/test_string&quot;</span>, TestString)</span><br><span class="line"></span><br><span class="line">	e.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Gin-实现文件上传"><a href="#Gin-实现文件上传" class="headerlink" title="Gin 实现文件上传"></a>Gin 实现文件上传</h1><h2 id="创建-html-文件-1"><a href="#创建-html-文件-1" class="headerlink" title="创建 html 文件"></a>创建 html 文件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/upload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">      请选择上传文件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Go-Code-1"><a href="#Go-Code-1" class="headerlink" title="Go Code"></a>Go Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Upload</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 单文件</span></span><br><span class="line">	file, _ := c.FormFile(<span class="string">&quot;file&quot;</span>)</span><br><span class="line">	log.Println(file.Filename)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 上传文件到项目根目录，使用原文件名</span></span><br><span class="line">	c.SaveUploadedFile(file, file.Filename)</span><br><span class="line"></span><br><span class="line">	c.String(http.StatusOK, fmt.Sprintf(<span class="string">&quot;&#x27;%s&#x27; uploaded!&quot;</span>, file.Filename))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GoUpload</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	c.HTML(<span class="number">200</span>, <span class="string">&quot;upload.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	router := gin.Default()</span><br><span class="line">	<span class="comment">// 为 multipart forms 设置较低的内存限制 (默认是 32 MiB)</span></span><br><span class="line">	router.MaxMultipartMemory = <span class="number">8</span> &lt;&lt; <span class="number">20</span> <span class="comment">// 8 MiB</span></span><br><span class="line">	router.LoadHTMLGlob(<span class="string">&quot;templates/*&quot;</span>)</span><br><span class="line">	router.GET(<span class="string">&quot;/upload&quot;</span>, GoUpload)</span><br><span class="line">	router.POST(<span class="string">&quot;/upload&quot;</span>, Upload)</span><br><span class="line">	router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Gin-博客项目-项目架构"><a href="#Gin-博客项目-项目架构" class="headerlink" title="Gin 博客项目-项目架构"></a>Gin 博客项目-项目架构</h1><h2 id="规范包及目录"><a href="#规范包及目录" class="headerlink" title="规范包及目录"></a>规范包及目录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|-controller</span><br><span class="line"></span><br><span class="line">|-dao</span><br><span class="line"></span><br><span class="line">|-router</span><br><span class="line"></span><br><span class="line">|-model</span><br><span class="line"></span><br><span class="line">|-assets</span><br><span class="line"></span><br><span class="line">|-templates</span><br></pre></td></tr></table></figure>

<h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go mod init blog</span><br></pre></td></tr></table></figure>

<h1 id="Gin-博客项目-集成-gorm"><a href="#Gin-博客项目-集成-gorm" class="headerlink" title="Gin 博客项目-集成 gorm"></a>Gin 博客项目-集成 gorm</h1><h2 id="下载包"><a href="#下载包" class="headerlink" title="下载包"></a>下载包</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go get -u gorm.io/gorm</span><br><span class="line">go get -u gorm.io/driver/mysql</span><br></pre></td></tr></table></figure>

<h2 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	gorm.Model</span><br><span class="line">	Username <span class="keyword">string</span> <span class="string">`json:&quot;username&quot;`</span></span><br><span class="line">	Password <span class="keyword">string</span> <span class="string">`json:&quot;passowrd&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建-Dao"><a href="#创建-Dao" class="headerlink" title="创建 Dao"></a>创建 Dao</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dao</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;pro04/models&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line">	<span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Manager <span class="keyword">interface</span> &#123;</span><br><span class="line">	AddUser(user *models.User)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> manager <span class="keyword">struct</span> &#123;</span><br><span class="line">	db *gorm.DB</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Mgr Manager</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	dsn := <span class="string">&quot;root:123456@tcp(127.0.0.1:3306)/golang_db?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class="line">	db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(<span class="string">&quot;Failed to init db:&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	Mgr = &amp;manager&#123;db: db&#125;</span><br><span class="line">	db.AutoMigrate(&amp;models.User&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mgr *manager)</span> <span class="title">AddUser</span><span class="params">(user *models.User)</span></span> &#123;</span><br><span class="line">	mgr.db.Create(user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := models.User&#123;</span><br><span class="line">Username: username,</span><br><span class="line">Password: password,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dao.Mgr.AddUser(&amp;user)</span><br></pre></td></tr></table></figure>

<h1 id="Gin-博客项目-集成-Bootstrap-创建用户表单"><a href="#Gin-博客项目-集成-Bootstrap-创建用户表单" class="headerlink" title="Gin 博客项目-集成 Bootstrap 创建用户表单"></a>Gin 博客项目-集成 Bootstrap 创建用户表单</h1><h2 id="下载-bootstrap"><a href="#下载-bootstrap" class="headerlink" title="下载 bootstrap"></a>下载 bootstrap</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://getbootstrap.com/</span><br></pre></td></tr></table></figure>

<h2 id="添加-js-和-css-到-assets-目录下面"><a href="#添加-js-和-css-到-assets-目录下面" class="headerlink" title="添加 js 和 css 到 assets 目录下面"></a>添加 js 和 css 到 assets 目录下面</h2><h2 id="创建添加用户-html"><a href="#创建添加用户-html" class="headerlink" title="创建添加用户 html"></a>创建添加用户 html</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">        &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">        &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;/assets/css/bootstrap.min.css&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;title&gt;用户管理&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">            &lt;div class=<span class="string">&quot;row mt-3 justify-content-center&quot;</span>&gt;</span><br><span class="line">                &lt;div class=<span class="string">&quot;col-md-4&quot;</span>&gt;</span><br><span class="line">                    &lt;form method=<span class="string">&quot;post&quot;</span> action=<span class="string">&quot;/users&quot;</span>&gt;</span><br><span class="line">                        &lt;div class=<span class="string">&quot;mb-3&quot;</span>&gt;</span><br><span class="line">                            &lt;label <span class="keyword">for</span>=<span class="string">&quot;exampleInputEmail1&quot;</span> class=<span class="string">&quot;form-label&quot;</span>&gt;用户名称&lt;/label&gt;</span><br><span class="line">                            &lt;input <span class="keyword">type</span>=<span class="string">&quot;username&quot;</span> class=<span class="string">&quot;form-control&quot;</span></span><br><span class="line">                                id=<span class="string">&quot;exampleInputEmail1&quot;</span></span><br><span class="line">                                aria-describedby=<span class="string">&quot;emailHelp&quot;</span>&gt;</span><br><span class="line">                            &lt;div id=<span class="string">&quot;emailHelp&quot;</span> class=<span class="string">&quot;form-text&quot;</span>&gt;We<span class="string">&#x27;ll never</span></span><br><span class="line"><span class="string">                                share your</span></span><br><span class="line"><span class="string">                                email with anyone else.&lt;/div&gt;</span></span><br><span class="line"><span class="string">                        &lt;/div&gt;</span></span><br><span class="line"><span class="string">                        &lt;div class=&quot;mb-3&quot;&gt;</span></span><br><span class="line"><span class="string">                            &lt;label for=&quot;exampleInputPassword1&quot;</span></span><br><span class="line"><span class="string">                                class=&quot;form-label&quot;&gt;密码&lt;/label&gt;</span></span><br><span class="line"><span class="string">                            &lt;input type=&quot;password&quot; class=&quot;form-control&quot;</span></span><br><span class="line"><span class="string">                                name=&quot;password&quot;</span></span><br><span class="line"><span class="string">                                id=&quot;exampleInputPassword1&quot;&gt;</span></span><br><span class="line"><span class="string">                        &lt;/div&gt;</span></span><br><span class="line"><span class="string">                        &lt;div class=&quot;mb-3 form-check&quot;&gt;</span></span><br><span class="line"><span class="string">                            &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot;</span></span><br><span class="line"><span class="string">                                id=&quot;exampleCheck1&quot;&gt;</span></span><br><span class="line"><span class="string">                            &lt;label class=&quot;form-check-label&quot; for=&quot;exampleCheck1&quot;&gt;Check</span></span><br><span class="line"><span class="string">                                me</span></span><br><span class="line"><span class="string">                                out&lt;/label&gt;</span></span><br><span class="line"><span class="string">                        &lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                        &lt;textarea name=&quot;test&quot; id=&quot;test&quot; cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;</span></span><br><span class="line"><span class="string">                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;添加&lt;/button&gt;</span></span><br><span class="line"><span class="string">                    &lt;/form&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                    &lt;hr&gt;</span></span><br><span class="line"><span class="string">                    &lt;ul class=&quot;list-group list-group-flush&quot;&gt;</span></span><br><span class="line"><span class="string">                        &lt;li class=&quot;list-group-item&quot;&gt;tom 123&lt;/li&gt;</span></span><br><span class="line"><span class="string">                        &lt;li class=&quot;list-group-item&quot;&gt;kite 456&lt;/li&gt;</span></span><br><span class="line"><span class="string">                    &lt;/ul&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Gin-博客项目-实现控制器和路由"><a href="#Gin-博客项目-实现控制器和路由" class="headerlink" title="Gin 博客项目-实现控制器和路由"></a>Gin 博客项目-实现控制器和路由</h1><h2 id="控制器-controller"><a href="#控制器-controller" class="headerlink" title="控制器 controller"></a>控制器 controller</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controller</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;pro04/dao&quot;</span></span><br><span class="line">	<span class="string">&quot;pro04/models&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddUser</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	username := c.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">	password := c.PostForm(<span class="string">&quot;password&quot;</span>)</span><br><span class="line"></span><br><span class="line">	user := models.User&#123;</span><br><span class="line">		Username: username,</span><br><span class="line">		Password: password,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	dao.Mgr.AddUser(&amp;user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListUser</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	c.HTML(<span class="number">200</span>, <span class="string">&quot;user.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="路由-router"><a href="#路由-router" class="headerlink" title="路由 router"></a>路由 router</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;pro04/controller&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Start</span><span class="params">()</span></span> &#123;</span><br><span class="line">	e := gin.Default()</span><br><span class="line">	e.LoadHTMLGlob(<span class="string">&quot;templates/*&quot;</span>)</span><br><span class="line">	e.Static(<span class="string">&quot;/assets&quot;</span>, <span class="string">&quot;./assets&quot;</span>)</span><br><span class="line"></span><br><span class="line">	e.GET(<span class="string">&quot;/users&quot;</span>, controller.ListUser)</span><br><span class="line">	e.POST(<span class="string">&quot;/users&quot;</span>, controller.AddUser)</span><br><span class="line">	e.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Gin-博客项目-设计静态页面"><a href="#Gin-博客项目-设计静态页面" class="headerlink" title="Gin 博客项目-设计静态页面"></a>Gin 博客项目-设计静态页面</h1><h2 id="header"><a href="#header" class="headerlink" title="header"></a>header</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123;define &quot;header&quot;&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;p-3 bg-dark text-white&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;d-flex flex-wrap align-items-center justify-content-center justify-content-lg-start&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>多课网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;nav col-12 col-lg-auto me-lg-auto mb-2 justify-content-center mb-md-0&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link px-2 text-secondary&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link px-2 text-white&quot;</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;col-12 col-lg-auto mb-3 mb-lg-0 me-lg-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">&quot;search&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;form-control form-control-dark&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">placeholder</span>=<span class="string">&quot;Search...&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">aria-label</span>=<span class="string">&quot;Search&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-end&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-outline-light me-2&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-warning&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注册-register-html"><a href="#注册-register-html" class="headerlink" title="注册 register.html"></a>注册 register.html</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/assets/css/bootstrap.min.css&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;template &quot;header&quot;&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row  justify-content-center mt-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputEmail1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span></span></span><br><span class="line"><span class="tag">                &gt;</span>用户名称&lt;/label</span><br><span class="line">              &gt;</span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;email&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">id</span>=<span class="string">&quot;exampleInputEmail1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">aria-describedby</span>=<span class="string">&quot;emailHelp&quot;</span></span></span><br><span class="line"><span class="tag">              /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputPassword1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span></span></span><br><span class="line"><span class="tag">                &gt;</span>用户密码&lt;/label</span><br><span class="line">              &gt;</span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">id</span>=<span class="string">&quot;exampleInputPassword1&quot;</span></span></span><br><span class="line"><span class="tag">              /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3 form-check&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">id</span>=<span class="string">&quot;exampleCheck1&quot;</span></span></span><br><span class="line"><span class="tag">              /&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;exampleCheck1&quot;</span>&gt;</span>记住我<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="登录-login-html"><a href="#登录-login-html" class="headerlink" title="登录 login.html"></a>登录 login.html</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/assets/css/bootstrap.min.css&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;template &quot;header&quot;&#125;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row  justify-content-center mt-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputEmail1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span></span></span><br><span class="line"><span class="tag">                &gt;</span>用户名称&lt;/label</span><br><span class="line">              &gt;</span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;email&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">id</span>=<span class="string">&quot;exampleInputEmail1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">aria-describedby</span>=<span class="string">&quot;emailHelp&quot;</span></span></span><br><span class="line"><span class="tag">              /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputPassword1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span></span></span><br><span class="line"><span class="tag">                &gt;</span>用户密码&lt;/label</span><br><span class="line">              &gt;</span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">id</span>=<span class="string">&quot;exampleInputPassword1&quot;</span></span></span><br><span class="line"><span class="tag">              /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3 form-check&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">id</span>=<span class="string">&quot;exampleCheck1&quot;</span></span></span><br><span class="line"><span class="tag">              /&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;exampleCheck1&quot;</span>&gt;</span>记住我<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="首页-index-html"><a href="#首页-index-html" class="headerlink" title="首页 index.html"></a>首页 index.html</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/assets/css/bootstrap.min.css&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;template &quot;header&quot;&#125;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row justify-content-center mt-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>首页...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Gin-博客项目-用户注册"><a href="#Gin-博客项目-用户注册" class="headerlink" title="Gin 博客项目-用户注册"></a>Gin 博客项目-用户注册</h1><h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterUser</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	username := c.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">	password := c.PostForm(<span class="string">&quot;password&quot;</span>)</span><br><span class="line"></span><br><span class="line">	user := model.User&#123;</span><br><span class="line">		Username: username,</span><br><span class="line">		Password: password,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	dao.Mgr.AddUser(&amp;user)</span><br><span class="line"></span><br><span class="line">	c.Redirect(<span class="number">200</span>, <span class="string">&quot;/&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GoRegister</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	c.HTML(<span class="number">200</span>, <span class="string">&quot;register.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="router"><a href="#router" class="headerlink" title="router"></a>router</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> router</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;blog/controller&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Start</span><span class="params">()</span></span> &#123;</span><br><span class="line">	e := gin.Default()</span><br><span class="line">	e.LoadHTMLGlob(<span class="string">&quot;templates/*&quot;</span>)</span><br><span class="line">	e.Static(<span class="string">&quot;/assets&quot;</span>, <span class="string">&quot;./assets&quot;</span>)</span><br><span class="line">	e.GET(<span class="string">&quot;/&quot;</span>, controller.Index)</span><br><span class="line">	e.POST(<span class="string">&quot;/register&quot;</span>, controller.RegisterUser)</span><br><span class="line">	e.GET(<span class="string">&quot;/register&quot;</span>, controller.GoRegister)</span><br><span class="line">	e.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Gin-博客项目-用户登录"><a href="#Gin-博客项目-用户登录" class="headerlink" title="Gin 博客项目-用户登录"></a>Gin 博客项目-用户登录</h1><h2 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dao</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;blog/model&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line">	<span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Manager <span class="keyword">interface</span> &#123;</span><br><span class="line">	AddUser(user *model.User)</span><br><span class="line">	Login(username <span class="keyword">string</span>) model.User</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> manager <span class="keyword">struct</span> &#123;</span><br><span class="line">	db *gorm.DB</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Mgr Manager</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	dsn := <span class="string">&quot;root:123456@tcp(127.0.0.1:3306)/golang_db?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class="line">	db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(<span class="string">&quot;Failed to init db:&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	Mgr = &amp;manager&#123;db: db&#125;</span><br><span class="line">	db.AutoMigrate(&amp;model.User&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mgr *manager)</span> <span class="title">AddUser</span><span class="params">(user *model.User)</span></span> &#123;</span><br><span class="line">	mgr.db.Create(user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mgr *manager)</span> <span class="title">Login</span><span class="params">(username <span class="keyword">string</span>)</span> <span class="title">model</span>.<span class="title">User</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> user model.User</span><br><span class="line">	mgr.db.Where(<span class="string">&quot;username=?&quot;</span>, username).First(&amp;user)</span><br><span class="line">	<span class="keyword">return</span> user</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="controller-1"><a href="#controller-1" class="headerlink" title="controller"></a>controller</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controller</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;blog/dao&quot;</span></span><br><span class="line">	<span class="string">&quot;blog/model&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterUser</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	username := c.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">	password := c.PostForm(<span class="string">&quot;password&quot;</span>)</span><br><span class="line"></span><br><span class="line">	user := model.User&#123;</span><br><span class="line">		Username: username,</span><br><span class="line">		Password: password,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	dao.Mgr.AddUser(&amp;user)</span><br><span class="line"></span><br><span class="line">	c.Redirect(<span class="number">200</span>, <span class="string">&quot;/&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GoRegister</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	c.HTML(<span class="number">200</span>, <span class="string">&quot;register.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GoLogin</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	c.HTML(<span class="number">200</span>, <span class="string">&quot;login.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Login</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	username := c.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">	password := c.PostForm(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">	fmt.Println(username)</span><br><span class="line">	u := dao.Mgr.Login(username)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> u.Username == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		c.HTML(<span class="number">200</span>, <span class="string">&quot;login.html&quot;</span>, <span class="string">&quot;用户名不存在！&quot;</span>)</span><br><span class="line">		fmt.Println(<span class="string">&quot;用户名不存在！&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> u.Password != password &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;密码错误&quot;</span>)</span><br><span class="line">			c.HTML(<span class="number">200</span>, <span class="string">&quot;login.html&quot;</span>, <span class="string">&quot;密码错误&quot;</span>)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line">			c.Redirect(<span class="number">301</span>, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	c.HTML(<span class="number">200</span>, <span class="string">&quot;index.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListUser</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	c.HTML(<span class="number">200</span>, <span class="string">&quot;index.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="router-1"><a href="#router-1" class="headerlink" title="router"></a>router</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> router</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;blog/controller&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Start</span><span class="params">()</span></span> &#123;</span><br><span class="line">	e := gin.Default()</span><br><span class="line">	e.LoadHTMLGlob(<span class="string">&quot;templates/*&quot;</span>)</span><br><span class="line">	e.Static(<span class="string">&quot;/assets&quot;</span>, <span class="string">&quot;./assets&quot;</span>)</span><br><span class="line"></span><br><span class="line">	e.GET(<span class="string">&quot;/login&quot;</span>, controller.GoLogin)</span><br><span class="line">	e.POST(<span class="string">&quot;/login&quot;</span>, controller.Login)</span><br><span class="line"></span><br><span class="line">	e.GET(<span class="string">&quot;/&quot;</span>, controller.Index)</span><br><span class="line">	e.POST(<span class="string">&quot;/register&quot;</span>, controller.RegisterUser)</span><br><span class="line">	e.GET(<span class="string">&quot;/register&quot;</span>, controller.GoRegister)</span><br><span class="line">	e.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="login-html"><a href="#login-html" class="headerlink" title="login.html"></a>login.html</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/assets/css/bootstrap.min.css&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;template &quot;header&quot;&#125;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row  justify-content-center mt-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;background-color: red;&quot;</span>&gt;</span>&#123;&#123;.&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/login&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputEmail1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span></span></span><br><span class="line"><span class="tag">                &gt;</span>用户名称&lt;/label</span><br><span class="line">              &gt;</span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">name</span>=<span class="string">&quot;username&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">id</span>=<span class="string">&quot;exampleInputEmail1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">aria-describedby</span>=<span class="string">&quot;emailHelp&quot;</span></span></span><br><span class="line"><span class="tag">              /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputPassword1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span></span></span><br><span class="line"><span class="tag">                &gt;</span>用户密码&lt;/label</span><br><span class="line">              &gt;</span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">name</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">id</span>=<span class="string">&quot;exampleInputPassword1&quot;</span></span></span><br><span class="line"><span class="tag">              /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Gin-博客项目-集成-markdown-编辑器"><a href="#Gin-博客项目-集成-markdown-编辑器" class="headerlink" title="Gin 博客项目-集成 markdown 编辑器"></a>Gin 博客项目-集成 markdown 编辑器</h1><h2 id="下载-mdeditor"><a href="#下载-mdeditor" class="headerlink" title="下载 mdeditor"></a>下载 mdeditor</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://pandao.github.io/editor.md/</span><br></pre></td></tr></table></figure>

<h2 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/assets/css/bootstrap.min.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/assets/editormd/css/editormd.css&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;template &quot;header&quot;&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test-editormd&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    var testEditor; $(function() &#123; testEditor = editormd(&quot;test-editormd&quot;, &#123;</span><br><span class="line">    width : &quot;100%&quot;, height : 640, syncScrolling : &quot;single&quot;, path :</span><br><span class="line">    &quot;assets/editormd/lib/&quot; &#125;); &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Gin-博客项目-创建博客模型和-DAO"><a href="#Gin-博客项目-创建博客模型和-DAO" class="headerlink" title="Gin 博客项目-创建博客模型和 DAO"></a>Gin 博客项目-创建博客模型和 DAO</h1><h2 id="创建模型-1"><a href="#创建模型-1" class="headerlink" title="创建模型"></a>创建模型</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Post <span class="keyword">struct</span> &#123;</span><br><span class="line">	gorm.Model</span><br><span class="line">	Title   <span class="keyword">string</span></span><br><span class="line">	Content <span class="keyword">string</span> <span class="string">`gorm:&quot;type:text&quot;`</span></span><br><span class="line">	Tag     <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建-DAO"><a href="#创建-DAO" class="headerlink" title="创建 DAO"></a>创建 DAO</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dao</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;blog/model&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line">	<span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Manager <span class="keyword">interface</span> &#123;</span><br><span class="line">	AddUser(user *model.User)</span><br><span class="line">	Login(username <span class="keyword">string</span>) model.User</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 博客操作</span></span><br><span class="line">	AddPost(post *model.Post)</span><br><span class="line">	GetAllPost() []model.Post</span><br><span class="line">	getPost(pid <span class="keyword">int</span>) model.Post</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> manager <span class="keyword">struct</span> &#123;</span><br><span class="line">	db *gorm.DB</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Mgr Manager</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	dsn := <span class="string">&quot;root:123456@tcp(127.0.0.1:3306)/golang_db?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class="line">	db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(<span class="string">&quot;Failed to init db:&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	Mgr = &amp;manager&#123;db: db&#125;</span><br><span class="line">	db.AutoMigrate(&amp;model.User&#123;&#125;)</span><br><span class="line">	db.AutoMigrate(&amp;model.Post&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mgr *manager)</span> <span class="title">AddUser</span><span class="params">(user *model.User)</span></span> &#123;</span><br><span class="line">	mgr.db.Create(user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mgr *manager)</span> <span class="title">Login</span><span class="params">(username <span class="keyword">string</span>)</span> <span class="title">model</span>.<span class="title">User</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> user model.User</span><br><span class="line">	mgr.db.Where(<span class="string">&quot;username=?&quot;</span>, username).First(&amp;user)</span><br><span class="line">	<span class="keyword">return</span> user</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 博客操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mgr *manager)</span> <span class="title">AddPost</span><span class="params">(post *model.Post)</span></span> &#123;</span><br><span class="line">	mgr.db.Create(post)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mgr *manager)</span> <span class="title">GetAllPost</span><span class="params">()</span> []<span class="title">model</span>.<span class="title">Post</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> posts = <span class="built_in">make</span>([]model.Post, <span class="number">10</span>)</span><br><span class="line">	mgr.db.Find(&amp;posts)</span><br><span class="line">	<span class="keyword">return</span> posts</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mgr *manager)</span> <span class="title">getPost</span><span class="params">(pid <span class="keyword">int</span>)</span> <span class="title">model</span>.<span class="title">Post</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> post model.Post</span><br><span class="line">	mgr.db.First(&amp;post, pid)</span><br><span class="line">	<span class="keyword">return</span> post</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Gin-博客项目-创建博客控制器和路由"><a href="#Gin-博客项目-创建博客控制器和路由" class="headerlink" title="Gin 博客项目-创建博客控制器和路由"></a>Gin 博客项目-创建博客控制器和路由</h1><h2 id="创建控制器"><a href="#创建控制器" class="headerlink" title="创建控制器"></a>创建控制器</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controller</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;blog/dao&quot;</span></span><br><span class="line">	<span class="string">&quot;blog/model&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterUser</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	username := c.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">	password := c.PostForm(<span class="string">&quot;password&quot;</span>)</span><br><span class="line"></span><br><span class="line">	user := model.User&#123;</span><br><span class="line">		Username: username,</span><br><span class="line">		Password: password,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	dao.Mgr.AddUser(&amp;user)</span><br><span class="line"></span><br><span class="line">	c.Redirect(<span class="number">200</span>, <span class="string">&quot;/&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GoRegister</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	c.HTML(<span class="number">200</span>, <span class="string">&quot;register.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GoLogin</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	c.HTML(<span class="number">200</span>, <span class="string">&quot;login.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Login</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	username := c.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">	password := c.PostForm(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">	fmt.Println(username)</span><br><span class="line">	u := dao.Mgr.Login(username)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> u.Username == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		c.HTML(<span class="number">200</span>, <span class="string">&quot;login.html&quot;</span>, <span class="string">&quot;用户名不存在！&quot;</span>)</span><br><span class="line">		fmt.Println(<span class="string">&quot;用户名不存在！&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> u.Password != password &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;密码错误&quot;</span>)</span><br><span class="line">			c.HTML(<span class="number">200</span>, <span class="string">&quot;login.html&quot;</span>, <span class="string">&quot;密码错误&quot;</span>)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line">			c.Redirect(<span class="number">301</span>, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	c.HTML(<span class="number">200</span>, <span class="string">&quot;index.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListUser</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	c.HTML(<span class="number">200</span>, <span class="string">&quot;index.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetPostIndex</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	posts := dao.Mgr.GetAllPost()</span><br><span class="line">	c.HTML(<span class="number">200</span>, <span class="string">&quot;postIndex.html&quot;</span>, posts)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddPost</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	title := c.PostForm(<span class="string">&quot;title&quot;</span>)</span><br><span class="line">	tag := c.PostForm(<span class="string">&quot;tag&quot;</span>)</span><br><span class="line">	content := c.PostForm(<span class="string">&quot;content&quot;</span>)</span><br><span class="line"></span><br><span class="line">	post := model.Post&#123;</span><br><span class="line">		Title:   title,</span><br><span class="line">		Tag:     tag,</span><br><span class="line">		Content: content,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	dao.Mgr.AddPost(&amp;post)</span><br><span class="line"></span><br><span class="line">	c.Redirect(<span class="number">302</span>, <span class="string">&quot;/post_index&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GoAddPost</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	c.HTML(<span class="number">200</span>, <span class="string">&quot;post.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建路由"><a href="#创建路由" class="headerlink" title="创建路由"></a>创建路由</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> router</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;blog/controller&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Start</span><span class="params">()</span></span> &#123;</span><br><span class="line">	e := gin.Default()</span><br><span class="line">	e.LoadHTMLGlob(<span class="string">&quot;templates/*&quot;</span>)</span><br><span class="line">	e.Static(<span class="string">&quot;/assets&quot;</span>, <span class="string">&quot;./assets&quot;</span>)</span><br><span class="line">	e.GET(<span class="string">&quot;/login&quot;</span>, controller.GoLogin)</span><br><span class="line">	e.POST(<span class="string">&quot;/login&quot;</span>, controller.Login)</span><br><span class="line"></span><br><span class="line">	e.GET(<span class="string">&quot;/&quot;</span>, controller.Index)</span><br><span class="line">	e.POST(<span class="string">&quot;/register&quot;</span>, controller.RegisterUser)</span><br><span class="line">	e.GET(<span class="string">&quot;/register&quot;</span>, controller.GoRegister)</span><br><span class="line">	e.GET(<span class="string">&quot;/post_index&quot;</span>, controller.GetPostIndex)</span><br><span class="line">	e.POST(<span class="string">&quot;/post&quot;</span>, controller.AddPost)</span><br><span class="line">	e.GET(<span class="string">&quot;/post&quot;</span>, controller.GoAddPost)</span><br><span class="line">	e.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Gin-博客项目-添加博客"><a href="#Gin-博客项目-添加博客" class="headerlink" title="Gin 博客项目-添加博客"></a>Gin 博客项目-添加博客</h1><h2 id="添加博客页面"><a href="#添加博客页面" class="headerlink" title="添加博客页面"></a>添加博客页面</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;/assets/css/bootstrap.min.css&quot;</span>&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;/assets/editormd/css/editormd.css&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;title&gt;添加博客&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">      &#123;&#123;template <span class="string">&quot;header&quot;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &lt;form action=<span class="string">&quot;/post&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class=<span class="string">&quot;col-md-8&quot;</span>&gt;</span><br><span class="line">              &lt;div id=<span class="string">&quot;test-editormd&quot;</span>&gt;</span><br><span class="line">                &lt;textarea style=<span class="string">&quot;display:none;&quot;</span> name=<span class="string">&quot;content&quot;</span>&gt;&lt;/textarea&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class=<span class="string">&quot;col-md-4 mt-3&quot;</span>&gt;</span><br><span class="line">              &lt;label <span class="keyword">for</span>=<span class="string">&quot;title&quot;</span> class=<span class="string">&quot;form-label&quot;</span>&gt;请输入标题&lt;/label&gt;</span><br><span class="line">              &lt;input <span class="keyword">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;title&quot;</span> class=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;title&quot;</span>&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">              &lt;label <span class="keyword">for</span>=<span class="string">&quot;tag&quot;</span> class=<span class="string">&quot;form-label&quot;</span>&gt;请输入标签&lt;/label&gt;</span><br><span class="line">              &lt;input <span class="keyword">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;tag&quot;</span>  class=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;tag&quot;</span>&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">              &lt;button <span class="keyword">type</span>=<span class="string">&quot;submit&quot;</span> class=<span class="string">&quot;btn btn-primary&quot;</span>&gt;添加&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> testEditor;</span><br><span class="line">      $(function() &#123;</span><br><span class="line">          testEditor = editormd(<span class="string">&quot;test-editormd&quot;</span>, &#123;</span><br><span class="line">              width   : <span class="string">&quot;100%&quot;</span>,</span><br><span class="line">              height  : <span class="number">450</span>,</span><br><span class="line">              syncScrolling : <span class="string">&quot;single&quot;</span>,</span><br><span class="line">              path    : <span class="string">&quot;assets/editormd/lib/&quot;</span>,</span><br><span class="line">              watch : <span class="literal">false</span>,</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Gin-博客项目-实现博客列表"><a href="#Gin-博客项目-实现博客列表" class="headerlink" title="Gin 博客项目-实现博客列表"></a>Gin 博客项目-实现博客列表</h1><h2 id="博客列表"><a href="#博客列表" class="headerlink" title="博客列表"></a>博客列表</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;/assets/css/bootstrap.min.css&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;title&gt;博客列表&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">      &#123;&#123;template <span class="string">&quot;header&quot;</span>&#125;&#125;</span><br><span class="line">      &lt;div class=<span class="string">&quot;row mt-3&quot;</span>&gt;</span><br><span class="line">        &#123;&#123;<span class="keyword">range</span> $post := . -&#125;&#125;</span><br><span class="line">        &lt;div class=<span class="string">&quot;col-md-6&quot;</span>&gt;</span><br><span class="line">          &lt;div class=<span class="string">&quot;row g-0 border rounded overflow-hidden flex-md-row mb-4</span></span><br><span class="line"><span class="string">            shadow-sm h-md-250 position-relative&quot;</span>&gt;</span><br><span class="line">            &lt;div class=<span class="string">&quot;col p-4 d-flex flex-column position-static&quot;</span>&gt;</span><br><span class="line">              &lt;strong class=<span class="string">&quot;d-inline-block mb-2 text-primary&quot;</span>&gt;分类&lt;/strong&gt;</span><br><span class="line">              &lt;h3 class=<span class="string">&quot;mb-0&quot;</span>&gt;&#123;&#123;$post.Title&#125;&#125;&lt;/h3&gt;</span><br><span class="line">              &lt;div class=<span class="string">&quot;mb-1 text-muted&quot;</span>&gt;Nov <span class="number">12</span>&lt;/div&gt;</span><br><span class="line">              &lt;p class=<span class="string">&quot;card-text mb-auto&quot;</span>&gt;&#123;&#123;$post.Content&#125;&#125;&lt;/p&gt;</span><br><span class="line">              &lt;a href=<span class="string">&quot;#&quot;</span> class=<span class="string">&quot;stretched-link&quot;</span>&gt;阅读更多...&lt;/a&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=<span class="string">&quot;col-auto d-none d-lg-block&quot;</span>&gt;</span><br><span class="line">              &lt;svg class=<span class="string">&quot;bd-placeholder-img&quot;</span> width=<span class="string">&quot;200&quot;</span> height=<span class="string">&quot;250&quot;</span></span><br><span class="line">                xmlns=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> role=<span class="string">&quot;img&quot;</span></span><br><span class="line">                aria-label=<span class="string">&quot;Placeholder: Thumbnail&quot;</span></span><br><span class="line">                preserveAspectRatio=<span class="string">&quot;xMidYMid slice&quot;</span> focusable=<span class="string">&quot;false&quot;</span>&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect</span><br><span class="line">                  width=<span class="string">&quot;100%&quot;</span> height=<span class="string">&quot;100%&quot;</span> fill=<span class="string">&quot;#55595c&quot;</span>&gt;&lt;/rect&gt;&lt;text x=<span class="string">&quot;50%&quot;</span></span><br><span class="line">                  y=<span class="string">&quot;50%&quot;</span> fill=<span class="string">&quot;#eceeef&quot;</span> dy=<span class="string">&quot;.3em&quot;</span>&gt;博客封面&lt;/text&gt;&lt;/svg&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &#123;&#123;- end&#125;&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Gin-博客项目-实现博客详细"><a href="#Gin-博客项目-实现博客详细" class="headerlink" title="Gin 博客项目-实现博客详细"></a>Gin 博客项目-实现博客详细</h1><h2 id="博客详细页面"><a href="#博客详细页面" class="headerlink" title="博客详细页面"></a>博客详细页面</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/assets/css/bootstrap.min.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/assets/editormd/css/editormd.css&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>博客详细<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;template &quot;header&quot;&#125;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-12&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;.Title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">          &#123;&#123;.Content&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="博客详细控制器"><a href="#博客详细控制器" class="headerlink" title="博客详细控制器"></a>博客详细控制器</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PostDetail</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	s := c.Query(<span class="string">&quot;pid&quot;</span>)</span><br><span class="line">	pid, _ := strconv.Atoi(s)</span><br><span class="line">	p := dao.Mgr.GetPost(pid)</span><br><span class="line"></span><br><span class="line">	content := blackfriday.Run([]<span class="keyword">byte</span>(p.Content))</span><br><span class="line"></span><br><span class="line">	c.HTML(<span class="number">200</span>, <span class="string">&quot;detail.html&quot;</span>, gin.H&#123;</span><br><span class="line">		<span class="string">&quot;Title&quot;</span>:   p.Title,</span><br><span class="line">		<span class="string">&quot;Content&quot;</span>: template.HTML(content),</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="beego-起步"><a href="#beego-起步" class="headerlink" title="beego 起步"></a>beego 起步</h1><h2 id="下载安装-beego"><a href="#下载安装-beego" class="headerlink" title="下载安装 beego"></a>下载安装 beego</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> get github.com/astaxie/beego</span><br></pre></td></tr></table></figure>

<h2 id="beego-命令行工具-bee"><a href="#beego-命令行工具-bee" class="headerlink" title="beego 命令行工具 bee"></a>beego 命令行工具 bee</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> get github.com/beego/bee</span><br></pre></td></tr></table></figure>

<h2 id="第一个-beego-项目"><a href="#第一个-beego-项目" class="headerlink" title="第一个 beego 项目"></a>第一个 beego 项目</h2><ol>
<li>使用 bee 命令创建项目<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bee new myproject</span><br></pre></td></tr></table></figure></li>
<li>项目目录结构<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">myproject</span><br><span class="line">├── conf</span><br><span class="line">│   └── app.conf</span><br><span class="line">├── controllers</span><br><span class="line">│   └── <span class="keyword">default</span>.<span class="keyword">go</span></span><br><span class="line">├── main.<span class="keyword">go</span></span><br><span class="line">├── models</span><br><span class="line">├── routers</span><br><span class="line">│   └── router.<span class="keyword">go</span></span><br><span class="line">├── static</span><br><span class="line">│   ├── css</span><br><span class="line">│   ├── img</span><br><span class="line">│   └── js</span><br><span class="line">├── tests</span><br><span class="line">│   └── default_test.<span class="keyword">go</span></span><br><span class="line">└── views</span><br><span class="line">    └── index.tpl</span><br></pre></td></tr></table></figure></li>
<li>运行项目<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">bee run</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="beego-restful-api"><a href="#beego-restful-api" class="headerlink" title="beego restful api"></a>beego restful api</h1><h2 id="创建-restful-api-项目"><a href="#创建-restful-api-项目" class="headerlink" title="创建 restful api 项目"></a>创建 restful api 项目</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bee api apiproject</span><br></pre></td></tr></table></figure>

<h2 id="创建模型-2"><a href="#创建模型-2" class="headerlink" title="创建模型"></a>创建模型</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;errors&quot;</span></span><br><span class="line">	<span class="string">&quot;strconv&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	UserList <span class="keyword">map</span>[<span class="keyword">string</span>]*User</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	UserList = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*User)</span><br><span class="line">	u := User&#123;<span class="string">&quot;user_11111&quot;</span>, <span class="string">&quot;astaxie&quot;</span>, <span class="string">&quot;11111&quot;</span>, Profile&#123;<span class="string">&quot;male&quot;</span>, <span class="number">20</span>, <span class="string">&quot;Singapore&quot;</span>, <span class="string">&quot;astaxie@gmail.com&quot;</span>&#125;&#125;</span><br><span class="line">	UserList[<span class="string">&quot;user_11111&quot;</span>] = &amp;u</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id       <span class="keyword">string</span></span><br><span class="line">	Username <span class="keyword">string</span></span><br><span class="line">	Password <span class="keyword">string</span></span><br><span class="line">	Profile  Profile</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Profile <span class="keyword">struct</span> &#123;</span><br><span class="line">	Gender  <span class="keyword">string</span></span><br><span class="line">	Age     <span class="keyword">int</span></span><br><span class="line">	Address <span class="keyword">string</span></span><br><span class="line">	Email   <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddUser</span><span class="params">(u User)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	u.Id = <span class="string">&quot;user_&quot;</span> + strconv.FormatInt(time.Now().UnixNano(), <span class="number">10</span>)</span><br><span class="line">	UserList[u.Id] = &amp;u</span><br><span class="line">	<span class="keyword">return</span> u.Id</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUser</span><span class="params">(uid <span class="keyword">string</span>)</span> <span class="params">(u *User, err error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> u, ok := UserList[uid]; ok &#123;</span><br><span class="line">		<span class="keyword">return</span> u, <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;User not exists&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetAllUsers</span><span class="params">()</span> <span class="title">map</span>[<span class="title">string</span>]*<span class="title">User</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> UserList</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UpdateUser</span><span class="params">(uid <span class="keyword">string</span>, uu *User)</span> <span class="params">(a *User, err error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> u, ok := UserList[uid]; ok &#123;</span><br><span class="line">		<span class="keyword">if</span> uu.Username != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">			u.Username = uu.Username</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> uu.Password != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">			u.Password = uu.Password</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> uu.Profile.Age != <span class="number">0</span> &#123;</span><br><span class="line">			u.Profile.Age = uu.Profile.Age</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> uu.Profile.Address != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">			u.Profile.Address = uu.Profile.Address</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> uu.Profile.Gender != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">			u.Profile.Gender = uu.Profile.Gender</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> uu.Profile.Email != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">			u.Profile.Email = uu.Profile.Email</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> u, <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;User Not Exist&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Login</span><span class="params">(username, password <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> _, u := <span class="keyword">range</span> UserList &#123;</span><br><span class="line">		<span class="keyword">if</span> u.Username == username &amp;&amp; u.Password == password &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DeleteUser</span><span class="params">(uid <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	<span class="built_in">delete</span>(UserList, uid)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建控制器-controller"><a href="#创建控制器-controller" class="headerlink" title="创建控制器 controller"></a>创建控制器 controller</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controllers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;apiproject/models&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/astaxie/beego&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Operations about Users</span></span><br><span class="line"><span class="keyword">type</span> UserController <span class="keyword">struct</span> &#123;</span><br><span class="line">	beego.Controller</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Title CreateUser</span></span><br><span class="line"><span class="comment">// @Description create users</span></span><br><span class="line"><span class="comment">// @Param	body		body 	models.User	true		&quot;body for user content&quot;</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;int&#125; models.User.Id</span></span><br><span class="line"><span class="comment">// @Failure 403 body is empty</span></span><br><span class="line"><span class="comment">// @router / [post]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserController)</span> <span class="title">Post</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> user models.User</span><br><span class="line">	json.Unmarshal(u.Ctx.Input.RequestBody, &amp;user)</span><br><span class="line">	uid := models.AddUser(user)</span><br><span class="line">	u.Data[<span class="string">&quot;json&quot;</span>] = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">&quot;uid&quot;</span>: uid&#125;</span><br><span class="line">	u.ServeJSON()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Title GetAll</span></span><br><span class="line"><span class="comment">// @Description get all Users</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;object&#125; models.User</span></span><br><span class="line"><span class="comment">// @router / [get]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserController)</span> <span class="title">GetAll</span><span class="params">()</span></span> &#123;</span><br><span class="line">	users := models.GetAllUsers()</span><br><span class="line">	u.Data[<span class="string">&quot;json&quot;</span>] = users</span><br><span class="line">	u.ServeJSON()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Title Get</span></span><br><span class="line"><span class="comment">// @Description get user by uid</span></span><br><span class="line"><span class="comment">// @Param	uid		path 	string	true		&quot;The key for staticblock&quot;</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;object&#125; models.User</span></span><br><span class="line"><span class="comment">// @Failure 403 :uid is empty</span></span><br><span class="line"><span class="comment">// @router /:uid [get]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserController)</span> <span class="title">Get</span><span class="params">()</span></span> &#123;</span><br><span class="line">	uid := u.GetString(<span class="string">&quot;:uid&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> uid != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		user, err := models.GetUser(uid)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			u.Data[<span class="string">&quot;json&quot;</span>] = err.Error()</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			u.Data[<span class="string">&quot;json&quot;</span>] = user</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	u.ServeJSON()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Title Update</span></span><br><span class="line"><span class="comment">// @Description update the user</span></span><br><span class="line"><span class="comment">// @Param	uid		path 	string	true		&quot;The uid you want to update&quot;</span></span><br><span class="line"><span class="comment">// @Param	body		body 	models.User	true		&quot;body for user content&quot;</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;object&#125; models.User</span></span><br><span class="line"><span class="comment">// @Failure 403 :uid is not int</span></span><br><span class="line"><span class="comment">// @router /:uid [put]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserController)</span> <span class="title">Put</span><span class="params">()</span></span> &#123;</span><br><span class="line">	uid := u.GetString(<span class="string">&quot;:uid&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> uid != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		<span class="keyword">var</span> user models.User</span><br><span class="line">		json.Unmarshal(u.Ctx.Input.RequestBody, &amp;user)</span><br><span class="line">		uu, err := models.UpdateUser(uid, &amp;user)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			u.Data[<span class="string">&quot;json&quot;</span>] = err.Error()</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			u.Data[<span class="string">&quot;json&quot;</span>] = uu</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	u.ServeJSON()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Title Delete</span></span><br><span class="line"><span class="comment">// @Description delete the user</span></span><br><span class="line"><span class="comment">// @Param	uid		path 	string	true		&quot;The uid you want to delete&quot;</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;string&#125; delete success!</span></span><br><span class="line"><span class="comment">// @Failure 403 uid is empty</span></span><br><span class="line"><span class="comment">// @router /:uid [delete]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserController)</span> <span class="title">Delete</span><span class="params">()</span></span> &#123;</span><br><span class="line">	uid := u.GetString(<span class="string">&quot;:uid&quot;</span>)</span><br><span class="line">	models.DeleteUser(uid)</span><br><span class="line">	u.Data[<span class="string">&quot;json&quot;</span>] = <span class="string">&quot;delete success!&quot;</span></span><br><span class="line">	u.ServeJSON()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Title Login</span></span><br><span class="line"><span class="comment">// @Description Logs user into the system</span></span><br><span class="line"><span class="comment">// @Param	username		query 	string	true		&quot;The username for login&quot;</span></span><br><span class="line"><span class="comment">// @Param	password		query 	string	true		&quot;The password for login&quot;</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;string&#125; login success</span></span><br><span class="line"><span class="comment">// @Failure 403 user not exist</span></span><br><span class="line"><span class="comment">// @router /login [get]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserController)</span> <span class="title">Login</span><span class="params">()</span></span> &#123;</span><br><span class="line">	username := u.GetString(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">	password := u.GetString(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> models.Login(username, password) &#123;</span><br><span class="line">		u.Data[<span class="string">&quot;json&quot;</span>] = <span class="string">&quot;login success&quot;</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		u.Data[<span class="string">&quot;json&quot;</span>] = <span class="string">&quot;user not exist&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">	u.ServeJSON()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Title logout</span></span><br><span class="line"><span class="comment">// @Description Logs out current logged in user session</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;string&#125; logout success</span></span><br><span class="line"><span class="comment">// @router /logout [get]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserController)</span> <span class="title">Logout</span><span class="params">()</span></span> &#123;</span><br><span class="line">	u.Data[<span class="string">&quot;json&quot;</span>] = <span class="string">&quot;logout success&quot;</span></span><br><span class="line">	u.ServeJSON()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建路由-1"><a href="#创建路由-1" class="headerlink" title="创建路由"></a>创建路由</h2><blockquote>
<p>路由在控制器方法中有注解</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @APIVersion 1.0.0</span></span><br><span class="line"><span class="comment">// @Title beego Test API</span></span><br><span class="line"><span class="comment">// @Description beego has a very cool tools to autogenerate documents for your API</span></span><br><span class="line"><span class="comment">// @Contact astaxie@gmail.com</span></span><br><span class="line"><span class="comment">// @TermsOfServiceUrl http://beego.me/</span></span><br><span class="line"><span class="comment">// @License Apache 2.0</span></span><br><span class="line"><span class="comment">// @LicenseUrl http://www.apache.org/licenses/LICENSE-2.0.html</span></span><br><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="comment">// &quot;apiproject/controllers&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;apiproject/controllers&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/astaxie/beego&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ns := beego.NewNamespace(<span class="string">&quot;/v1&quot;</span>,</span><br><span class="line">		beego.NSNamespace(<span class="string">&quot;/object&quot;</span>,</span><br><span class="line">			beego.NSInclude(</span><br><span class="line">				&amp;controllers.ObjectController&#123;&#125;,</span><br><span class="line">			),</span><br><span class="line">		),</span><br><span class="line">		beego.NSNamespace(<span class="string">&quot;/user&quot;</span>,</span><br><span class="line">			beego.NSInclude(</span><br><span class="line">				&amp;controllers.UserController&#123;&#125;,</span><br><span class="line">			),</span><br><span class="line">		),</span><br><span class="line">	)</span><br><span class="line">	beego.AddNamespace(ns)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="运行并生成-swagger"><a href="#运行并生成-swagger" class="headerlink" title="运行并生成 swagger"></a>运行并生成 swagger</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bee run -gendoc=true -downdoc=true</span><br></pre></td></tr></table></figure>

<h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/swagger/</span><br></pre></td></tr></table></figure>

<h1 id="beego-从零开始写一个-beego-项目"><a href="#beego-从零开始写一个-beego-项目" class="headerlink" title="beego 从零开始写一个 beego 项目"></a>beego 从零开始写一个 beego 项目</h1><p>为了更好的理解 beego 框架，我们不使用 bee 工具，从零开始来写一个项目，实现步骤如下：</p>
<h2 id="1-创建项目结构"><a href="#1-创建项目结构" class="headerlink" title="1. 创建项目结构"></a>1. 创建项目结构</h2><p>创建一个文件夹，例如：beegopro01，并初始化。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go mod init beegopro01</span><br></pre></td></tr></table></figure>

<p>项目结构如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|-controller</span><br><span class="line">|-router</span><br><span class="line">|-views</span><br></pre></td></tr></table></figure>

<h2 id="2-创建-controller"><a href="#2-创建-controller" class="headerlink" title="2. 创建 controller"></a>2. 创建 controller</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controller</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/astaxie/beego&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserControler <span class="keyword">struct</span> &#123;</span><br><span class="line">	beego.Controller</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *UserControler)</span> <span class="title">Get</span><span class="params">()</span></span> &#123;</span><br><span class="line">	c.Data[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;老郭&quot;</span></span><br><span class="line">	c.Data[<span class="string">&quot;site&quot;</span>] = <span class="string">&quot;多课网&quot;</span></span><br><span class="line">	c.TplName = <span class="string">&quot;index.tpl&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-创建-router-路由"><a href="#3-创建-router-路由" class="headerlink" title="3. 创建 router 路由"></a>3. 创建 router 路由</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;myproject/controllers&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/astaxie/beego&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    beego.Router(<span class="string">&quot;/&quot;</span>, &amp;controllers.MainController&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-创建模板文件-index-tpl"><a href="#4-创建模板文件-index-tpl" class="headerlink" title="4. 创建模板文件 index.tpl"></a>4. 创建模板文件 index.tpl</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>beego 项目<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Name: &#123;&#123;.name&#125;&#125; <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    Site：&#123;&#123;.site&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-main-go"><a href="#5-main-go" class="headerlink" title="5. main.go"></a>5. main.go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	_ <span class="string">&quot;beegopro01/router&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/astaxie/beego&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	beego.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="beego-orm-起步"><a href="#beego-orm-起步" class="headerlink" title="beego orm 起步"></a>beego orm 起步</h1><h2 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go get github.com/astaxie/beego/orm</span><br></pre></td></tr></table></figure>

<h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/astaxie/beego/orm&quot;</span></span><br><span class="line"></span><br><span class="line">	_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐射表结构</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id   <span class="keyword">int</span></span><br><span class="line">	Name <span class="keyword">string</span> <span class="string">`orm:&quot;size(100)&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 连接到数据库</span></span><br><span class="line">	orm.RegisterDataBase(<span class="string">&quot;default&quot;</span>, <span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;root:123456@/beego_db?charset=utf8&quot;</span>)</span><br><span class="line">	<span class="comment">// 注册模型</span></span><br><span class="line">	orm.RegisterModel(<span class="built_in">new</span>(User))</span><br><span class="line">	<span class="comment">// 创建表</span></span><br><span class="line">	orm.RunSyncdb(<span class="string">&quot;default&quot;</span>, <span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line">	o := orm.NewOrm()</span><br><span class="line">	o.Insert(&amp;User&#123;Name: <span class="string">&quot;老郭&quot;</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">find</span><span class="params">()</span></span> &#123;</span><br><span class="line">	o := orm.NewOrm()</span><br><span class="line">	user := User&#123;Id: <span class="number">101</span>&#125;</span><br><span class="line">	o.Read(&amp;user)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;user: %v\n&quot;</span>, user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">()</span></span> &#123;</span><br><span class="line">	o := orm.NewOrm()</span><br><span class="line">	user := User&#123;Id: <span class="number">101</span>&#125;</span><br><span class="line">	o.Read(&amp;user)</span><br><span class="line">	user.Name = <span class="string">&quot;多课网-老郭&quot;</span></span><br><span class="line">	o.Update(&amp;user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">del</span><span class="params">()</span></span> &#123;</span><br><span class="line">	o := orm.NewOrm()</span><br><span class="line">	user := User&#123;Id: <span class="number">101</span>&#125;</span><br><span class="line">	o.Read(&amp;user)</span><br><span class="line">	o.Delete(&amp;user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// add()</span></span><br><span class="line">	<span class="comment">// update()</span></span><br><span class="line">	<span class="comment">// find()</span></span><br><span class="line">	<span class="comment">// update()</span></span><br><span class="line">	del()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>WEB</tag>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang学习笔记五-标准库</title>
    <url>/posts/65019/</url>
    <content><![CDATA[<h1 id="Golang标准库os模块-文件目录相关"><a href="#Golang标准库os模块-文件目录相关" class="headerlink" title="Golang标准库os模块-文件目录相关"></a>Golang标准库os模块-文件目录相关</h1><p>os标准库实现了平台（操作系统）无关的编程接口。</p>
<p><a href="https://pkg.go.dev/std">https://pkg.go.dev/std</a></p>
<span id="more"></span>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f, err := os.Create(<span class="string">&quot;test.txt&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;f: %v\n&quot;</span>, f)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建目录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createDir</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 创建单个目录</span></span><br><span class="line">	<span class="comment">/* err := os.Mkdir(&quot;test&quot;, os.ModePerm)</span></span><br><span class="line"><span class="comment">	if err != nil &#123;</span></span><br><span class="line"><span class="comment">		fmt.Printf(&quot;err: %v\n&quot;, err)</span></span><br><span class="line"><span class="comment">	&#125; */</span></span><br><span class="line">	err := os.MkdirAll(<span class="string">&quot;test/a/b&quot;</span>, os.ModePerm)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除目录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeDir</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">/* err := os.Remove(&quot;test.txt&quot;)</span></span><br><span class="line"><span class="comment">	if err != nil &#123;</span></span><br><span class="line"><span class="comment">		fmt.Printf(&quot;err: %v\n&quot;, err)</span></span><br><span class="line"><span class="comment">	&#125; */</span></span><br><span class="line"></span><br><span class="line">	err := os.RemoveAll(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得工作目录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getWd</span><span class="params">()</span></span> &#123;</span><br><span class="line">	dir, err := os.Getwd()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;dir: %v\n&quot;</span>, dir)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改工作目录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">chWd</span><span class="params">()</span></span> &#123;</span><br><span class="line">	err := os.Chdir(<span class="string">&quot;d:/&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(os.Getwd())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得临时目录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getTemp</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := os.TempDir()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重命名文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">renameFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">	err := os.Rename(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test2.txt&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">	b, err := os.ReadFile(<span class="string">&quot;test2.txt&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, <span class="keyword">string</span>(b[:]))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := <span class="string">&quot;hello world&quot;</span></span><br><span class="line">	os.WriteFile(<span class="string">&quot;test2.txt&quot;</span>, []<span class="keyword">byte</span>(s), os.ModePerm)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// createFile()</span></span><br><span class="line">	<span class="comment">// createDir()</span></span><br><span class="line">	<span class="comment">// removeDir()</span></span><br><span class="line">	<span class="comment">// removeDir()</span></span><br><span class="line">	<span class="comment">// getWd()</span></span><br><span class="line">	<span class="comment">// chWd()</span></span><br><span class="line">	<span class="comment">// renameFile()</span></span><br><span class="line">	<span class="comment">// readFile()</span></span><br><span class="line">	<span class="comment">// writeFile()</span></span><br><span class="line">	<span class="comment">// getTemp()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang标准库os模块-File文件读操作"><a href="#Golang标准库os模块-File文件读操作" class="headerlink" title="Golang标准库os模块-File文件读操作"></a>Golang标准库os模块-File文件读操作</h1><p>这里结束和 <code>File</code>结构体相关的文件读操作</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开关闭文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">openCloseFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 只能读</span></span><br><span class="line">	f, _ := os.Open(<span class="string">&quot;a.txt&quot;</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;f.Name(): %v\n&quot;</span>, f.Name())</span><br><span class="line">	<span class="comment">// 根据第二个参数 可以读写或者创建</span></span><br><span class="line">	f2, _ := os.OpenFile(<span class="string">&quot;a1.txt&quot;</span>, os.O_RDWR|os.O_CREATE, <span class="number">0755</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;f2.Name(): %v\n&quot;</span>, f2.Name())</span><br><span class="line"></span><br><span class="line">	err := f.Close()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">	err2 := f2.Close()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;err2: %v\n&quot;</span>, err2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 等价于：OpenFile(name, O_RDWR|O_CREATE|O_TRUNC, 0666)</span></span><br><span class="line">	f, _ := os.Create(<span class="string">&quot;a2.txt&quot;</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;f.Name(): %v\n&quot;</span>, f.Name())</span><br><span class="line">	<span class="comment">// 第一个参数 目录默认：Temp 第二个参数 文件名前缀</span></span><br><span class="line">	f2, _ := os.CreateTemp(<span class="string">&quot;&quot;</span>, <span class="string">&quot;temp&quot;</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;f2.Name(): %v\n&quot;</span>, f2.Name())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readOps</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 循环读取</span></span><br><span class="line">	<span class="comment">/* 	f, _ := os.Open(&quot;a.txt&quot;)</span></span><br><span class="line"><span class="comment">	   	for &#123;</span></span><br><span class="line"><span class="comment">	   		buf := make([]byte, 6)</span></span><br><span class="line"><span class="comment">	   		n, err := f.Read(buf)</span></span><br><span class="line"><span class="comment">	   		fmt.Println(string(buf))</span></span><br><span class="line"><span class="comment">	   		fmt.Printf(&quot;n: %v\n&quot;, n)</span></span><br><span class="line"><span class="comment">	   		if err == io.EOF &#123;</span></span><br><span class="line"><span class="comment">	   			break</span></span><br><span class="line"><span class="comment">	   		&#125;</span></span><br><span class="line"><span class="comment">	   	&#125;</span></span><br><span class="line"><span class="comment">	   	f.Close()</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="comment">/* buf := make([]byte, 10)</span></span><br><span class="line"><span class="comment">	f2, _ := os.Open(&quot;a.txt&quot;)</span></span><br><span class="line"><span class="comment">	// 从5开始读10个字节</span></span><br><span class="line"><span class="comment">	n, _ := f2.ReadAt(buf, 5)</span></span><br><span class="line"><span class="comment">	fmt.Printf(&quot;n: %v\n&quot;, n)</span></span><br><span class="line"><span class="comment">	fmt.Printf(&quot;string(buf): %v\n&quot;, string(buf))</span></span><br><span class="line"><span class="comment">	f2.Close() */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 测试 a目录下面有b和c目录</span></span><br><span class="line">	<span class="comment">/* f, _ := os.Open(&quot;a&quot;)</span></span><br><span class="line"><span class="comment">	de, _ := f.ReadDir(-1)</span></span><br><span class="line"><span class="comment">	for _, v := range de &#123;</span></span><br><span class="line"><span class="comment">		fmt.Printf(&quot;v.IsDir(): %v\n&quot;, v.IsDir())</span></span><br><span class="line"><span class="comment">		fmt.Printf(&quot;v.Name(): %v\n&quot;, v.Name())</span></span><br><span class="line"><span class="comment">	&#125; */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 定位</span></span><br><span class="line">	f, _ := os.Open(<span class="string">&quot;a.txt&quot;</span>)</span><br><span class="line">	f.Seek(<span class="number">3</span>, <span class="number">0</span>)</span><br><span class="line">	buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">10</span>)</span><br><span class="line">	n, _ := f.Read(buf)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;n: %v\n&quot;</span>, n)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;string(buf): %v\n&quot;</span>, <span class="keyword">string</span>(buf))</span><br><span class="line">	f.Close()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// openCloseFile()</span></span><br><span class="line">	<span class="comment">// createFile()</span></span><br><span class="line">	readOps()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang标准库os模块-File文件写操作"><a href="#Golang标准库os模块-File文件写操作" class="headerlink" title="Golang标准库os模块-File文件写操作"></a>Golang标准库os模块-File文件写操作</h1><p>这里结束和 <code>File</code>结构体相关的文件写操作</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开关闭文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">openCloseFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 只能读</span></span><br><span class="line">	f, _ := os.Open(<span class="string">&quot;a.txt&quot;</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;f.Name(): %v\n&quot;</span>, f.Name())</span><br><span class="line">	<span class="comment">// 根据第二个参数 可以读写或者创建</span></span><br><span class="line">	f2, _ := os.OpenFile(<span class="string">&quot;a1.txt&quot;</span>, os.O_RDWR|os.O_CREATE, <span class="number">0755</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;f2.Name(): %v\n&quot;</span>, f2.Name())</span><br><span class="line"></span><br><span class="line">	err := f.Close()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">	err2 := f2.Close()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;err2: %v\n&quot;</span>, err2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 等价于：OpenFile(name, O_RDWR|O_CREATE|O_TRUNC, 0666)</span></span><br><span class="line">	f, _ := os.Create(<span class="string">&quot;a2.txt&quot;</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;f.Name(): %v\n&quot;</span>, f.Name())</span><br><span class="line">	<span class="comment">// 第一个参数 目录默认：Temp 第二个参数 文件名前缀</span></span><br><span class="line">	f2, _ := os.CreateTemp(<span class="string">&quot;&quot;</span>, <span class="string">&quot;temp&quot;</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;f2.Name(): %v\n&quot;</span>, f2.Name())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readOps</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 循环读取</span></span><br><span class="line">	<span class="comment">/* 	f, _ := os.Open(&quot;a.txt&quot;)</span></span><br><span class="line"><span class="comment">	   	for &#123;</span></span><br><span class="line"><span class="comment">	   		buf := make([]byte, 6)</span></span><br><span class="line"><span class="comment">	   		n, err := f.Read(buf)</span></span><br><span class="line"><span class="comment">	   		fmt.Println(string(buf))</span></span><br><span class="line"><span class="comment">	   		fmt.Printf(&quot;n: %v\n&quot;, n)</span></span><br><span class="line"><span class="comment">	   		if err == io.EOF &#123;</span></span><br><span class="line"><span class="comment">	   			break</span></span><br><span class="line"><span class="comment">	   		&#125;</span></span><br><span class="line"><span class="comment">	   	&#125;</span></span><br><span class="line"><span class="comment">	   	f.Close()</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="comment">/* buf := make([]byte, 10)</span></span><br><span class="line"><span class="comment">	f2, _ := os.Open(&quot;a.txt&quot;)</span></span><br><span class="line"><span class="comment">	// 从5开始读10个字节</span></span><br><span class="line"><span class="comment">	n, _ := f2.ReadAt(buf, 5)</span></span><br><span class="line"><span class="comment">	fmt.Printf(&quot;n: %v\n&quot;, n)</span></span><br><span class="line"><span class="comment">	fmt.Printf(&quot;string(buf): %v\n&quot;, string(buf))</span></span><br><span class="line"><span class="comment">	f2.Close() */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 测试 a目录下面有b和c目录</span></span><br><span class="line">	<span class="comment">/* f, _ := os.Open(&quot;a&quot;)</span></span><br><span class="line"><span class="comment">	de, _ := f.ReadDir(-1)</span></span><br><span class="line"><span class="comment">	for _, v := range de &#123;</span></span><br><span class="line"><span class="comment">		fmt.Printf(&quot;v.IsDir(): %v\n&quot;, v.IsDir())</span></span><br><span class="line"><span class="comment">		fmt.Printf(&quot;v.Name(): %v\n&quot;, v.Name())</span></span><br><span class="line"><span class="comment">	&#125; */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 定位</span></span><br><span class="line">	f, _ := os.Open(<span class="string">&quot;a.txt&quot;</span>)</span><br><span class="line">	f.Seek(<span class="number">3</span>, <span class="number">0</span>)</span><br><span class="line">	buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">10</span>)</span><br><span class="line">	n, _ := f.Read(buf)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;n: %v\n&quot;</span>, n)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;string(buf): %v\n&quot;</span>, <span class="keyword">string</span>(buf))</span><br><span class="line">	f.Close()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// openCloseFile()</span></span><br><span class="line">	<span class="comment">// createFile()</span></span><br><span class="line">	readOps()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="Golang标准库os包进程相关操作"><a href="#Golang标准库os包进程相关操作" class="headerlink" title="Golang标准库os包进程相关操作"></a>Golang标准库os包进程相关操作</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 获得当前正在运行的进程id</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;os.Getpid(): %v\n&quot;</span>, os.Getpid())</span><br><span class="line">	<span class="comment">// 父id</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;os.Getppid(): %v\n&quot;</span>, os.Getppid())</span><br><span class="line"></span><br><span class="line">	<span class="comment">//设置新进程的属性</span></span><br><span class="line">	attr := &amp;os.ProcAttr&#123;</span><br><span class="line">		<span class="comment">//files指定新进程继承的活动文件对象</span></span><br><span class="line">		<span class="comment">//前三个分别为，标准输入、标准输出、标准错误输出</span></span><br><span class="line">		Files: []*os.File&#123;os.Stdin, os.Stdout, os.Stderr&#125;,</span><br><span class="line">		<span class="comment">//新进程的环境变量</span></span><br><span class="line">		Env: os.Environ(),</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//开始一个新进程</span></span><br><span class="line">	p, err := os.StartProcess(<span class="string">&quot;C:\\Windows\\System32\\notepad.exe&quot;</span>, []<span class="keyword">string</span>&#123;<span class="string">&quot;C:\\Windows\\System32\\notepad.exe&quot;</span>, <span class="string">&quot;D:\\a.txt&quot;</span>&#125;, attr)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(p)</span><br><span class="line">	fmt.Println(<span class="string">&quot;进程ID：&quot;</span>, p.Pid)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//通过进程ID查找进程</span></span><br><span class="line">	p2, _ := os.FindProcess(p.Pid)</span><br><span class="line">	fmt.Println(p2)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//等待10秒，执行函数</span></span><br><span class="line">	time.AfterFunc(time.Second*<span class="number">10</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="comment">//向p进程发送退出信号</span></span><br><span class="line">		p.Signal(os.Kill)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//等待进程p的退出，返回进程状态</span></span><br><span class="line">	ps, _ := p.Wait()</span><br><span class="line">	fmt.Println(ps.String())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang标准库os包和环境相关的方法"><a href="#Golang标准库os包和环境相关的方法" class="headerlink" title="Golang标准库os包和环境相关的方法"></a>Golang标准库os包和环境相关的方法</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 获得所有环境变量</span></span><br><span class="line">	s := os.Environ()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">	<span class="comment">// 获得某个环境变量</span></span><br><span class="line">	s2 := os.Getenv(<span class="string">&quot;GOPATH&quot;</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;s2: %v\n&quot;</span>, s2)</span><br><span class="line">	<span class="comment">// 设置环境变量</span></span><br><span class="line">	os.Setenv(<span class="string">&quot;env1&quot;</span>, <span class="string">&quot;env1&quot;</span>)</span><br><span class="line">	s2 = os.Getenv(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;s2: %v\n&quot;</span>, s2)</span><br><span class="line">	fmt.Println(<span class="string">&quot;-----------&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 查找</span></span><br><span class="line">	s3, b := os.LookupEnv(<span class="string">&quot;env1&quot;</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, b)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;s3: %v\n&quot;</span>, s3)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 替换</span></span><br><span class="line">	os.Setenv(<span class="string">&quot;NAME&quot;</span>, <span class="string">&quot;gopher&quot;</span>)</span><br><span class="line">	os.Setenv(<span class="string">&quot;BURROW&quot;</span>, <span class="string">&quot;/usr/gopher&quot;</span>)</span><br><span class="line"></span><br><span class="line">	fmt.Println(os.ExpandEnv(<span class="string">&quot;$NAME lives in $&#123;BURROW&#125;.&quot;</span>))</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 清空环境变量</span></span><br><span class="line">	<span class="comment">// os.Clearenv()</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang标准库io包"><a href="#Golang标准库io包" class="headerlink" title="Golang标准库io包"></a>Golang标准库io包</h1><p>Go 语言中，为了方便开发者使用，将 IO 操作封装在了如下几个包中：</p>
<ul>
<li>io 为 IO 原语（I/O primitives）提供基本的接口 os File Reader Writer</li>
<li>io/ioutil 封装一些实用的 I/O 函数</li>
<li>fmt 实现格式化 I/O，类似 C 语言中的 printf 和 scanf format fmt</li>
<li>bufio 实现带缓冲I/O</li>
</ul>
<h2 id="io-—-基本的-IO-接口"><a href="#io-—-基本的-IO-接口" class="headerlink" title="io — 基本的 IO 接口"></a>io — 基本的 IO 接口</h2><p>在 io 包中最重要的是两个接口：Reader 和 Writer 接口。本章所提到的各种 IO 包，都跟这两个接口有关，也就是说，只要实现了这两个接口，它就有了 IO 的功能</p>
<h3 id="Reader-接口"><a href="#Reader-接口" class="headerlink" title="Reader 接口"></a>Reader 接口</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</span><br><span class="line">    Read(p []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Writer-接口"><a href="#Writer-接口" class="headerlink" title="Writer 接口"></a>Writer 接口</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Writer <span class="keyword">interface</span> &#123;</span><br><span class="line">    Write(p []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="那些类型实现了Reader和Writer接口"><a href="#那些类型实现了Reader和Writer接口" class="headerlink" title="那些类型实现了Reader和Writer接口"></a>那些类型实现了Reader和Writer接口</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">os.File 同时实现了 io.Reader 和 io.Writer</span><br><span class="line">strings.Reader 实现了 io.Reader</span><br><span class="line">bufio.Reader/Writer 分别实现了 io.Reader 和 io.Writer</span><br><span class="line">bytes.Buffer 同时实现了 io.Reader 和 io.Writer</span><br><span class="line">bytes.Reader 实现了 io.Reader</span><br><span class="line">compress/gzip.Reader/Writer 分别实现了 io.Reader 和 io.Writer</span><br><span class="line">crypto/cipher.StreamReader/StreamWriter 分别实现了 io.Reader 和 io.Writer</span><br><span class="line">crypto/tls.Conn 同时实现了 io.Reader 和 io.Writer</span><br><span class="line">encoding/csv.Reader/Writer 分别实现了 io.Reader 和 io.Writer</span><br></pre></td></tr></table></figure>


<h1 id="Golang标准库ioutil包"><a href="#Golang标准库ioutil包" class="headerlink" title="Golang标准库ioutil包"></a>Golang标准库ioutil包</h1><p>封装一些实用的 I/O 函数</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>ReadAll</td>
<td>读取数据，返回读到的字节 slice</td>
</tr>
<tr>
<td>ReadDir</td>
<td>读取一个目录，返回目录入口数组 []os.FileInfo</td>
</tr>
<tr>
<td>ReadFile</td>
<td>读一个文件，返回文件内容（字节slice）</td>
</tr>
<tr>
<td>WriteFile</td>
<td>根据文件路径，写入字节slice</td>
</tr>
<tr>
<td>TempDir</td>
<td>在一个目录中创建指定前缀名的临时目录，返回新临时目录的路径</td>
</tr>
<tr>
<td>TempFile</td>
<td>在一个目录中创建指定前缀名的临时文件，返回 os.File</td>
</tr>
</tbody></table>
<h1 id="Golang标准库fmt包"><a href="#Golang标准库fmt包" class="headerlink" title="Golang标准库fmt包"></a>Golang标准库fmt包</h1><p>fmt包实现了格式化的I/O函数，这点类似Ｃ语言中的printf和scanf，但是更加简单． format</p>
<h3 id="Scanning"><a href="#Scanning" class="headerlink" title="Scanning"></a>Scanning</h3><p>一组类似的函数通过扫描已格式化的文本来产生值。</p>
<ol>
<li>Scan、Scanf 和 Scanln 从os.Stdin 中读取；</li>
<li>Fscan、Fscanf 和 Fscanln 从指定的 io.Reader 中读取；</li>
<li>Sscan、Sscanf 和 Sscanln 从实参字符串中读取。</li>
<li>Scanln、Fscanln 和 Sscanln在换行符处停止扫描，且需要条目紧随换行符之后；</li>
<li>Scanf、Fscanf 和 Sscanf需要输入换行符来匹配格式中的换行符；其它函数则将换行符视为空格。</li>
<li>Scanf、Fscanf 和 Sscanf 根据格式字符串解析实参，类似于 Printf。例如，%x会将一个整数扫描为十六进制数，而 %v 则会扫描该值的默认表现格式。</li>
</ol>
<p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// scan</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> age <span class="keyword">int</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;请输入年龄：&quot;</span>)</span><br><span class="line">	fmt.Scan(&amp;age)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;age: %v\n&quot;</span>, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Scanf</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> name <span class="keyword">string</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;请输入姓名：&quot;</span>)</span><br><span class="line">	fmt.Scanf(<span class="string">&quot;%s&quot;</span>, &amp;name)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;name: %v\n&quot;</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Scanln</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test3</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> age <span class="keyword">int</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;请输入年龄：&quot;</span>)</span><br><span class="line">	fmt.Scanln(&amp;age)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;age: %v\n&quot;</span>, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// test2()</span></span><br><span class="line">	test3()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其他实例参考官网</p>
</blockquote>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Errorf</span><span class="params">(format <span class="keyword">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure>

<p><code>Errorf</code> 根据于格式说明符进行格式化，并将字符串作为满足 error 的值返回，其返回类型是error．</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fprint</span><span class="params">(w io.Writer, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span>　</span><br></pre></td></tr></table></figure>

<p><code>Fprint</code> 使用其操作数的默认格式进行格式化并写入到 w。当两个连续的操作数均不为字符串时，它们之间就会添加空格。它返回写入的字节数以及任何遇到的错误。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fprintf</span><span class="params">(w io.Writer, format <span class="keyword">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span> //</span></span><br></pre></td></tr></table></figure>

<p><code>Fprintf</code> 根据于格式说明符进行格式化并写入到 w。它返回写入的字节数以及任何遇到的写入错误。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fprintln</span><span class="params">(w io.Writer, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> </span><br></pre></td></tr></table></figure>

<p><code>Fprintln</code> 使用其操作数的默认格式进行格式化并写入到 w。其操作数之间总是添加空格，且总在最后追加一个换行符。它返回写入的字节数以及任何遇到的错误。</p>
<p><strong>实例</strong></p>
<p>参考官网文档</p>
<h1 id="Golang标准库bufio"><a href="#Golang标准库bufio" class="headerlink" title="Golang标准库bufio"></a>Golang标准库bufio</h1><h3 id="bufio"><a href="#bufio" class="headerlink" title="bufio"></a>bufio</h3><blockquote>
<p>bufio包实现了有缓冲的I/O。它包装一个io.Reader或io.Writer接口对象，创建另一个也实现了该接口，且同时还提供了缓冲和一些文本I/O的帮助函数的对象。</p>
</blockquote>
<h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    defaultBufSize = <span class="number">4096</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    ErrInvalidUnreadByte = errors.New(<span class="string">&quot;bufio: invalid use of UnreadByte&quot;</span>)</span><br><span class="line">    ErrInvalidUnreadRune = errors.New(<span class="string">&quot;bufio: invalid use of UnreadRune&quot;</span>)</span><br><span class="line">    ErrBufferFull        = errors.New(<span class="string">&quot;bufio: buffer full&quot;</span>)</span><br><span class="line">    ErrNegativeCount     = errors.New(<span class="string">&quot;bufio: negative count&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    ErrTooLong         = errors.New(<span class="string">&quot;bufio.Scanner: token too long&quot;</span>)</span><br><span class="line">    ErrNegativeAdvance = errors.New(<span class="string">&quot;bufio.Scanner: SplitFunc returns negative advance count&quot;</span>)</span><br><span class="line">    ErrAdvanceTooFar   = errors.New(<span class="string">&quot;bufio.Scanner: SplitFunc returns advance count beyond input&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>会被Scanner类型返回的错误。</p>
</blockquote>
<h4 id="type-Reader"><a href="#type-Reader" class="headerlink" title="type Reader"></a>type Reader</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Reader <span class="keyword">struct</span> &#123;</span><br><span class="line">    buf          []<span class="keyword">byte</span></span><br><span class="line">    rd           io.Reader <span class="comment">// reader provided by the client</span></span><br><span class="line">    r, w         <span class="keyword">int</span>       <span class="comment">// buf read and write positions</span></span><br><span class="line">    err          error</span><br><span class="line">    lastByte     <span class="keyword">int</span> <span class="comment">// last byte read for UnreadByte; -1 means invalid</span></span><br><span class="line">    lastRuneSize <span class="keyword">int</span> <span class="comment">// size of last rune read for UnreadRune; -1 means invalid</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Reader实现了给一个io.Reader接口对象附加缓冲。</p>
</blockquote>
<h4 id="func-NewReader"><a href="#func-NewReader" class="headerlink" title="func NewReader"></a>func NewReader</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewReader</span><span class="params">(rd io.Reader)</span> *<span class="title">Reader</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>NewReader创建一个具有默认大小缓冲、从r读取的*Reader。NewReader 相当于 NewReaderSize(rd, 4096)</p>
</blockquote>
<h4 id="func-NewReaderSize"><a href="#func-NewReaderSize" class="headerlink" title="func NewReaderSize"></a>func NewReaderSize</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewReaderSize</span><span class="params">(rd io.Reader, size <span class="keyword">int</span>)</span> *<span class="title">Reader</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>NewReaderSize创建一个具有最少有size尺寸的缓冲、从r读取的<em>Reader。如果参数r已经是一个具有足够大缓冲的</em> Reader类型值，会返回r。</p>
</blockquote>
<h4 id="func-Reader-Reset-r-io-Reader"><a href="#func-Reader-Reset-r-io-Reader" class="headerlink" title="func (*Reader)Reset(r io.Reader)"></a>func (*Reader)Reset(r io.Reader)</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">Reset</span><span class="params">(r io.Reader)</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Reset丢弃缓冲中的数据，清除任何错误，将b重设为其下层从r读取数据。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   s := strings.NewReader(<span class="string">&quot;ABCEFG&quot;</span>)</span><br><span class="line">   str := strings.NewReader(<span class="string">&quot;123455&quot;</span>)</span><br><span class="line">   br := bufio.NewReader(s)</span><br><span class="line">   b, _ := br.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">   fmt.Println(b)  </span><br><span class="line">   br.Reset(str)</span><br><span class="line">   b, _ = br.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">   fmt.Println(b)   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="func-Reader-Read"><a href="#func-Reader-Read" class="headerlink" title="func (*Reader)Read"></a>func (*Reader)Read</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">Read</span><span class="params">(p []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Read读取数据写入p。本方法返回写入p的字节数。本方法一次调用最多会调用下层Reader接口一次Read方法，因此返回值n可能小于len(p)。读取到达结尾时，返回值n将为0而err将为io.EOF。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := strings.NewReader(<span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&quot;</span>)</span><br><span class="line">	br := bufio.NewReader(s)</span><br><span class="line">	p := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		n, err := br.Read(p)</span><br><span class="line">		<span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			fmt.Printf(<span class="string">&quot;string(p): %v\n&quot;</span>, <span class="keyword">string</span>(p[<span class="number">0</span>:n]))</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="func-Reader-ReadByte"><a href="#func-Reader-ReadByte" class="headerlink" title="func (*Reader)ReadByte"></a>func (*Reader)ReadByte</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">ReadByte</span><span class="params">()</span> <span class="params">(c <span class="keyword">byte</span>, err error)</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ReadByte读取并返回一个字节。如果没有可用的数据，会返回错误。</p>
</blockquote>
<h4 id="func-Reader-UnreadByte"><a href="#func-Reader-UnreadByte" class="headerlink" title="func (*Reader)UnreadByte"></a>func (*Reader)UnreadByte</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">UnreadByte</span><span class="params">()</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>UnreadByte吐出最近一次读取操作读取的最后一个字节。（只能吐出最后一个，多次调用会出问题）</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   s := strings.NewReader(<span class="string">&quot;ABCDEFG&quot;</span>)</span><br><span class="line">   br := bufio.NewReader(s)</span><br><span class="line"></span><br><span class="line">   c, _ := br.ReadByte()</span><br><span class="line">   fmt.Printf(<span class="string">&quot;%c\n&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">   c, _ = br.ReadByte()</span><br><span class="line">   fmt.Printf(<span class="string">&quot;%c\n&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">   br.UnreadByte()</span><br><span class="line">   c, _ = br.ReadByte()</span><br><span class="line">   fmt.Printf(<span class="string">&quot;%c\n&quot;</span>, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="func-Reader-ReadRune"><a href="#func-Reader-ReadRune" class="headerlink" title="func (*Reader)ReadRune"></a>func (*Reader)ReadRune</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">ReadRune</span><span class="params">()</span> <span class="params">(r <span class="keyword">rune</span>, size <span class="keyword">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ReadRune读取一个utf-8编码的unicode码值，返回该码值、其编码长度和可能的错误。如果utf-8编码非法，读取位置只移动1字节，返回U+FFFD，返回值size为1而err为nil。如果没有可用的数据，会返回错误。</p>
</blockquote>
<h4 id="func-Reader-UnreadRune"><a href="#func-Reader-UnreadRune" class="headerlink" title="func (*Reader)UnreadRune"></a>func (*Reader)UnreadRune</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">UnreadRune</span><span class="params">()</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>UnreadRune吐出最近一次ReadRune调用读取的unicode码值。如果最近一次读取不是调用的ReadRune，会返回错误。（从这点看，UnreadRune比UnreadByte严格很多）</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">func <span class="selector-tag">main</span>() &#123;</span><br><span class="line">   s := strings.<span class="built_in">NewReader</span>(<span class="string">&quot;你好，世界！&quot;</span>)</span><br><span class="line">   br := bufio.<span class="built_in">NewReader</span>(s)</span><br><span class="line"></span><br><span class="line">   c, size, _ := br.<span class="built_in">ReadRune</span>()</span><br><span class="line">   fmt.<span class="built_in">Printf</span>(<span class="string">&quot;%c %v\n&quot;</span>, c, size)</span><br><span class="line"></span><br><span class="line">   c, size, _ = br.<span class="built_in">ReadRune</span>()</span><br><span class="line">   fmt.<span class="built_in">Printf</span>(<span class="string">&quot;%c %v\n&quot;</span>, c, size)</span><br><span class="line"></span><br><span class="line">   br.<span class="built_in">UnreadRune</span>()</span><br><span class="line">   c, size, _ = br.<span class="built_in">ReadRune</span>()</span><br><span class="line">   fmt.<span class="built_in">Printf</span>(<span class="string">&quot;%c %v\n&quot;</span>, c, size)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="func-Reader-ReadLine"><a href="#func-Reader-ReadLine" class="headerlink" title="func (*Reader)ReadLine"></a>func (*Reader)ReadLine</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">ReadLine</span><span class="params">()</span> <span class="params">(line []<span class="keyword">byte</span>, isPrefix <span class="keyword">bool</span>, err error)</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ReadLine是一个低水平的行数据读取原语。大多数调用者应使用ReadBytes(‘\n’)或ReadString(‘\n’)代替，或者使用Scanner。</p>
<p>ReadLine尝试返回一行数据，不包括行尾标志的字节。如果行太长超过了缓冲，返回值isPrefix会被设为true，并返回行的前面一部分。该行剩下的部分将在之后的调用中返回。返回值isPrefix会在返回该行最后一个片段时才设为false。返回切片是缓冲的子切片，只在下一次读取操作之前有效。ReadLine要么返回一个非nil的line，要么返回一个非nil的err，两个返回值至少一个非nil。</p>
<p>返回的文本不包含行尾的标志字节（”\r\n”或”\n”）。如果输入流结束时没有行尾标志字节，方法不会出错，也不会指出这一情况。在调用ReadLine之后调用UnreadByte会总是吐出最后一个读取的字节（很可能是该行的行尾标志字节），即使该字节不是ReadLine返回值的一部分。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">func <span class="selector-tag">main</span>() &#123;</span><br><span class="line">   s := strings.<span class="built_in">NewReader</span>(<span class="string">&quot;ABC\nDEF\r\nGHI\r\nGHI&quot;</span>)</span><br><span class="line">   br := bufio.<span class="built_in">NewReader</span>(s)</span><br><span class="line"></span><br><span class="line">   w, isPrefix, _ := br.<span class="built_in">ReadLine</span>()</span><br><span class="line">   fmt.<span class="built_in">Printf</span>(<span class="string">&quot;%q %v\n&quot;</span>, w, isPrefix)</span><br><span class="line"></span><br><span class="line">   w, isPrefix, _ = br.<span class="built_in">ReadLine</span>()</span><br><span class="line">   fmt.<span class="built_in">Printf</span>(<span class="string">&quot;%q %v\n&quot;</span>, w, isPrefix)</span><br><span class="line"></span><br><span class="line">   w, isPrefix, _ = br.<span class="built_in">ReadLine</span>()</span><br><span class="line">   fmt.<span class="built_in">Printf</span>(<span class="string">&quot;%q %v\n&quot;</span>, w, isPrefix)</span><br><span class="line"></span><br><span class="line">   w, isPrefix, _ = br.<span class="built_in">ReadLine</span>()</span><br><span class="line">   fmt.<span class="built_in">Printf</span>(<span class="string">&quot;%q %v\n&quot;</span>, w, isPrefix)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="func-Reader-ReadSlice"><a href="#func-Reader-ReadSlice" class="headerlink" title="func (*Reader)ReadSlice"></a>func (*Reader)ReadSlice</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">ReadSlice</span><span class="params">(delim <span class="keyword">byte</span>)</span> <span class="params">(line []<span class="keyword">byte</span>, err error)</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ReadSlice读取直到第一次遇到delim字节，返回缓冲里的包含已读取的数据和delim字节的切片。该返回值只在下一次读取操作之前合法。如果ReadSlice放在在读取到delim之前遇到了错误，它会返回在错误之前读取的数据在缓冲中的切片以及该错误（一般是io.EOF）。如果在读取到delim之前缓冲就被写满了，ReadSlice失败并返回ErrBufferFull。因为ReadSlice的返回值会被下一次I/O操作重写，调用者应尽量使用ReadBytes或ReadString替代本法功法。当且仅当ReadBytes方法返回的切片不以delim结尾时，会返回一个非nil的错误。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">func <span class="selector-tag">main</span>() &#123;</span><br><span class="line">   s := strings.<span class="built_in">NewReader</span>(<span class="string">&quot;ABC,DEF,GHI,JKL&quot;</span>)</span><br><span class="line">   br := bufio.<span class="built_in">NewReader</span>(s)</span><br><span class="line"></span><br><span class="line">   w, _ := br.<span class="built_in">ReadSlice</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">   fmt.<span class="built_in">Printf</span>(<span class="string">&quot;%q\n&quot;</span>, w)</span><br><span class="line"></span><br><span class="line">   w, _ = br.<span class="built_in">ReadSlice</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">   fmt.<span class="built_in">Printf</span>(<span class="string">&quot;%q\n&quot;</span>, w)</span><br><span class="line"></span><br><span class="line">   w, _ = br.<span class="built_in">ReadSlice</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">   fmt.<span class="built_in">Printf</span>(<span class="string">&quot;%q\n&quot;</span>, w)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="func-Reader-ReadBytes"><a href="#func-Reader-ReadBytes" class="headerlink" title="func (*Reader)ReadBytes"></a>func (*Reader)ReadBytes</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">ReadBytes</span><span class="params">(delim <span class="keyword">byte</span>)</span> <span class="params">(line []<span class="keyword">byte</span>, err error)</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ReadBytes读取直到第一次遇到delim字节，返回一个包含已读取的数据和delim字节的切片。如果ReadBytes方法在读取到delim之前遇到了错误，它会返回在错误之前读取的数据以及该错误（一般是io.EOF）。当且仅当ReadBytes方法返回的切片不以delim结尾时，会返回一个非nil的错误。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   s := strings.NewReader(<span class="string">&quot;ABC DEF GHI JKL&quot;</span>)</span><br><span class="line">   br := bufio.NewReader(s)</span><br><span class="line"></span><br><span class="line">   w, _ := br.ReadBytes(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, w)</span><br><span class="line"></span><br><span class="line">   w, _ = br.ReadBytes(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, w)</span><br><span class="line"></span><br><span class="line">   w, _ = br.ReadBytes(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, w)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="func-Reader-ReadString"><a href="#func-Reader-ReadString" class="headerlink" title="func (*Reader)ReadString"></a>func (*Reader)ReadString</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">ReadString</span><span class="params">(delim <span class="keyword">byte</span>)</span> <span class="params">(line <span class="keyword">string</span>, err error)</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ReadString读取直到第一次遇到delim字节，返回一个包含已读取的数据和delim字节的字符串。如果ReadString方法在读取到delim之前遇到了错误，它会返回在错误之前读取的数据以及该错误（一般是io.EOF）。当且仅当ReadString方法返回的切片不以delim结尾时，会返回一个非nil的错误。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   s := strings.NewReader(<span class="string">&quot;ABC DEF GHI JKL&quot;</span>)</span><br><span class="line">   br := bufio.NewReader(s)</span><br><span class="line"></span><br><span class="line">   w, _ := br.ReadString(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, w)</span><br><span class="line"></span><br><span class="line">   w, _ = br.ReadString(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, w)</span><br><span class="line"></span><br><span class="line">   w, _ = br.ReadString(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, w)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="func-Reader-WriteTo"><a href="#func-Reader-WriteTo" class="headerlink" title="func (*Reader)WriteTo"></a>func (*Reader)WriteTo</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">WriteTo</span><span class="params">(w io.Writer)</span> <span class="params">(n <span class="keyword">int64</span>, err error)</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>WriteTo方法实现了io.WriterTo接口。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   s := strings.NewReader(<span class="string">&quot;ABCEFGHIJKLMN&quot;</span>)</span><br><span class="line">   br := bufio.NewReader(s)</span><br><span class="line">   b := bytes.NewBuffer(<span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">   br.WriteTo(b)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="type-Writer"><a href="#type-Writer" class="headerlink" title="type Writer"></a>type Writer</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Writer <span class="keyword">struct</span> &#123;</span><br><span class="line">    err error</span><br><span class="line">    buf []<span class="keyword">byte</span></span><br><span class="line">    n   <span class="keyword">int</span></span><br><span class="line">    wr  io.Writer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Writer实现了为io.Writer接口对象提供缓冲。如果在向一个Writer类型值写入时遇到了错误，该对象将不再接受任何数据，且所有写操作都会返回该错误。在说有数据都写入后，调用者有义务调用Flush方法以保证所有的数据都交给了下层的io.Writer。</p>
</blockquote>
<h4 id="func-NewWriter"><a href="#func-NewWriter" class="headerlink" title="func NewWriter"></a>func NewWriter</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewWriter</span><span class="params">(w io.Writer)</span> *<span class="title">Writer</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>NewWriter创建一个具有默认大小缓冲、写入w的*Writer。NewWriter 相当于 NewWriterSize(wr, 4096)</p>
</blockquote>
<h4 id="func-NewWriterSize"><a href="#func-NewWriterSize" class="headerlink" title="func NewWriterSize"></a>func NewWriterSize</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewWriterSize</span><span class="params">(w io.Writer, size <span class="keyword">int</span>)</span> *<span class="title">Writer</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>NewWriterSize创建一个具有最少有size尺寸的缓冲、写入w的<em>Writer。如果参数w已经是一个具有足够大缓冲的</em> Writer类型值，会返回w。</p>
</blockquote>
<h4 id="func-Writer-Reset"><a href="#func-Writer-Reset" class="headerlink" title="func (*Writer)Reset"></a>func (*Writer)Reset</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span> <span class="title">Reset</span><span class="params">(w io.Writer)</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Reset丢弃缓冲中的数据，清除任何错误，将b重设为将其输出写入w。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   b := bytes.NewBuffer(<span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">0</span>))</span><br><span class="line">   bw := bufio.NewWriter(b)</span><br><span class="line">   bw.WriteString(<span class="string">&quot;123456789&quot;</span>)</span><br><span class="line">   c := bytes.NewBuffer(<span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">0</span>))</span><br><span class="line">   bw.Reset(c)</span><br><span class="line">   bw.WriteString(<span class="string">&quot;456&quot;</span>)</span><br><span class="line">   bw.Flush()</span><br><span class="line">   fmt.Println(b)     </span><br><span class="line">   fmt.Println(c) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="func-Writer-Bufferd"><a href="#func-Writer-Bufferd" class="headerlink" title="func (*Writer)Bufferd"></a>func (*Writer)Bufferd</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span> <span class="title">Buffered</span><span class="params">()</span> <span class="title">int</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Buffered返回缓冲中已使用的字节数。</p>
</blockquote>
<h4 id="func-Writer-Available"><a href="#func-Writer-Available" class="headerlink" title="func (*Writer)Available"></a>func (*Writer)Available</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span> <span class="title">Available</span><span class="params">()</span> <span class="title">int</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Available返回缓冲中还有多少字节未使用。</p>
</blockquote>
<h4 id="func-Writer-Write"><a href="#func-Writer-Write" class="headerlink" title="func (*Writer) Write"></a>func (*Writer) Write</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span> <span class="title">Write</span><span class="params">(p []<span class="keyword">byte</span>)</span> <span class="params">(nn <span class="keyword">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Write将p的内容写入缓冲。返回写入的字节数。如果返回值nn &lt; len(p)，还会返回一个错误说明原因。</p>
</blockquote>
<h4 id="func-Writer-WriteString"><a href="#func-Writer-WriteString" class="headerlink" title="func (*Writer) WriteString"></a>func (*Writer) WriteString</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span> <span class="title">WriteString</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>WriteString写入一个字符串。返回写入的字节数。如果返回值nn &lt; len(s)，还会返回一个错误说明原因。</p>
</blockquote>
<h4 id="func-Writer-WriteByte"><a href="#func-Writer-WriteByte" class="headerlink" title="func (*Writer) WriteByte"></a>func (*Writer) WriteByte</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span> <span class="title">WriteByte</span><span class="params">(c <span class="keyword">byte</span>)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>WriteByte写入单个字节。</p>
</blockquote>
<h4 id="func-Writer-WriteRune"><a href="#func-Writer-WriteRune" class="headerlink" title="func (*Writer) WriteRune"></a>func (*Writer) WriteRune</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span> <span class="title">WriteRune</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="params">(size <span class="keyword">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>WriteRune写入一个unicode码值（的utf-8编码），返回写入的字节数和可能的错误。</p>
</blockquote>
<h4 id="func-Writer-Flush"><a href="#func-Writer-Flush" class="headerlink" title="func (*Writer) Flush"></a>func (*Writer) Flush</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span> <span class="title">Flush</span><span class="params">()</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Flush方法将缓冲中的数据写入下层的io.Writer接口。</p>
</blockquote>
<h4 id="func-Writer-ReadFrom"><a href="#func-Writer-ReadFrom" class="headerlink" title="func (*Writer) ReadFrom"></a>func (*Writer) ReadFrom</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span> <span class="title">ReadFrom</span><span class="params">(r io.Reader)</span> <span class="params">(n <span class="keyword">int64</span>, err error)</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ReadFrom实现了io.ReaderFrom接口。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   b := bytes.NewBuffer(<span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">0</span>))</span><br><span class="line">   bw := bufio.NewWriter(b)</span><br><span class="line">   fmt.Println(bw.Available()) <span class="comment">// 4096</span></span><br><span class="line">   fmt.Println(bw.Buffered())  <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">   bw.WriteString(<span class="string">&quot;ABCDEFGHIJKLMN&quot;</span>)</span><br><span class="line">   fmt.Println(bw.Available()) </span><br><span class="line">   fmt.Println(bw.Buffered())  </span><br><span class="line">   fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, b)    </span><br><span class="line"></span><br><span class="line">   bw.Flush()</span><br><span class="line">   fmt.Println(bw.Available())</span><br><span class="line">   fmt.Println(bw.Buffered())  </span><br><span class="line">   fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, b)   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   b := bytes.NewBuffer(<span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">0</span>))</span><br><span class="line">   bw := bufio.NewWriter(b)</span><br><span class="line">   <span class="comment">// 写入缓存</span></span><br><span class="line">   <span class="comment">// byte等同于 int8</span></span><br><span class="line">   bw.WriteByte(<span class="string">&#x27;H&#x27;</span>)</span><br><span class="line">   bw.WriteByte(<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">   bw.WriteByte(<span class="string">&#x27;l&#x27;</span>)</span><br><span class="line">   bw.WriteByte(<span class="string">&#x27;l&#x27;</span>)</span><br><span class="line">   bw.WriteByte(<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">   bw.WriteByte(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">   <span class="comment">// rune等同于int32</span></span><br><span class="line">   bw.WriteRune(<span class="string">&#x27;世&#x27;</span>)</span><br><span class="line">   bw.WriteRune(<span class="string">&#x27;界&#x27;</span>)</span><br><span class="line">   bw.WriteRune(<span class="string">&#x27;！&#x27;</span>)</span><br><span class="line">   <span class="comment">// 写入b</span></span><br><span class="line">   bw.Flush()</span><br><span class="line">   fmt.Println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   b := bytes.NewBuffer(<span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">0</span>))</span><br><span class="line">   s := strings.NewReader(<span class="string">&quot;Hello 世界！&quot;</span>)</span><br><span class="line">   bw := bufio.NewWriter(b)</span><br><span class="line">   bw.ReadFrom(s)</span><br><span class="line">   <span class="comment">//bw.Flush()            //ReadFrom无需使用Flush，其自己已经写入．</span></span><br><span class="line">   fmt.Println(b) <span class="comment">// Hello 世界！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="type-ReadWriter"><a href="#type-ReadWriter" class="headerlink" title="type ReadWriter"></a>type ReadWriter</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">ReadWriter</span></span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    *Reader</span><br><span class="line">    *Writer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ReadWriter类型保管了指向Reader和Writer类型的指针，（因此）实现了io.ReadWriter接口。</p>
</blockquote>
<h4 id="func-NewReadWriter"><a href="#func-NewReadWriter" class="headerlink" title="func NewReadWriter"></a>func NewReadWriter</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewReadWriter</span><span class="params">(r *Reader, w *Writer)</span> *<span class="title">ReadWriter</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>NewReadWriter申请创建一个新的、将读写操作分派给r和w 的ReadWriter。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   b := bytes.NewBuffer(<span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">0</span>))</span><br><span class="line">   bw := bufio.NewWriter(b)</span><br><span class="line">   s := strings.NewReader(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">   br := bufio.NewReader(s)</span><br><span class="line">   rw := bufio.NewReadWriter(br, bw)</span><br><span class="line">   p, _ := rw.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">   fmt.Println(<span class="keyword">string</span>(p))              <span class="comment">//123</span></span><br><span class="line">   rw.WriteString(<span class="string">&quot;asdf&quot;</span>)</span><br><span class="line">   rw.Flush()</span><br><span class="line">   fmt.Println(b)                          <span class="comment">//asdf</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="type-SplitFunc"><a href="#type-SplitFunc" class="headerlink" title="type SplitFunc"></a>type SplitFunc</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> SplitFunc <span class="function"><span class="keyword">func</span><span class="params">(data []<span class="keyword">byte</span>, atEOF <span class="keyword">bool</span>)</span> <span class="params">(advance <span class="keyword">int</span>, token []<span class="keyword">byte</span>, err error)</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>SplitFunc类型代表用于对输出作词法分析的分割函数。</p>
<p>参数data是尚未处理的数据的一个开始部分的切片，参数atEOF表示是否Reader接口不能提供更多的数据。返回值是解析位置前进的字节数，将要返回给调用者的token切片，以及可能遇到的错误。如果数据不足以（保证）生成一个完整的token，例如需要一整行数据但data里没有换行符，SplitFunc可以返回(0, nil, nil)来告诉Scanner读取更多的数据写入切片然后用从同一位置起始、长度更长的切片再试一次（调用SplitFunc类型函数）。</p>
<p>如果返回值err非nil，扫描将终止并将该错误返回给Scanner的调用者。</p>
<p>除非atEOF为真，永远不会使用空切片data调用SplitFunc类型函数。然而，如果atEOF为真，data却可能是非空的、且包含着未处理的文本。</p>
<p>SplitFunc 的作用很简单，从 data 中找出你感兴趣的数据，然后返回并告诉调用者，data 中有多少数据你已经处理过了</p>
</blockquote>
<h3 id="func-ScanBytes"><a href="#func-ScanBytes" class="headerlink" title="func ScanBytes"></a>func ScanBytes</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ScanBytes</span><span class="params">(data []<span class="keyword">byte</span>, atEOF <span class="keyword">bool</span>)</span> <span class="params">(advance <span class="keyword">int</span>, token []<span class="keyword">byte</span>, err error)</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ScanBytes是用于Scanner类型的分割函数（符合SplitFunc），本函数会将每个字节作为一个token返回。</p>
</blockquote>
<h3 id="func-ScanRunes"><a href="#func-ScanRunes" class="headerlink" title="func ScanRunes"></a>func ScanRunes</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ScanRunes</span><span class="params">(data []<span class="keyword">byte</span>, atEOF <span class="keyword">bool</span>)</span> <span class="params">(advance <span class="keyword">int</span>, token []<span class="keyword">byte</span>, err error)</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ScanRunes是用于Scanner类型的分割函数（符合SplitFunc），本函数会将每个utf-8编码的unicode码值作为一个token返回。本函数返回的rune序列和range一个字符串的输出rune序列相同。错误的utf-8编码会翻译为U+FFFD = “\xef\xbf\xbd”，但只会消耗一个字节。调用者无法区分正确编码的rune和错误编码的rune。</p>
</blockquote>
<h3 id="func-ScanWords"><a href="#func-ScanWords" class="headerlink" title="func ScanWords"></a>func ScanWords</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ScanWords</span><span class="params">(data []<span class="keyword">byte</span>, atEOF <span class="keyword">bool</span>)</span> <span class="params">(advance <span class="keyword">int</span>, token []<span class="keyword">byte</span>, err error)</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ScanRunes是用于Scanner类型的分割函数（符合SplitFunc），本函数会将空白（参见unicode.IsSpace）分隔的片段（去掉前后空白后）作为一个token返回。本函数永远不会返回空字符串。用来找出 data 中的单行数据并返回（包括空行）</p>
</blockquote>
<h3 id="func-ScanLines"><a href="#func-ScanLines" class="headerlink" title="func ScanLines"></a>func ScanLines</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ScanLines</span><span class="params">(data []<span class="keyword">byte</span>, atEOF <span class="keyword">bool</span>)</span> <span class="params">(advance <span class="keyword">int</span>, token []<span class="keyword">byte</span>, err error)</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ScanLines是用于Scanner类型的分割函数（符合SplitFunc），本函数会将每一行文本去掉末尾的换行标记作为一个token返回。返回的行可以是空字符串。换行标记为一个可选的回车后跟一个必选的换行符。最后一行即使没有换行符也会作为一个token返回。</p>
</blockquote>
<h3 id="type-Scanner"><a href="#type-Scanner" class="headerlink" title="type Scanner"></a>type Scanner</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Scanner <span class="keyword">struct</span> &#123;</span><br><span class="line">    r            io.Reader <span class="comment">// The reader provided by the client.</span></span><br><span class="line">    split        SplitFunc <span class="comment">// The function to split the tokens.</span></span><br><span class="line">    maxTokenSize <span class="keyword">int</span>       <span class="comment">// Maximum size of a token; modified by tests.</span></span><br><span class="line">    token        []<span class="keyword">byte</span>    <span class="comment">// Last token returned by split.</span></span><br><span class="line">    buf          []<span class="keyword">byte</span>    <span class="comment">// Buffer used as argument to split.</span></span><br><span class="line">    start        <span class="keyword">int</span>       <span class="comment">// First non-processed byte in buf.</span></span><br><span class="line">    end          <span class="keyword">int</span>       <span class="comment">// End of data in buf.</span></span><br><span class="line">    err          error     <span class="comment">// Sticky error.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Scanner类型提供了方便的读取数据的接口，如从换行符分隔的文本里读取每一行。成功调用的Scan方法会逐步提供文件的token，跳过token之间的字节。token由SplitFunc类型的分割函数指定；默认的分割函数会将输入分割为多个行，并去掉行尾的换行标志。本包预定义的分割函数可以将文件分割为行、字节、unicode码值、空白分隔的word。调用者可以定制自己的分割函数。扫描会在抵达输入流结尾、遇到的第一个I/O错误、token过大不能保存进缓冲时，不可恢复的停止。当扫描停止后，当前读取位置可能会远在最后一个获得的token后面。需要更多对错误管理的控制或token很大，或必须从reader连续扫描的程序，应使用bufio.Reader代替。</p>
</blockquote>
<h4 id="func-NewScanner"><a href="#func-NewScanner" class="headerlink" title="func NewScanner"></a>func NewScanner</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewScanner</span><span class="params">(r io.Reader)</span> *<span class="title">Scanner</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>NewScanner创建并返回一个从r读取数据的Scanner，默认的分割函数是ScanLines。</p>
</blockquote>
<h4 id="func-Scanner-Split"><a href="#func-Scanner-Split" class="headerlink" title="func (*Scanner) Split"></a>func (*Scanner) Split</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Scanner)</span> <span class="title">Split</span><span class="params">(split SplitFunc)</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Split设置该Scanner的分割函数。本方法必须在Scan之前调用。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   s := strings.NewReader(<span class="string">&quot;ABC DEF GHI JKL&quot;</span>)</span><br><span class="line">   bs := bufio.NewScanner(s)</span><br><span class="line">   bs.Split(bufio.ScanWords)</span><br><span class="line">   <span class="keyword">for</span> bs.Scan() &#123;</span><br><span class="line">      fmt.Println(bs.Text())</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="func-Scanner-Scan"><a href="#func-Scanner-Scan" class="headerlink" title="func (*Scanner) Scan"></a>func (*Scanner) Scan</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Scanner)</span> <span class="title">Scan</span><span class="params">()</span> <span class="title">bool</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Scan方法获取当前位置的token（该token可以通过Bytes或Text方法获得），并让Scanner的扫描位置移动到下一个token。当扫描因为抵达输入流结尾或者遇到错误而停止时，本方法会返回false。在Scan方法返回false后，Err方法将返回扫描时遇到的任何错误；除非是io.EOF，此时Err会返回nil。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := strings.NewReader(<span class="string">&quot;Hello 世界！&quot;</span>)</span><br><span class="line">    bs := bufio.NewScanner(s)</span><br><span class="line">    bs.Split(bufio.ScanBytes)</span><br><span class="line">    <span class="keyword">for</span> bs.Scan() &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%s &quot;</span>, bs.Text())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="func-Scanner-Bytes"><a href="#func-Scanner-Bytes" class="headerlink" title="func (*Scanner) Bytes"></a>func (*Scanner) Bytes</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Scanner)</span> <span class="title">Bytes</span><span class="params">()</span> []<span class="title">byte</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Bytes方法返回最近一次Scan调用生成的token。底层数组指向的数据可能会被下一次Scan的调用重写。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   s := strings.NewReader(<span class="string">&quot;Hello 世界！&quot;</span>)</span><br><span class="line">   bs := bufio.NewScanner(s)</span><br><span class="line">   bs.Split(bufio.ScanRunes)</span><br><span class="line">   <span class="keyword">for</span> bs.Scan() &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;%s &quot;</span>, bs.Text())</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="func-Scanner-Text"><a href="#func-Scanner-Text" class="headerlink" title="func (*Scanner) Text"></a>func (*Scanner) Text</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Scanner)</span> <span class="title">Text</span><span class="params">()</span> <span class="title">string</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Bytes方法返回最近一次Scan调用生成的token，会申请创建一个字符串保存token并返回该字符串。</p>
</blockquote>
<h4 id="func-Scanner-Err"><a href="#func-Scanner-Err" class="headerlink" title="func (*Scanner) Err"></a>func (*Scanner) Err</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Scanner)</span> <span class="title">Err</span><span class="params">()</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Err返回Scanner遇到的第一个非EOF的错误。</p>
</blockquote>
<h1 id="Golang标准库log"><a href="#Golang标准库log" class="headerlink" title="Golang标准库log"></a>Golang标准库log</h1><h2 id="log简介"><a href="#log简介" class="headerlink" title="log简介"></a>log简介</h2><p>Golang内置了 <code>log</code>包，实现简单的日志服务。通过调用 <code>log</code>包的函数，可以实现简单的日志打印功能。</p>
<h2 id="log使用"><a href="#log使用" class="headerlink" title="log使用"></a>log使用</h2><p><code>log</code>包中有3个系列的日志打印函数，分别 <code>print</code>系列、<code>panic</code>系列、<code>fatal</code>系列。</p>
<table>
<thead>
<tr>
<th align="left">函数系列</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">print</td>
<td align="left">单纯打印日志</td>
</tr>
<tr>
<td align="left">panic</td>
<td align="left">打印日志，抛出panic异常</td>
</tr>
<tr>
<td align="left">fatal</td>
<td align="left">打印日志，强制结束程序(os.Exit(1))，<code>defer</code>函数不会执行</td>
</tr>
</tbody></table>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">&quot;发生了 panic错误！&quot;</span>)</span><br><span class="line">	log.Print(<span class="string">&quot;my log&quot;</span>)</span><br><span class="line">	log.Printf(<span class="string">&quot;my log %d&quot;</span>, <span class="number">100</span>)</span><br><span class="line">	name := <span class="string">&quot;tom&quot;</span></span><br><span class="line">	age := <span class="number">20</span></span><br><span class="line">	log.Println(name, <span class="string">&quot;,&quot;</span>, age)</span><br><span class="line">	log.Panic(<span class="string">&quot;致命错误！&quot;</span>)</span><br><span class="line">	<span class="comment">// log.Fatal(&quot;致命错误！&quot;)</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;end...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果示例（实际结果不是这样的哦，因为panic,fatal会影响程序的执行）：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">2021</span>/<span class="number">11</span>/<span class="number">29</span> <span class="number">16</span>:<span class="number">45</span>:<span class="number">59</span> my log</span><br><span class="line"><span class="number">2021</span>/<span class="number">11</span>/<span class="number">29</span> <span class="number">16</span>:<span class="number">45</span>:<span class="number">59</span> my log <span class="number">100</span></span><br><span class="line"><span class="number">2021</span>/<span class="number">11</span>/<span class="number">29</span> <span class="number">16</span>:<span class="number">45</span>:<span class="number">59</span> tom , <span class="number">20</span></span><br><span class="line"><span class="number">2021</span>/<span class="number">11</span>/<span class="number">29</span> <span class="number">16</span>:<span class="number">45</span>:<span class="number">59</span> 致命错误！</span><br><span class="line">发生了 <span class="built_in">panic</span>错误！</span><br><span class="line"><span class="built_in">panic</span>: 致命错误！</span><br><span class="line"></span><br><span class="line">goroutine <span class="number">1</span> [running]:</span><br><span class="line">log.Panic(&#123;<span class="number">0xc000107f00</span>, <span class="number">0x3</span>, <span class="number">0xc000107f00</span>&#125;)</span><br><span class="line">	C:/Program Files/Go/src/log/log.<span class="keyword">go</span>:<span class="number">354</span> +<span class="number">0x65</span></span><br><span class="line">main.main()</span><br><span class="line">	c:/Users/<span class="number">52406</span>/Desktop/golangprojects/xiaobaibk.com/pro01/demo.<span class="keyword">go</span>:<span class="number">15</span> +<span class="number">0x19e</span></span><br><span class="line">exit status <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h1 id="log配置"><a href="#log配置" class="headerlink" title="log配置"></a>log配置</h1><h3 id="标准log配置"><a href="#标准log配置" class="headerlink" title="标准log配置"></a>标准log配置</h3><p>默认情况下log只会打印出时间，但是实际情况下我们可能还需要获取文件名，行号等信息，<code>log</code>包提供给我们定制的接口。 <code>log</code>包提供两个标准log配置的相关方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func Flags() int  // 返回标准log输出配置</span><br><span class="line">func SetFlags(flag int)  // 设置标准log输出配置</span><br></pre></td></tr></table></figure>

<h4 id="flag参数"><a href="#flag参数" class="headerlink" title="flag参数"></a>flag参数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const (</span><br><span class="line">    // 控制输出日志信息的细节，不能控制输出的顺序和格式。</span><br><span class="line">    // 输出的日志在每一项后会有一个冒号分隔：例如2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message</span><br><span class="line">    Ldate         = 1 &lt;&lt; iota     // 日期：2009/01/23</span><br><span class="line">    Ltime                         // 时间：01:23:23</span><br><span class="line">    Lmicroseconds                 // 微秒级别的时间：01:23:23.123123（用于增强Ltime位）</span><br><span class="line">    Llongfile                     // 文件全路径名+行号： /a/b/c/d.go:23</span><br><span class="line">    Lshortfile                    // 文件名+行号：d.go:23（会覆盖掉Llongfile）</span><br><span class="line">    LUTC                          // 使用UTC时间</span><br><span class="line">    LstdFlags     = Ldate | Ltime // 标准logger的初始值</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="标准日志配置示例"><a href="#标准日志配置示例" class="headerlink" title="标准日志配置示例"></a>标准日志配置示例</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	i := log.Flags()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">	log.SetFlags(log.Ldate | log.Ltime | log.Llongfile)</span><br><span class="line">	log.Print(<span class="string">&quot;my log&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出结果：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i: 3</span><br><span class="line">2021/11/29 16:49:53 c:/Users/52406/Desktop/golangprojects/xiaobaibk.com/pro01/demo.go:12: my log</span><br></pre></td></tr></table></figure>

<h3 id="日志前缀配置"><a href="#日志前缀配置" class="headerlink" title="日志前缀配置"></a>日志前缀配置</h3><p><code>log</code>包提供两个日志前缀配置的相关函数：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Prefix</span><span class="params">()</span> <span class="title">string</span>  // 返回日志的前缀配置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetPrefix</span><span class="params">(prefix <span class="keyword">string</span>)</span>  // 设置日志前缀</span></span><br></pre></td></tr></table></figure>

<h4 id="日志前缀配置实例"><a href="#日志前缀配置实例" class="headerlink" title="日志前缀配置实例"></a>日志前缀配置实例</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := log.Prefix()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">	log.SetPrefix(<span class="string">&quot;MyLog: &quot;</span>)</span><br><span class="line">	s = log.Prefix()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">	log.Print(<span class="string">&quot;my log...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出结果：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s: </span><br><span class="line">s: MyLog: </span><br><span class="line">MyLog: 2021/11/29 16:51:55 my log...</span><br></pre></td></tr></table></figure>

<h3 id="日志输出位置配置"><a href="#日志输出位置配置" class="headerlink" title="日志输出位置配置"></a>日志输出位置配置</h3><p>前面介绍的都是将日志输出到控制台上，golang的 <code>log</code>包还支持将日志输出到文件中。<code>log</code>包提供了 <code>func SetOutput(w io.Writer)</code>函数，将日志输出到文件中。</p>
<h4 id="日志输出位置配置-1"><a href="#日志输出位置配置-1" class="headerlink" title="日志输出位置配置"></a>日志输出位置配置</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f, err := os.OpenFile(<span class="string">&quot;a.log&quot;</span>, os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class="number">0644</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Panic(<span class="string">&quot;打开日志文件异常&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	log.SetOutput(f)</span><br><span class="line">	log.Print(<span class="string">&quot;my log...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong>日志输出到当前目录下a.log文件中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2021/11/29 16:57:13 my log...</span><br></pre></td></tr></table></figure>

<h3 id="自定义logger"><a href="#自定义logger" class="headerlink" title="自定义logger"></a>自定义logger</h3><p><code>log</code>包为我们提供了内置函数，让我们能自定义logger。从效果上来看，就是将标题3中的标准日志配置、日志前缀配置、日志输出位置配置整合到一个函数中，使日志配置不在那么繁琐。 <code>log</code>包中提供了 <code>func New(out io.Writer, prefix string, flag int) *Logger</code>函数来实现自定义logger。</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> logger *log.Logger</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    logFile, err := os.OpenFile(<span class="string">&quot;a.log&quot;</span>, os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class="number">0644</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Panic(<span class="string">&quot;打开日志文件异常&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    logger = log.New(logFile, <span class="string">&quot;success&quot;</span>, log.Ldate | log.Ltime | log.Lshortfile)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    logger.Println(<span class="string">&quot;自定义logger&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang标准库builtin"><a href="#Golang标准库builtin" class="headerlink" title="Golang标准库builtin"></a>Golang标准库builtin</h1><p>这个包提供了一些类型声明、变量和常量声明，还有一些便利函数，这个包不需要导入，这些变量和函数就可以直接使用。</p>
<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="append"><a href="#append" class="headerlink" title="append"></a>append</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(slice []Type, elems ...Type)</span> []<span class="title">Type</span></span></span><br><span class="line"></span><br><span class="line">slice = <span class="built_in">append</span>(slice, elem1, elem2)　　<span class="comment">//直接在slice后面添加单个元素，添加元素类型可以和slice相同，也可以不同</span></span><br><span class="line">slice = <span class="built_in">append</span>(slice, anotherSlice...)　　<span class="comment">//直接将另外一个slice添加到slice后面，但其本质还是将anotherSlice中的元素一个一个添加到slice中，和第一种方式类似．</span></span><br></pre></td></tr></table></figure>

<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	s1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	i := <span class="built_in">append</span>(s1, <span class="number">4</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line"></span><br><span class="line">	s2 := []<span class="keyword">int</span>&#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">	i2 := <span class="built_in">append</span>(s1, s2...)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;i2: %v\n&quot;</span>, i2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="len"><a href="#len" class="headerlink" title="len"></a>len</h2><p>返回，数组、切片、字符串、通道的长度</p>
<h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	s1 := <span class="string">&quot;hello world&quot;</span></span><br><span class="line">	i := <span class="built_in">len</span>(s1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line"></span><br><span class="line">	s2 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;len(s2): %v\n&quot;</span>, <span class="built_in">len</span>(s2))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="print、println"><a href="#print、println" class="headerlink" title="print、println"></a>print、println</h2><p>打印输出到控制台。</p>
<h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	name := <span class="string">&quot;tom&quot;</span></span><br><span class="line">	age := <span class="number">20</span></span><br><span class="line">	<span class="built_in">print</span>(name, <span class="string">&quot; &quot;</span>, age, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;----------&quot;</span>)</span><br><span class="line">	<span class="built_in">println</span>(name, <span class="string">&quot; &quot;</span>, age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="panic"><a href="#panic" class="headerlink" title="panic"></a>panic</h3><p>抛出一个panic异常</p>
<h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">&quot;panic 异常后执行...&quot;</span>)</span><br><span class="line">	<span class="built_in">panic</span>(<span class="string">&quot;panic 错误...&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;end...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="new和make"><a href="#new和make" class="headerlink" title="new和make"></a>new和make</h3><p><code>new</code>和 <code>make</code>区别：</p>
<ol>
<li><code>make</code>只能用来分配及<strong>初始化</strong> 类型为<code>slice</code>，<code>map</code>，<code>chan</code>的数据；<code>new</code>可以分配任意类型的数据</li>
<li><code>new</code>分配返回的是指针，即类型<code>*T</code>；<code>make</code>返回引用，即<code>T</code>；</li>
<li><code>new</code>分配的空间被清零，<code>make</code>分配后，会进行<strong>初始化</strong> 。</li>
</ol>
<h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><p><strong>new</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testNew</span><span class="params">()</span></span> &#123;</span><br><span class="line">	b := <span class="built_in">new</span>(<span class="keyword">bool</span>)</span><br><span class="line">	fmt.Println(*b)</span><br><span class="line">	i := <span class="built_in">new</span>(<span class="keyword">int</span>)</span><br><span class="line">	fmt.Println(*i)</span><br><span class="line">	s := <span class="built_in">new</span>(<span class="keyword">string</span>)</span><br><span class="line">	fmt.Println(*s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	testNew()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>make</strong></p>
<blockquote>
<p>内建函数make(T, args)与new(T)的用途不一样。它只用来创建slice，map和channel，并且返回一个初始化的(而不是置零)，类型为T的值（而不是*T）。之所以有所不同，是因为这三个类型的背后引用了使用前必须初始化的数据结构。例如，slice是一个三元描述符，包含一个指向数据（在数组中）的指针，长度，以及容量，在这些项被初始化之前，slice都是nil的。对于slice，map和channel，make初始化这些内部数据结构，并准备好可用的值。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<p>分配一个有100个int的数组，然后创建一个长度为10，容量为100的slice结构，该slice引用包含前10个元素的数组。对应的，new([]int)返回一个指向新分配的，被置零的slice结构体的指针，即指向值为nil的slice的指针。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p *[]<span class="keyword">int</span> = <span class="built_in">new</span>([]<span class="keyword">int</span>)       <span class="comment">// allocates slice structure; *p == nil; rarely useful</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> v  []<span class="keyword">int</span> = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">100</span>) <span class="comment">// the slice v now refers to a new array of 100 ints</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// Unnecessarily complex:这种做法实在是很蛋疼</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> p *[]<span class="keyword">int</span> = <span class="built_in">new</span>([]<span class="keyword">int</span>)</span><br><span class="line">*p = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Idiomatic:习惯的做法</span></span><br><span class="line">v := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">p: &amp;[]</span><br><span class="line">v: [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br></pre></td></tr></table></figure>


<h1 id="Golang标准库bytes"><a href="#Golang标准库bytes" class="headerlink" title="Golang标准库bytes"></a>Golang标准库bytes</h1><p>bytes包提供了对<strong>字节切片</strong> 进行读写操作的一系列函数，字节切片处理的函数比较多分为基本处理函数、比较函数、后缀检查函数、索引函数、分割函数、大小写处理函数和子切片处理函数等.</p>
<h2 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bytes&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">1</span></span><br><span class="line">	<span class="keyword">var</span> j <span class="keyword">byte</span> = <span class="number">2</span></span><br><span class="line">	j = <span class="keyword">byte</span>(i)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;j: %v\n&quot;</span>, j)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Contains</span></span><br><span class="line">	b := []<span class="keyword">byte</span>(<span class="string">&quot;xiaobaibk.com&quot;</span>) <span class="comment">//字符串强转为byte切片</span></span><br><span class="line">	sublice1 := []<span class="keyword">byte</span>(<span class="string">&quot;xiaobaibk&quot;</span>)</span><br><span class="line">	sublice2 := []<span class="keyword">byte</span>(<span class="string">&quot;Xiaobaibk&quot;</span>)</span><br><span class="line">	fmt.Println(bytes.Contains(b, sublice1)) <span class="comment">//true</span></span><br><span class="line">	fmt.Println(bytes.Contains(b, sublice2)) <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//Count</span></span><br><span class="line">	s := []<span class="keyword">byte</span>(<span class="string">&quot;hellooooooooo&quot;</span>)</span><br><span class="line">	sep1 := []<span class="keyword">byte</span>(<span class="string">&quot;h&quot;</span>)</span><br><span class="line">	sep2 := []<span class="keyword">byte</span>(<span class="string">&quot;l&quot;</span>)</span><br><span class="line">	sep3 := []<span class="keyword">byte</span>(<span class="string">&quot;o&quot;</span>)</span><br><span class="line">	fmt.Println(bytes.Count(s, sep1)) <span class="comment">//1</span></span><br><span class="line">	fmt.Println(bytes.Count(s, sep2)) <span class="comment">//2</span></span><br><span class="line">	fmt.Println(bytes.Count(s, sep3)) <span class="comment">//9</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//Repeat</span></span><br><span class="line">	b = []<span class="keyword">byte</span>(<span class="string">&quot;hi&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(bytes.Repeat(b, <span class="number">1</span>))) <span class="comment">//hi</span></span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(bytes.Repeat(b, <span class="number">3</span>))) <span class="comment">//hihihi</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//Replace</span></span><br><span class="line">	s = []<span class="keyword">byte</span>(<span class="string">&quot;hello,world&quot;</span>)</span><br><span class="line">	old := []<span class="keyword">byte</span>(<span class="string">&quot;o&quot;</span>)</span><br><span class="line">	news := []<span class="keyword">byte</span>(<span class="string">&quot;ee&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(bytes.Replace(s, old, news, <span class="number">0</span>)))  <span class="comment">//hello,world</span></span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(bytes.Replace(s, old, news, <span class="number">1</span>)))  <span class="comment">//hellee,world</span></span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(bytes.Replace(s, old, news, <span class="number">2</span>)))  <span class="comment">//hellee,weerld</span></span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(bytes.Replace(s, old, news, <span class="number">-1</span>))) <span class="comment">//hellee,weerld</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//Runes</span></span><br><span class="line">	s = []<span class="keyword">byte</span>(<span class="string">&quot;你好世界&quot;</span>)</span><br><span class="line">	r := bytes.Runes(s)</span><br><span class="line">	fmt.Println(<span class="string">&quot;转换前字符串的长度: &quot;</span>, <span class="built_in">len</span>(s)) <span class="comment">//12</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;转换后字符串的长度: &quot;</span>, <span class="built_in">len</span>(r)) <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//Join</span></span><br><span class="line">	s2 := [][]<span class="keyword">byte</span>&#123;[]<span class="keyword">byte</span>(<span class="string">&quot;你好&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;世界&quot;</span>)&#125;</span><br><span class="line">	sep4 := []<span class="keyword">byte</span>(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(bytes.Join(s2, sep4))) <span class="comment">//你好,世界</span></span><br><span class="line">	sep5 := []<span class="keyword">byte</span>(<span class="string">&quot;#&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(bytes.Join(s2, sep5))) <span class="comment">//你好#世界</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Buffer类型"><a href="#Buffer类型" class="headerlink" title="Buffer类型"></a>Buffer类型</h2><p>缓冲区是具有读取和写入方法的可变大小的字节缓冲区。Buffer 的零值是准备使用的空缓冲区。</p>
<p>声明一个Buffer的四种方法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> b bytes.Buffer <span class="comment">// 直接定义一个Buffer变量，不用初始化，可以直接使用</span></span><br><span class="line">b := <span class="built_in">new</span>(bytes.Buffer) <span class="comment">//使用New返回Buffer变量</span></span><br><span class="line">b := bytes.NewBuffer(s []<span class="keyword">byte</span>) <span class="comment">//从一个[]byte切片，构造一个Buffer</span></span><br><span class="line">b := bytes.NewBufferString(s <span class="keyword">string</span>) <span class="comment">//从一个string变量，构造一个Buffer</span></span><br></pre></td></tr></table></figure>

<p><strong>往Buffer中写入数据</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">b.Write(d []<span class="keyword">byte</span>) <span class="comment">//将切片d写入Buffer尾部</span></span><br><span class="line">b.WriteString(s <span class="keyword">string</span>) <span class="comment">//将字符串s写入Buffer尾部</span></span><br><span class="line">b.WriteByte(c <span class="keyword">byte</span>) <span class="comment">//将字符c写入Buffer尾部</span></span><br><span class="line">b.WriteRune(r <span class="keyword">rune</span>) <span class="comment">//将一个rune类型的数据放到缓冲器的尾部</span></span><br><span class="line">b.WriteTo(w io.Writer) <span class="comment">//将Buffer中的内容输出到实现了io.Writer接口的可写入对象中</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：将文件中的内容写入Buffer,则使用ReadForm(i io.Reader)</p>
</blockquote>
<p><strong>从Buffer中读取数据到指定容器</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">c := <span class="built_in">make</span>([]<span class="keyword">byte</span>,<span class="number">8</span>)</span><br><span class="line">b.Read(c) <span class="comment">//一次读取8个byte到c容器中，每次读取新的8个byte覆盖c中原来的内容</span></span><br><span class="line">b.ReadByte() <span class="comment">//读取第一个byte，b的第1个byte被拿掉，赋值给 a =&gt; a, _ := b.ReadByte()</span></span><br><span class="line">b.ReadRune() <span class="comment">//读取第一个rune，b的第1个rune被拿掉，赋值给 r =&gt;  r, _ := b.ReadRune()</span></span><br><span class="line">b.ReadBytes(delimiter <span class="keyword">byte</span>) <span class="comment">//需要一个 byte作为分隔符 ，读的时候从缓冲器里找第一个出现的分隔符（delim），找到后，把从缓冲器头部开始到分隔符之间的所有byte进行返回，作为byte类型的slice，返回后，缓冲器也会空掉一部分</span></span><br><span class="line">b.ReadString(delimiter <span class="keyword">byte</span>) <span class="comment">// 需要一个byte作为分隔符，读的时候从缓冲器里找第一个出现的分隔符（delim），找到后，把从缓冲器头部开始到分隔符之间的所有byte进行返回， 作为字符串返回 ，返回后，缓冲器也会空掉一部分b.ReadForm(i io.Reader) // 从一个实现io.Reader接口的r，把r里的内容读到缓冲器里 ，n 返回读的数量</span></span><br><span class="line"></span><br><span class="line">file, _ := os.Open(<span class="string">&quot;.text.txt&quot;</span>)  </span><br><span class="line">buf := bytes.NewBufferString(<span class="string">&quot;Hello world&quot;</span>)  </span><br><span class="line">buf.ReadFrom(file) </span><br><span class="line"><span class="comment">//将text.txt内容追加到缓冲器的尾部</span></span><br><span class="line">fmt.Println(buf.String())</span><br><span class="line">清空数据</span><br><span class="line">b.Reset()</span><br><span class="line">转换为字符串</span><br><span class="line">b.String()</span><br></pre></td></tr></table></figure>

<h2 id="Reader类型"><a href="#Reader类型" class="headerlink" title="Reader类型"></a>Reader类型</h2><p>Reader实现了 <code>io.Reader, io.ReaderAt, io.WriterTo, io.Seeker,io.ByteScanner, io.RuneScanner</code>接口，Reader是只读的、可以seek。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testReader</span><span class="params">()</span></span> &#123;</span><br><span class="line">	data := <span class="string">&quot;123456789&quot;</span></span><br><span class="line">	<span class="comment">//通过[]byte创建Reader</span></span><br><span class="line">	re := bytes.NewReader([]<span class="keyword">byte</span>(data))</span><br><span class="line">	<span class="comment">//返回未读取部分的长度</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;re len : &quot;</span>, re.Len())</span><br><span class="line">	<span class="comment">//返回底层数据总长度</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;re size : &quot;</span>, re.Size())</span><br><span class="line">	fmt.Println(<span class="string">&quot;------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">	buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2</span>)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="comment">//读取数据</span></span><br><span class="line">		n, err := re.Read(buf)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println(<span class="keyword">string</span>(buf[:n]))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//设置偏移量，因为上面的操作已经修改了读取位置等信息</span></span><br><span class="line">	re.Seek(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="comment">//一个字节一个字节的读</span></span><br><span class="line">		b, err := re.ReadByte()</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println(<span class="keyword">string</span>(b))</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">	re.Seek(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">	off := <span class="keyword">int64</span>(<span class="number">0</span>)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="comment">//指定偏移量读取</span></span><br><span class="line">		n, err := re.ReadAt(buf, off)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		off += <span class="keyword">int64</span>(n)</span><br><span class="line">		fmt.Println(off, <span class="keyword">string</span>(buf[:n]))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang标准库errors"><a href="#Golang标准库errors" class="headerlink" title="Golang标准库errors"></a>Golang标准库errors</h1><p>errors包实现了操作错误的函数。语言使用 error 类型来返回函数执行过程中遇到的错误，如果返回的 error 值为 <code>nil</code>，则表示未遇到错误，否则 error 会返回一个字符串，用于说明遇到了什么错误。</p>
<h2 id="error-结构"><a href="#error-结构" class="headerlink" title="error 结构"></a>error 结构</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</span><br><span class="line">	Error() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你可以用任何类型去实现它（只要添加一个 Error() 方法即可），也就是说，error 可以是任何类型，这意味着，函数返回的 error 值实际可以包含任意信息，不一定是字符串。</p>
<p>error 不一定表示一个错误，它可以表示任何信息，比如 io 包中就用 error 类型的 <code>io.EOF</code> 表示数据读取结束，而不是遇到了什么错误。</p>
<p>errors 包实现了一个最简单的 error 类型，只包含一个字符串，它可以记录大多数情况下遇到的错误信息。errors 包的用法也很简单，只有一个 <code>New</code> 函数，用于生成一个最简单的 error 对象：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(text <span class="keyword">string</span>)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;errors&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">check</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> s == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> errors.New(<span class="string">&quot;字符串不能为空&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	check(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">	err := check(<span class="string">&quot;&quot;</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err.Error())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义错误"><a href="#自定义错误" class="headerlink" title="自定义错误"></a>自定义错误</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// MyError is an error implementation that includes a time and message.</span></span><br><span class="line"><span class="keyword">type</span> MyError <span class="keyword">struct</span> &#123;</span><br><span class="line">	When time.Time</span><br><span class="line">	What <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e MyError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%v: %v&quot;</span>, e.When, e.What)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">oops</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> MyError&#123;</span><br><span class="line">		time.Date(<span class="number">1989</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">22</span>, <span class="number">30</span>, <span class="number">0</span>, <span class="number">0</span>, time.UTC),</span><br><span class="line">		<span class="string">&quot;the file system has gone away&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> err := oops(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang标准库中的sort包"><a href="#Golang标准库中的sort包" class="headerlink" title="Golang标准库中的sort包"></a>Golang标准库中的sort包</h1><h2 id="sort包的内容，以及使用"><a href="#sort包的内容，以及使用" class="headerlink" title="sort包的内容，以及使用"></a>sort包的内容，以及使用</h2><p>sort包提供了排序切片和用户自定义数据集以及相关功能的函数。</p>
<p>sort包主要针对 <code>[]int</code>、<code>[]float64</code>、<code>[]string</code>、以及其他<strong>自定义切片</strong> 的排序。</p>
<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">IntSlice</span></span> []int</span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Float64Slice</span></span> </span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">StringSlice</span></span></span><br></pre></td></tr></table></figure>

<h2 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Ints</span><span class="params">(a []<span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IntsAreSorted</span><span class="params">(a []<span class="keyword">int</span>)</span> <span class="title">bool</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SearchInts</span><span class="params">(a []<span class="keyword">int</span>, x <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Float64s</span><span class="params">(a []<span class="keyword">float64</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Float64sAreSorted</span><span class="params">(a []<span class="keyword">float64</span>)</span> <span class="title">bool</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SearchFloat64s</span><span class="params">(a []<span class="keyword">float64</span>, x <span class="keyword">float64</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SearchFloat64s</span><span class="params">(a []flaot64, x <span class="keyword">float64</span>)</span> <span class="title">bool</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Strings</span><span class="params">(a []<span class="keyword">string</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StringsAreSorted</span><span class="params">(a []<span class="keyword">string</span>)</span> <span class="title">bool</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SearchStrings</span><span class="params">(a []<span class="keyword">string</span>, x <span class="keyword">string</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sort</span><span class="params">(data Interface)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Stable</span><span class="params">(data Interface)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Reverse</span><span class="params">(data Interface)</span> <span class="title">Interface</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ISSorted</span><span class="params">(data Interface)</span> <span class="title">bool</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Search</span><span class="params">(n <span class="keyword">int</span>, f <span class="keyword">func</span>(<span class="keyword">int</span>)</span> <span class="title">bool</span>) <span class="title">int</span></span></span><br></pre></td></tr></table></figure>

<h3 id="接口-type-Interface"><a href="#接口-type-Interface" class="headerlink" title="接口 type Interface"></a>接口 type Interface</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">type Interface <span class="keyword">interface</span> &#123;</span><br><span class="line">    Len() <span class="built_in">int</span>           <span class="comment">// Len方法返回集合中的元素个数</span></span><br><span class="line">    Less(i, j <span class="built_in">int</span>) <span class="built_in">bool</span> <span class="comment">// i&gt;j，该方法返回索引i的元素是否比索引j的元素小、</span></span><br><span class="line">    Swap(i, j <span class="built_in">int</span>)      <span class="comment">// 交换i, j的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sort&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> NewInts []<span class="keyword">uint</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n NewInts)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n NewInts)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    fmt.Println(i, j, n[i] &lt; n[j], n)</span><br><span class="line">    <span class="keyword">return</span> n[i] &lt; n[j]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n NewInts)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    n[i], n[j] = n[j], n[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    n := []<span class="keyword">uint</span>&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>&#125;</span><br><span class="line">    sort.Sort(NewInts(n))</span><br><span class="line">    fmt.Println(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结构体-1"><a href="#结构体-1" class="headerlink" title="结构体"></a>结构体</h2><p>三种结构体的方法都是一样的，只是分别针对int切片、float64切片、strings切片这三种不同的类型。 然后三种结果都有五个公开方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p xxxSlice)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span>  // 切片长度</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p xxxSlice)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p xxxSlice)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p xxxSlice)</span> <span class="title">Search</span><span class="params">(x xxx)</span> <span class="title">int</span></span></span><br><span class="line"><span class="comment">// 这个和后面那个功能一样</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p xxxSlice)</span> <span class="title">Sort</span><span class="params">()</span></span>  </span><br></pre></td></tr></table></figure>

<h2 id="综合实例"><a href="#综合实例" class="headerlink" title="综合实例"></a>综合实例</h2><p><strong><code>[]float64</code>:</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">f := []<span class="keyword">float64</span>&#123;<span class="number">1.1</span>, <span class="number">4.4</span>, <span class="number">5.5</span>, <span class="number">3.3</span>, <span class="number">2.2</span>&#125;</span><br><span class="line">sort.Float64s(f)</span><br><span class="line">fmt.Printf(<span class="string">&quot;f: %v\n&quot;</span>, f)</span><br><span class="line"><span class="comment">// f: [1.1 2.2 3.3 4.4 5.5]</span></span><br></pre></td></tr></table></figure>

<p><strong><code>[]int:</code></strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">f := []<span class="keyword">int</span>&#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>&#125;</span><br><span class="line">sort.Ints(f)</span><br><span class="line">fmt.Printf(<span class="string">&quot;f: %v\n&quot;</span>, f)</span><br><span class="line"><span class="comment">// f: [1 2 3 4 5]</span></span><br></pre></td></tr></table></figure>

<p><strong>string:</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符串排序，现比较高位，相同的再比较低位</span></span><br><span class="line"><span class="comment">// [] string</span></span><br><span class="line">ls := sort.StringSlice&#123;</span><br><span class="line">    <span class="string">&quot;100&quot;</span>,</span><br><span class="line">    <span class="string">&quot;42&quot;</span>,</span><br><span class="line">    <span class="string">&quot;41&quot;</span>,</span><br><span class="line">    <span class="string">&quot;3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;2&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(ls)  <span class="comment">//[100 42 41 3 2]</span></span><br><span class="line">sort.Strings(ls)</span><br><span class="line">fmt.Println(ls)  <span class="comment">//[100 2 3 41 42]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串排序，现比较高位，相同的再比较低位</span></span><br><span class="line">ls := sort.StringSlice&#123;</span><br><span class="line">    <span class="string">&quot;d&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ac&quot;</span>,</span><br><span class="line">    <span class="string">&quot;c&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ab&quot;</span>,</span><br><span class="line">    <span class="string">&quot;e&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(ls)  <span class="comment">//[d ac c ab e]</span></span><br><span class="line">sort.Strings(ls)</span><br><span class="line">fmt.Println(ls)  <span class="comment">//[ab ac c d e]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//汉字排序，依次比较byte大小</span></span><br><span class="line">ls := sort.StringSlice&#123;</span><br><span class="line">    <span class="string">&quot;啊&quot;</span>,</span><br><span class="line">    <span class="string">&quot;博&quot;</span>,</span><br><span class="line">    <span class="string">&quot;次&quot;</span>,</span><br><span class="line">    <span class="string">&quot;得&quot;</span>,</span><br><span class="line">    <span class="string">&quot;饿&quot;</span>,</span><br><span class="line">    <span class="string">&quot;周&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(ls)  <span class="comment">//[啊 博 次 得 饿 周]</span></span><br><span class="line">sort.Strings(ls)</span><br><span class="line">fmt.Println(ls)  <span class="comment">//[博 周 啊 得 次 饿]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> ls&#123;</span><br><span class="line">    fmt.Println(v, []<span class="keyword">byte</span>(v))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//博 [229 141 154]</span></span><br><span class="line"><span class="comment">//周 [229 145 168]</span></span><br><span class="line"><span class="comment">//啊 [229 149 138]</span></span><br><span class="line"><span class="comment">//得 [229 190 151]</span></span><br><span class="line"><span class="comment">//次 [230 172 161]</span></span><br><span class="line"><span class="comment">//饿 [233 165 191]</span></span><br></pre></td></tr></table></figure>

<p><strong>复杂结构：<code>[][]int :</code></strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> testSlice [][]<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l testSlice)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span>            &#123; <span class="keyword">return</span> <span class="built_in">len</span>(l) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l testSlice)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span>      &#123; l[i], l[j] = l[j], l[i] &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l testSlice)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> l[i][<span class="number">1</span>] &lt; l[j][<span class="number">1</span>] &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ls := testSlice&#123;</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">4</span>&#125;,</span><br><span class="line">        &#123;<span class="number">9</span>,<span class="number">3</span>&#125;,</span><br><span class="line">        &#123;<span class="number">7</span>,<span class="number">5</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(ls)  <span class="comment">//[[1 4] [9 3] [7 5]]</span></span><br><span class="line">    sort.Sort(ls)</span><br><span class="line">    fmt.Println(ls)  <span class="comment">//[[9 3] [1 4] [7 5]]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>复杂结构体：<code>[]map[string]int [&#123;&quot;k&quot;:0&#125;,&#123;&quot;k1&quot;:1&#125;,&#123;&quot;k2&quot;:2] :</code></strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> testSlice []<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l testSlice)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span>            &#123; <span class="keyword">return</span> <span class="built_in">len</span>(l) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l testSlice)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span>      &#123; l[i], l[j] = l[j], l[i] &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l testSlice)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> l[i][<span class="string">&quot;a&quot;</span>] &lt; l[j][<span class="string">&quot;a&quot;</span>] &#125; <span class="comment">//按照&quot;a&quot;对应的值排序</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ls := testSlice&#123;</span><br><span class="line">        &#123;<span class="string">&quot;a&quot;</span>:<span class="number">4</span>, <span class="string">&quot;b&quot;</span>:<span class="number">12</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;a&quot;</span>:<span class="number">3</span>, <span class="string">&quot;b&quot;</span>:<span class="number">11</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;a&quot;</span>:<span class="number">5</span>, <span class="string">&quot;b&quot;</span>:<span class="number">10</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(ls)  <span class="comment">//[map[a:4 b:12] map[a:3 b:11] map[a:5 b:10]]</span></span><br><span class="line">    sort.Sort(ls)</span><br><span class="line">    fmt.Println(ls)  <span class="comment">//[map[a:3 b:11] map[a:4 b:12] map[a:5 b:10]]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>复杂结构体：<code>[]struct :</code></strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span> </span><br><span class="line">    Age <span class="keyword">int</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> testSlice []People</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l testSlice)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span>            &#123; <span class="keyword">return</span> <span class="built_in">len</span>(l) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l testSlice)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span>      &#123; l[i], l[j] = l[j], l[i] &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l testSlice)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> l[i].Age &lt; l[j].Age &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ls := testSlice&#123;</span><br><span class="line">        &#123;Name:<span class="string">&quot;n1&quot;</span>, Age:<span class="number">12</span>&#125;,</span><br><span class="line">        &#123;Name:<span class="string">&quot;n2&quot;</span>, Age:<span class="number">11</span>&#125;,</span><br><span class="line">        &#123;Name:<span class="string">&quot;n3&quot;</span>, Age:<span class="number">10</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(ls)  <span class="comment">//[&#123;n1 12&#125; &#123;n2 11&#125; &#123;n3 10&#125;]</span></span><br><span class="line">    sort.Sort(ls)</span><br><span class="line">    fmt.Println(ls)  <span class="comment">//[&#123;n3 10&#125; &#123;n2 11&#125; &#123;n1 12&#125;]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang标准库time"><a href="#Golang标准库time" class="headerlink" title="Golang标准库time"></a>Golang标准库time</h1><p>time包提供测量和显示时间的功能。</p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a><strong>基本使用</strong></h2><p>打印显示出现在的时间，基本示例如下。 其中now为 <code>time.Time</code>类型,Month 为 <code>time.Month</code>类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    now := time.Now() <span class="comment">//获取当前时间</span></span><br><span class="line">    <span class="comment">// current time:2020-12-01 22:24:30.85736 +0800 CST m=+0.000096031</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;current time:%v\n&quot;</span>, now)</span><br><span class="line">    year := now.Year()     <span class="comment">//年</span></span><br><span class="line">    month := now.Month()   <span class="comment">//月</span></span><br><span class="line">    day := now.Day()       <span class="comment">//日</span></span><br><span class="line">    hour := now.Hour()     <span class="comment">//小时</span></span><br><span class="line">    minute := now.Minute() <span class="comment">//分钟</span></span><br><span class="line">    second := now.Second() <span class="comment">//秒</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d-%02d-%02d %02d:%02d:%02d\n&quot;</span>, year, month, day, hour, minute, second)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T,%T,%T,%T,%T,%T,%T\n&quot;</span>, now, year, month, day, hour, minute, second)</span><br><span class="line">    <span class="comment">// time.Time,int,time.Month,int,int,int,int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a><strong>时间戳</strong></h2><p>在编程中对于时间戳的应用也尤为广泛,例如在Web开发中做cookies有效期，接口加密，Redis中的key有效期等等，大部分都是使用到了时间戳。</p>
<p>时间戳是自1970年1月1日（08:00:00GMT）至当前时间的总毫秒数。它也被称为Unix时间戳（UnixTimestamp）。 在GoLang中,获取时间戳的操作如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    now := time.Now()</span><br><span class="line">    <span class="comment">// 当前时间戳 TimeStamp type:int64, TimeStamp:1606832965</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;TimeStamp type:%T, TimeStamp:%v&quot;</span>, now.Unix(), now.Unix())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除此之外还有纳秒时间戳，我们可以使用 <code>time.Now().UnixNano()</code>来获取它</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test3</span><span class="params">()</span></span> &#123;</span><br><span class="line">    now := time.Now()</span><br><span class="line">    <span class="comment">// 纳秒级时间戳TimeStamp type:int64, TimeStamp:1606833059999670000</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;TimeStamp type:%T, TimeStamp:%v\n&quot;</span>, now.UnixNano(), now.UnixNano())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="时间戳转化为普通的时间格式"><a href="#时间戳转化为普通的时间格式" class="headerlink" title="时间戳转化为普通的时间格式"></a>时间戳转化为普通的时间格式</h3><p>在 <code>go</code>语言中可以 <code>time.Unix</code>来直接将时间戳转化为当前时间格式，实现瞬间替换。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">timeStampToTime</span><span class="params">()</span></span> &#123;</span><br><span class="line">    timestamp := time.Now().Unix()</span><br><span class="line">    timeObj := time.Unix(timestamp, <span class="number">0</span>) <span class="comment">//将时间戳转为时间格式</span></span><br><span class="line">    fmt.Println(timeObj)</span><br><span class="line">    year := timeObj.Year()     <span class="comment">//年</span></span><br><span class="line">    month := timeObj.Month()   <span class="comment">//月</span></span><br><span class="line">    day := timeObj.Day()       <span class="comment">//日</span></span><br><span class="line">    hour := timeObj.Hour()     <span class="comment">//小时</span></span><br><span class="line">    minute := timeObj.Minute() <span class="comment">//分钟</span></span><br><span class="line">    second := timeObj.Second() <span class="comment">//秒</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d-%02d-%02d %02d:%02d:%02d\n&quot;</span>, year, month, day, hour, minute, second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="操作时间"><a href="#操作时间" class="headerlink" title="操作时间"></a><strong>操作时间</strong></h3><h3 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a><strong>ADD</strong></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(h, m, s, mls, msc, ns time.Duration)</span></span> &#123;</span><br><span class="line">    now := time.Now()</span><br><span class="line">    fmt.Println(now.Add(time.Hour*h + time.Minute*m + time.Second*s + time.Millisecond*mls + time.Microsecond*msc + time.Nanosecond*ns))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    test4(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意在这里并不能增加年\月\日，仅能增加时分秒,也就是以下的才被允许</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Nanosecond  Duration = <span class="number">1</span></span><br><span class="line">    Microsecond          = <span class="number">1000</span> * Nanosecond</span><br><span class="line">    Millisecond          = <span class="number">1000</span> * Microsecond</span><br><span class="line">    Second               = <span class="number">1000</span> * Millisecond</span><br><span class="line">    Minute               = <span class="number">60</span> * Second</span><br><span class="line">    Hour                 = <span class="number">60</span> * Minute</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="Sub"><a href="#Sub" class="headerlink" title="Sub"></a><strong>Sub</strong></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sub</span><span class="params">()</span></span> &#123;</span><br><span class="line">    now := time.Now()</span><br><span class="line">    targetTime := now.Add(time.Hour)</span><br><span class="line">    <span class="comment">// 目标时间与此时相比相差1h0m0s</span></span><br><span class="line">    fmt.Println(targetTime.Sub(now))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>谁的sub谁为参照时间</p>
</blockquote>
<h3 id="Equal"><a href="#Equal" class="headerlink" title="Equal"></a><strong>Equal</strong></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span> <span class="title">Equal</span><span class="params">(u Time)</span> <span class="title">bool</span></span></span><br></pre></td></tr></table></figure>

<p>判断两个时间是否相同，会考虑时区的影响，因此不同时区标准的时间也可以正确比较。</p>
<h3 id="Before"><a href="#Before" class="headerlink" title="Before"></a><strong>Before</strong></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span> <span class="title">Before</span><span class="params">(u Time)</span> <span class="title">bool</span></span></span><br></pre></td></tr></table></figure>

<p>如果t代表的时间点在u之前，返回真；否则返回假。</p>
<h3 id="After"><a href="#After" class="headerlink" title="After"></a><strong>After</strong></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span> <span class="title">After</span><span class="params">(u Time)</span> <span class="title">bool</span></span></span><br></pre></td></tr></table></figure>

<p>如果t代表的时间点在u之后，返回真；否则返回假。</p>
<h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a><strong>定时器</strong></h3><p>使用 <code>time.Tick(时间间隔)</code>来设置定时器，定时器的本质上是一个通道（channel）。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tick</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ticker := time.Tick(time.Second) <span class="comment">//定义一个1秒间隔的定时器</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> ticker &#123;</span><br><span class="line">        fmt.Println(i)<span class="comment">//每秒都会执行的任务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a><strong>时间格式化</strong></h3><p>时间类型有一个自带的方法 <code>Format</code>进行格式化，需要注意的是Go语言中格式化时间模板不是常见的 <code>Y-m-d H:M:S</code>而是使用Go的诞生时间2006年1月2号15点04分（记忆口诀为2006 1 2 3 4）</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">format</span><span class="params">()</span></span> &#123;</span><br><span class="line">    now := time.Now()</span><br><span class="line">    <span class="comment">// 格式化的模板为Go的出生时间2006年1月2号15点04分 Mon Jan</span></span><br><span class="line">    <span class="comment">// 24小时制</span></span><br><span class="line">    fmt.Println(now.Format(<span class="string">&quot;2006-01-02 15:04:05.000 Mon Jan&quot;</span>))</span><br><span class="line">    <span class="comment">// 12小时制</span></span><br><span class="line">    fmt.Println(now.Format(<span class="string">&quot;2006-01-02 03:04:05.000 PM Mon Jan&quot;</span>))</span><br><span class="line">    fmt.Println(now.Format(<span class="string">&quot;2006/01/02 15:04&quot;</span>))</span><br><span class="line">    fmt.Println(now.Format(<span class="string">&quot;15:04 2006/01/02&quot;</span>))</span><br><span class="line">    fmt.Println(now.Format(<span class="string">&quot;2006/01/02&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>补充：如果想格式化为12小时方式，需指定 <code>PM</code>。</p>
</blockquote>
<h3 id="解析字符串格式的时间"><a href="#解析字符串格式的时间" class="headerlink" title="解析字符串格式的时间"></a><strong>解析字符串格式的时间</strong></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">now := time.Now()</span><br><span class="line">fmt.Println(now)</span><br><span class="line"><span class="comment">// 加载时区</span></span><br><span class="line">loc, err := time.LoadLocation(<span class="string">&quot;Asia/Shanghai&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 按照指定时区和指定格式解析字符串时间</span></span><br><span class="line">timeObj, err := time.ParseInLocation(<span class="string">&quot;2006/01/02 15:04:05&quot;</span>, <span class="string">&quot;2019/08/04 14:15:20&quot;</span>, loc)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(timeObj)</span><br><span class="line">fmt.Println(timeObj.Sub(now))</span><br></pre></td></tr></table></figure>


<h1 id="Golang-标准库encoding-json"><a href="#Golang-标准库encoding-json" class="headerlink" title="Golang 标准库encoding/json"></a>Golang 标准库encoding/json</h1><p>这个包可以实现json的编码和解码，就是将json字符串转换为 <code>struct</code>，或者将 <code>struct</code>转换为json。</p>
<h2 id="核心的两个函数"><a href="#核心的两个函数" class="headerlink" title="核心的两个函数"></a>核心的两个函数</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Marshal</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>将struct编码成json，可以接收任意类型</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Unmarshal</span><span class="params">(data []<span class="keyword">byte</span>, v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>将json转码成struct结构体</p>
</blockquote>
<h2 id="两个核心结构体"><a href="#两个核心结构体" class="headerlink" title="两个核心结构体"></a>两个核心结构体</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Decoder <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// contains filtered or unexported fields</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>从输入流读取并解析json</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Encoder <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// contains filtered or unexported fields</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>写json到输出流</p>
</blockquote>
<h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><p><strong>结构体转换为json</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name  <span class="keyword">string</span></span><br><span class="line">	Age   <span class="keyword">int</span></span><br><span class="line">	Email <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Marshal</span><span class="params">()</span></span> &#123;</span><br><span class="line">	p := Person&#123;</span><br><span class="line">		Name:  <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">		Age:   <span class="number">20</span>,</span><br><span class="line">		Email: <span class="string">&quot;tom@gmail.com&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	b, _ := json.Marshal(p)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, <span class="keyword">string</span>(b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>json转换为结构体</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Unmarshal</span><span class="params">()</span></span> &#123;</span><br><span class="line">	b1 := []<span class="keyword">byte</span>(<span class="string">`&#123;&quot;Name&quot;:&quot;tom&quot;,&quot;Age&quot;:20,&quot;Email&quot;:&quot;tom@gmail.com&quot;&#125;`</span>)</span><br><span class="line">	<span class="keyword">var</span> m Person</span><br><span class="line">	json.Unmarshal(b1, &amp;m)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;m: %v\n&quot;</span>, m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>解析嵌套类型</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解析嵌套类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test3</span><span class="params">()</span></span> &#123;</span><br><span class="line">	b := []<span class="keyword">byte</span>(<span class="string">`&#123;&quot;Name&quot;:&quot;tom&quot;,&quot;Age&quot;:20,&quot;Email&quot;:&quot;tom@gmail.com&quot;, &quot;Parents&quot;:[&quot;tom&quot;, &quot;kite&quot;]&#125;`</span>)</span><br><span class="line">	<span class="keyword">var</span> f <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">	json.Unmarshal(b, &amp;f)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;f: %v\n&quot;</span>, f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>解析嵌套引用类型</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test4</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">		Name   <span class="keyword">string</span></span><br><span class="line">		Age    <span class="keyword">int</span></span><br><span class="line">		Email  <span class="keyword">string</span></span><br><span class="line">		Parent []<span class="keyword">string</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	p := Person&#123;</span><br><span class="line">		Name:   <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">		Age:    <span class="number">20</span>,</span><br><span class="line">		Email:  <span class="string">&quot;tom@gmail.com&quot;</span>,</span><br><span class="line">		Parent: []<span class="keyword">string</span>&#123;<span class="string">&quot;big tom&quot;</span>, <span class="string">&quot;big kite&quot;</span>&#125;,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	b, _ := json.Marshal(p)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, <span class="keyword">string</span>(b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>io流 Reader Writer 可以扩展到http websocket等场景</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test5</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// dec := json.NewDecoder(os.Stdin)</span></span><br><span class="line">	<span class="comment">// a.json : &#123;&quot;Name&quot;:&quot;tom&quot;,&quot;Age&quot;:20,&quot;Email&quot;:&quot;tom@gmail.com&quot;, &quot;Parents&quot;:[&quot;tom&quot;, &quot;kite&quot;]&#125;</span></span><br><span class="line">	f, _ := os.Open(<span class="string">&quot;a.json&quot;</span>)</span><br><span class="line">	dec := json.NewDecoder(f)</span><br><span class="line">	enc := json.NewEncoder(os.Stdout)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">var</span> v <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">		<span class="keyword">if</span> err := dec.Decode(&amp;v); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Println(err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;v: %v\n&quot;</span>, v)</span><br><span class="line">		<span class="keyword">if</span> err := enc.Encode(&amp;v); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Println(err)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		输入 &#123;&quot;Name&quot;:&quot;tom&quot;,&quot;Age&quot;:20,&quot;Email&quot;:&quot;tom@gmail.com&quot;&#125;</span></span><br><span class="line"><span class="comment">		输出</span></span><br><span class="line"><span class="comment">		v: map[Age:20 Email:tom@gmail.com Name:tom]</span></span><br><span class="line"><span class="comment">		&#123;&quot;Age&quot;:20,&quot;Email&quot;:&quot;tom@gmail.com&quot;,&quot;Name&quot;:&quot;tom&quot;&#125;</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>也可以读写文件</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test6</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f, _ := os.Open(<span class="string">&quot;a.json&quot;</span>)</span><br><span class="line">	<span class="keyword">defer</span> f.Close()</span><br><span class="line">	d := json.NewDecoder(f)</span><br><span class="line">	<span class="keyword">var</span> v <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">	d.Decode(&amp;v)</span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;v: %v\n&quot;</span>, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test7</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">		Name   <span class="keyword">string</span></span><br><span class="line">		Age    <span class="keyword">int</span></span><br><span class="line">		Email  <span class="keyword">string</span></span><br><span class="line">		Parent []<span class="keyword">string</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	p := Person&#123;</span><br><span class="line">		Name:   <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">		Age:    <span class="number">20</span>,</span><br><span class="line">		Email:  <span class="string">&quot;tom@gmail.com&quot;</span>,</span><br><span class="line">		Parent: []<span class="keyword">string</span>&#123;<span class="string">&quot;big tom&quot;</span>, <span class="string">&quot;big kite&quot;</span>&#125;,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	f, _ := os.OpenFile(<span class="string">&quot;a.json&quot;</span>, os.O_WRONLY, <span class="number">0777</span>)</span><br><span class="line">	<span class="keyword">defer</span> f.Close()</span><br><span class="line">	e := json.NewEncoder(f)</span><br><span class="line">	e.Encode(p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang-标准库encoding-xml"><a href="#Golang-标准库encoding-xml" class="headerlink" title="Golang 标准库encoding/xml"></a>Golang 标准库encoding/xml</h1><p>xml包实现xml解析</p>
<h2 id="核心的两个函数-1"><a href="#核心的两个函数-1" class="headerlink" title="核心的两个函数"></a>核心的两个函数</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Marshal</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>将struct编码成xml，可以接收任意类型</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Unmarshal</span><span class="params">(data []<span class="keyword">byte</span>, v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>将xml转码成struct结构体</p>
</blockquote>
<h2 id="两个核心结构体-1"><a href="#两个核心结构体-1" class="headerlink" title="两个核心结构体"></a>两个核心结构体</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Decoder <span class="keyword">struct</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>从输入流读取并解析xml</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Encoder  <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// contains filtered or unexported fields</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>写xml到输出流</p>
</blockquote>
<h2 id="实例演示-1"><a href="#实例演示-1" class="headerlink" title="实例演示"></a>实例演示</h2><p><strong>结构体转换为xml</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	XMLName xml.Name <span class="string">`xml:&quot;person&quot;`</span></span><br><span class="line">	Name    <span class="keyword">string</span>   <span class="string">`xml:&quot;name&quot;`</span></span><br><span class="line">	Age     <span class="keyword">int</span>      <span class="string">`xml:&quot;age&quot;`</span></span><br><span class="line">	Email   <span class="keyword">string</span>   <span class="string">`xml:&quot;email&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Marshal</span><span class="params">()</span></span> &#123;</span><br><span class="line">	p := Person&#123;</span><br><span class="line">		Name:  <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">		Age:   <span class="number">20</span>,</span><br><span class="line">		Email: <span class="string">&quot;tom@gmail.com&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// b, _ := xml.Marshal(p)</span></span><br><span class="line">	<span class="comment">// 有缩进格式</span></span><br><span class="line">	b, _ := xml.MarshalIndent(p, <span class="string">&quot; &quot;</span>, <span class="string">&quot;  &quot;</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, <span class="keyword">string</span>(b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>也可以读写文件</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">read</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">		&lt;person&gt;</span></span><br><span class="line"><span class="comment">		   &lt;name&gt;tom&lt;/name&gt;</span></span><br><span class="line"><span class="comment">		   &lt;age&gt;20&lt;/age&gt;</span></span><br><span class="line"><span class="comment">		   &lt;email&gt;tom@gmail.com&lt;/email&gt;</span></span><br><span class="line"><span class="comment">		&lt;/person&gt;</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	b, _ := ioutil.ReadFile(<span class="string">&quot;a.xml&quot;</span>)</span><br><span class="line">	<span class="keyword">var</span> p Person</span><br><span class="line">	xml.Unmarshal(b, &amp;p)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;p: %v\n&quot;</span>, p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">write</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">		XMLName xml.Name <span class="string">`xml:&quot;person&quot;`</span></span><br><span class="line">		Name    <span class="keyword">string</span>   <span class="string">`xml:&quot;name&quot;`</span></span><br><span class="line">		Age     <span class="keyword">int</span>      <span class="string">`xml:&quot;age&quot;`</span></span><br><span class="line">		Email   <span class="keyword">string</span>   <span class="string">`xml:&quot;email&quot;`</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	p := Person&#123;</span><br><span class="line">		Name:  <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">		Age:   <span class="number">20</span>,</span><br><span class="line">		Email: <span class="string">&quot;tom@gmail.com&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	f, _ := os.OpenFile(<span class="string">&quot;a.xml&quot;</span>, os.O_WRONLY, <span class="number">0777</span>)</span><br><span class="line">	<span class="keyword">defer</span> f.Close()</span><br><span class="line">	e := xml.NewEncoder(f)</span><br><span class="line">	e.Encode(p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang标准库math"><a href="#Golang标准库math" class="headerlink" title="Golang标准库math"></a>Golang标准库math</h1><p>该包包含一些常量和一些有用的数学计算函数，例如：三角函数、随机数、绝对值、平方根等。</p>
<h2 id="常量-1"><a href="#常量-1" class="headerlink" title="常量"></a>常量</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">&quot;float64的最大值是:%.f\n&quot;</span>, math.MaxFloat64)</span><br><span class="line">fmt.Printf(<span class="string">&quot;float64的最小值是:%.f\n&quot;</span>, math.SmallestNonzeroFloat64)</span><br><span class="line">fmt.Printf(<span class="string">&quot;float32的最大值是:%.f\n&quot;</span>, math.MaxFloat32)</span><br><span class="line">fmt.Printf(<span class="string">&quot;float32的最小值是:%.f\n&quot;</span>, math.SmallestNonzeroFloat32)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Int8的最大值是:%d\n&quot;</span>, math.MaxInt8)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Int8的最小值是:%d\n&quot;</span>, math.MinInt8)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Uint8的最大值是:%d\n&quot;</span>, math.MaxUint8)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Int16的最大值是:%d\n&quot;</span>, math.MaxInt16)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Int16的最小值是:%d\n&quot;</span>, math.MinInt16)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Uint16的最大值是:%d\n&quot;</span>, math.MaxUint16)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Int32的最大值是:%d\n&quot;</span>, math.MaxInt32)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Int32的最小值是:%d\n&quot;</span>, math.MinInt32)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Uint32的最大值是:%d\n&quot;</span>, math.MaxUint32)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Int64的最大值是:%d\n&quot;</span>, math.MaxInt64)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Int64的最小值是:%d\n&quot;</span>, math.MinInt64)</span><br><span class="line">fmt.Printf(<span class="string">&quot;圆周率默认为:%.200f\n&quot;</span>, math.Pi)</span><br></pre></td></tr></table></figure>

<p><strong>运行结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">float64的最大值是:179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368</span><br><span class="line">float64的最小值是:0</span><br><span class="line">float32的最大值是:340282346638528859811704183484516925440</span><br><span class="line">float32的最小值是:0</span><br><span class="line">Int8的最大值是:127</span><br><span class="line">Int8的最小值是:-128</span><br><span class="line">Uint8的最大值是:255</span><br><span class="line">Int16的最大值是:32767</span><br><span class="line">Int16的最小值是:-32768</span><br><span class="line">Uint16的最大值是:65535</span><br><span class="line">Int32的最大值是:2147483647</span><br><span class="line">Int32的最小值是:-2147483648</span><br><span class="line">Uint32的最大值是:4294967295</span><br><span class="line">Int64的最大值是:9223372036854775807</span><br><span class="line">Int64的最小值是:-9223372036854775808</span><br><span class="line">圆周率默认为:3.14159265358979311599796346854418516159057617187500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br></pre></td></tr></table></figure>

<h2 id="常用函数-2"><a href="#常用函数-2" class="headerlink" title="常用函数"></a>常用函数</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		取绝对值,函数签名如下:</span></span><br><span class="line"><span class="comment">		func Abs(x float64) float64</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;[-3.14]的绝对值为:[%.2f]\n&quot;</span>, math.Abs(<span class="number">-3.14</span>))</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		取x的y次方，函数签名如下:</span></span><br><span class="line"><span class="comment">		func Pow(x, y float64) float64</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;[2]的16次方为:[%.f]\n&quot;</span>, math.Pow(<span class="number">2</span>, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		取余数，函数签名如下:</span></span><br><span class="line"><span class="comment">		func Pow10(n int) float64</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;10的[3]次方为:[%.f]\n&quot;</span>, math.Pow10(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		取x的开平方，函数签名如下:</span></span><br><span class="line"><span class="comment">		func Sqrt(x float64) float64</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;[64]的开平方为:[%.f]\n&quot;</span>, math.Sqrt(<span class="number">64</span>))</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		取x的开立方，函数签名如下:</span></span><br><span class="line"><span class="comment">		func Cbrt(x float64) float64</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;[27]的开立方为:[%.f]\n&quot;</span>, math.Cbrt(<span class="number">27</span>))</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		向上取整，函数签名如下:</span></span><br><span class="line"><span class="comment">		func Ceil(x float64) float64</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;[3.14]向上取整为:[%.f]\n&quot;</span>, math.Ceil(<span class="number">3.14</span>))</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		向下取整，函数签名如下:</span></span><br><span class="line"><span class="comment">		func Floor(x float64) float64</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;[8.75]向下取整为:[%.f]\n&quot;</span>, math.Floor(<span class="number">8.75</span>))</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		取余数，函数签名如下:</span></span><br><span class="line"><span class="comment">		func Floor(x float64) float64</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;[10/3]的余数为:[%.f]\n&quot;</span>, math.Mod(<span class="number">10</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		分别取整数和小数部分,函数签名如下:</span></span><br><span class="line"><span class="comment">		func Modf(f float64) (int float64, frac float64)</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	Integer, Decimal := math.Modf(<span class="number">3.14159265358979</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;[3.14159265358979]的整数部分为:[%.f],小数部分为:[%.14f]\n&quot;</span>, Integer, Decimal)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//以时间作为初始化种子</span></span><br><span class="line">	rand.Seed(time.Now().UnixNano())</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		a := rand.Int()</span><br><span class="line">		fmt.Println(a)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;------------&quot;</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		a := rand.Intn(<span class="number">100</span>)</span><br><span class="line">		fmt.Println(a)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;------------&quot;</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		a := rand.Float32()</span><br><span class="line">		fmt.Println(a)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>标准库</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang学习笔记三-函数与结构体</title>
    <url>/posts/41763/</url>
    <content><![CDATA[<h1 id="Golang-函数"><a href="#Golang-函数" class="headerlink" title="Golang 函数"></a>Golang 函数</h1><h2 id="Golang函数简介"><a href="#Golang函数简介" class="headerlink" title="Golang函数简介"></a>Golang函数简介</h2><p>函数的go语言中的<strong>一级公民</strong> ，我们把所有的功能单元都定义在函数中，可以重复使用。函数包含函数的名称、参数列表和返回值类型，这些构成了函数的签名（signature）。</p>
<span id="more"></span>

<h3 id="Go语言中函数特性"><a href="#Go语言中函数特性" class="headerlink" title="Go语言中函数特性"></a>Go语言中函数特性</h3><ol>
<li>go语言中有3种函数：普通函数、匿名函数(没有名称的函数)、方法(定义在struct上的函数)。receiver</li>
<li>go语言中不允许函数重载(overload)，也就是说不允许函数同名。</li>
<li>go语言中的函数不能嵌套函数，但可以嵌套匿名函数。</li>
<li>函数是一个值，可以将函数赋值给变量，使得这个变量也成为函数。</li>
<li>函数可以作为参数传递给另一个函数。</li>
<li>函数的返回值可以是一个函数。</li>
<li>函数调用的时候，如果有参数传递给函数，则先拷贝参数的副本，再将副本传递给函数。</li>
<li>函数参数可以没有名称。</li>
</ol>
<h2 id="Go语言中函数的定义和调用"><a href="#Go语言中函数的定义和调用" class="headerlink" title="Go语言中函数的定义和调用"></a>Go语言中函数的定义和调用</h2><p>函数在使用之前必须先定义，可以调用函数来完成某个任务。函数可以重复调用，从而达到代码重用。</p>
<h3 id="Go语言函数定义语法"><a href="#Go语言函数定义语法" class="headerlink" title="Go语言函数定义语法"></a>Go语言函数定义语法</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">function_name</span><span class="params">( [parameter list] )</span> [<span class="title">return_types</span>]</span></span><br><span class="line">&#123;</span><br><span class="line">   函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>语法解析：</strong></p>
<ul>
<li><code>func</code>：函数由<code>func</code> 开始声明</li>
<li><code>function_name</code>：函数名称，函数名和参数列表一起构成了函数签名。</li>
<li><code>[parameter list]</code>：参数列表，参数就像一个占位符，当函数被调用时，你可以将值传递给参数，这个值被称为实际参数。参数列表指定的是参数类型、顺序、及参数个数。参数是可选的，也就是说函数也可以不包含参数。</li>
<li><code>return_types</code>：返回类型，函数返回一列值。<code>return_types</code> 是该列值的数据类型。有些功能不需要返回值，这种情况下<code>return_types</code> 不是必须的。</li>
<li>函数体：函数定义的代码集合。</li>
</ul>
<h3 id="Go语言函数定义实例"><a href="#Go语言函数定义实例" class="headerlink" title="Go语言函数定义实例"></a>Go语言函数定义实例</h3><p><strong>定义一个求和函数</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="params">(ret <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	ret = a + b</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>定义一个比较两个数大小的函数</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compare</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="params">(max <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">		max = a</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		max = b</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Go语言函数调用"><a href="#Go语言函数调用" class="headerlink" title="Go语言函数调用"></a>Go语言函数调用</h3><p>当我们要完成某个任务时，可以调用函数来完成。调用函数要传递参数，如何有返回值可以获得返回值。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := sum(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line"></span><br><span class="line">	max := compare(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;max: %v\n&quot;</span>, max)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s: <span class="number">3</span></span><br><span class="line">max: <span class="number">2</span></span><br></pre></td></tr></table></figure>


<h1 id="Golang函数的返回值"><a href="#Golang函数的返回值" class="headerlink" title="Golang函数的返回值"></a>Golang函数的返回值</h1><p>函数可以有0或多个返回值，返回值需要指定数据类型，返回值通过 <code>return</code>关键字来指定。</p>
<p><code>return</code>可以有参数，也可以没有参数，这些返回值可以有名称，也可以没有名称。go中的函数可以有多个返回值。</p>
<ol start="2">
<li><code>return</code>关键字中指定了参数时，返回值可以不用名称。如果<code>return</code>省略参数，则返回值部分必须带名称</li>
<li>当返回值有名称时，必须使用括号包围，逗号分隔，即使只有一个返回值</li>
<li>但即使返回值命名了，<code>return</code>中也可以强制指定其它返回值的名称，也就是说<code>return</code>的优先级更高</li>
<li>命名的返回值是预先声明好的，在函数内部可以直接使用，无需再次声明。命名返回值的名称不能和函数参数名称相同，否则报错提示变量重复定义</li>
<li><code>return</code>中可以有表达式，但不能出现赋值表达式，这和其它语言可能有所不同。例如<code>return a+b</code>是正确的，但<code>return c=a+b</code>是错误的。</li>
</ol>
<h2 id="Go语言函数返回值实例"><a href="#Go语言函数返回值实例" class="headerlink" title="Go语言函数返回值实例"></a>Go语言函数返回值实例</h2><p><strong>没有返回值</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;我没有返回值，只是进行一些计算&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>有一个返回值</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="params">(ret <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	ret = a + b</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>多个返回值，且在return中指定返回的内容</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span> <span class="params">(name <span class="keyword">string</span>, age <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	name = <span class="string">&quot;老郭&quot;</span></span><br><span class="line">	age = <span class="number">30</span></span><br><span class="line">	<span class="keyword">return</span> name, age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>多个返回值，返回值名称没有被使用</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func f3() (name string, age int) &#123;</span><br><span class="line">	name = &quot;老郭&quot;</span><br><span class="line">	age = 30</span><br><span class="line">	return // 等价于return name, age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>return覆盖命名返回值，返回值名称没有被使用</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f4</span><span class="params">()</span> <span class="params">(name <span class="keyword">string</span>, age <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	n := <span class="string">&quot;老郭&quot;</span></span><br><span class="line">	a := <span class="number">30</span></span><br><span class="line">	<span class="keyword">return</span> n, a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Go中经常会使用其中一个返回值作为函数是否执行成功、是否有错误信息的判断条件。例如 <code>return value,exists</code>、<code>return value,ok</code>、<code>return value,err</code>等。</p>
</blockquote>
<blockquote>
<p>当函数的<strong>返回值过多</strong> 时，例如有4个以上的返回值，应该将这些返回值收集到容器中，然后以返回容器的方式去返回。例如，同类型的返回值可以放进slice中，不同类型的返回值可以放进map中。</p>
</blockquote>
<blockquote>
<p>但函数有多个返回值时，如果其中某个或某几个返回值不想使用，可以通过下划线 <code>_</code>来丢弃这些返回值。例如下面的 <code>f1</code>函数两个返回值，调用该函数时，丢弃了第二个返回值b，只保留了第一个返回值a赋值给了变量 <code>a</code>。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	_, x := f1()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;x: %v\n&quot;</span>, x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x: 2</span><br></pre></td></tr></table></figure>


<h1 id="Golang函数的参数"><a href="#Golang函数的参数" class="headerlink" title="Golang函数的参数"></a>Golang函数的参数</h1><p>Go语言函数可以有0或多个参数，参数需要指定<strong>数据类型</strong> 。</p>
<p>声明函数时的参数列表叫做形参，调用时传递的参数叫做实参。</p>
<p>Go语言是通过<strong>传值的方式传参</strong> 的，意味着传递给函数的是拷贝后的副本，所以函数内部访问、修改的也是这个副本。</p>
<p>Go语言可以使用<strong>变长参数</strong> ，有时候并不能确定参数的个数，可以使用变长参数，可以在函数定义语句的参数部分使用 <code>ARGS...TYPE</code>的方式。这时会将 <code>...</code>代表的参数全部保存到一个名为ARGS的slice中，注意这些参数的数据类型都是TYPE。</p>
<h2 id="Golang函数的参数实例"><a href="#Golang函数的参数实例" class="headerlink" title="Golang函数的参数实例"></a>Golang函数的参数实例</h2><p><strong>Go语言传参</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 形参列表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> b</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 实参列表</span></span><br><span class="line">	r := f1(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;r: %v\n&quot;</span>, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>演示参数传递，按值传递</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(a <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	a = <span class="number">200</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;a1: %v\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="number">100</span></span><br><span class="line">	f1(a)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a1: 200</span><br><span class="line">a: 100</span><br></pre></td></tr></table></figure>

<p>从运行结果可以看到，调用函数f1后，a的值并没有被改变，说明参数传递是拷贝了一个副本，也就是拷贝了一份新的内容进行运算。</p>
<blockquote>
<p><code>map</code>、<code>slice</code>、<code>interface</code>、<code>channel</code>这些数据类型本身就是<strong>指针</strong> 类型的，所以就算是拷贝传值也是拷贝的指针，拷贝后的参数仍然指向底层数据结构，所以修改它们<strong>可能</strong> 会影响外部数据结构的值。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(a []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	a[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">	f1(a)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a: [1 2]</span><br><span class="line">a: [100 2]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>从运行结果发现，调用函数后，slice内容被改变了。</p>
</blockquote>
<p><strong>变长参数</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(args ...<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> args &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;v: %v\n&quot;</span>, v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">(name <span class="keyword">string</span>, age <span class="keyword">int</span>, args ...<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;name: %v\n&quot;</span>, name)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;age: %v\n&quot;</span>, age)</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> args &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;v: %v\n&quot;</span>, v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;------------&quot;</span>)</span><br><span class="line">	f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;------------&quot;</span>)</span><br><span class="line">	f2(<span class="string">&quot;tom&quot;</span>, <span class="number">20</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v: 1</span><br><span class="line">v: 2</span><br><span class="line">v: 3</span><br><span class="line">------------</span><br><span class="line">v: 1</span><br><span class="line">v: 2</span><br><span class="line">v: 3</span><br><span class="line">v: 4</span><br><span class="line">v: 5</span><br><span class="line">v: 6</span><br><span class="line">------------</span><br><span class="line">name: tom</span><br><span class="line">age: 20</span><br><span class="line">v: 1</span><br><span class="line">v: 2</span><br><span class="line">v: 3</span><br></pre></td></tr></table></figure>


<h1 id="Golang函数类型与函数变量"><a href="#Golang函数类型与函数变量" class="headerlink" title="Golang函数类型与函数变量"></a>Golang函数类型与函数变量</h1><p>可以使用 <code>type</code>关键字来定义一个函数类型，语法格式如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> fun <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br></pre></td></tr></table></figure>

<p>上面语句定义了一个 <code>fun</code>函数类型，它是一种函数类型，这种函数接收两个 <code>int</code>类型的参数，并且返回一个 <code>int</code>类型的返回值。</p>
<p>下面我们定义两个这样结构的两个函数，一个求和，一个比较大小：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> b</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面定义一个 <code>fun</code>函数类型，把 <code>sum</code>和 <code>max</code>赋值给它</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> fun <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> b</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> f fun</span><br><span class="line">	f = sum</span><br><span class="line">	s := f(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">	f = max</span><br><span class="line">	m := f(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;m: %v\n&quot;</span>, m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s: 3</span><br><span class="line">m: 4</span><br></pre></td></tr></table></figure>


<h1 id="Golang高阶函数"><a href="#Golang高阶函数" class="headerlink" title="Golang高阶函数"></a>Golang高阶函数</h1><p>go语言的函数，可以作为函数的参数，传递给另外一个函数，可以可以作为，另外一个函数的返回值返回。</p>
<h2 id="Go语言函数作为参数"><a href="#Go语言函数作为参数" class="headerlink" title="Go语言函数作为参数"></a>Go语言函数作为参数</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Hello,%s&quot;</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(name <span class="keyword">string</span>, f <span class="keyword">func</span>(<span class="keyword">string</span>)</span>)</span> &#123;</span><br><span class="line">	f(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f1(<span class="string">&quot;tom&quot;</span>, sayHello)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello,tom</span><br></pre></td></tr></table></figure>

<h2 id="Go语言函数作为返回值"><a href="#Go语言函数作为返回值" class="headerlink" title="Go语言函数作为返回值"></a>Go语言函数作为返回值</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func add(x, y int) int &#123;</span><br><span class="line">	return x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func sub(x, y int) int &#123;</span><br><span class="line">	return x - y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func cal(s string) func(int, int) int &#123;</span><br><span class="line">	switch s &#123;</span><br><span class="line">	case &quot;+&quot;:</span><br><span class="line">		return add</span><br><span class="line">	case &quot;-&quot;:</span><br><span class="line">		return sub</span><br><span class="line">	default:</span><br><span class="line">		return nil</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	add := cal(&quot;+&quot;)</span><br><span class="line">	r := add(1, 2)</span><br><span class="line">	fmt.Printf(&quot;r: %v\n&quot;, r)</span><br><span class="line"></span><br><span class="line">	fmt.Println(&quot;-----------&quot;)</span><br><span class="line"></span><br><span class="line">	sub := cal(&quot;-&quot;)</span><br><span class="line">	r = sub(100, 50)</span><br><span class="line">	fmt.Printf(&quot;r: %v\n&quot;, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r: <span class="number">3</span></span><br><span class="line">-----------</span><br><span class="line">r: <span class="number">50</span></span><br></pre></td></tr></table></figure>


<h1 id="Golang匿名函数"><a href="#Golang匿名函数" class="headerlink" title="Golang匿名函数"></a>Golang匿名函数</h1><p>Go语言函数不能嵌套，但是在函数内部可以定义匿名函数，实现一下简单功能调用。</p>
<p>所谓匿名函数就是，没有名称的函数。</p>
<p>语法格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (参数列表)(返回值)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当然可以既没有参数，可以没有返回值</p>
</blockquote>
<h2 id="匿名函数实例"><a href="#匿名函数实例" class="headerlink" title="匿名函数实例"></a>匿名函数实例</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	max := <span class="function"><span class="keyword">func</span> <span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">			<span class="keyword">return</span> a</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> b</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	i := max(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i: 2</span><br></pre></td></tr></table></figure>

<p>自己执行</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 自己执行</span></span><br><span class="line">	<span class="function"><span class="keyword">func</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">		max := <span class="number">0</span></span><br><span class="line">		<span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">			max = a</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			max = b</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;max: %v\n&quot;</span>, max)</span><br><span class="line">	&#125;(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">max: 2</span><br></pre></td></tr></table></figure>


<h1 id="Golang闭包"><a href="#Golang闭包" class="headerlink" title="Golang闭包"></a>Golang闭包</h1><p>闭包可以理解成<strong>定义在一个函数内部的函数</strong> 。在本质上，闭包是将函数内部和函数外部连接起来的桥梁。或者说是函数和其引用环境的组合体。</p>
<p>闭包指的是一个函数和与其相关的引用环境组合而成的实体。简单来说，<code>闭包=函数+引用环境</code>。 首先我们来看一个例子：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> x <span class="keyword">int</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">		x += y</span><br><span class="line">		<span class="keyword">return</span> x</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> f = add()</span><br><span class="line">	fmt.Println(f(<span class="number">10</span>))</span><br><span class="line">	fmt.Println(f(<span class="number">20</span>))</span><br><span class="line">	fmt.Println(f(<span class="number">30</span>))</span><br><span class="line">	fmt.Println(<span class="string">&quot;-----------&quot;</span>)</span><br><span class="line">	f1 := add()</span><br><span class="line">	fmt.Println(f1(<span class="number">40</span>))</span><br><span class="line">	fmt.Println(f1(<span class="number">50</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">30</span><br><span class="line">60</span><br><span class="line">-----------</span><br><span class="line">40</span><br><span class="line">90</span><br></pre></td></tr></table></figure>

<p>变量 <code>f</code>是一个函数并且它引用了其外部作用域中的 <code>x</code>变量，此时 <code>f</code>就是一个闭包。 在 <code>f</code>的生命周期内，<strong>变量 <code>x</code>也一直有效。</strong> 闭包进阶示例1：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">		x += y</span><br><span class="line">		<span class="keyword">return</span> x</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> f = add(<span class="number">10</span>)</span><br><span class="line">	fmt.Println(f(<span class="number">10</span>))</span><br><span class="line">	fmt.Println(f(<span class="number">20</span>))</span><br><span class="line">	fmt.Println(f(<span class="number">30</span>))</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;----------&quot;</span>)</span><br><span class="line"></span><br><span class="line">	f1 := add(<span class="number">20</span>)</span><br><span class="line">	fmt.Println(f1(<span class="number">40</span>))</span><br><span class="line">	fmt.Println(f1(<span class="number">50</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">20</span><br><span class="line">40</span><br><span class="line">70</span><br><span class="line">----------</span><br><span class="line">60</span><br><span class="line">110</span><br></pre></td></tr></table></figure>

<p>闭包进阶示例2：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeSuffixFunc</span><span class="params">(suffix <span class="keyword">string</span>)</span> <span class="title">func</span><span class="params">(<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> !strings.HasSuffix(name, suffix) &#123;</span><br><span class="line">			<span class="keyword">return</span> name + suffix</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> name</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	jpgFunc := makeSuffixFunc(<span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line">	txtFunc := makeSuffixFunc(<span class="string">&quot;.txt&quot;</span>)</span><br><span class="line">	fmt.Println(jpgFunc(<span class="string">&quot;test&quot;</span>)) </span><br><span class="line">	fmt.Println(txtFunc(<span class="string">&quot;test&quot;</span>)) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test.jpg</span><br><span class="line">test.txt</span><br></pre></td></tr></table></figure>

<p>闭包进阶示例3：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(base <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">func</span>(<span class="keyword">int</span>)</span> <span class="title">int</span>, <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span>)</span> &#123;</span><br><span class="line">	add := <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">		base += i</span><br><span class="line">		<span class="keyword">return</span> base</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	sub := <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">		base -= i</span><br><span class="line">		<span class="keyword">return</span> base</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> add, sub</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f1, f2 := calc(<span class="number">10</span>)</span><br><span class="line">	fmt.Println(f1(<span class="number">1</span>), f2(<span class="number">2</span>)) </span><br><span class="line">	fmt.Println(f1(<span class="number">3</span>), f2(<span class="number">4</span>)) </span><br><span class="line">	fmt.Println(f1(<span class="number">5</span>), f2(<span class="number">6</span>)) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">11 9</span><br><span class="line">12 8</span><br><span class="line">13 7</span><br></pre></td></tr></table></figure>

<p>闭包其实并不复杂，只要牢记 <code>闭包=函数+引用环境</code>。</p>
<h1 id="Golang递归"><a href="#Golang递归" class="headerlink" title="Golang递归"></a>Golang递归</h1><p>函数内部调用函数自身的函数称为递归函数。</p>
<p>使用递归函数最重要的三点：</p>
<ol>
<li>递归就是自己调用自己。</li>
<li>必须先定义函数的退出条件，没有退出条件，递归将成为死循环。</li>
<li>go语言递归函数很可能会产生一大堆的goroutine，也很可能会出现栈空间内存溢出问题。</li>
</ol>
<h2 id="Go语言递归实例"><a href="#Go语言递归实例" class="headerlink" title="Go语言递归实例"></a>Go语言递归实例</h2><p><strong>阶乘</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="comment">// 返回条件</span></span><br><span class="line">	<span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// 自己调用自己</span></span><br><span class="line">		<span class="keyword">return</span> n * a(n<span class="number">-1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	n := <span class="number">5</span></span><br><span class="line">	r := a(n)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;r: %v\n&quot;</span>, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r: 120</span><br></pre></td></tr></table></figure>

<p><strong>斐波那契数列</strong></p>
<p>它的计算公式为 <code>f(n)=f(n-1)+f(n-2)</code>且 <code>f(2)=f(1)=1</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="comment">// 退出点判断</span></span><br><span class="line">	<span class="keyword">if</span> n == <span class="number">1</span> || n == <span class="number">2</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 递归表达式</span></span><br><span class="line">	<span class="keyword">return</span> f(n<span class="number">-1</span>) + f(n<span class="number">-2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := f(<span class="number">5</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;r: %v\n&quot;</span>, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r: 5</span><br></pre></td></tr></table></figure>


<h1 id="Golang-defer语句"><a href="#Golang-defer语句" class="headerlink" title="Golang defer语句"></a>Golang defer语句</h1><p>go语言中的 <code>defer</code>语句会将其后面跟随的语句进行<strong>延迟</strong> 处理。在 <code>defer</code>归属的函数即将返回时，将延迟处理的语句按 <code>defer</code>定义的<strong>逆序</strong> 进行执行，也就是说，先被 <code>defer</code>的语句最后被执行，最后被 <code>defer</code>的语句，最先被执行。stack</p>
<h2 id="defer特性"><a href="#defer特性" class="headerlink" title="defer特性"></a>defer特性</h2><ol>
<li>关键字<code>defer</code> 用于注册延迟调用。</li>
<li>这些调用直到<code>return</code> 前才被执。因此，可以用来做资源清理。</li>
<li>多个<code>defer</code>语句，按先进后出的方式执行。</li>
<li><code>defer</code>语句中的变量，在<code>defer</code>声明时就决定了。</li>
</ol>
<h2 id="defer用途"><a href="#defer用途" class="headerlink" title="defer用途"></a>defer用途</h2><ol>
<li>关闭文件句柄</li>
<li>锁资源释放</li>
<li>数据库连接释放</li>
</ol>
<h2 id="Go语言defer语句实例"><a href="#Go语言defer语句实例" class="headerlink" title="Go语言defer语句实例"></a>Go语言defer语句实例</h2><p><strong>查看执行顺序</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">&quot;step1&quot;</span>)</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">&quot;step2&quot;</span>)</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">&quot;step3&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start</span><br><span class="line">end</span><br><span class="line">step3</span><br><span class="line">step2</span><br><span class="line">step1</span><br></pre></td></tr></table></figure>


<h1 id="Golang-init函数"><a href="#Golang-init函数" class="headerlink" title="Golang init函数"></a>Golang init函数</h1><p>Golang有一个特殊的函数 <code>init</code>函数，先于 <code>main</code>函数执行，实现包级别的一些<strong>初始化</strong> 操作。</p>
<h2 id="init函数的主要特点"><a href="#init函数的主要特点" class="headerlink" title="init函数的主要特点"></a>init函数的主要特点</h2><ul>
<li>init函数先于main函数<strong>自动执行</strong> ，不能被其他函数调用；</li>
<li>init函数没有输入参数、返回值；</li>
<li>每个包可以有多个init函数；</li>
<li><strong>包的每个源文件也可以有多个init函数</strong> ，这点比较特殊；</li>
<li>同一个包的init执行顺序，golang没有明确定义，编程时要注意程序不要依赖这个执行顺序。</li>
<li>不同包的init函数按照包导入的依赖关系决定执行顺序。</li>
</ul>
<h2 id="Golang-初始化顺序"><a href="#Golang-初始化顺序" class="headerlink" title="Golang 初始化顺序"></a>Golang 初始化顺序</h2><p>初始化顺序：<strong>变量初始化-&gt;init()-&gt;main()</strong></p>
<p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span> = initVar()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;init2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;init&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initVar</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;init var...&quot;</span>)</span><br><span class="line">	<span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;main...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">init var...</span><br><span class="line">init2</span><br><span class="line">init</span><br><span class="line">main...</span><br></pre></td></tr></table></figure>


<h1 id="Golang指针"><a href="#Golang指针" class="headerlink" title="Golang指针"></a>Golang指针</h1><p>Go语言中的函数传参都是值拷贝，当我们想要修改某个变量的时候，我们可以创建一个指向该变量地址的指针变量。传递数据使用指针，而无须拷贝数据。</p>
<p>类型指针不能进行偏移和运算。</p>
<p>Go语言中的指针操作非常简单，只需要记住两个符号：<code>&amp;</code>（取地址）和 <code>*</code>（根据地址取值）。</p>
<h3 id="指针地址和指针类型"><a href="#指针地址和指针类型" class="headerlink" title="指针地址和指针类型"></a>指针地址和指针类型</h3><p>每个变量在运行时都拥有一个地址，这个地址代表变量在内存中的位置。Go语言中使用 <code>&amp;</code>字符放在变量前面对变量进行<strong>取地址</strong> 操作。 Go语言中的值类型 <code>（int、float、bool、string、array、struct）</code>都有对应的指针类型，如：<code>*int、*int64、*string</code>等。</p>
<h2 id="指针语法"><a href="#指针语法" class="headerlink" title="指针语法"></a>指针语法</h2><p>一个指针变量指向了一个值的内存地址。（也就是我们声明了一个指针之后，可以像变量赋值一样，把一个值的内存地址放入到指针当中。）</p>
<p>类似于变量和常量，在使用指针前你需要声明指针。指针声明格式如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> var_name *<span class="keyword">var</span>-<span class="keyword">type</span></span><br></pre></td></tr></table></figure>

<p><code>var-type</code> ：为指针类型</p>
<p><code>var_name</code> ：为指针变量名</p>
<p><code>*</code> ：用于指定变量是作为一个指针。</p>
<h2 id="指针声明实例"><a href="#指针声明实例" class="headerlink" title="指针声明实例"></a>指针声明实例</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ip *<span class="keyword">int</span>        <span class="comment">/* 指向整型*/</span></span><br><span class="line"><span class="keyword">var</span> fp *<span class="keyword">float32</span>    <span class="comment">/* 指向浮点型 */</span></span><br></pre></td></tr></table></figure>

<h2 id="指针使用实例"><a href="#指针使用实例" class="headerlink" title="指针使用实例"></a>指针使用实例</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a <span class="keyword">int</span>= <span class="number">20</span>   <span class="comment">/* 声明实际变量 */</span></span><br><span class="line">	<span class="keyword">var</span> ip *<span class="keyword">int</span>        <span class="comment">/* 声明指针变量 */</span></span><br><span class="line">	ip = &amp;a  <span class="comment">/* 指针变量的存储地址 */</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;a 变量的地址是: %x\n&quot;</span>, &amp;a  )</span><br><span class="line">	<span class="comment">/* 指针变量的存储地址 */</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;ip 变量储存的指针地址: %x\n&quot;</span>, ip )</span><br><span class="line">	<span class="comment">/* 使用指针访问值 */</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;*ip 变量的值: %d\n&quot;</span>, *ip )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a 变量的地址是: c00000a0a8</span><br><span class="line">ip 变量储存的指针地址: c00000a0a8</span><br><span class="line">*ip 变量的值: 20</span><br></pre></td></tr></table></figure>


<h1 id="Golang指向数组的指针"><a href="#Golang指向数组的指针" class="headerlink" title="Golang指向数组的指针"></a>Golang指向数组的指针</h1><h2 id="定义语法"><a href="#定义语法" class="headerlink" title="定义语法"></a>定义语法</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ptr [MAX]*<span class="keyword">int</span>; 表示数组里面的元素的类型是指针类型</span><br></pre></td></tr></table></figure>

<h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MAX <span class="keyword">int</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := []<span class="keyword">int</span>&#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;</span><br><span class="line">	<span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line">	<span class="keyword">var</span> ptr [MAX]*<span class="keyword">int</span>;</span><br><span class="line">	fmt.Println(ptr)   <span class="comment">//这个打印出来是[&lt;nil&gt; &lt;nil&gt; &lt;nil&gt;]</span></span><br><span class="line">	<span class="keyword">for</span>  i = <span class="number">0</span>; i &lt; MAX; i++ &#123;</span><br><span class="line">		ptr[i] = &amp;a[i] <span class="comment">/* 整数地址赋值给指针数组 */</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>  i = <span class="number">0</span>; i &lt; MAX; i++ &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;a[%d] = %d\n&quot;</span>, i,*ptr[i] )   <span class="comment">//*ptr[i]就是打印出相关指针的值了。</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&lt;nil&gt; &lt;nil&gt; &lt;nil&gt;]</span><br><span class="line">a[0] = 1</span><br><span class="line">a[1] = 3</span><br><span class="line">a[2] = 5</span><br></pre></td></tr></table></figure>


<h1 id="Golang类型定义和类型别名"><a href="#Golang类型定义和类型别名" class="headerlink" title="Golang类型定义和类型别名"></a>Golang类型定义和类型别名</h1><p>在介绍<strong>结构体</strong> 之前，我们先来看看什么是类型定义和类型别名。</p>
<h1 id="Go语言类型定义"><a href="#Go语言类型定义" class="headerlink" title="Go语言类型定义"></a>Go语言类型定义</h1><p><strong>类型定义的语法</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> NewType Type</span><br></pre></td></tr></table></figure>

<p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 类型定义</span></span><br><span class="line">	<span class="keyword">type</span> MyInt <span class="keyword">int</span></span><br><span class="line">	<span class="comment">// i 为MyInt类型</span></span><br><span class="line">	<span class="keyword">var</span> i MyInt</span><br><span class="line">	i = <span class="number">100</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;i: %v i: %T\n&quot;</span>, i, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i: 100 i: main.MyInt</span><br></pre></td></tr></table></figure>

<h2 id="Go语言类型别名"><a href="#Go语言类型别名" class="headerlink" title="Go语言类型别名"></a>Go语言类型别名</h2><p><strong>类型别名的语法</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> NewType = Type</span><br></pre></td></tr></table></figure>

<p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 类型别名定义</span></span><br><span class="line">	<span class="keyword">type</span> MyInt2 = <span class="keyword">int</span></span><br><span class="line">	<span class="comment">// i 其实还是int类型</span></span><br><span class="line">	<span class="keyword">var</span> i MyInt2</span><br><span class="line">	i = <span class="number">100</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;i: %v i: %T\n&quot;</span>, i, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Go语言类型定义和类型别名的区别"><a href="#Go语言类型定义和类型别名的区别" class="headerlink" title="Go语言类型定义和类型别名的区别"></a>Go语言类型定义和类型别名的区别</h2><ol>
<li>类型定义相当于定义了一个<strong>全新的类型</strong> ，与之前的类型不同；但是类型别名并没有定义一个新的类型，而是使用一个别名来替换之前的类型</li>
<li>类型别名只会在<strong>代码</strong> 中存在，在<strong>编译完成</strong> 之后并不会存在该别名</li>
<li>因为类型别名和原来的类型是一致的，所以原来类型所拥有的<strong>方法</strong> ，类型别名中也<strong>可以</strong> 调用，但是如果是重新定义的一个类型，那么<strong>不可以</strong> 调用之前的任何方法。</li>
</ol>
<h1 id="Golang-结构体"><a href="#Golang-结构体" class="headerlink" title="Golang 结构体"></a>Golang 结构体</h1><p>go语言没有面向对象的概念了，但是可以使用结构体来实现，面向对象编程的一些特性，例如：继承、组合等特性。</p>
<h2 id="Go语言结构体的定义"><a href="#Go语言结构体的定义" class="headerlink" title="Go语言结构体的定义"></a>Go语言结构体的定义</h2><p>上一节我们介绍了类型定义，结构体的定义和类型定义类似，只不过多了一个 <code>struct</code>关键字，语法结构如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> struct_variable_type <span class="keyword">struct</span> &#123;</span><br><span class="line">   member definition;</span><br><span class="line">   member definition;</span><br><span class="line">   ...</span><br><span class="line">   member definition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>type</code>：结构体定义关键字</p>
<p><code>struct_variable_type</code>：结构体类型名称</p>
<p><code>struct</code>：结构体定义关键字</p>
<p><code>member definition;</code>：成员定义</p>
<p><strong>实例</strong></p>
<p>下面我们定义一个人的结构体Person</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    id    <span class="keyword">int</span></span><br><span class="line">    name  <span class="keyword">string</span></span><br><span class="line">    age   <span class="keyword">int</span></span><br><span class="line">    email <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上我们定义一个Person结构体，有四个成员，来描述一个Person的信息。</p>
<p>形同类型的可以<strong>合并到一行</strong> ，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    id, age     <span class="keyword">int</span></span><br><span class="line">    name, email <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="声明一个结构体变量"><a href="#声明一个结构体变量" class="headerlink" title="声明一个结构体变量"></a>声明一个结构体变量</h2><p>声明一个结构体变量和声明一个普通变量相同，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tom Person</span><br><span class="line">fmt.Printf(<span class="string">&quot;tom: %v\n&quot;</span>, tom)</span><br><span class="line">kite := Person&#123;&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;kite: %v\n&quot;</span>, kite)</span><br></pre></td></tr></table></figure>

<p>也行结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">tom: &#123;<span class="number">0</span> <span class="number">0</span>  &#125;</span><br><span class="line">kite: &#123;<span class="number">0</span> <span class="number">0</span>  &#125;</span><br></pre></td></tr></table></figure>

<p>结构体成员，在没有赋值之前都是零值。</p>
<h2 id="访问结构体成员"><a href="#访问结构体成员" class="headerlink" title="访问结构体成员"></a>访问结构体成员</h2><p>可以使用点运算符(<code>.</code>)，来访问结构体成员，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">		id, age     <span class="keyword">int</span></span><br><span class="line">		name, email <span class="keyword">string</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> tom Person</span><br><span class="line">	tom.id = <span class="number">1</span></span><br><span class="line">	tom.name = <span class="string">&quot;tom&quot;</span></span><br><span class="line">	tom.age = <span class="number">20</span></span><br><span class="line">	tom.email = <span class="string">&quot;tom@gmail.com&quot;</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;tom: %v\n&quot;</span>, tom)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">tom: &#123;<span class="number">1</span> <span class="number">20</span> tom tom@gmail.com&#125;</span><br></pre></td></tr></table></figure>

<h2 id="匿名结构体"><a href="#匿名结构体" class="headerlink" title="匿名结构体"></a>匿名结构体</h2><p>如果结构体是临时使用，可以不用起名字，直接使用，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> dog <span class="keyword">struct</span> &#123;</span><br><span class="line">		id   <span class="keyword">int</span></span><br><span class="line">		name <span class="keyword">string</span></span><br><span class="line">	&#125;</span><br><span class="line">	dog.id = <span class="number">1</span></span><br><span class="line">	dog.name = <span class="string">&quot;花花&quot;</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;dog: %v\n&quot;</span>, dog)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang结构体的初始化"><a href="#Golang结构体的初始化" class="headerlink" title="Golang结构体的初始化"></a>Golang结构体的初始化</h1><p>未初始化的结构体，成员都是零值 int 0 float 0.0 bool false string nil nil</p>
<p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">		id, age     <span class="keyword">int</span></span><br><span class="line">		name, email <span class="keyword">string</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> tom Person</span><br><span class="line">	fmt.Printf(<span class="string">&quot;tom: %v\n&quot;</span>, tom)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tom: &#123;0 0 &quot;&quot; &quot;&quot;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用键值对对结构体进行初始化"><a href="#使用键值对对结构体进行初始化" class="headerlink" title="使用键值对对结构体进行初始化"></a>使用键值对对结构体进行初始化</h2><p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">		id, age     <span class="keyword">int</span></span><br><span class="line">		name, email <span class="keyword">string</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	kite := Person&#123;</span><br><span class="line">		id:    <span class="number">1</span>,</span><br><span class="line">		name:  <span class="string">&quot;kite&quot;</span>,</span><br><span class="line">		age:   <span class="number">20</span>,</span><br><span class="line">		email: <span class="string">&quot;kite@gmail.com&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;kite: %v\n&quot;</span>, kite)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kite: &#123;1 20 kite kite@gmail.com&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用值的列表初始化"><a href="#使用值的列表初始化" class="headerlink" title="使用值的列表初始化"></a>使用值的列表初始化</h3><p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">		id, age     <span class="keyword">int</span></span><br><span class="line">		name, email <span class="keyword">string</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	kite := Person&#123;</span><br><span class="line">		<span class="number">1</span>,</span><br><span class="line">		<span class="number">20</span>,</span><br><span class="line">		<span class="string">&quot;kite&quot;</span>,</span><br><span class="line">		<span class="string">&quot;kite@gmail.com&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;kite: %v\n&quot;</span>, kite)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kite: &#123;1 20 kite kite@gmail.com&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<ol>
<li>必须初始化结构体的所有字段。</li>
<li>初始值的填充顺序必须与字段在结构体中的声明顺序一致。</li>
<li>该方式不能和键值初始化方式混用。</li>
</ol>
</blockquote>
<h2 id="部分成员初始化"><a href="#部分成员初始化" class="headerlink" title="部分成员初始化"></a>部分成员初始化</h2><p>用不到的成员，可以不进行初始化</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">		id, age     <span class="keyword">int</span></span><br><span class="line">		name, email <span class="keyword">string</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	kite := Person&#123;</span><br><span class="line">		id:   <span class="number">1</span>,</span><br><span class="line">		name: <span class="string">&quot;kite&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;kite: %v\n&quot;</span>, kite)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kite: &#123;1 0 kite &quot;&quot; &#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang结构体指针"><a href="#Golang结构体指针" class="headerlink" title="Golang结构体指针"></a>Golang结构体指针</h1><p>结构体指针和普通的变量指针相同，我先来回顾一下普通变量的指针，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> name <span class="keyword">string</span></span><br><span class="line">	name = <span class="string">&quot;tom&quot;</span></span><br><span class="line">    <span class="comment">// p_name 指针类型</span></span><br><span class="line">	<span class="keyword">var</span> p_name *<span class="keyword">string</span></span><br><span class="line">    <span class="comment">// &amp;name 取name地址</span></span><br><span class="line">	p_name = &amp;name</span><br><span class="line">	fmt.Printf(<span class="string">&quot;name: %v\n&quot;</span>, name)</span><br><span class="line">    <span class="comment">// 输出指针地址</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;p_name: %v\n&quot;</span>, p_name)</span><br><span class="line">    <span class="comment">// 输出指针指向的内容值</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;*p_name: %v\n&quot;</span>, *p_name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name: tom</span><br><span class="line">p_name: 0xc00010e120</span><br><span class="line">*p_name: tom</span><br></pre></td></tr></table></figure>

<h2 id="Go结构体指针"><a href="#Go结构体指针" class="headerlink" title="Go结构体指针"></a>Go结构体指针</h2><p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">		id   <span class="keyword">int</span></span><br><span class="line">		name <span class="keyword">string</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> tom = Person&#123;<span class="number">1</span>, <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> p_person *Person</span><br><span class="line">	p_person = &amp;tom</span><br><span class="line">	fmt.Printf(<span class="string">&quot;tom: %v\n&quot;</span>, tom)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;p_person: %p\n&quot;</span>, p_person)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;*p_person: %v\n&quot;</span>, *p_person)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tom: &#123;1 tom&#125;</span><br><span class="line">p_person: 0xc000004078</span><br><span class="line">*p_person: &#123;1 tom&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用-new关键字创建结构体指针"><a href="#使用-new关键字创建结构体指针" class="headerlink" title="使用 new关键字创建结构体指针"></a>使用 <code>new</code>关键字创建结构体指针</h2><p>我们还可以通过使用 <code>new</code>关键字对结构体进行实例化，得到的是结构体的地址，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">		id   <span class="keyword">int</span></span><br><span class="line">		name <span class="keyword">string</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> p_person = <span class="built_in">new</span>(Person)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;p_person: %T\n&quot;</span>, p_person)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p_person: *main.Person</span><br></pre></td></tr></table></figure>

<p>从运行结果，我们发现p_person为指针类型</p>
<h2 id="访问结构体指针成员"><a href="#访问结构体指针成员" class="headerlink" title="访问结构体指针成员"></a>访问结构体指针成员</h2><p>访问结构体指针成员，也使用点运算符(<code>.</code>)，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">		id   <span class="keyword">int</span></span><br><span class="line">		name <span class="keyword">string</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> p_person = <span class="built_in">new</span>(Person)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;p_person: %T\n&quot;</span>, p_person)</span><br><span class="line"></span><br><span class="line">	p_person.id = <span class="number">1</span></span><br><span class="line">	p_person.name = <span class="string">&quot;tom&quot;</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;*p_person: %v\n&quot;</span>, *p_person)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p_person: *main.Person</span><br><span class="line">*p_person: &#123;1 tom&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang结构体作为函数参数"><a href="#Golang结构体作为函数参数" class="headerlink" title="Golang结构体作为函数参数"></a>Golang结构体作为函数参数</h1><p>go结构体可以像普通变量一样，作为函数的参数，传递给函数，这里分为两种情况：</p>
<ol>
<li>直接传递结构体，这是是一个副本（拷贝），在函数内部不会改变外面结构体内容。</li>
<li>传递结构体指针，这时在函数内部，能够改变外部结构体内容。</li>
</ol>
<h2 id="直接传递结构体"><a href="#直接传递结构体" class="headerlink" title="直接传递结构体"></a>直接传递结构体</h2><p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	id   <span class="keyword">int</span></span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showPerson</span><span class="params">(person Person)</span></span> &#123;</span><br><span class="line">	person.id = <span class="number">1</span></span><br><span class="line">	person.name = <span class="string">&quot;kite&quot;</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;person: %v\n&quot;</span>, person)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	person := Person&#123;<span class="number">1</span>, <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;person: %v\n&quot;</span>, person)</span><br><span class="line">	fmt.Println(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line">	showPerson(person)</span><br><span class="line">	fmt.Println(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;person: %v\n&quot;</span>, person)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">person: &#123;1 tom&#125;</span><br><span class="line">----------------</span><br><span class="line">person: &#123;1 kite&#125;</span><br><span class="line">----------------</span><br><span class="line">person: &#123;1 tom&#125;</span><br></pre></td></tr></table></figure>

<p>从运行结果可以看出，函数内部改变了结构体内容，函数外面并没有被改变。</p>
<h2 id="传递结构体指针"><a href="#传递结构体指针" class="headerlink" title="传递结构体指针"></a>传递结构体指针</h2><p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	id   <span class="keyword">int</span></span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showPerson</span><span class="params">(person *Person)</span></span> &#123;</span><br><span class="line">	person.id = <span class="number">1</span></span><br><span class="line">	person.name = <span class="string">&quot;kite&quot;</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;person: %v\n&quot;</span>, person)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	person := Person&#123;<span class="number">1</span>, <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;person: %v\n&quot;</span>, person)</span><br><span class="line">	fmt.Println(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line">	showPerson(&amp;person)</span><br><span class="line">	fmt.Println(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;person: %v\n&quot;</span>, person)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">person: &#123;1 tom&#125;</span><br><span class="line">----------------</span><br><span class="line">person: &amp;&#123;1 kite&#125;</span><br><span class="line">----------------</span><br><span class="line">person: &#123;1 kite&#125;</span><br></pre></td></tr></table></figure>

<p>从运行结果，我们可以看到，调用函数后，参数被改变了。</p>
<h1 id="Golang嵌套结构体"><a href="#Golang嵌套结构体" class="headerlink" title="Golang嵌套结构体"></a>Golang嵌套结构体</h1><p>go语言没有面向对象编程思想，也没有继承关系，但是可以通过结构体嵌套来实现这种效果。</p>
<p>下面通过实例演示如何实现结构体嵌套，加入有一个人 <code>Person</code>结构体，这个人还养了一个宠物 <code>Dog</code>结构体。</p>
<p>下面我们来看一下：</p>
<p><strong>Dog结构体</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">	name  <span class="keyword">string</span></span><br><span class="line">	color <span class="keyword">string</span></span><br><span class="line">	age   <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Person结构体</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">	dog  Dog</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">	age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问它们</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">	name  <span class="keyword">string</span></span><br><span class="line">	color <span class="keyword">string</span></span><br><span class="line">	age   <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">	dog  Dog</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">	age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> tom person</span><br><span class="line">	tom.dog.name = <span class="string">&quot;花花&quot;</span></span><br><span class="line">	tom.dog.color = <span class="string">&quot;黑白花&quot;</span></span><br><span class="line">	tom.dog.age = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">	tom.name = <span class="string">&quot;tom&quot;</span></span><br><span class="line">	tom.age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;tom: %v\n&quot;</span>, tom)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tom: &#123;&#123;花花 黑白花 2&#125; tom 20&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang方法"><a href="#Golang方法" class="headerlink" title="Golang方法"></a>Golang方法</h1><p>go语言没有面向对象的特性，也没有类对象的概念。但是，可以使用结构体来模拟这些特性，我们都知道面向对象里面有类方法等概念。我们也可以声明一些方法，属于某个结构体。</p>
<h2 id="Go语言方法的语法"><a href="#Go语言方法的语法" class="headerlink" title="Go语言方法的语法"></a>Go语言方法的语法</h2><p>Go中的方法，是一种<strong>特殊的函数</strong> ，定义于struct之上(与struct关联、绑定)，被称为struct的接受者(receiver)。</p>
<p>通俗的讲，方法就是有接收者的函数。</p>
<p>语法格式如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> mytype <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(recv mytype)</span> <span class="title">my_method</span><span class="params">(para)</span> <span class="title">return_type</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(recv *mytype)</span> <span class="title">my_method</span><span class="params">(para)</span> <span class="title">return_type</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><code>mytype</code>：定义一个结构体</p>
<p><code>recv</code>：接受该方法的结构体(receiver)</p>
<p><code>my_method</code>：方法名称</p>
<p><code>para</code>：参数列表</p>
<p><code>return_type</code>：返回值类型</p>
<p>从语法格式可以看出，一个方法和一个函数非常相似，多了一个接受类型。</p>
<p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(per Person)</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(per.name + <span class="string">&quot; eating....&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(per Person)</span> <span class="title">sleep</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(per.name + <span class="string">&quot; sleep....&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> per Person</span><br><span class="line">	per.name = <span class="string">&quot;tom&quot;</span></span><br><span class="line">	per.eat()</span><br><span class="line">	per.sleep()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tom eating....</span><br><span class="line">tom sleep....</span><br></pre></td></tr></table></figure>

<h2 id="Go语言方法的注意事项"><a href="#Go语言方法的注意事项" class="headerlink" title="Go语言方法的注意事项"></a>Go语言方法的注意事项</h2><ol>
<li>方法的receiver type并非一定要是struct类型，type定义的类型别名、slice、map、channel、func类型等都可以。</li>
<li>struct结合它的方法就等价于面向对象中的类。只不过struct可以和它的方法分开，并非一定要属于同一个文件，但必须属于同一个包。</li>
<li>方法有两种接收类型：<code>(T Type)</code>和<code>(T *Type)</code>，它们之间有区别。</li>
<li>方法就是函数，所以Go中没有方法重载(overload)的说法，也就是说同一个类型中的所有方法名必须都唯一。</li>
<li>如果receiver是一个指针类型，则会自动解除引用。</li>
<li>方法和type是分开的，意味着实例的行为(behavior)和数据存储(field)是分开的，但是它们通过receiver建立起关联关系。</li>
</ol>
<h1 id="Golang方法接收者类型"><a href="#Golang方法接收者类型" class="headerlink" title="Golang方法接收者类型"></a>Golang方法接收者类型</h1><p>结构体实例，有值类型和指针类型，那么方法的接收者是结构体，那么也有值类型和指针类型。区别就是接收者是否复制结构体副本。值类型复制，指针类型不复制。</p>
<h2 id="值类型结构体和指针类型结构体"><a href="#值类型结构体和指针类型结构体" class="headerlink" title="值类型结构体和指针类型结构体"></a>值类型结构体和指针类型结构体</h2><p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	p1 := Person&#123;name: <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;p1: %T\n&quot;</span>, p1)</span><br><span class="line">	p2 := &amp;Person&#123;name: <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;p2: %T\n&quot;</span>, p2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p1: main.Person</span><br><span class="line">p2: *main.Person</span><br></pre></td></tr></table></figure>

<p>从运行结果，我们可以看出p1是值类型，p2是指针类型。</p>
<p>下面看一个传参结构体的例子</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showPerson</span><span class="params">(per Person)</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;per: %p\n&quot;</span>, &amp;per)</span><br><span class="line">	per.name = <span class="string">&quot;kite&quot;</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;per: %v\n&quot;</span>, per)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showPerson2</span><span class="params">(per *Person)</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;per: %p\n&quot;</span>, per)</span><br><span class="line">	per.name = <span class="string">&quot;kite&quot;</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;per: %v\n&quot;</span>, per)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	p1 := Person&#123;name: <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;p1: %p\n&quot;</span>, &amp;p1)</span><br><span class="line">	showPerson(p1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;p1: %v\n&quot;</span>, p1)</span><br><span class="line">	fmt.Println(<span class="string">&quot;---------------&quot;</span>)</span><br><span class="line">	p2 := &amp;Person&#123;name: <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;p2: %p\n&quot;</span>, p2)</span><br><span class="line">	showPerson2(p2)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;p2: %v\n&quot;</span>, p2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p1: 0xc000046240</span><br><span class="line">per: 0xc000046250</span><br><span class="line">per: &#123;kite&#125;</span><br><span class="line">p1: &#123;tom&#125;</span><br><span class="line">---------------</span><br><span class="line">p2: 0xc000046280</span><br><span class="line">per: 0xc000046280</span><br><span class="line">per: &amp;&#123;kite&#125;</span><br><span class="line">p2: &amp;&#123;kite&#125;</span><br></pre></td></tr></table></figure>

<p>从运行结果，我们看到p1是值传递，拷贝了副本，地址发生了改变，而p2是指针类型，地址没有改变。</p>
<h2 id="方法的值类型和指针类型接收者"><a href="#方法的值类型和指针类型接收者" class="headerlink" title="方法的值类型和指针类型接收者"></a>方法的值类型和指针类型接收者</h2><p>值类型和指针类型接收者，本质上和函数传参道理相同。</p>
<p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(per Person)</span> <span class="title">showPerson</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;per: %p\n&quot;</span>, &amp;per)</span><br><span class="line">	per.name = <span class="string">&quot;kite&quot;</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;per: %v\n&quot;</span>, per)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(per *Person)</span> <span class="title">showPerson2</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;per: %p\n&quot;</span>, per)</span><br><span class="line">	per.name = <span class="string">&quot;kite&quot;</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;per: %v\n&quot;</span>, per)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	p1 := Person&#123;name: <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;p1: %p\n&quot;</span>, &amp;p1)</span><br><span class="line">	p1.showPerson()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;p1: %v\n&quot;</span>, p1)</span><br><span class="line">	fmt.Println(<span class="string">&quot;---------------&quot;</span>)</span><br><span class="line">	p2 := &amp;Person&#123;name: <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;p2: %p\n&quot;</span>, p2)</span><br><span class="line">	p2.showPerson2()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;p2: %v\n&quot;</span>, p2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p1: 0xc000046240</span><br><span class="line">per: 0xc000046250</span><br><span class="line">per: &#123;kite&#125;</span><br><span class="line">p1: &#123;tom&#125;</span><br><span class="line">---------------</span><br><span class="line">p2: 0xc000046280</span><br><span class="line">per: 0xc000046280</span><br><span class="line">per: &amp;&#123;kite&#125;</span><br><span class="line">p2: &amp;&#123;kite&#125;</span><br></pre></td></tr></table></figure>

<p>从运行结果，我们看到p1是值传递，拷贝了副本，地址发生了改变，而p2是指针类型，地址没有改变。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Go运营</tag>
        <tag>函数</tag>
        <tag>结构体</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang学习笔记四-接口、Golang包和并发</title>
    <url>/posts/52141/</url>
    <content><![CDATA[<h1 id="Golang接口"><a href="#Golang接口" class="headerlink" title="Golang接口"></a>Golang接口</h1><p>接口像是一个公司里面的领导，他会定义一些通用规范，只设计规范，而不实现规范。</p>
<p>go语言的接口，是一种新的<strong>类型定义</strong> ，它把所有的<strong>具有共性的方法</strong> 定义在一起，任何其他类型只要实现了这些方法就是实现了这个接口。</p>
<span id="more"></span>

<p>语法格式和方法非常类似。</p>
<h2 id="接口的语法格式"><a href="#接口的语法格式" class="headerlink" title="接口的语法格式"></a>接口的语法格式</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义接口 */</span></span><br><span class="line"><span class="keyword">type</span> interface_name <span class="keyword">interface</span> &#123;</span><br><span class="line">   method_name1 [return_type]</span><br><span class="line">   method_name2 [return_type]</span><br><span class="line">   method_name3 [return_type]</span><br><span class="line">   ...</span><br><span class="line">   method_namen [return_type]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义结构体 */</span></span><br><span class="line"><span class="keyword">type</span> struct_name <span class="keyword">struct</span> &#123;</span><br><span class="line">   <span class="comment">/* variables */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 实现接口方法 */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(struct_name_variable struct_name)</span> <span class="title">method_name1</span><span class="params">()</span> [<span class="title">return_type</span>]</span> &#123;</span><br><span class="line">   <span class="comment">/* 方法实现 */</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(struct_name_variable struct_name)</span> <span class="title">method_namen</span><span class="params">()</span> [<span class="title">return_type</span>]</span> &#123;</span><br><span class="line">   <span class="comment">/* 方法实现*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在接口定义中定义，若干个空方法。这些方法都具有通用性。</p>
<h2 id="接口实例"><a href="#接口实例" class="headerlink" title="接口实例"></a>接口实例</h2><p>下面我定义一个USB接口，有读read和写write两个方法，再定义一个电脑Computer和一个手机Mobile来实现这个接口。</p>
<p><strong>USB接口</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> USB <span class="keyword">interface</span> &#123;</span><br><span class="line">	read()</span><br><span class="line">	write()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Computer结构体</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Computer <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Mobile结构体</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Mobile <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Computer实现USB接口方法</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Computer)</span> <span class="title">read</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;computer read...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Computer)</span> <span class="title">write</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;computer write...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Mobile实现USB接口方法</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Mobile)</span> <span class="title">read</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;mobile read...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Mobile)</span> <span class="title">write</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;mobile write...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	c := Computer&#123;&#125;</span><br><span class="line">	m := Mobile&#123;&#125;</span><br><span class="line"></span><br><span class="line">	c.read()</span><br><span class="line">	c.write()</span><br><span class="line">	m.read()</span><br><span class="line">	m.write()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	c := Computer&#123;&#125;</span><br><span class="line">	m := Mobile&#123;&#125;</span><br><span class="line"></span><br><span class="line">	c.read()</span><br><span class="line">	c.write()</span><br><span class="line">	m.read()</span><br><span class="line">	m.write()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现接口必须实现接口中的所有方法"><a href="#实现接口必须实现接口中的所有方法" class="headerlink" title="实现接口必须实现接口中的所有方法"></a>实现接口必须实现接口中的所有方法</h2><p>下面我们定义一个OpenClose接口，里面有两个方法open和close，定义个Door结构体，实现其中一个方法。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OpenClose <span class="keyword">interface</span> &#123;</span><br><span class="line">	open()</span><br><span class="line">	<span class="built_in">close</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Door <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Door)</span> <span class="title">open</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;open door...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> oc OpenClose</span><br><span class="line">	oc = Door&#123;&#125; <span class="comment">// 这里编译错误，提示只实现了一个接口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang接口值类型接收者和指针类型接收者"><a href="#Golang接口值类型接收者和指针类型接收者" class="headerlink" title="Golang接口值类型接收者和指针类型接收者"></a>Golang接口值类型接收者和指针类型接收者</h1><p>这个话题，本质上和方法的值类型接收者和指针类型接收者，的思考方法是一样的，值接收者是一个拷贝，是一个副本，而指针接收者，传递的是指针。</p>
<h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><p><strong>定义一个Pet接口</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Pet <span class="keyword">interface</span> &#123;</span><br><span class="line">	eat()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>定义一个Dog结构体</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Dog struct &#123;</span><br><span class="line">	name string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实现Pet接口（接收者是值类型）</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog Dog)</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;dog: %p\n&quot;</span>, &amp;dog)</span><br><span class="line">	fmt.Println(<span class="string">&quot;dog eat..&quot;</span>)</span><br><span class="line">	dog.name = <span class="string">&quot;黑黑&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	dog := Dog&#123;name: <span class="string">&quot;花花&quot;</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;dog: %p\n&quot;</span>, &amp;dog)</span><br><span class="line">	dog.eat()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;dog: %v\n&quot;</span>, dog)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dog: 0xc000046240</span><br><span class="line">dog: 0xc000046250</span><br><span class="line">dog eat..</span><br><span class="line">dog: &#123;花花&#125;</span><br></pre></td></tr></table></figure>

<p>从运行结果，我们看出dog的地址变了，说明是复制了一份，dog的name没有变说明，外面的dog变量没有被改变。</p>
<p><strong>将Pet接口改为指针接收者</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog *Dog)</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;dog: %p\n&quot;</span>, dog)</span><br><span class="line">	fmt.Println(<span class="string">&quot;dog eat..&quot;</span>)</span><br><span class="line">	dog.name = <span class="string">&quot;黑黑&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>再测试</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	dog := &amp;Dog&#123;name: <span class="string">&quot;花花&quot;</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;dog: %p\n&quot;</span>, dog)</span><br><span class="line">	dog.eat()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;dog: %v\n&quot;</span>, dog)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">dog: <span class="number">0xc00008c230</span></span><br><span class="line">dog: <span class="number">0xc00008c230</span></span><br><span class="line">dog eat..</span><br><span class="line">dog: &amp;&#123;黑黑&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang接口和类型的关系"><a href="#Golang接口和类型的关系" class="headerlink" title="Golang接口和类型的关系"></a>Golang接口和类型的关系</h1><ol>
<li>一个类型可以实现多个接口</li>
<li>多个类型可以实现同一个接口（多态）</li>
</ol>
<h2 id="一个类型实现多个接口"><a href="#一个类型实现多个接口" class="headerlink" title="一个类型实现多个接口"></a>一个类型实现多个接口</h2><p>一个类型实现多个接口，例如：有一个Player接口可以播放音乐，有一个Video接口可以播放视频，一个手机Mobile实现这两个接口，既可以播放音乐，又可以播放视频。</p>
<p><strong>定义一个Player接口</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Player <span class="keyword">interface</span> &#123;</span><br><span class="line">	playMusic()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义一个Video接口</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Video <span class="keyword">interface</span> &#123;</span><br><span class="line">	playVideo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>定义Mobile结构体</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Mobile <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实现两个接口</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Mobile)</span> <span class="title">playMusic</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;播放音乐&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Mobile)</span> <span class="title">playVideo</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;播放视频&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m := Mobile&#123;&#125;</span><br><span class="line">	m.playMusic()</span><br><span class="line">	m.playVideo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">播放音乐</span><br><span class="line">播放视频</span><br></pre></td></tr></table></figure>

<h2 id="多个类型实现同一个接口"><a href="#多个类型实现同一个接口" class="headerlink" title="多个类型实现同一个接口"></a>多个类型实现同一个接口</h2><p>比如，一个宠物接口Pet，猫类型Cat和狗类型Dog都可以实现该接口，都可以把猫和狗当宠物类型对待，这在其他语言中叫做<strong>多态</strong> 。</p>
<p><strong>定义一个Pet接口</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Pet <span class="keyword">interface</span> &#123;</span><br><span class="line">	eat()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>定义一个Dog结构体</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>定义一个Cat结构体</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实现接口</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cat Cat)</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;cat eat...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog Dog)</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;dog eat...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> p Pet</span><br><span class="line">	p = Cat&#123;&#125;</span><br><span class="line">	p.eat()</span><br><span class="line">	p = Dog&#123;&#125;</span><br><span class="line">	p.eat()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">cat eat...</span><br><span class="line">dog eat...</span><br></pre></td></tr></table></figure>


<h1 id="Golang接口嵌套"><a href="#Golang接口嵌套" class="headerlink" title="Golang接口嵌套"></a>Golang接口嵌套</h1><p>接口可以通过嵌套，创建新的接口。例如：飞鱼，既可以飞，又可以游泳。我们创建一个飞Fly接口，创建一个游泳接口Swim，飞鱼接口有这两个接口组成。</p>
<p><strong>飞Flyer接口</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Flyer <span class="keyword">interface</span> &#123;</span><br><span class="line">	fly()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>创建Swimmer接口</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Swimmer <span class="keyword">interface</span> &#123;</span><br><span class="line">	swim()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>组合一个接口FlyFish</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> FlyFish <span class="keyword">interface</span> &#123;</span><br><span class="line">	Flyer</span><br><span class="line">	Swimmer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>创建一个结构体Fish</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Fish <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实现这个组合接口</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(fish Fish)</span> <span class="title">fly</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;fly...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(fish Fish)</span> <span class="title">swim</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;swim...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> ff FlyFish</span><br><span class="line">	ff = Fish&#123;&#125;</span><br><span class="line">	ff.fly()</span><br><span class="line">	ff.swim()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fly...</span><br><span class="line">swim...</span><br></pre></td></tr></table></figure>


<h1 id="Golang-通过接口实现OCP设计原则"><a href="#Golang-通过接口实现OCP设计原则" class="headerlink" title="Golang 通过接口实现OCP设计原则"></a>Golang 通过接口实现OCP设计原则</h1><p>而面向<strong>对象的可复用设计</strong> 的第一块基石，便是所谓的”开-闭“原则（Open-Closed Principle,常缩写为OCP）。虽然，go不是面向对象语言，但是也可以模拟实现这个原则。对<strong>扩展</strong> 是开放的，对<strong>修改</strong> 是关闭的。</p>
<h2 id="OCP设计原则实例"><a href="#OCP设计原则实例" class="headerlink" title="OCP设计原则实例"></a>OCP设计原则实例</h2><p>下面通过一个人养宠物的例子，来解释OCP设计原则。</p>
<p><strong>定义一个宠物接口Pet</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Pet <span class="keyword">interface</span> &#123;</span><br><span class="line">	eat()</span><br><span class="line">	sleep()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该接口有吃和睡两个方法。</p>
<p><strong>定义个Dog结构体</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">	age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Dog实现接口方法</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog Dog)</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;dog eat...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog Dog)</span> <span class="title">sleep</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;dog sleep...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>定义一个Cat结构体</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">	age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Cat实现接口方法</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cat Cat)</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;cat eat...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cat Cat)</span> <span class="title">sleep</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;cat sleep...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>定义个Person结构体</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>为Person添加一个养宠物方法</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(per Person)</span> <span class="title">care</span><span class="params">(pet Pet)</span></span> &#123;</span><br><span class="line">	pet.eat()</span><br><span class="line">	pet.sleep()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>最后测试一下</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	dog := Dog&#123;&#125;</span><br><span class="line">	cat := Cat&#123;&#125;</span><br><span class="line">	per := Person&#123;&#125;</span><br><span class="line"></span><br><span class="line">	per.care(dog)</span><br><span class="line">	per.care(cat)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">dog eat...</span><br><span class="line">dog sleep...</span><br><span class="line">cat eat...</span><br><span class="line">cat sleep...</span><br></pre></td></tr></table></figure>

<p>使用接口的这种设计方法，可以很好的解耦合代码，实现软件设计的OCP原则（即开闭原则）</p>
<p>这样设计，如果再添加一个宠物，例如：一个鸟 <code>Bird</code>，原有的代码不用修改，直接添加就可以。</p>
<h1 id="Golang继承"><a href="#Golang继承" class="headerlink" title="Golang继承"></a>Golang继承</h1><p>Golang本质上没有oop的概念，也没有继承的概念，但是可以通过<strong>结构体嵌套</strong> 实现这个特性。</p>
<p><strong>例如</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">	age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a Animal)</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;eat...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a Animal)</span> <span class="title">sleep</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;sleep&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">	Animal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">	Animal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	dog := Dog&#123;</span><br><span class="line">		Animal&#123;</span><br><span class="line">			name: <span class="string">&quot;dog&quot;</span>,</span><br><span class="line">			age:  <span class="number">2</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cat := Cat&#123;</span><br><span class="line">		Animal&#123;name: <span class="string">&quot;cat&quot;</span>,</span><br><span class="line">			age: <span class="number">3</span>&#125;,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	dog.eat()</span><br><span class="line">	dog.sleep()</span><br><span class="line"></span><br><span class="line">	cat.eat()</span><br><span class="line">	cat.sleep()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang模拟OOP的属性和方法"><a href="#Golang模拟OOP的属性和方法" class="headerlink" title="Golang模拟OOP的属性和方法"></a>Golang模拟OOP的属性和方法</h1><p>golang没有面向对象的概念，也没有封装的概念，但是可以通过结构体 <code>struct</code>和函数<strong>绑定</strong> 来实现OOP的属性和方法等特性。接收者 receiver <strong>方法</strong> 。</p>
<p><strong>例如</strong> ，想要定义一个Person类，有name和age属性，有eat/sleep/work方法。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">	age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(per Person)</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;eat...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(per Person)</span> <span class="title">sleep</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;sleep...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(per Person)</span> <span class="title">work</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;work...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	per := Person&#123;</span><br><span class="line">		name: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">		age:  <span class="number">20</span>,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;per: %v\n&quot;</span>, per)</span><br><span class="line"></span><br><span class="line">	per.eat()</span><br><span class="line">	per.sleep()</span><br><span class="line">	per.work()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang构造函数"><a href="#Golang构造函数" class="headerlink" title="Golang构造函数"></a>Golang构造函数</h1><p>Golang没有构造函数的概念，可以使用函数来模拟构造函数的的功能。</p>
<p><strong>例如</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">	age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPerson</span><span class="params">(name <span class="keyword">string</span>, age <span class="keyword">int</span>)</span> <span class="params">(*Person, error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> name == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;name 不能为空&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> age &lt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;age 不能小于0&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> &amp;Person&#123;name: name, age: age&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	person, err := NewPerson(<span class="string">&quot;tom&quot;</span>, <span class="number">20</span>)</span><br><span class="line">	<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;person: %v\n&quot;</span>, *person)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang包"><a href="#Golang包" class="headerlink" title="Golang包"></a>Golang包</h1><p>包可以区分命令空间（一个文件夹中不能有两个同名文件），也可以更好的管理项目。go中创建一个包，一般是创建一个文件夹，在该文件夹里面的go文件中，使用package关键字声明包名称，通常，文件夹名称和包名称相同。并且，同一个文件下面只有一个包</p>
<h2 id="创建包"><a href="#创建包" class="headerlink" title="创建包"></a>创建包</h2><ol>
<li>创建一个名为dao的文件夹。</li>
<li>创建一个dao.go文件。</li>
<li>在该文件中声明包。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dao</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test1</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;test package&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h2><p>要使用某个包下面的变量或者方法，需要导入该包，导入包时，要导入从 <code>GOPATH</code>开始的包路径，例如，在 <code>service.go</code>中导入 <code>dao</code>包</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;dao&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	dao.Test1()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="包注意事项"><a href="#包注意事项" class="headerlink" title="包注意事项"></a>包注意事项</h2><ul>
<li><p>一个文件夹下只能有一个package <code>import</code>后面的其实是 <code>GOPATH</code>开始的相对目录路径，包括最后一段。但由于一个目录下只能有一个package，所以 <code>import</code>一个路径就等于是 <code>import</code>了这个路径下的包。</p>
<p>注意，这里指的是“直接包含”的go文件。如果有子目录，那么子目录的父目录是完全两个包。</p>
</li>
<li><p>比如你实现了一个计算器package，名叫 <code>calc</code>，位于 <code>calc</code>目录下；但又想给别人一个使用范例，于是在calc下可以建个example子目录（calc/example/），这个子目录里有个example.go（calc/example/example.go）。此时，example.go可以是main包，里面还可以有个main函数。</p>
</li>
<li><p>一个package的文件不能在多个文件夹下如果多个文件夹下有重名的package，它们其实是彼此无关的package。</p>
<p>如果一个go文件需要同时使用不同目录下的同名package，需要在 <code>import</code>这些目录时为每个目录指定一个package的别名。</p>
</li>
</ul>
<h1 id="Golang-包管理工具go-module"><a href="#Golang-包管理工具go-module" class="headerlink" title="Golang 包管理工具go module"></a>Golang 包管理工具go module</h1><h2 id="Go-module简介"><a href="#Go-module简介" class="headerlink" title="Go module简介"></a>Go module简介</h2><p>go modules 是 golang 1.11 新加的特性，用来管理模块中<strong>包的依赖关系</strong> 。</p>
<h2 id="Go-mod-使用方法"><a href="#Go-mod-使用方法" class="headerlink" title="Go mod 使用方法"></a>Go mod 使用方法</h2><ul>
<li>初始化模块<code>go mod init &lt;项目模块名称&gt;</code></li>
<li>依赖关系处理 ,根据go.mod文件<code>go mod tidy</code></li>
<li>将依赖包复制到项目下的 vendor目录。<code>go mod vendor</code><strong>如果包被屏蔽(墙),可以使用这个命令，随后使用go build -mod=vendor编译</strong></li>
<li>显示依赖关系<code>go list -m all</code></li>
<li>显示详细依赖关系<code>go list -m -json all</code></li>
<li>下载依赖<code>go mod download [path@version]</code><strong>[path@version]是非必写的</strong></li>
</ul>
<h1 id="Golang并发编程之协程"><a href="#Golang并发编程之协程" class="headerlink" title="Golang并发编程之协程"></a>Golang并发编程之协程</h1><p>Golang 中的并发是<strong>函数</strong> 相互独立运行的能力。<strong>Goroutines</strong> 是并发运行的函数。Golang 提供了 Goroutines 作为并发处理操作的一种方式。</p>
<p>创建一个协程非常简单，就是在一个任务函数前面添加一个go关键字：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> task()</span><br></pre></td></tr></table></figure>

<h2 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">(msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;msg: %v\n&quot;</span>, msg)</span><br><span class="line">		time.Sleep(time.Millisecond * <span class="number">100</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">go</span> show(<span class="string">&quot;java&quot;</span>)</span><br><span class="line">	show(<span class="string">&quot;golang&quot;</span>) <span class="comment">// 在main协程中执行，如果它前面也添加go，程序没有输出</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;end...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看<code>go</code>关键字去掉的运行效果</p>
</blockquote>
<h2 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">responseSize</span><span class="params">(url <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Step1: &quot;</span>, url)</span><br><span class="line">	response, err := http.Get(url)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;Step2: &quot;</span>, url)</span><br><span class="line">	<span class="keyword">defer</span> response.Body.Close()</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;Step3: &quot;</span>, url)</span><br><span class="line">	body, err := ioutil.ReadAll(response.Body)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Step4: &quot;</span>, <span class="built_in">len</span>(body))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">go</span> responseSize(<span class="string">&quot;https://www.xiaobaibk.com&quot;</span>)</span><br><span class="line">	<span class="keyword">go</span> responseSize(<span class="string">&quot;https://baidu.com&quot;</span>)</span><br><span class="line">	<span class="keyword">go</span> responseSize(<span class="string">&quot;https://jd.com&quot;</span>)</span><br><span class="line">	time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang并发编程之通道channel"><a href="#Golang并发编程之通道channel" class="headerlink" title="Golang并发编程之通道channel"></a>Golang并发编程之通道channel</h1><p>Go 提供了一种称为通道的机制，用于在 goroutine 之间<strong>共享数据</strong> 。当您作为 goroutine 执行并发活动时，需要在 goroutine 之间共享资源或数据，通道充当 goroutine 之间的管道（管道）并提供一种机制来保证同步交换。</p>
<p>需要在声明通道时指定<strong>数据类型</strong> 。我们可以共享内置、命名、结构和引用类型的值和指针。数据在通道上传递：在任何给定时间只有一个 goroutine 可以访问数据项：因此按照设计不会发生数据竞争。</p>
<p>根据数据交换的行为，有两种类型的通道：无缓冲通道和缓冲通道。无缓冲通道用于执行 goroutine 之间的同步通信，而缓冲通道用于执行异步通信。无缓冲通道保证在发送和接收发生的瞬间执行两个 goroutine 之间的交换。缓冲通道没有这样的保证。</p>
<p><strong>通道由 make 函数创建，该函数指定 chan 关键字和通道的元素类型。</strong></p>
<h3 id="这是创建无缓冲和缓冲通道的代码块："><a href="#这是创建无缓冲和缓冲通道的代码块：" class="headerlink" title="这是创建无缓冲和缓冲通道的代码块："></a>这是创建无缓冲和缓冲通道的代码块：</h3><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">Unbuffered := make(chan int) <span class="comment">// 整型无缓冲通道</span></span><br><span class="line"><span class="attr">buffered</span> := make(chan int, <span class="number">10</span>)	<span class="comment">// 整型有缓冲通道</span></span><br></pre></td></tr></table></figure>

<p>使用内置函数 <code>make</code>创建无缓冲和缓冲通道。<code>make</code>的第一个参数需要关键字 <code>chan</code>，然后是通道允许交换的数据类型。</p>
<h3 id="这是将值发送到通道的代码块需要使用-lt-运算符："><a href="#这是将值发送到通道的代码块需要使用-lt-运算符：" class="headerlink" title="这是将值发送到通道的代码块需要使用 &lt;- 运算符："></a>这是将值发送到通道的代码块需要使用 <code>&lt;-</code> 运算符：</h3><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">goroutine1 := make(chan string, <span class="number">5</span>) <span class="comment">// 字符串缓冲通道</span></span><br><span class="line">goroutine1 &lt;- <span class="string">&quot;Australia&quot;</span> <span class="comment">// 通过通道发送字符串</span></span><br></pre></td></tr></table></figure>

<p>一个包含 5 个值的缓冲区的字符串类型的 goroutine1 通道。然后我们通过通道发送字符串“Australia”。</p>
<h3 id="这是从通道接收值的代码块："><a href="#这是从通道接收值的代码块：" class="headerlink" title="这是从通道接收值的代码块："></a>这是从通道接收值的代码块：</h3><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">data := <span class="xml">&lt;-goroutine1 // 从通道接收字符串</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;-</code> 运算符附加到通道变量（goroutine1）的左侧，以接收来自通道的值。</p>
<h2 id="无缓冲通道"><a href="#无缓冲通道" class="headerlink" title="无缓冲通道"></a>无缓冲通道</h2><p>在无缓冲通道中，在接收到任何值之前没有能力保存它。在这种类型的通道中，发送和接收 goroutine 在任何发送或接收操作完成之前的同一时刻都准备就绪。如果两个 goroutine 没有在同一时刻准备好，则通道会让执行其各自发送或接收操作的 goroutine 首先等待。同步是通道上发送和接收之间交互的基础。没有另一个就不可能发生。</p>
<h2 id="缓冲通道"><a href="#缓冲通道" class="headerlink" title="缓冲通道"></a>缓冲通道</h2><p>在缓冲通道中，有能力在接收到一个或多个值之前保存它们。在这种类型的通道中，不要强制 goroutine 在同一时刻准备好执行发送和接收。当发送或接收阻塞时也有不同的条件。只有当通道中没有要接收的值时，接收才会阻塞。仅当没有可用缓冲区来放置正在发送的值时，发送才会阻塞。</p>
<h2 id="通道的发送和接收特性"><a href="#通道的发送和接收特性" class="headerlink" title="通道的发送和接收特性"></a>通道的发送和接收特性</h2><ol>
<li>对于同一个通道，发送操作之间是互斥的，接收操作之间也是互斥的。</li>
<li>发送操作和接收操作中对元素值的处理都是不可分割的。</li>
<li>发送操作在完全完成之前会被阻塞。接收操作也是如此。</li>
</ol>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建int类型通道，只能传入int类型值</span></span><br><span class="line"><span class="keyword">var</span> values = make(chan int)</span><br><span class="line"></span><br><span class="line">func <span class="function"><span class="title">send</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">	rand.Seed(time.Now().UnixNano())</span><br><span class="line">	<span class="attr">value</span> := rand.Intn(<span class="number">10</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;send: %v\n&quot;</span>, value)</span><br><span class="line">	<span class="comment">// time.Sleep(time.Second * 5)</span></span><br><span class="line">	values &lt;- value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func <span class="function"><span class="title">main</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">	<span class="comment">// 从通道接收值</span></span><br><span class="line">	defer close(values)</span><br><span class="line">	go send()</span><br><span class="line">	fmt.Println(<span class="string">&quot;wait...&quot;</span>)</span><br><span class="line">	<span class="attr">value</span> := <span class="xml">&lt;-values</span></span><br><span class="line"><span class="xml">	fmt.Printf(&quot;receive: %v\n&quot;, value)</span></span><br><span class="line"><span class="xml">	fmt.Println(&quot;end...&quot;)</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>


<h1 id="Golang并发编程之WaitGroup实现同步"><a href="#Golang并发编程之WaitGroup实现同步" class="headerlink" title="Golang并发编程之WaitGroup实现同步"></a>Golang并发编程之WaitGroup实现同步</h1><p><strong>实例演示</strong></p>
<p>查看添加 <code>WaitGroup</code>和不添加 <code>WaitGroup</code>的区别</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> wg.Done() <span class="comment">// goroutine结束就登记-1</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello Goroutine!&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>) <span class="comment">// 启动一个goroutine就登记+1</span></span><br><span class="line">        <span class="keyword">go</span> hello(i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait() <span class="comment">// 等待所有登记的goroutine都结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang并发编程之runtime包"><a href="#Golang并发编程之runtime包" class="headerlink" title="Golang并发编程之runtime包"></a>Golang并发编程之runtime包</h1><p>runtime包里面定义了一些协程管理相关的api</p>
<h2 id="runtime-Gosched"><a href="#runtime-Gosched" class="headerlink" title="runtime.Gosched()"></a>runtime.Gosched()</h2><p>让出CPU时间片，重新等待安排任务</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">		fmt.Println(s)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">go</span> show(<span class="string">&quot;java&quot;</span>)</span><br><span class="line">	<span class="comment">// 主协程</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">		<span class="comment">// 切一下，再次分配任务</span></span><br><span class="line">		runtime.Gosched() <span class="comment">// 注释掉查看结果</span></span><br><span class="line">		fmt.Println(<span class="string">&quot;golang&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="runtime-Goexit"><a href="#runtime-Goexit" class="headerlink" title="runtime.Goexit()"></a>runtime.Goexit()</h2><p>退出当前协程</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;runtime&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> i &gt;= <span class="number">5</span> &#123;</span><br><span class="line">			runtime.Goexit()</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">go</span> show()</span><br><span class="line">	time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="runtime-GOMAXPROCS"><a href="#runtime-GOMAXPROCS" class="headerlink" title="runtime.GOMAXPROCS"></a>runtime.GOMAXPROCS</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;runtime&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;A:&quot;</span>, i)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">b</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;B:&quot;</span>, i)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;runtime.NumCPU(): %v\n&quot;</span>, runtime.NumCPU())</span><br><span class="line">	runtime.GOMAXPROCS(<span class="number">2</span>) <span class="comment">// 修改为1查看效果</span></span><br><span class="line">	<span class="keyword">go</span> a()</span><br><span class="line">	<span class="keyword">go</span> b()</span><br><span class="line">	time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang并发编程之Mutex互斥锁实现同步"><a href="#Golang并发编程之Mutex互斥锁实现同步" class="headerlink" title="Golang并发编程之Mutex互斥锁实现同步"></a>Golang并发编程之Mutex互斥锁实现同步</h1><p>除了使用channel实现同步之外，还可以使用Mutex互斥锁的方式实现同步。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">int</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lock sync.Mutex</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wt sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> wt.Done()</span><br><span class="line">	lock.Lock()</span><br><span class="line">	m += <span class="number">1</span></span><br><span class="line">	time.Sleep(time.Millisecond * <span class="number">10</span>)</span><br><span class="line">	lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sub</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> wt.Done()</span><br><span class="line">	lock.Lock()</span><br><span class="line">	time.Sleep(time.Millisecond * <span class="number">2</span>)</span><br><span class="line">	m -= <span class="number">1</span></span><br><span class="line">	lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> add()</span><br><span class="line">		wt.Add(<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">go</span> sub()</span><br><span class="line">		wt.Add(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	wt.Wait()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;m: %v\n&quot;</span>, m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang并发编程之channel的遍历"><a href="#Golang并发编程之channel的遍历" class="headerlink" title="Golang并发编程之channel的遍历"></a>Golang并发编程之channel的遍历</h1><h2 id="方法1-for循环-if判断"><a href="#方法1-for循环-if判断" class="headerlink" title="方法1 for循环+if判断"></a>方法1 for循环+if判断</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">			c &lt;- i</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">close</span>(c)</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> data, ok := &lt;-c; ok &#123;</span><br><span class="line">			fmt.Printf(<span class="string">&quot;data: %v\n&quot;</span>, data)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法2-for-range"><a href="#方法2-for-range" class="headerlink" title="方法2 for range"></a>方法2 for range</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">	c := make(chan int)</span><br><span class="line"></span><br><span class="line">	go func() &#123;</span><br><span class="line">		for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">			c &lt;- i</span><br><span class="line">		&#125;</span><br><span class="line">		close(c)</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	for v := range c &#123;</span><br><span class="line">		fmt.Printf(&quot;v: %v\n&quot;, v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：如果通道关闭，读多写少，没有了就是默认值，例如，int 就是0，如果没有关闭就会死锁。</p>
</blockquote>
<h1 id="Golang并发编程之select"><a href="#Golang并发编程之select" class="headerlink" title="Golang并发编程之select"></a>Golang并发编程之select</h1><ol>
<li>select是Go中的一个控制结构，类似于<code>switch</code>语句，用于处理异步IO操作。<code>select</code>会监听case语句中channel的读写操作，当case中channel读写操作为非阻塞状态（即能读写）时，将会触发相应的动作。<blockquote>
<p>select中的case语句必须是一个channel操作</p>
<p>select中的default子句总是可运行的。</p>
</blockquote>
</li>
<li>如果有多个<code>case</code>都可以运行，<code>select</code>会随机公平地选出一个执行，其他不会执行。</li>
<li>如果没有可运行的<code>case</code>语句，且有<code>default</code>语句，那么就会执行<code>default</code>的动作。</li>
<li>如果没有可运行的<code>case</code>语句，且没有<code>default</code>语句，<code>select</code>将阻塞，直到某个<code>case</code>通信可以运行</li>
</ol>
<h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chanInt = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">var</span> chanStr = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		chanInt &lt;- <span class="number">100</span></span><br><span class="line">		chanStr &lt;- <span class="string">&quot;hello&quot;</span></span><br><span class="line">		<span class="built_in">close</span>(chanInt)</span><br><span class="line">		<span class="built_in">close</span>(chanStr)</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> r := &lt;-chanInt:</span><br><span class="line">			fmt.Printf(<span class="string">&quot;chanInt: %v\n&quot;</span>, r)</span><br><span class="line">		<span class="keyword">case</span> r := &lt;-chanStr:</span><br><span class="line">			fmt.Printf(<span class="string">&quot;chanStr: %v\n&quot;</span>, r)</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			fmt.Println(<span class="string">&quot;default...&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		time.Sleep(time.Second)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang并发编程之Timer"><a href="#Golang并发编程之Timer" class="headerlink" title="Golang并发编程之Timer"></a>Golang并发编程之Timer</h1><p>Timer顾名思义，就是定时器的意思，可以实现一些定时操作，内部也是通过channel来实现的。</p>
<p><strong>实例演示</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	timer1 := time.NewTimer(time.Second * <span class="number">2</span>)</span><br><span class="line">	t1 := time.Now()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;t1:%v\n&quot;</span>, t1)</span><br><span class="line"></span><br><span class="line">	t2 := &lt;-timer1.C</span><br><span class="line">	fmt.Printf(<span class="string">&quot;t2:%v\n&quot;</span>, t2)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//如果只是想单纯的等待的话，可以使用 time.Sleep 来实现</span></span><br><span class="line">	timer2 := time.NewTimer(time.Second * <span class="number">2</span>)</span><br><span class="line">	&lt;-timer2.C</span><br><span class="line">	fmt.Println(<span class="string">&quot;2s后&quot;</span>)</span><br><span class="line"></span><br><span class="line">	time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;再一次2s后&quot;</span>)</span><br><span class="line"></span><br><span class="line">	&lt;-time.After(time.Second * <span class="number">2</span>) <span class="comment">//time.After函数的返回值是chan Time</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;再再一次2s后&quot;</span>)</span><br><span class="line"></span><br><span class="line">	timer3 := time.NewTimer(time.Second)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		&lt;-timer3.C</span><br><span class="line">		fmt.Println(<span class="string">&quot;Timer 3 expired&quot;</span>)</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	stop := timer3.Stop() <span class="comment">//停止定时器</span></span><br><span class="line">	<span class="comment">////阻止timer事件发生，当该函数执行后，timer计时器停止，相应的事件不再执行</span></span><br><span class="line">	<span class="keyword">if</span> stop &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Timer 3 stopped&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;before&quot;</span>)</span><br><span class="line">	timer4 := time.NewTimer(time.Second * <span class="number">5</span>) <span class="comment">//原来设置5s</span></span><br><span class="line">	timer4.Reset(time.Second * <span class="number">1</span>)            <span class="comment">//重新设置时间,即修改NewTimer的时间</span></span><br><span class="line">	&lt;-timer4.C</span><br><span class="line">	fmt.Println(<span class="string">&quot;after&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang并发编程之Ticker"><a href="#Golang并发编程之Ticker" class="headerlink" title="Golang并发编程之Ticker"></a>Golang并发编程之Ticker</h1><p>Timer只执行一次，Ticker可以周期的执行。</p>
<p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ticker := time.NewTicker(time.Second)</span><br><span class="line">	counter := <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> _ = <span class="keyword">range</span> ticker.C &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;ticker 1&quot;</span>)</span><br><span class="line">		counter++</span><br><span class="line">		<span class="keyword">if</span> counter &gt;= <span class="number">5</span> &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ticker.Stop()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	chanInt := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">	ticker := time.NewTicker(time.Second)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">for</span> _ = <span class="keyword">range</span> ticker.C &#123;</span><br><span class="line">			<span class="keyword">select</span> &#123;</span><br><span class="line">			<span class="keyword">case</span> chanInt &lt;- <span class="number">1</span>:</span><br><span class="line">			<span class="keyword">case</span> chanInt &lt;- <span class="number">2</span>:</span><br><span class="line">			<span class="keyword">case</span> chanInt &lt;- <span class="number">3</span>:</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	sum := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> v := <span class="keyword">range</span> chanInt &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;接收: %v\n&quot;</span>, v)</span><br><span class="line">		sum += v</span><br><span class="line">		<span class="keyword">if</span> sum &gt;= <span class="number">10</span> &#123;</span><br><span class="line">			fmt.Printf(<span class="string">&quot;sum: %v\n&quot;</span>, sum)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang并发编程之原子变量的引入"><a href="#Golang并发编程之原子变量的引入" class="headerlink" title="Golang并发编程之原子变量的引入"></a>Golang并发编程之原子变量的引入</h1><p><strong>先看一个实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lock sync.Mutex</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line">	lock.Lock()</span><br><span class="line">	i++</span><br><span class="line">	lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sub</span><span class="params">()</span></span> &#123;</span><br><span class="line">	lock.Lock()</span><br><span class="line">	i--</span><br><span class="line">	lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> add()</span><br><span class="line">		<span class="keyword">go</span> sub()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	time.Sleep(time.Second * <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这是我们之前的写法，使用锁实现协程的同步</p>
</blockquote>
<p><strong>下面使用原子操作</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync/atomic&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int32</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line">	atomic.AddInt32(&amp;i, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sub</span><span class="params">()</span></span> &#123;</span><br><span class="line">	atomic.AddInt32(&amp;i, <span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> add()</span><br><span class="line">		<span class="keyword">go</span> sub()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	time.Sleep(time.Second * <span class="number">3</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang并发编程之原子操作详解"><a href="#Golang并发编程之原子操作详解" class="headerlink" title="Golang并发编程之原子操作详解"></a>Golang并发编程之原子操作详解</h1><p>atomic 提供的原子操作能够确保任一时刻只有一个goroutine对变量进行操作，善用 atomic 能够避免程序中出现大量的锁操作。</p>
<p>atomic常见操作有：</p>
<ul>
<li>增减</li>
<li>载入 read</li>
<li>比较并交换 cas</li>
<li>交换</li>
<li>存储 write</li>
</ul>
<p>下面将分别介绍这些操作。</p>
<h2 id="增减操作"><a href="#增减操作" class="headerlink" title="增减操作"></a>增减操作</h2><p>atomic 包中提供了如下以Add为前缀的增减操作:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">AddInt32</span><span class="params">(addr *<span class="keyword">int32</span>, delta <span class="keyword">int32</span>)</span> <span class="params">(<span class="built_in">new</span> <span class="keyword">int32</span>)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">AddInt64</span><span class="params">(addr *<span class="keyword">int64</span>, delta <span class="keyword">int64</span>)</span> <span class="params">(<span class="built_in">new</span> <span class="keyword">int64</span>)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">AddUint32</span><span class="params">(addr *<span class="keyword">uint32</span>, delta <span class="keyword">uint32</span>)</span> <span class="params">(<span class="built_in">new</span> <span class="keyword">uint32</span>)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">AddUint64</span><span class="params">(addr *<span class="keyword">uint64</span>, delta <span class="keyword">uint64</span>)</span> <span class="params">(<span class="built_in">new</span> <span class="keyword">uint64</span>)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">AddUintptr</span><span class="params">(addr *<span class="keyword">uintptr</span>, delta <span class="keyword">uintptr</span>)</span> <span class="params">(<span class="built_in">new</span> <span class="keyword">uintptr</span>)</span></span></span><br></pre></td></tr></table></figure>

<h2 id="载入操作"><a href="#载入操作" class="headerlink" title="载入操作"></a>载入操作</h2><p>atomic 包中提供了如下以Load为前缀的增减操作:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">LoadInt32</span><span class="params">(addr *<span class="keyword">int32</span>)</span> <span class="params">(val <span class="keyword">int32</span>)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">LoadInt64</span><span class="params">(addr *<span class="keyword">int64</span>)</span> <span class="params">(val <span class="keyword">int64</span>)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">LoadPointer</span><span class="params">(addr *unsafe.Pointer)</span> <span class="params">(val unsafe.Pointer)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">LoadUint32</span><span class="params">(addr *<span class="keyword">uint32</span>)</span> <span class="params">(val <span class="keyword">uint32</span>)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">LoadUint64</span><span class="params">(addr *<span class="keyword">uint64</span>)</span> <span class="params">(val <span class="keyword">uint64</span>)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">LoadUintptr</span><span class="params">(addr *<span class="keyword">uintptr</span>)</span> <span class="params">(val <span class="keyword">uintptr</span>)</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>载入操作能够保证原子的读变量的值，当读取的时候，任何其他CPU操作都无法对该变量进行读写，其实现机制受到底层硬件的支持。</p>
</blockquote>
<h2 id="比较并交换"><a href="#比较并交换" class="headerlink" title="比较并交换"></a>比较并交换</h2><p>该操作简称 CAS(Compare And Swap)。 这类操作的前缀为 <code>CompareAndSwap</code> :</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">CompareAndSwapInt32</span><span class="params">(addr *<span class="keyword">int32</span>, old, <span class="built_in">new</span> <span class="keyword">int32</span>)</span> <span class="params">(swapped <span class="keyword">bool</span>)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">CompareAndSwapInt64</span><span class="params">(addr *<span class="keyword">int64</span>, old, <span class="built_in">new</span> <span class="keyword">int64</span>)</span> <span class="params">(swapped <span class="keyword">bool</span>)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">CompareAndSwapPointer</span><span class="params">(addr *unsafe.Pointer, old, <span class="built_in">new</span> unsafe.Pointer)</span> <span class="params">(swapped <span class="keyword">bool</span>)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">CompareAndSwapUint32</span><span class="params">(addr *<span class="keyword">uint32</span>, old, <span class="built_in">new</span> <span class="keyword">uint32</span>)</span> <span class="params">(swapped <span class="keyword">bool</span>)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">CompareAndSwapUint64</span><span class="params">(addr *<span class="keyword">uint64</span>, old, <span class="built_in">new</span> <span class="keyword">uint64</span>)</span> <span class="params">(swapped <span class="keyword">bool</span>)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">CompareAndSwapUintptr</span><span class="params">(addr *<span class="keyword">uintptr</span>, old, <span class="built_in">new</span> <span class="keyword">uintptr</span>)</span> <span class="params">(swapped <span class="keyword">bool</span>)</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>该操作在进行交换前首先确保变量的值未被更改，即仍然保持参数 <code>old</code> 所记录的值，满足此前提下才进行交换操作。CAS的做法类似操作数据库时常见的乐观锁机制。</p>
</blockquote>
<h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><p>此类操作的前缀为 <code>Swap</code>：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">SwapInt32</span><span class="params">(addr *<span class="keyword">int32</span>, <span class="built_in">new</span> <span class="keyword">int32</span>)</span> <span class="params">(old <span class="keyword">int32</span>)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">SwapInt64</span><span class="params">(addr *<span class="keyword">int64</span>, <span class="built_in">new</span> <span class="keyword">int64</span>)</span> <span class="params">(old <span class="keyword">int64</span>)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">SwapPointer</span><span class="params">(addr *unsafe.Pointer, <span class="built_in">new</span> unsafe.Pointer)</span> <span class="params">(old unsafe.Pointer)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">SwapUint32</span><span class="params">(addr *<span class="keyword">uint32</span>, <span class="built_in">new</span> <span class="keyword">uint32</span>)</span> <span class="params">(old <span class="keyword">uint32</span>)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">SwapUint64</span><span class="params">(addr *<span class="keyword">uint64</span>, <span class="built_in">new</span> <span class="keyword">uint64</span>)</span> <span class="params">(old <span class="keyword">uint64</span>)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">SwapUintptr</span><span class="params">(addr *<span class="keyword">uintptr</span>, <span class="built_in">new</span> <span class="keyword">uintptr</span>)</span> <span class="params">(old <span class="keyword">uintptr</span>)</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>相对于CAS，明显此类操作更为暴力直接，并不管变量的旧值是否被改变，直接赋予新值然后返回背替换的值。</p>
</blockquote>
<h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><p>此类操作的前缀为 <code>Store</code>：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">StoreInt32</span><span class="params">(addr *<span class="keyword">int32</span>, val <span class="keyword">int32</span>)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">StoreInt64</span><span class="params">(addr *<span class="keyword">int64</span>, val <span class="keyword">int64</span>)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">StorePointer</span><span class="params">(addr *unsafe.Pointer, val unsafe.Pointer)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">StoreUint32</span><span class="params">(addr *<span class="keyword">uint32</span>, val <span class="keyword">uint32</span>)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">StoreUint64</span><span class="params">(addr *<span class="keyword">uint64</span>, val <span class="keyword">uint64</span>)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">StoreUintptr</span><span class="params">(addr *<span class="keyword">uintptr</span>, val <span class="keyword">uintptr</span>)</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>此类操作确保了写变量的原子性，避免其他操作读到了修改变量过程中的脏数据。</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>接口</tag>
        <tag>构造函数</tag>
        <tag>并发</tag>
        <tag>包管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang爬虫技术</title>
    <url>/posts/28913/</url>
    <content><![CDATA[<h1 id="Golang-爬虫简介"><a href="#Golang-爬虫简介" class="headerlink" title="Golang 爬虫简介"></a>Golang 爬虫简介</h1><h2 id="什么是爬虫"><a href="#什么是爬虫" class="headerlink" title="什么是爬虫"></a>什么是爬虫</h2><p>利用编程手段获取数据，为其他应用程序提供数据。如常用的搜索引擎等（Google、Baidu）。</p>
<h2 id="学习爬虫预备知识"><a href="#学习爬虫预备知识" class="headerlink" title="学习爬虫预备知识"></a>学习爬虫预备知识</h2><ul>
<li>Html</li>
<li>Css</li>
<li>JavaScript</li>
<li>浏览器调试</li>
</ul>
<h2 id="爬虫实现方法"><a href="#爬虫实现方法" class="headerlink" title="爬虫实现方法"></a>爬虫实现方法</h2><ol>
<li>使用 http 标准库 <code>net/http</code></li>
<li>使用爬虫框架</li>
</ol>
<ul>
<li>Colly</li>
<li>Goquery# 第一次个爬虫程序</li>
</ul>
<h1 id="第一个爬虫程序"><a href="#第一个爬虫程序" class="headerlink" title="第一个爬虫程序"></a>第一个爬虫程序</h1><p>使用 Golang 中的 http 标准库实现</p>
<h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="创建请求"><a href="#创建请求" class="headerlink" title="创建请求"></a>创建请求</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">client := &amp;http.Client&#123;&#125;</span><br><span class="line">req, _ := http.NewRequest(<span class="string">&quot;GET&quot;</span>, url, <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure>

<h2 id="设置请求-header-和-cookie"><a href="#设置请求-header-和-cookie" class="headerlink" title="设置请求 header 和 cookie"></a>设置请求 header 和 cookie</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">req.Header.Set(<span class="string">&quot;User-Agent&quot;</span>,<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36&quot;</span>)</span><br><span class="line">req.Header.Add(<span class="string">&quot;cookie&quot;</span>,<span class="string">&quot;__yjs_duid=1_f3119d919ba464b8e6563af405bd8d7f1647049585313; wordpress_test_cookie=WP+Cookie+check; yjs_use_ob=0; mk-font-size=100; __gads=ID=335c7013b1ddf54b-220cf1fdf4d00063:T=1647153036:RT=1647153036:S=ALNI_MZV-Mj-gp4y4E4yaNmryFh3Cv85Rw;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>未完持续…</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>爬虫</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang学习笔记部分二</title>
    <url>/posts/38070/</url>
    <content><![CDATA[<h1 id="Golang运算符"><a href="#Golang运算符" class="headerlink" title="Golang运算符"></a>Golang运算符</h1><p>Go 语言内置的运算符有：</p>
<ol>
<li>算术运算符</li>
<li>关系运算符</li>
<li>逻辑运算符</li>
<li>位运算符</li>
<li>赋值运算符<span id="more"></span></li>
</ol>
<h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">+</td>
<td align="left">相加</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">相减</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">相乘</td>
</tr>
<tr>
<td align="left">/</td>
<td align="left">相除</td>
</tr>
<tr>
<td align="left">%</td>
<td align="left">求余</td>
</tr>
</tbody></table>
<p><strong>注意：</strong> <code>++</code>（自增）和 <code>--</code>（自减）在Go语言中是单独的语句，并不是运算符。</p>
<p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="number">100</span></span><br><span class="line">	b := <span class="number">10</span></span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;(a + b): %v\n&quot;</span>, (a + b))</span><br><span class="line">	fmt.Printf(<span class="string">&quot;(a - b): %v\n&quot;</span>, (a - b))</span><br><span class="line">	fmt.Printf(<span class="string">&quot;(a * b): %v\n&quot;</span>, (a * b))</span><br><span class="line">	fmt.Printf(<span class="string">&quot;(a / b): %v\n&quot;</span>, (a / b))</span><br><span class="line">	fmt.Printf(<span class="string">&quot;(a %% b): %v\n&quot;</span>, (a % b))</span><br><span class="line"></span><br><span class="line">	a++</span><br><span class="line">	fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">	b--</span><br><span class="line">	fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">==</td>
<td align="left">检查两个值是否相等，如果相等返回 True 否则返回 False。</td>
</tr>
<tr>
<td align="left">!=</td>
<td align="left">检查两个值是否不相等，如果不相等返回 True 否则返回 False。</td>
</tr>
<tr>
<td align="left">&gt;</td>
<td align="left">检查左边值是否大于右边值，如果是返回 True 否则返回 False。</td>
</tr>
<tr>
<td align="left">&gt;=</td>
<td align="left">检查左边值是否大于等于右边值，如果是返回 True 否则返回 False。</td>
</tr>
<tr>
<td align="left">&lt;</td>
<td align="left">检查左边值是否小于右边值，如果是返回 True 否则返回 False。</td>
</tr>
<tr>
<td align="left">&lt;=</td>
<td align="left">检查左边值是否小于等于右边值，如果是返回 True 否则返回 False。</td>
</tr>
</tbody></table>
<p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="number">1</span></span><br><span class="line">	b := <span class="number">2</span></span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;(a &gt; b): %v\n&quot;</span>, (a &gt; b))</span><br><span class="line">	fmt.Printf(<span class="string">&quot;(a &lt; b): %v\n&quot;</span>, (a &lt; b))</span><br><span class="line">	fmt.Printf(<span class="string">&quot;(a &gt;= b): %v\n&quot;</span>, (a &gt;= b))</span><br><span class="line">	fmt.Printf(<span class="string">&quot;(a &lt;= b): %v\n&quot;</span>, (a &lt;= b))</span><br><span class="line">	fmt.Printf(<span class="string">&quot;(a == b): %v\n&quot;</span>, (a == b))</span><br><span class="line">	fmt.Printf(<span class="string">&quot;(a != b): %v\n&quot;</span>, (a != b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&amp;&amp;</td>
<td align="left">逻辑 AND 运算符。 如果两边的操作数都是 True，则为 True，否则为 False。</td>
</tr>
<tr>
<td align="left">||</td>
<td align="left">逻辑 OR 运算符。 如果两边的操作数有一个 True，则为 True，否则为 False。</td>
</tr>
<tr>
<td align="left">!</td>
<td align="left">逻辑 NOT 运算符。 如果条件为 True，则为 False，否则为 True。</td>
</tr>
</tbody></table>
<p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="literal">true</span></span><br><span class="line">	b := <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;(a &amp;&amp; b): %v\n&quot;</span>, (a &amp;&amp; b))</span><br><span class="line">	fmt.Printf(<span class="string">&quot;(a || b): %v\n&quot;</span>, (a || b))</span><br><span class="line">	fmt.Printf(<span class="string">&quot;(!a): %v\n&quot;</span>, (!a))</span><br><span class="line">	fmt.Printf(<span class="string">&quot;(!b): %v\n&quot;</span>, (!b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>位运算符对整数在内存中的二进制位进行操作。</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&amp;</td>
<td align="left">参与运算的两数各对应的二进位相与。 （两位均为1才为1）</td>
</tr>
<tr>
<td align="left">|</td>
<td align="left">参与运算的两数各对应的二进位相或。 （两位有一个为1就为1）</td>
</tr>
<tr>
<td align="left">^</td>
<td align="left">参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。 （两位不一样则为1）</td>
</tr>
<tr>
<td align="left">&lt;&lt;</td>
<td align="left">左移n位就是乘以2的n次方。 “a&lt;&lt;b”是把a的各二进位全部左移b位，高位丢弃，低位补0。</td>
</tr>
<tr>
<td align="left">&gt;&gt;</td>
<td align="left">右移n位就是除以2的n次方。 “a&gt;&gt;b”是把a的各二进位全部右移b位。</td>
</tr>
</tbody></table>
<p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="number">4</span> <span class="comment">// 二进制 100</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;a: %b\n&quot;</span>, a)</span><br><span class="line">	b := <span class="number">8</span> <span class="comment">// 二进制 1000</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;b: %b\n&quot;</span>, b)</span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;(a &amp; b): %v, %b \n&quot;</span>, (a &amp; b), (a &amp; b))</span><br><span class="line">	fmt.Printf(<span class="string">&quot;(a | b): %v, %b\n&quot;</span>, (a | b), (a | b))</span><br><span class="line">	fmt.Printf(<span class="string">&quot;(a ^ b): %v, %b\n&quot;</span>, (a ^ b), (a ^ b))</span><br><span class="line">	fmt.Printf(<span class="string">&quot;(a &lt;&lt; 2): %v, %b\n&quot;</span>, (a &lt;&lt; <span class="number">2</span>), (a &lt;&lt; <span class="number">2</span>))</span><br><span class="line">	fmt.Printf(<span class="string">&quot;(b &gt;&gt; 2): %v, %b\n&quot;</span>, (b &gt;&gt; <span class="number">2</span>), (b &gt;&gt; <span class="number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">=</td>
<td align="left">简单的赋值运算符，将一个表达式的值赋给一个左值</td>
</tr>
<tr>
<td align="left">+=</td>
<td align="left">相加后再赋值</td>
</tr>
<tr>
<td align="left">-=</td>
<td align="left">相减后再赋值</td>
</tr>
<tr>
<td align="left">*=</td>
<td align="left">相乘后再赋值</td>
</tr>
<tr>
<td align="left">/=</td>
<td align="left">相除后再赋值</td>
</tr>
<tr>
<td align="left">%=</td>
<td align="left">求余后再赋值</td>
</tr>
<tr>
<td align="left">&lt;&lt;=</td>
<td align="left">左移后赋值</td>
</tr>
<tr>
<td align="left">&gt;&gt;=</td>
<td align="left">右移后赋值</td>
</tr>
<tr>
<td align="left">&amp;=</td>
<td align="left">按位与后赋值</td>
</tr>
<tr>
<td align="left">|=</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">^=</td>
<td align="left">按位异或后赋值</td>
</tr>
</tbody></table>
<p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a <span class="keyword">int</span></span><br><span class="line">	a = <span class="number">100</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">	a += <span class="number">1</span> <span class="comment">// a = a + 1</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">	a -= <span class="number">1</span> <span class="comment">// a = a -1</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">	a *= <span class="number">2</span> <span class="comment">// a = a * 2</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">	a /= <span class="number">2</span> <span class="comment">// a = a / 2</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="Go语言中的流程控制"><a href="#Go语言中的流程控制" class="headerlink" title="Go语言中的流程控制"></a>Go语言中的流程控制</h1><h2 id="Go语言中的条件"><a href="#Go语言中的条件" class="headerlink" title="Go语言中的条件"></a>Go语言中的条件</h2><p><strong>条件语句</strong> 是用来判断给定的条件是否满足(表达式值是否为 <code>true</code>或者 <code>false</code>)，并根据判断的结果(真或假)决定执行的语句，go语言中的条件语句也是这样的。</p>
<h2 id="Go语言中的条件语句包含如下几种情况"><a href="#Go语言中的条件语句包含如下几种情况" class="headerlink" title="Go语言中的条件语句包含如下几种情况"></a>Go语言中的条件语句包含如下几种情况</h2><ol>
<li><strong>if 语句</strong> ：<code>if</code> 语句 由一个布尔表达式后紧跟一个或多个语句组成。</li>
<li><strong>if…else 语句</strong> :<code>if</code> 语句 后可以使用可选的<code>else</code> 语句,<code>else</code> 语句中的表达式在布尔表达式为<code>false</code> 时执行。</li>
<li><strong>if 嵌套语句</strong> : 你可以在<code>if</code> 或<code>else if</code> 语句中嵌入一个或多个<code>if</code> 或<code>else if</code> 语句。</li>
<li><strong>switch 语句</strong> :<code>switch</code> 语句用于基于不同条件执行不同动作。</li>
<li><strong>select 语句</strong> :<code>select</code> 语句类似于<code>switch</code> 语句，但是<code>select</code>会随机执行一个可运行的<code>case</code>。如果没有<code>case</code>可运行，它将阻塞，直到有<code>case</code>可运行。</li>
</ol>
<h2 id="Go语言中的循环语句"><a href="#Go语言中的循环语句" class="headerlink" title="Go语言中的循环语句"></a>Go语言中的循环语句</h2><p>go语言中的循环只有for循环，去除了 <code>while</code>、<code>do while</code>循环，使用起来更加简洁。</p>
<ol>
<li>for循环。</li>
<li>for range循环。</li>
</ol>
<h2 id="Go语言中的流程控制关键字"><a href="#Go语言中的流程控制关键字" class="headerlink" title="Go语言中的流程控制关键字"></a>Go语言中的流程控制关键字</h2><ol>
<li>break</li>
<li>continue</li>
<li>goto</li>
</ol>
<h1 id="Golang中的if语句"><a href="#Golang中的if语句" class="headerlink" title="Golang中的if语句"></a>Golang中的if语句</h1><p><strong>Go语言</strong> 中的<strong>if语句</strong> 和其他语言中的类似，都是根据给定的条件表达式运算结果来，判断执行流程。</p>
<h2 id="Go语言if语句语法"><a href="#Go语言if语句语法" class="headerlink" title="Go语言if语句语法"></a>Go语言if语句语法</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 布尔表达式 &#123;</span><br><span class="line">   <span class="comment">/* 在布尔表达式为 true 时执行 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：在go语言中 布尔表达式不用使用括号。</p>
</blockquote>
<h2 id="Go语言if语句实例演示"><a href="#Go语言if语句实例演示" class="headerlink" title="Go语言if语句实例演示"></a>Go语言if语句实例演示</h2><p><strong>根据布尔值flag判断</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> flag = <span class="literal">true</span></span><br><span class="line">	<span class="keyword">if</span> flag &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;flag is true&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;程序运行结束&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	test1()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序运行结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">flag is <span class="literal">true</span></span><br><span class="line">程序运行结束</span><br></pre></td></tr></table></figure>

<p><strong>根据年龄判断是否成年</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> age = <span class="number">20</span></span><br><span class="line">	<span class="keyword">if</span> age &gt; <span class="number">18</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;你是成年人&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;程序运行结束&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	test2()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序运行结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">你是成年人</span><br><span class="line">程序运行结束</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>初始变量可以声明在布尔表达式里面，注意它的作用域</strong></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test3</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> age := <span class="number">20</span>; age &gt; <span class="number">18</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;你是成年人&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;程序运行结束&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// test1()</span></span><br><span class="line">	<span class="comment">// test2()</span></span><br><span class="line">	test3()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你是成年人</span><br><span class="line">程序运行结束</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：不能使用0或非0表示真假</strong></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test4</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> i = <span class="number">1</span></span><br><span class="line">	<span class="keyword">if</span> i &#123; <span class="comment">// 编译失败</span></span><br><span class="line">		fmt.Println(<span class="string">&quot;here&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;程序运行结束&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>go语言if语句使用提示：</strong></p>
<ol>
<li>不需使用括号将<strong>条件包含起来</strong></li>
<li>大括号<code>&#123;&#125;</code>必须存在，即使只有一行语句</li>
<li>左括号必须在<code>if</code>或<code>else</code>的同一行</li>
<li>在<code>if</code>之后，条件语句之前，可以添加变量初始化语句，使用<code>；</code>进行分隔</li>
</ol>
<h1 id="Golang中的if-else语句"><a href="#Golang中的if-else语句" class="headerlink" title="Golang中的if else语句"></a>Golang中的if else语句</h1><p>go语言中的if else语句可以根据给定条件<strong>二选一</strong> 。</p>
<h2 id="Go语言的if-else语句语法"><a href="#Go语言的if-else语句语法" class="headerlink" title="Go语言的if else语句语法"></a>Go语言的if else语句语法</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 布尔表达式 &#123;</span><br><span class="line">   <span class="comment">/* 在布尔表达式为 true 时执行 */</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">/* 在布尔表达式为 false 时执行 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Go语言if-else语句实例"><a href="#Go语言if-else语句实例" class="headerlink" title="Go语言if else语句实例"></a>Go语言if else语句实例</h2><p><strong>比较两个数的大小</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="number">1</span></span><br><span class="line">	b := <span class="number">2</span></span><br><span class="line">	<span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;\&quot;a&gt;b\&quot;: %v\n&quot;</span>, <span class="string">&quot;a&gt;b&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;\&quot;a&lt;=b\&quot;: %v\n&quot;</span>, <span class="string">&quot;a&lt;b&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f1()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>判断一个数是奇数还是偶数</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> s <span class="keyword">int</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;输入一个数字：&quot;</span>)</span><br><span class="line">	fmt.Scan(&amp;s)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> s%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">		fmt.Print(<span class="string">&quot;s 是偶数\n&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Print(<span class="string">&quot;s 不是偶数\n&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Print(<span class="string">&quot;s 的值是：&quot;</span>, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>判断一个人是否成年</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f3</span><span class="params">()</span></span> &#123;</span><br><span class="line">	age := <span class="number">20</span></span><br><span class="line">	<span class="keyword">if</span> age &gt;= <span class="number">18</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;你是成年人&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;你还未成年&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>特殊写法，在if前面添加执行语句</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f4</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> age := <span class="number">20</span>; age &gt;= <span class="number">18</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;你是成年人&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;你还未成年&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>go语言if语句使用提示：</strong></p>
<ol>
<li>不需使用括号将条件包含起来</li>
<li>大括号<code>&#123;&#125;</code>必须存在，即使只有<strong>一行语句</strong></li>
<li><strong>左括号</strong> 必须在<code>if</code>或<code>else</code>的同一行</li>
<li>在<code>if</code>之后，条件语句之前，可以添加变量<strong>初始化语句</strong> ，使用<code>；</code>进行分隔。</li>
</ol>
<h1 id="Golang中的if-else-if语句"><a href="#Golang中的if-else-if语句" class="headerlink" title="Golang中的if else if语句"></a>Golang中的if else if语句</h1><p>go语言if语句可以进行多重嵌套使用，进行多重判断。</p>
<h2 id="Go语言中的if-else-if语法"><a href="#Go语言中的if-else-if语法" class="headerlink" title="Go语言中的if else if语法"></a>Go语言中的if else if语法</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 布尔表达式<span class="number">1</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> 布尔表达式<span class="number">2</span> &#123;</span><br><span class="line">    <span class="comment">// do something else</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// catch-all or default</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Go语言中的if-else-if语法实例"><a href="#Go语言中的if-else-if语法实例" class="headerlink" title="Go语言中的if else if语法实例"></a>Go语言中的if else if语法实例</h2><p><strong>根据分数判断等级</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f5</span><span class="params">()</span></span> &#123;</span><br><span class="line">	score := <span class="number">80</span></span><br><span class="line">	<span class="keyword">if</span> score &gt;= <span class="number">60</span> &amp;&amp; score &lt;= <span class="number">70</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;C&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt; <span class="number">70</span> &amp;&amp; score &lt;= <span class="number">90</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序运行结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">B</span><br></pre></td></tr></table></figure>

<p><strong>同样也可以写成这样</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f5</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> score := <span class="number">80</span>; score &gt;= <span class="number">60</span> &amp;&amp; score &lt;= <span class="number">70</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;C&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt; <span class="number">70</span> &amp;&amp; score &lt;= <span class="number">90</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输入星期几的第一个字母来判断一下是星期几，如果第一个字母一样，则继续判断第二个字母</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f6</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//  Monday Tuesday Wednesday Thursday Friday Saturday Sunday</span></span><br><span class="line">	<span class="keyword">var</span> c <span class="keyword">string</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;输入一个字符：&quot;</span>)</span><br><span class="line">	fmt.Scan(&amp;c)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> c == <span class="string">&quot;S&quot;</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;输入第二个字符：&quot;</span>)</span><br><span class="line">		fmt.Scan(&amp;c)</span><br><span class="line">		<span class="keyword">if</span> c == <span class="string">&quot;a&quot;</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;Saturday&quot;</span>)</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> c == <span class="string">&quot;u&quot;</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;Sunday&quot;</span>)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;输入错误&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> c == <span class="string">&quot;F&quot;</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Friday&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> c == <span class="string">&quot;M&quot;</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Monday&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> c == <span class="string">&quot;T&quot;</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;输入第二个字符：&quot;</span>)</span><br><span class="line">		fmt.Scan(&amp;c)</span><br><span class="line">		<span class="keyword">if</span> c == <span class="string">&quot;u&quot;</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;Tuesday&quot;</span>)</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> c == <span class="string">&quot;h&quot;</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;Thursday&quot;</span>)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;输入错误&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> c == <span class="string">&quot;W&quot;</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Wednesday&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;输入错误&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang中嵌套if语句"><a href="#Golang中嵌套if语句" class="headerlink" title="Golang中嵌套if语句"></a>Golang中嵌套if语句</h1><p>go语言if语句可以嵌套多级进行判断。</p>
<h2 id="Go语言if嵌套语法"><a href="#Go语言if嵌套语法" class="headerlink" title="Go语言if嵌套语法"></a>Go语言if嵌套语法</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 布尔表达式 <span class="number">1</span> &#123;</span><br><span class="line">   <span class="comment">/* 在布尔表达式 1 为 true 时执行 */</span></span><br><span class="line">   <span class="keyword">if</span> 布尔表达式 <span class="number">2</span> &#123;</span><br><span class="line">      <span class="comment">/* 在布尔表达式 2 为 true 时执行 */</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Go语言if嵌套实例"><a href="#Go语言if嵌套实例" class="headerlink" title="Go语言if嵌套实例"></a>Go语言if嵌套实例</h2><p><strong>判断三个数的大小</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a&gt;b a&gt;c a</span></span><br><span class="line"><span class="comment">// b&gt;a b&gt;c b else c</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="number">100</span></span><br><span class="line">	b := <span class="number">200</span></span><br><span class="line">	c := <span class="number">3</span></span><br><span class="line">	<span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">		<span class="keyword">if</span> a &gt; c &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;a最大&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> b &gt; c &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;b最大&quot;</span>)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;c最大&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f1()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>判断男生还是女生，还有是否成年</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 判断男女生及年龄</span></span><br><span class="line">	gender := <span class="string">&quot;女生&quot;</span></span><br><span class="line">	age := <span class="number">16</span></span><br><span class="line">	<span class="keyword">if</span> gender == <span class="string">&quot;男生&quot;</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;男生&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> age &gt; <span class="number">18</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;成年&quot;</span>)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;未成年&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;女生&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> age &gt; <span class="number">18</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;成年&quot;</span>)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;未成年&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang-switch语句"><a href="#Golang-switch语句" class="headerlink" title="Golang switch语句"></a>Golang switch语句</h1><p>go语言中的 <code>switch</code>语句，可以非常容易的判断多个值的情况。</p>
<h2 id="Go语言中switch语句的语法"><a href="#Go语言中switch语句的语法" class="headerlink" title="Go语言中switch语句的语法"></a>Go语言中switch语句的语法</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> var1 &#123;</span><br><span class="line">    <span class="keyword">case</span> val1:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">case</span> val2:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Go语言中-switch语句实例"><a href="#Go语言中-switch语句实例" class="headerlink" title="Go语言中 switch语句实例"></a>Go语言中 <code>switch</code>语句实例</h2><p><strong>判断成绩</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">	grade := <span class="string">&quot;A&quot;</span></span><br><span class="line">	<span class="keyword">switch</span> grade &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&quot;A&quot;</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;优秀&quot;</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&quot;B&quot;</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;良好&quot;</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;一般&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">优秀</span><br></pre></td></tr></table></figure>

<p><strong>多条件匹配</strong></p>
<p>Go语言 <code>switch</code>语句，可以同时匹配多个条件，中间用逗号分隔，有其中一个匹配成功即可。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">	day := <span class="number">3</span></span><br><span class="line">	<span class="keyword">switch</span> day &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;工作日&quot;</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">6</span>, <span class="number">7</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;休息日&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">工作日</span><br></pre></td></tr></table></figure>

<p><strong>case可以是条件表达式</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">	score := <span class="number">90</span></span><br><span class="line">	<span class="keyword">switch</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;享受假期&quot;</span>)</span><br><span class="line">	<span class="keyword">case</span> score &lt; <span class="number">90</span> &amp;&amp; score &gt;= <span class="number">80</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;好好学习吧！&quot;</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;玩命学习！&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">享受假期</span><br></pre></td></tr></table></figure>

<p><strong><code>fallthrough</code>可以可以执行满足条件的下一个 <code>case</code></strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f3</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="number">100</span></span><br><span class="line">	<span class="keyword">switch</span> a &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">100</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;100&quot;</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">200</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;200&quot;</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">300</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;300&quot;</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;other&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">200</span></span><br></pre></td></tr></table></figure>

<h2 id="Go语言中-switch语句的注意事项"><a href="#Go语言中-switch语句的注意事项" class="headerlink" title="Go语言中 switch语句的注意事项"></a>Go语言中 <code>switch</code>语句的注意事项</h2><ol>
<li>支持多条件匹配</li>
<li>不同的<code>case</code> 之间不使用<code>break</code> 分隔，默认只会执行一个<code>case</code>。</li>
<li>如果想要执行多个<code>case</code>，需要使用<code>fallthrough</code> 关键字，也可用<code>break</code> 终止。</li>
<li>分支还可以使用<strong>表达式</strong> ，例如：<code>a&gt;10</code>.</li>
</ol>
<h1 id="Golang-for循环语句"><a href="#Golang-for循环语句" class="headerlink" title="Golang for循环语句"></a>Golang for循环语句</h1><p>go语言中的 <code>for</code>循环，只有 <code>for</code>关键字，去除了像其他语言中的 <code>while</code>和 <code>do while</code>.</p>
<h2 id="Go语言for循环语法"><a href="#Go语言for循环语法" class="headerlink" title="Go语言for循环语法"></a>Go语言for循环语法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for 初始语句;条件表达式;结束语句&#123;</span><br><span class="line">    循环体语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：for表达式不用加括号</p>
</blockquote>
<h2 id="Go语言for循环实例"><a href="#Go语言for循环实例" class="headerlink" title="Go语言for循环实例"></a>Go语言for循环实例</h2><p><strong>循环输出1到10</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">i: <span class="number">1</span></span><br><span class="line">i: <span class="number">2</span></span><br><span class="line">i: <span class="number">3</span></span><br><span class="line">i: <span class="number">4</span></span><br><span class="line">i: <span class="number">5</span></span><br><span class="line">i: <span class="number">6</span></span><br><span class="line">i: <span class="number">7</span></span><br><span class="line">i: <span class="number">8</span></span><br><span class="line">i: <span class="number">9</span></span><br><span class="line">i: <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p><strong>初始条件，可以写到外面</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func f() &#123;</span><br><span class="line">	i := 1</span><br><span class="line">	for ; i &lt;= 10; i++ &#123;</span><br><span class="line">		fmt.Printf(&quot;i: %v\n&quot;, i)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i: 1</span><br><span class="line">i: 2</span><br><span class="line">i: 3</span><br><span class="line">i: 4</span><br><span class="line">i: 5</span><br><span class="line">i: 6</span><br><span class="line">i: 7</span><br><span class="line">i: 8</span><br><span class="line">i: 9</span><br><span class="line">i: 10</span><br></pre></td></tr></table></figure>

<p><strong>初始条件和结束条件都可以省略</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">	i := <span class="number">1</span> <span class="comment">// 初始条件</span></span><br><span class="line">	<span class="keyword">for</span> i &lt;= <span class="number">10</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">		i++ <span class="comment">// 结束条件</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i: 1</span><br><span class="line">i: 2</span><br><span class="line">i: 3</span><br><span class="line">i: 4</span><br><span class="line">i: 5</span><br><span class="line">i: 6</span><br><span class="line">i: 7</span><br><span class="line">i: 8</span><br><span class="line">i: 9</span><br><span class="line">i: 10</span><br></pre></td></tr></table></figure>

<p>这种情况类似其他语言中的 <code>while</code>循环</p>
<p><strong>永真循环</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;我一直在执行~&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我一直在执行~</span><br><span class="line">我一直在执行~</span><br><span class="line">我一直在执行~</span><br><span class="line">我一直在执行~</span><br><span class="line">我一直在执行~</span><br><span class="line">我一直在执行~</span><br><span class="line">我一直在执行~</span><br><span class="line">我一直在执行~</span><br><span class="line">我一直在执行~</span><br><span class="line">我一直在执行~</span><br><span class="line">我一直在执行~</span><br><span class="line">我一直在执行~</span><br><span class="line">我一直在执行~</span><br><span class="line">我一直在执行~</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>for循环可以通过 <code>break</code>、<code>goto</code>、<code>return</code>、<code>panic</code>语句强制退出循环。</p>
<h1 id="Golang-for-range循环"><a href="#Golang-for-range循环" class="headerlink" title="Golang for range循环"></a>Golang for range循环</h1><p>Go语言中可以使用 <code>for range</code>遍历数组、切片、字符串、map 及通道（channel）。 通过 <code>for range</code>遍历的返回值有以下规律：</p>
<ol>
<li>数组、切片、字符串返回<strong>索引和值</strong> 。</li>
<li>map返回键和值。</li>
<li>通道（channel）只返回通道内的值。</li>
</ol>
<h2 id="Go语言for-range实例"><a href="#Go语言for-range实例" class="headerlink" title="Go语言for range实例"></a>Go语言for range实例</h2><p><strong>循环数组</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a = [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	<span class="keyword">for</span> i, v := <span class="keyword">range</span> a &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;i: %d, v: %v\n&quot;</span>, i, v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">i: <span class="number">0</span>, v: <span class="number">1</span></span><br><span class="line">i: <span class="number">1</span>, v: <span class="number">2</span></span><br><span class="line">i: <span class="number">2</span>, v: <span class="number">3</span></span><br><span class="line">i: <span class="number">3</span>, v: <span class="number">4</span></span><br><span class="line">i: <span class="number">4</span>, v: <span class="number">5</span></span><br></pre></td></tr></table></figure>

<p><strong>循环字符串</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> s = <span class="string">&quot;多课网，go教程&quot;</span></span><br><span class="line">	<span class="keyword">for</span> i, v := <span class="keyword">range</span> s &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;i: %d, v: %c\n&quot;</span>, i, v)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// %c 按照字符输出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">i: <span class="number">0</span>, v: 多</span><br><span class="line">i: <span class="number">3</span>, v: 课</span><br><span class="line">i: <span class="number">6</span>, v: 网</span><br><span class="line">i: <span class="number">9</span>, v: ，</span><br><span class="line">i: <span class="number">12</span>, v: g</span><br><span class="line">i: <span class="number">13</span>, v: o</span><br><span class="line">i: <span class="number">14</span>, v: 教</span><br><span class="line">i: <span class="number">17</span>, v: 程</span><br></pre></td></tr></table></figure>

<p><strong>循环切片</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func f() &#123;</span><br><span class="line">	var s = []int&#123;1, 2, 3, 4, 5&#125;</span><br><span class="line">	for i, v := range s &#123;</span><br><span class="line">		fmt.Printf(&quot;i, %d, v: %v\n&quot;, i, v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>循环map</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">	m[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;tom&quot;</span></span><br><span class="line">	m[<span class="string">&quot;age&quot;</span>] = <span class="string">&quot;20&quot;</span></span><br><span class="line">	m[<span class="string">&quot;email&quot;</span>] = <span class="string">&quot;tom@gmail.com&quot;</span></span><br><span class="line">	<span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;k: %v, v: %v\n&quot;</span>, k, v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">k: email, v: tom@gmail.com</span><br><span class="line">k: name, v: tom</span><br><span class="line">k: age, v: <span class="number">20</span></span><br></pre></td></tr></table></figure>


<h1 id="Golang流程控制关键字break"><a href="#Golang流程控制关键字break" class="headerlink" title="Golang流程控制关键字break"></a>Golang流程控制关键字break</h1><p><code>break</code>语句可以结束 <code>for</code>、<code>switch</code>和 <code>select</code>的代码块。</p>
<h2 id="Go语言使用break注意事项"><a href="#Go语言使用break注意事项" class="headerlink" title="Go语言使用break注意事项"></a>Go语言使用break注意事项</h2><ol>
<li>单独在<code>select</code>中使用<code>break</code>和不使用<code>break</code>没有啥区别。</li>
<li>单独在表达式<code>switch</code>语句，并且没有<code>fallthough</code>，使用<code>break</code>和不使用<code>break</code>没有啥区别。</li>
<li>单独在表达式<code>switch</code>语句，并且有<code>fallthough</code>，使用<code>break</code>能够终止<code>fallthough</code>后面的<code>case</code>语句的执行。</li>
<li>带标签的<code>break</code>，可以跳出多层<code>select/ switch</code>作用域。让<code>break</code>更加灵活，写法更加简单灵活，不需要使用控制变量一层一层跳出循环，没有带<code>break</code>的只能跳出当前语句块。</li>
</ol>
<h2 id="Go语言break关键字实例"><a href="#Go语言break关键字实例" class="headerlink" title="Go语言break关键字实例"></a>Go语言break关键字实例</h2><p><strong>跳出for循环</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> i == <span class="number">5</span> &#123;</span><br><span class="line">			<span class="keyword">break</span> <span class="comment">// 退出循环</span></span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">i: <span class="number">0</span></span><br><span class="line">i: <span class="number">1</span></span><br><span class="line">i: <span class="number">2</span></span><br><span class="line">i: <span class="number">3</span></span><br><span class="line">i: <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p><strong>跳出switch</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">	i := <span class="number">2</span></span><br><span class="line">	<span class="keyword">switch</span> i &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;等于1&quot;</span>)</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;等于2&quot;</span>)</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;等于3&quot;</span>)</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;不关心&quot;</span>)</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">等于2</span><br></pre></td></tr></table></figure>

<p>注释掉 <code>fallthrough</code>上面的 <code>break</code>，运行结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">等于<span class="number">2</span></span><br><span class="line">等于<span class="number">3</span></span><br></pre></td></tr></table></figure>

<p><strong>跳转到标签处</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">MY_LABEL:</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> i == <span class="number">5</span> &#123;</span><br><span class="line">			<span class="keyword">break</span> MY_LABEL</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, i)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;end...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">end...</span><br></pre></td></tr></table></figure>


<h1 id="Golang关键字continue"><a href="#Golang关键字continue" class="headerlink" title="Golang关键字continue"></a>Golang关键字continue</h1><p><code>continue</code>只能用在循环中，在go中只能用在 <code>for</code>循环中，它可以终止本次循环，进行下一次循环。</p>
<p>在 <code>continue</code>语句后添加标签时，表示开始标签对应的循环。</p>
<h2 id="Go语言-continue实例"><a href="#Go语言-continue实例" class="headerlink" title="Go语言 continue实例"></a>Go语言 <code>continue</code>实例</h2><p><strong>输出1到10之间的偶数</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">			fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i: 0</span><br><span class="line">i: 2</span><br><span class="line">i: 4</span><br><span class="line">i: 6</span><br><span class="line">i: 8</span><br></pre></td></tr></table></figure>

<p><strong>跳转到label</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// MY_LABEL:</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">	MY_LABEL:</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">5</span>; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> i == <span class="number">2</span> &amp;&amp; j == <span class="number">2</span> &#123;</span><br><span class="line">				<span class="keyword">continue</span> MY_LABEL</span><br><span class="line">			&#125;</span><br><span class="line">			fmt.Printf(<span class="string">&quot;i=%d,j=%d\n&quot;</span>, i, j)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">i=<span class="number">0</span>,j=<span class="number">0</span></span><br><span class="line">i=<span class="number">0</span>,j=<span class="number">1</span></span><br><span class="line">i=<span class="number">0</span>,j=<span class="number">2</span></span><br><span class="line">i=<span class="number">0</span>,j=<span class="number">3</span></span><br><span class="line">i=<span class="number">0</span>,j=<span class="number">4</span></span><br><span class="line">i=<span class="number">1</span>,j=<span class="number">0</span></span><br><span class="line">i=<span class="number">1</span>,j=<span class="number">1</span></span><br><span class="line">i=<span class="number">1</span>,j=<span class="number">2</span></span><br><span class="line">i=<span class="number">1</span>,j=<span class="number">3</span></span><br><span class="line">i=<span class="number">1</span>,j=<span class="number">4</span></span><br><span class="line">i=<span class="number">2</span>,j=<span class="number">0</span></span><br><span class="line">i=<span class="number">2</span>,j=<span class="number">1</span></span><br><span class="line">i=<span class="number">2</span>,j=<span class="number">3</span></span><br><span class="line">i=<span class="number">2</span>,j=<span class="number">4</span></span><br><span class="line">i=<span class="number">3</span>,j=<span class="number">0</span></span><br><span class="line">i=<span class="number">3</span>,j=<span class="number">1</span></span><br><span class="line">i=<span class="number">3</span>,j=<span class="number">2</span></span><br><span class="line">i=<span class="number">3</span>,j=<span class="number">3</span></span><br><span class="line">i=<span class="number">3</span>,j=<span class="number">4</span></span><br><span class="line">i=<span class="number">4</span>,j=<span class="number">0</span></span><br><span class="line">i=<span class="number">4</span>,j=<span class="number">1</span></span><br><span class="line">i=<span class="number">4</span>,j=<span class="number">2</span></span><br><span class="line">i=<span class="number">4</span>,j=<span class="number">3</span></span><br><span class="line">i=<span class="number">4</span>,j=<span class="number">4</span></span><br></pre></td></tr></table></figure>


<h1 id="Golang流程控制关键字goto"><a href="#Golang流程控制关键字goto" class="headerlink" title="Golang流程控制关键字goto"></a>Golang流程控制关键字goto</h1><p><code>goto</code>语句通过标签进行代码间的<strong>无条件跳转</strong> 。<code>goto</code>语句可以在快速跳出循环、避免重复退出上有一定的帮助。Go语言中使用 <code>goto</code>语句能简化一些代码的实现过程。 例如双层嵌套的for循环要退出时：</p>
<h2 id="Go语言关键字goto实例"><a href="#Go语言关键字goto实例" class="headerlink" title="Go语言关键字goto实例"></a>Go语言关键字goto实例</h2><p><strong>跳转到指定标签</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="number">0</span></span><br><span class="line">	<span class="keyword">if</span> a == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">goto</span> LABEL1</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;other&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">LABEL1:</span><br><span class="line">	fmt.Printf(<span class="string">&quot;next...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">next...</span><br></pre></td></tr></table></figure>

<p><strong>跳出双重循环</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">5</span>; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> i == <span class="number">2</span> &amp;&amp; j == <span class="number">2</span> &#123;</span><br><span class="line">				<span class="keyword">goto</span> LABEL1</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">LABEL1:</span><br><span class="line">	fmt.Println(<span class="string">&quot;label1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">label1</span><br></pre></td></tr></table></figure>


<h1 id="Golang数组"><a href="#Golang数组" class="headerlink" title="Golang数组"></a>Golang数组</h1><p>数组是<strong>相同数据类型</strong> 的一组数据的集合，数组一旦定义<strong>长度不能修改</strong> ，数组可以通过 <strong>下标（或者叫索引）</strong> 来访问元素。</p>
<h2 id="Go语言数组的定义"><a href="#Go语言数组的定义" class="headerlink" title="Go语言数组的定义"></a>Go语言数组的定义</h2><p>数组定义的语法如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> variable_name [SIZE] variable_type</span><br></pre></td></tr></table></figure>

<p><code>variable_name</code>：数组名称</p>
<p><code>SIZE</code>：数组长度，必须是常量</p>
<p><code>variable_type</code>：数组保存元素的类型</p>
<p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a [<span class="number">3</span>]<span class="keyword">int</span>    <span class="comment">// 定义一个int类型的数组a，长度是3</span></span><br><span class="line">	<span class="keyword">var</span> s [<span class="number">2</span>]<span class="keyword">string</span> <span class="comment">// 定义一个字符串类型的数组s，长度是2</span></span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;a: %T\n&quot;</span>, a)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;s: %T\n&quot;</span>, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a: [3]int</span><br><span class="line">s: [2]string</span><br></pre></td></tr></table></figure>

<p>从上面运行结果，我们可以看出，数组和长度和元素类型共同组成了数组的类型。</p>
<h2 id="Go语言数组的初始化"><a href="#Go语言数组的初始化" class="headerlink" title="Go语言数组的初始化"></a>Go语言数组的初始化</h2><p>初始化，就是给数组的元素赋值，没有初始化的数组，默认元素值都是<strong>零值</strong> ，布尔类型是 <code>false</code>，字符串是空字符串。</p>
<h3 id="没有初始化的数组"><a href="#没有初始化的数组" class="headerlink" title="没有初始化的数组"></a>没有初始化的数组</h3><p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a [<span class="number">3</span>]<span class="keyword">int</span>    <span class="comment">// 定义一个int类型的数组a，长度是3</span></span><br><span class="line">	<span class="keyword">var</span> s [<span class="number">2</span>]<span class="keyword">string</span> <span class="comment">// 定义一个字符串类型的数组s，长度是2</span></span><br><span class="line">	<span class="keyword">var</span> b [<span class="number">2</span>]<span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a: [0 0 0]</span><br><span class="line">s: [&quot;&quot; &quot;&quot;]</span><br><span class="line">b: [false false]</span><br></pre></td></tr></table></figure>

<h3 id="使用初始化列表"><a href="#使用初始化列表" class="headerlink" title="使用初始化列表"></a>使用初始化列表</h3><p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a = [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	<span class="keyword">var</span> s = [<span class="number">2</span>]<span class="keyword">string</span>&#123;<span class="string">&quot;tom&quot;</span>, <span class="string">&quot;kite&quot;</span>&#125;</span><br><span class="line">	<span class="keyword">var</span> b = [<span class="number">2</span>]<span class="keyword">bool</span>&#123;<span class="literal">true</span>, <span class="literal">false</span>&#125;</span><br><span class="line"></span><br><span class="line">	a1 := [<span class="number">2</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// 类型推断</span></span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, b)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;a1: %v\n&quot;</span>, a1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a: [1 2 3]</span><br><span class="line">s: [tom kite]</span><br><span class="line">b: [true false]</span><br><span class="line">a1: [1 2]</span><br></pre></td></tr></table></figure>

<p>使用初始化列表，就是将值写在<strong>大括号</strong> 里面。</p>
<h3 id="省略数组长度"><a href="#省略数组长度" class="headerlink" title="省略数组长度"></a>省略数组长度</h3><p>数组长度可以省略，使用 <code>...</code>代替，更加初始化值得数量<strong>自动推断</strong> ，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	<span class="keyword">var</span> s = [...]<span class="keyword">string</span>&#123;<span class="string">&quot;tom&quot;</span>, <span class="string">&quot;kite&quot;</span>&#125;</span><br><span class="line">	<span class="keyword">var</span> b = [...]<span class="keyword">bool</span>&#123;<span class="literal">true</span>, <span class="literal">false</span>&#125;</span><br><span class="line"></span><br><span class="line">	a1 := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// 类型推断</span></span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, b)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;a1: %v\n&quot;</span>, a1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a: [1 2 3]</span><br><span class="line">s: [tom kite]</span><br><span class="line">b: [true false]</span><br><span class="line">a1: [1 2]</span><br></pre></td></tr></table></figure>

<h3 id="指定索引值的方式来初始化"><a href="#指定索引值的方式来初始化" class="headerlink" title="指定索引值的方式来初始化"></a>指定索引值的方式来初始化</h3><p>可以通过指定所有的方式来初始化，未指定所有的默认未零值。</p>
<p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a = [...]<span class="keyword">int</span>&#123;<span class="number">0</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">2</span>&#125;</span><br><span class="line">	<span class="keyword">var</span> s = [...]<span class="keyword">string</span>&#123;<span class="number">1</span>: <span class="string">&quot;tom&quot;</span>, <span class="number">2</span>: <span class="string">&quot;kite&quot;</span>&#125;</span><br><span class="line">	<span class="keyword">var</span> b = [...]<span class="keyword">bool</span>&#123;<span class="number">2</span>: <span class="literal">true</span>, <span class="number">5</span>: <span class="literal">false</span>&#125;</span><br><span class="line"></span><br><span class="line">	a1 := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// 类型推断</span></span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, b)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;a1: %v\n&quot;</span>, a1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a: [1 0 2]</span><br><span class="line">s: [ tom kite]</span><br><span class="line">b: [false false true false false false]</span><br><span class="line">a1: [1 2]</span><br></pre></td></tr></table></figure>


<h1 id="GoLang访问数组元素"><a href="#GoLang访问数组元素" class="headerlink" title="GoLang访问数组元素"></a>GoLang访问数组元素</h1><p>可以通过下标的方式，来访问数组元素。数组的最大下标为数组长度-1，大于这个下标会发生数组越界。</p>
<h2 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h2><p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a [<span class="number">2</span>]<span class="keyword">int</span></span><br><span class="line">	a[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">	a[<span class="number">1</span>] = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;a[0]: %v\n&quot;</span>, a[<span class="number">0</span>])</span><br><span class="line">	fmt.Printf(<span class="string">&quot;a[0]: %v\n&quot;</span>, a[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 修改 a[0]  a[1]</span></span><br><span class="line">	a[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">	a[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;-----------&quot;</span>)</span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;a[0]: %v\n&quot;</span>, a[<span class="number">0</span>])</span><br><span class="line">	fmt.Printf(<span class="string">&quot;a[0]: %v\n&quot;</span>, a[<span class="number">1</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a[0]: 100</span><br><span class="line">a[0]: 200</span><br><span class="line">-----------</span><br><span class="line">a[0]: 1</span><br><span class="line">a[0]: 2</span><br></pre></td></tr></table></figure>

<h2 id="根据数组长度遍历数组"><a href="#根据数组长度遍历数组" class="headerlink" title="根据数组长度遍历数组"></a>根据数组长度遍历数组</h2><p>可以根据数组长度，通过 <code>for</code>循环的方式来遍历数组，数组的长度可以使用 <code>len</code>函数获得。</p>
<p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(a); i++ &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;a[%d]: %v\n&quot;</span>, i, a[i])</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a[0]: 1</span><br><span class="line">a[1]: 2</span><br><span class="line">a[2]: 3</span><br><span class="line">a[3]: 4</span><br><span class="line">a[4]: 5</span><br><span class="line">a[5]: 6</span><br></pre></td></tr></table></figure>

<h2 id="使用-for-range数组"><a href="#使用-for-range数组" class="headerlink" title="使用 for range数组"></a>使用 <code>for range</code>数组</h2><p>还可以使用 <code>for range</code>循环来遍历数组，range返回数组下标和对应的值</p>
<p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i, v := <span class="keyword">range</span> a &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;a[%d]: %v\n&quot;</span>, i, v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a[<span class="number">0</span>]: <span class="number">1</span></span><br><span class="line">a[<span class="number">1</span>]: <span class="number">2</span></span><br><span class="line">a[<span class="number">2</span>]: <span class="number">3</span></span><br><span class="line">a[<span class="number">3</span>]: <span class="number">4</span></span><br><span class="line">a[<span class="number">4</span>]: <span class="number">5</span></span><br><span class="line">a[<span class="number">5</span>]: <span class="number">6</span></span><br></pre></td></tr></table></figure>


<h1 id="Golang切片"><a href="#Golang切片" class="headerlink" title="Golang切片"></a>Golang切片</h1><p>前面我们学习了数组，数组是固定长度，可以容纳相同数据类型的元素的集合。当长度固定时，使用还是带来一些限制，比如：我们申请的长度太大浪费内存，太小又不够用。</p>
<p>鉴于上述原因，我们有了go语言的切片，可以把切片理解为，可变长度的数组，其实它底层就是使用数组实现的，增加了<strong>自动扩容</strong> 功能。切片（Slice）是一个拥有相同类型元素的可变长度的序列。</p>
<h2 id="Go语言切片的语法"><a href="#Go语言切片的语法" class="headerlink" title="Go语言切片的语法"></a>Go语言切片的语法</h2><p>声明一个切片和声明一个数组类似，只要不添加长度就可以了</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> identifier []<span class="keyword">type</span></span><br></pre></td></tr></table></figure>

<p>切片是引用类型，可以使用 <code>make</code>函数来创建切片：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> slice1 []<span class="keyword">type</span> = <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)</span><br><span class="line"></span><br><span class="line">也可以简写为</span><br><span class="line"></span><br><span class="line">slice1 := <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)</span><br></pre></td></tr></table></figure>

<p>也可以指定容量，其中capacity为可选参数。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="built_in">make</span>([]T, length, capacity)</span><br></pre></td></tr></table></figure>

<p>这里 len 是数组的长度并且也是切片的初始长度。</p>
<h2 id="Go语言切片实例"><a href="#Go语言切片实例" class="headerlink" title="Go语言切片实例"></a>Go语言切片实例</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> names []<span class="keyword">string</span></span><br><span class="line">	<span class="keyword">var</span> numbers []<span class="keyword">int</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;names: %v\n&quot;</span>, names)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;numbers: %v\n&quot;</span>, numbers)</span><br><span class="line">	fmt.Println(names == <span class="literal">nil</span>)</span><br><span class="line">	fmt.Println(numbers == <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">names: []</span><br><span class="line">numbers: []</span><br><span class="line">true</span><br><span class="line">true</span><br></pre></td></tr></table></figure>

<h2 id="Go语言切片的长度和容量"><a href="#Go语言切片的长度和容量" class="headerlink" title="Go语言切片的长度和容量"></a>Go语言切片的长度和容量</h2><p>切片拥有自己的长度和容量，我们可以通过使用内置的 <code>len()</code>函数求长度，使用内置的 <code>cap()</code>函数求切片的容量。</p>
<p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> names = []<span class="keyword">string</span>&#123;<span class="string">&quot;tom&quot;</span>, <span class="string">&quot;kite&quot;</span>&#125;</span><br><span class="line">	<span class="keyword">var</span> numbers = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;len: %d cap: %d\n&quot;</span>, <span class="built_in">len</span>(names), <span class="built_in">cap</span>(names))</span><br><span class="line">	fmt.Printf(<span class="string">&quot;len: %d cap: %d\n&quot;</span>, <span class="built_in">len</span>(numbers), <span class="built_in">cap</span>(numbers))</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> s1 = <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;len: %d cap: %d\n&quot;</span>, <span class="built_in">len</span>(s1), <span class="built_in">cap</span>(s1))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">len: 2 cap: 2</span><br><span class="line">len: 3 cap: 3</span><br><span class="line">len: 2 cap: 3</span><br></pre></td></tr></table></figure>


<h1 id="Golang切片的初始化"><a href="#Golang切片的初始化" class="headerlink" title="Golang切片的初始化"></a>Golang切片的初始化</h1><p>切片的初始化方法很多，可以直接初始化，也可以使用数组初始化等。</p>
<h2 id="切片如何切分"><a href="#切片如何切分" class="headerlink" title="切片如何切分"></a>切片如何切分</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 切片</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> s1 = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">	s2 := s1[<span class="number">0</span>:<span class="number">3</span>] <span class="comment">// [)</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;s2: %v\n&quot;</span>, s2)</span><br><span class="line">	s3 := s1[<span class="number">3</span>:]</span><br><span class="line">	fmt.Printf(<span class="string">&quot;s3: %v\n&quot;</span>, s3)</span><br><span class="line">	s4 := s1[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">	fmt.Printf(<span class="string">&quot;s4: %v\n&quot;</span>, s4)</span><br><span class="line">	s5 := s1[:]</span><br><span class="line">	fmt.Printf(<span class="string">&quot;s5: %v\n&quot;</span>, s5)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="直接初始化"><a href="#直接初始化" class="headerlink" title="直接初始化"></a>直接初始化</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s: [1 2 3]</span><br></pre></td></tr></table></figure>

<h2 id="使用数组初始化"><a href="#使用数组初始化" class="headerlink" title="使用数组初始化"></a>使用数组初始化</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	arr := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	s1 := arr[:]</span><br><span class="line">	fmt.Printf(<span class="string">&quot;s1: %v\n&quot;</span>, s1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s1: [1 2 3]</span><br></pre></td></tr></table></figure>

<h2 id="使用数组的部分元素初始化（切片表达式）"><a href="#使用数组的部分元素初始化（切片表达式）" class="headerlink" title="使用数组的部分元素初始化（切片表达式）"></a>使用数组的部分元素初始化（切片表达式）</h2><p>切片的底层就是一个<strong>数组</strong> ，所以我们可以<strong>基于数组通过切片表达式得到切片</strong> 。 切片表达式中的low和high表示一个索引范围（<strong>左包含，右不包含</strong> ），得到的切片<strong>长度</strong> =high-low，容量等于得到的切片的底层数组的容量。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	arr := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">	s1 := arr[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">	fmt.Printf(<span class="string">&quot;s1: %v\n&quot;</span>, s1)</span><br><span class="line">	s2 := arr[<span class="number">2</span>:]</span><br><span class="line">	fmt.Printf(<span class="string">&quot;s2: %v\n&quot;</span>, s2)</span><br><span class="line">	s3 := arr[:<span class="number">3</span>]</span><br><span class="line">	fmt.Printf(<span class="string">&quot;s3: %v\n&quot;</span>, s3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s1: [3 4 5]</span><br><span class="line">s2: [3 4 5 6]</span><br><span class="line">s3: [1 2 3]</span><br></pre></td></tr></table></figure>

<h2 id="空-nil-切片"><a href="#空-nil-切片" class="headerlink" title="空(nil)切片"></a>空(nil)切片</h2><p>一个切片在未初始化之前默认为 nil，长度为 0，容量为0.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> s1 []<span class="keyword">int</span></span><br><span class="line">	fmt.Println(s1 == <span class="literal">nil</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;len: %d, cap: %d\n&quot;</span>, <span class="built_in">len</span>(s1), <span class="built_in">cap</span>(s1))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">true</span><br><span class="line">len: 0, cap: 0</span><br></pre></td></tr></table></figure>


<h1 id="Go语言切片的遍历"><a href="#Go语言切片的遍历" class="headerlink" title="Go语言切片的遍历"></a>Go语言切片的遍历</h1><p>切片的遍历和数组的遍历非常类似，可以使用for循环索引遍历，或者for range循环。</p>
<h2 id="for循环索引遍历"><a href="#for循环索引遍历" class="headerlink" title="for循环索引遍历"></a>for循环索引遍历</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s1); i++ &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;s1[%d]: %v\n&quot;</span>, i, s1[i])</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s1[0]: 1</span><br><span class="line">s1[1]: 2</span><br><span class="line">s1[2]: 3</span><br><span class="line">s1[3]: 4</span><br><span class="line">s1[4]: 5</span><br></pre></td></tr></table></figure>

<h2 id="for-range循环"><a href="#for-range循环" class="headerlink" title="for range循环"></a>for range循环</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	<span class="keyword">for</span> i, v := <span class="keyword">range</span> s1 &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;s1[%d]: %v\n&quot;</span>, i, v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s1[0]: 1</span><br><span class="line">s1[1]: 2</span><br><span class="line">s1[2]: 3</span><br><span class="line">s1[3]: 4</span><br><span class="line">s1[4]: 5</span><br></pre></td></tr></table></figure>


<h1 id="Go语言切片元素的添加和删除copy"><a href="#Go语言切片元素的添加和删除copy" class="headerlink" title="Go语言切片元素的添加和删除copy"></a>Go语言切片元素的添加和删除copy</h1><p>切片是一个动态数组，可以使用 <code>append()</code>函数添加元素，go语言中并没有删除切片元素的专用方法，我们可以使用切片本身的特性来删除元素。由于，切片是引用类型，通过赋值的方式，会修改原有内容，go提供了 <code>copy()</code>函数来拷贝切片</p>
<p>db CRUD</p>
<h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s1 := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">	s1 = <span class="built_in">append</span>(s1, <span class="number">1</span>)</span><br><span class="line">	s1 = <span class="built_in">append</span>(s1, <span class="number">2</span>)</span><br><span class="line">	s1 = <span class="built_in">append</span>(s1, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>) <span class="comment">// 添加多个元素</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;s1: %v\n&quot;</span>, s1)</span><br><span class="line"></span><br><span class="line">	s3 := []<span class="keyword">int</span>&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	s4 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">	s4 = <span class="built_in">append</span>(s4, s3...) <span class="comment">// 添加另外一个切片</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;s4: %v\n&quot;</span>, s4)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s1: [1 2 3 4 5]</span><br><span class="line">s4: [1 2 3 4 5]</span><br></pre></td></tr></table></figure>

<h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	<span class="comment">// 删除索引为2的元素</span></span><br><span class="line">	s1 = <span class="built_in">append</span>(s1[:<span class="number">2</span>], s1[<span class="number">3</span>:]...)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;s1: %v\n&quot;</span>, s1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s1: [1 2 4 5]</span><br></pre></td></tr></table></figure>

<p>公式：要从切片a中删除索引为 <code>index</code>的元素，操作方法是 <code>a = append(a[:index], a[index+1:]...)</code></p>
<h2 id="拷贝切片"><a href="#拷贝切片" class="headerlink" title="拷贝切片"></a>拷贝切片</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	s2 := s1</span><br><span class="line">	s1[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;s1: %v\n&quot;</span>, s1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;s2: %v\n&quot;</span>, s2)</span><br><span class="line">	fmt.Println(<span class="string">&quot;----------&quot;</span>)</span><br><span class="line"></span><br><span class="line">	s3 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">	<span class="built_in">copy</span>(s3, s1)</span><br><span class="line"></span><br><span class="line">	s1[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;s1: %v\n&quot;</span>, s1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;s3: %v\n&quot;</span>, s3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s1: [100 2 3]</span><br><span class="line">s2: [100 2 3]</span><br><span class="line">-------------</span><br><span class="line">s1: [1 2 3]</span><br><span class="line">s3: [100 2 3]</span><br></pre></td></tr></table></figure>

<p>从运行结果，我们看到赋值的情况下，原来的变量被修改了，使用copy函数，原来的变量没有被修改。</p>
<h1 id="Golang-map"><a href="#Golang-map" class="headerlink" title="Golang map"></a>Golang map</h1><p>map是一种 <code>key:value</code>键值对的数据结构容器。map内部实现是哈希表(<code>hash</code>)。</p>
<p>map 最重要的一点是通过 key 来快速检索数据，key 类似于索引，指向数据的值。</p>
<p>map是引用类型的。</p>
<h2 id="map的语法格式"><a href="#map的语法格式" class="headerlink" title="map的语法格式"></a>map的语法格式</h2><p>可以使用内建函数 make 也可以使用 map 关键字来定义 map</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 声明变量，默认 map 是 nil */</span></span><br><span class="line"><span class="keyword">var</span> map_variable <span class="keyword">map</span>[key_data_type]value_data_type</span><br><span class="line"><span class="comment">/* 使用 make 函数 */</span></span><br><span class="line">map_variable = <span class="built_in">make</span>(<span class="keyword">map</span>[key_data_type]value_data_type)</span><br></pre></td></tr></table></figure>

<p><code>map_variable</code>：map变量名称</p>
<p><code>key_data_type</code>：key的数据类型</p>
<p><code>value_data_type</code>：值得数据类型</p>
<p><strong>实例</strong></p>
<p>下面声明一个保存个人信息的map</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">	m1[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;tom&quot;</span></span><br><span class="line">	m1[<span class="string">&quot;age&quot;</span>] = <span class="string">&quot;20&quot;</span></span><br><span class="line">	m1[<span class="string">&quot;email&quot;</span>] = <span class="string">&quot;tom@gmail.com&quot;</span></span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;m1: %v\n&quot;</span>, m1)</span><br><span class="line"></span><br><span class="line">	m2 := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">		<span class="string">&quot;name&quot;</span>:  <span class="string">&quot;kite&quot;</span>,</span><br><span class="line">		<span class="string">&quot;age&quot;</span>:   <span class="string">&quot;20&quot;</span>,</span><br><span class="line">		<span class="string">&quot;email&quot;</span>: <span class="string">&quot;kite@gmail.com&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;m2: %v\n&quot;</span>, m2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">m1: map[age:20 email:tom@gmail.com name:tom]</span><br><span class="line">m2: map[age:20 email:kite@gmail.com name:kite]</span><br></pre></td></tr></table></figure>

<h2 id="访问map"><a href="#访问map" class="headerlink" title="访问map"></a>访问map</h2><p>可以通过下标key获得其值，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">	m1[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;tom&quot;</span></span><br><span class="line">	m1[<span class="string">&quot;age&quot;</span>] = <span class="string">&quot;20&quot;</span></span><br><span class="line">	m1[<span class="string">&quot;email&quot;</span>] = <span class="string">&quot;tom@gmail.com&quot;</span></span><br><span class="line"></span><br><span class="line">	name := m1[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">	age := m1[<span class="string">&quot;age&quot;</span>]</span><br><span class="line">	email := m1[<span class="string">&quot;email&quot;</span>]</span><br><span class="line">	fmt.Printf(<span class="string">&quot;name: %v\n&quot;</span>, name)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;age: %v\n&quot;</span>, age)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;email: %v\n&quot;</span>, email)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="判断某个键是否存在"><a href="#判断某个键是否存在" class="headerlink" title="判断某个键是否存在"></a>判断某个键是否存在</h2><p>go语言中有个判断map中键是否存在的特殊写法，格式如下:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">value, ok := <span class="keyword">map</span>[key]</span><br></pre></td></tr></table></figure>

<p>如果ok为 <code>true</code>，存在；否则，不存在。</p>
<p><strong>实例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">	m1[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;tom&quot;</span></span><br><span class="line">	m1[<span class="string">&quot;age&quot;</span>] = <span class="string">&quot;20&quot;</span></span><br><span class="line">	m1[<span class="string">&quot;email&quot;</span>] = <span class="string">&quot;tom@gmail.com&quot;</span></span><br><span class="line"></span><br><span class="line">	v, ok := m1[<span class="string">&quot;address&quot;</span>]</span><br><span class="line">	<span class="keyword">if</span> ok &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;键存在&quot;</span>)</span><br><span class="line">		fmt.Println(v)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;键不存在&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">键不存在</span><br></pre></td></tr></table></figure>


<h1 id="Go语言遍历map"><a href="#Go语言遍历map" class="headerlink" title="Go语言遍历map"></a>Go语言遍历map</h1><p>可以使用 <code>for range</code>循环进行map遍历，得到key和value值。</p>
<h2 id="遍历key"><a href="#遍历key" class="headerlink" title="遍历key"></a>遍历key</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	 m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">	 m[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;tom&quot;</span></span><br><span class="line">	 m[<span class="string">&quot;age&quot;</span>] = <span class="string">&quot;20&quot;</span></span><br><span class="line">	 m[<span class="string">&quot;email&quot;</span>] = <span class="string">&quot;tom@gmail.com&quot;</span></span><br><span class="line"></span><br><span class="line">	 <span class="keyword">for</span> key := <span class="keyword">range</span> m&#123;</span><br><span class="line">		 fmt.Println(key)</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name</span><br><span class="line">age</span><br><span class="line">email</span><br></pre></td></tr></table></figure>

<h2 id="遍历key和value"><a href="#遍历key和value" class="headerlink" title="遍历key和value"></a>遍历key和value</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	 m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">	 m[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;tom&quot;</span></span><br><span class="line">	 m[<span class="string">&quot;age&quot;</span>] = <span class="string">&quot;20&quot;</span></span><br><span class="line">	 m[<span class="string">&quot;email&quot;</span>] = <span class="string">&quot;tom@gmail.com&quot;</span></span><br><span class="line"></span><br><span class="line">	 <span class="keyword">for</span> key, value := <span class="keyword">range</span> m&#123;</span><br><span class="line">		 fmt.Println(key + <span class="string">&quot;:&quot;</span> +value)</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name:tom</span><br><span class="line">age:20</span><br><span class="line">email:tom@gmail.com</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>笔记</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang学习笔记六-操作MySQL和Mongodb</title>
    <url>/posts/20493/</url>
    <content><![CDATA[<h1 id="Golang操作mysql数据库-准备数据库和表"><a href="#Golang操作mysql数据库-准备数据库和表" class="headerlink" title="Golang操作mysql数据库-准备数据库和表"></a>Golang操作mysql数据库-准备数据库和表</h1><p><strong>下载安装MySQL</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://dev.mysql.com/downloads/mysql/</span><br></pre></td></tr></table></figure>

<p><strong>创建一个go_db数据库</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database go_db</span><br></pre></td></tr></table></figure>

<p><strong>打开数据库</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use go_db</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><strong>创建表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user_tbl (</span><br><span class="line">  id <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">  username <span class="type">VARCHAR</span> (<span class="number">20</span>),</span><br><span class="line">  PASSWORD <span class="type">VARCHAR</span> (<span class="number">20</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><strong>添加模拟数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_tbl (username, PASSWORD) <span class="keyword">VALUES</span> (&quot;tom&quot;, &quot;123&quot;)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_tbl (username, PASSWORD) <span class="keyword">VALUES</span> (&quot;kite&quot;, &quot;456&quot;)</span><br></pre></td></tr></table></figure>


<h1 id="Golang操作mysql数据库-安装配置mysql驱动"><a href="#Golang操作mysql数据库-安装配置mysql驱动" class="headerlink" title="Golang操作mysql数据库-安装配置mysql驱动"></a>Golang操作mysql数据库-安装配置mysql驱动</h1><p><strong>安装驱动</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> get -u github.com/<span class="keyword">go</span>-sql-driver/mysql</span><br></pre></td></tr></table></figure>

<p><strong>初始化模块</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> mod init [model]</span><br></pre></td></tr></table></figure>

<p><strong>执行go mod tidy</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> mod tidy</span><br></pre></td></tr></table></figure>

<p><strong>导入驱动</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;database/sql&quot;</span></span><br><span class="line">	_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang操作mysql数据库-获得数据库连接"><a href="#Golang操作mysql数据库-获得数据库连接" class="headerlink" title="Golang操作mysql数据库-获得数据库连接"></a>Golang操作mysql数据库-获得数据库连接</h1><p><strong>导入包</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;database/sql&quot;</span></span><br><span class="line">	_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><strong>获得连接</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;database/sql&quot;</span></span><br><span class="line">	_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	db, err := sql.Open(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;root:123456@/go_db&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">print</span>(db)</span><br><span class="line">	<span class="comment">// 最大连接时长</span></span><br><span class="line">	db.SetConnMaxLifetime(time.Minute * <span class="number">3</span>)</span><br><span class="line">	<span class="comment">// 最大连接数</span></span><br><span class="line">	db.SetMaxOpenConns(<span class="number">10</span>)</span><br><span class="line">	<span class="comment">// 空闲连接数</span></span><br><span class="line">	db.SetMaxIdleConns(<span class="number">10</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>初始化连接</strong></p>
<p>Open函数可能只是验证其参数格式是否正确，实际上并不创建与数据库的连接。如果要检查数据源的名称是否真实有效，应该调用Ping方法。</p>
<p>返回的DB对象可以安全地被多个goroutine并发使用，并且维护其自己的空闲连接池。因此，Open函数应该仅被调用一次，很少需要关闭这个DB对象。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;database/sql&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个全局对象db</span></span><br><span class="line"><span class="keyword">var</span> db *sql.DB</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个初始化数据库的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initDB</span><span class="params">()</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">	dsn := <span class="string">&quot;root:123456@tcp(127.0.0.1:3306)/go_db?charset=utf8mb4&amp;parseTime=True&quot;</span></span><br><span class="line">	<span class="comment">// 不会校验账号密码是否正确</span></span><br><span class="line">	<span class="comment">// 注意！！！这里不要使用:=，我们是给全局变量赋值，然后在main函数中使用全局变量db</span></span><br><span class="line">	db, err = sql.Open(<span class="string">&quot;mysql&quot;</span>, dsn)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 尝试与数据库建立连接（校验dsn是否正确）</span></span><br><span class="line">	err = db.Ping()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	err := initDB() <span class="comment">// 调用输出化数据库的函数</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;初始化失败！,err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;初始化成功&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang操作mysql数据库-查询操作"><a href="#Golang操作mysql数据库-查询操作" class="headerlink" title="Golang操作mysql数据库-查询操作"></a>Golang操作mysql数据库-查询操作</h1><h4 id="单行查询"><a href="#单行查询" class="headerlink" title="单行查询"></a>单行查询</h4><p>单行查询 <code>db.QueryRow()</code>执行一次查询，并期望返回最多一行结果（即Row）。QueryRow总是返回非nil的值，直到返回值的Scan方法被调用时，才会返回被延迟的错误。</p>
<p><strong>定义一个结构体</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">	id <span class="keyword">int</span></span><br><span class="line">	username <span class="keyword">string</span></span><br><span class="line">	password <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>查询</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询一条用户数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryRowDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">	sqlStr := <span class="string">&quot;select id, username, password from user_tbl where id=?&quot;</span></span><br><span class="line">	<span class="keyword">var</span> u user</span><br><span class="line">	<span class="comment">// 确保QueryRow之后调用Scan方法，否则持有的数据库链接不会被释放</span></span><br><span class="line">	err := db.QueryRow(sqlStr, <span class="number">1</span>).Scan(&amp;u.id, &amp;u.username, &amp;u.password)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;scan failed, err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;id:%d name:%s age:%s\n&quot;</span>, u.id, u.username, u.password)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	err := initDB() <span class="comment">// 调用输出化数据库的函数</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;初始化失败！,err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;初始化成功&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	queryRowDemo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">初始化成功id:1 name:tom age:123</span><br></pre></td></tr></table></figure>

<h4 id="查询多行"><a href="#查询多行" class="headerlink" title="查询多行"></a>查询多行</h4><p>多行查询 <code>db.Query()</code>执行一次查询，返回多行结果（即Rows），一般用于执行select命令。参数args表示query中的占位参数。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询多条数据示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryMultiRow</span><span class="params">()</span></span> &#123;</span><br><span class="line">	sqlStr := <span class="string">&quot;select id, username, password from user_tbl where id &gt; ?&quot;</span></span><br><span class="line">	rows, err := db.Query(sqlStr, <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;query failed, err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 非常重要：关闭rows释放持有的数据库链接</span></span><br><span class="line">	<span class="keyword">defer</span> rows.Close()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 循环读取结果集中的数据</span></span><br><span class="line">	<span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">		<span class="keyword">var</span> u user</span><br><span class="line">		err := rows.Scan(&amp;u.id, &amp;u.username, &amp;u.password)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Printf(<span class="string">&quot;scan failed, err:%v\n&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;id:%d username:%s password:%s\n&quot;</span>, u.id, u.username, u.password)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">初始化成功</span><br><span class="line">id:<span class="number">1</span> username:tom password:<span class="number">123</span></span><br><span class="line">id:<span class="number">2</span> username:kite password:<span class="number">456</span></span><br></pre></td></tr></table></figure>


<h1 id="Golang操作mysql数据库-插入数据"><a href="#Golang操作mysql数据库-插入数据" class="headerlink" title="Golang操作mysql数据库-插入数据"></a>Golang操作mysql数据库-插入数据</h1><p>插入、更新和删除操作都使用 <code>Exec</code>方法。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span> <span class="title">Exec</span><span class="params">(query <span class="keyword">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(Result, error)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertData</span><span class="params">()</span></span> &#123;</span><br><span class="line">	sqlStr := <span class="string">&quot;insert into user_tbl(username,password) values (?,?)&quot;</span></span><br><span class="line">	ret, err := db.Exec(sqlStr, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;zs123&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;insert failed, err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	theID, err := ret.LastInsertId() <span class="comment">// 新插入数据的id</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;get lastinsert ID failed, err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;insert success, the id is %d.\n&quot;</span>, theID)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	err := initDB() <span class="comment">// 调用输出化数据库的函数</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;初始化失败！,err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;初始化成功\n&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//queryRowDemo()</span></span><br><span class="line">	<span class="comment">//queryMultiRow()</span></span><br><span class="line">	insertData()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">初始化成功</span><br><span class="line">insert success, the id is 3.</span><br></pre></td></tr></table></figure>


<h1 id="Golang操作mysql数据库-删除数据"><a href="#Golang操作mysql数据库-删除数据" class="headerlink" title="Golang操作mysql数据库-删除数据"></a>Golang操作mysql数据库-删除数据</h1><p>插入、更新和删除操作都使用 <code>Exec</code>方法。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span> <span class="title">Exec</span><span class="params">(query <span class="keyword">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(Result, error)</span></span></span><br></pre></td></tr></table></figure>

<p><strong>删除</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">delData</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	sql := <span class="string">&quot;delete from user_tbl where id =?&quot;</span></span><br><span class="line">	ret, err := db.Exec(sql, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;删除失败, err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	rows, err := ret.RowsAffected()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;删除行失败, err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;删除成功, 删除的行数： %d.\n&quot;</span>, rows)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	err := initDB() <span class="comment">// 调用输出化数据库的函数</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;初始化失败！,err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;初始化成功\n&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	delData()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">初始化成功</span><br><span class="line">删除成功, 删除的行数： 1.</span><br></pre></td></tr></table></figure>


<h1 id="Golang操作mysql数据库-更新数据"><a href="#Golang操作mysql数据库-更新数据" class="headerlink" title="Golang操作mysql数据库-更新数据"></a>Golang操作mysql数据库-更新数据</h1><p>插入、更新和删除操作都使用 <code>Exec</code>方法。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span> <span class="title">Exec</span><span class="params">(query <span class="keyword">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(Result, error)</span></span></span><br></pre></td></tr></table></figure>

<p><strong>更新</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateData</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	sql := <span class="string">&quot;update user_tbl set username=?, password=? where id=?&quot;</span></span><br><span class="line">	ret, err := db.Exec(sql, <span class="string">&quot;kite2&quot;</span>, <span class="string">&quot;kite123&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;更新失败, err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	rows, err := ret.RowsAffected()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;更新行失败, err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;更新成功, 更新的行数： %d.\n&quot;</span>, rows)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	err := initDB() <span class="comment">// 调用输出化数据库的函数</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;初始化失败！,err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;初始化成功\n&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//queryRowDemo()</span></span><br><span class="line">	<span class="comment">//queryMultiRow()</span></span><br><span class="line">	<span class="comment">//insertData()</span></span><br><span class="line">	<span class="comment">//delData()</span></span><br><span class="line">	updateData()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">初始化成功</span><br><span class="line">更新成功, 更新的行数： 1.</span><br></pre></td></tr></table></figure>


<h1 id="Golang操作MongoDB-下载安装MongoDB"><a href="#Golang操作MongoDB-下载安装MongoDB" class="headerlink" title="Golang操作MongoDB-下载安装MongoDB"></a>Golang操作MongoDB-下载安装MongoDB</h1><p>下载地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.mongodb.com/download-center/community</span><br></pre></td></tr></table></figure>

<h2 id="打开客户端"><a href="#打开客户端" class="headerlink" title="打开客户端"></a>打开客户端</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongo.exe</span><br></pre></td></tr></table></figure>

<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use go_db;</span><br></pre></td></tr></table></figure>

<h2 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.createCollection(&quot;student&quot;);</span><br></pre></td></tr></table></figure>


<h1 id="Golang操作MongoDB-下载安装驱动并连接数据库"><a href="#Golang操作MongoDB-下载安装驱动并连接数据库" class="headerlink" title="Golang操作MongoDB-下载安装驱动并连接数据库"></a>Golang操作MongoDB-下载安装驱动并连接数据库</h1><p>下载地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.mongodb.com/download-center/community</span><br></pre></td></tr></table></figure>

<h2 id="打开客户端-1"><a href="#打开客户端-1" class="headerlink" title="打开客户端"></a>打开客户端</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongo.exe</span><br></pre></td></tr></table></figure>

<h2 id="创建数据库-1"><a href="#创建数据库-1" class="headerlink" title="创建数据库"></a>创建数据库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use go_db;</span><br></pre></td></tr></table></figure>

<h2 id="创建集合-1"><a href="#创建集合-1" class="headerlink" title="创建集合"></a>创建集合</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.createCollection(&quot;student&quot;);</span><br></pre></td></tr></table></figure>

<h2 id="下载驱动"><a href="#下载驱动" class="headerlink" title="下载驱动"></a>下载驱动</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go get github.com/mongodb/mongo-go-driver</span><br></pre></td></tr></table></figure>

<h2 id="连接mongoDB"><a href="#连接mongoDB" class="headerlink" title="连接mongoDB"></a>连接mongoDB</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;go.mongodb.org/mongo-driver/mongo&quot;</span></span><br><span class="line">	<span class="string">&quot;go.mongodb.org/mongo-driver/mongo/options&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> client *mongo.Client</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initDB</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	<span class="comment">// 设置客户端连接配置</span></span><br><span class="line">	clientOptions := options.Client().ApplyURI(<span class="string">&quot;mongodb://localhost:27017&quot;</span>)</span><br><span class="line">	<span class="comment">// 连接到MongoDB</span></span><br><span class="line">	<span class="keyword">var</span> err error</span><br><span class="line">	client, err = mongo.Connect(context.TODO(), clientOptions)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 检查连接</span></span><br><span class="line">	err = client.Ping(context.TODO(), <span class="literal">nil</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Connected to MongoDB!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	initDB()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Connected to MongoDB!</span><br></pre></td></tr></table></figure>


<h1 id="Golang操作MongoDB-BSON简介"><a href="#Golang操作MongoDB-BSON简介" class="headerlink" title="Golang操作MongoDB-BSON简介"></a>Golang操作MongoDB-BSON简介</h1><p>MongoDB中的JSON文档存储在名为BSON(二进制编码的JSON)的二进制表示中。与其他将JSON数据存储为简单字符串和数字的数据库不同，BSON编码扩展了JSON表示，使其包含额外的类型，如int、long、date、浮点数和decimal128。这使得应用程序更容易可靠地处理、排序和比较数据。</p>
<p>连接MongoDB的Go驱动程序中有两大类型表示BSON数据：<code>D</code>和 <code>Raw</code>。</p>
<p>类型 <code>D</code>家族被用来简洁地构建使用本地Go类型的BSON对象。这对于构造传递给MongoDB的命令特别有用。<code>D</code>家族包括四类:</p>
<ul>
<li>D：一个BSON文档。这种类型应该在顺序重要的情况下使用，比如MongoDB命令。</li>
<li>M：一张无序的map。它和D是一样的，只是它不保持顺序。</li>
<li>A：一个BSON数组。</li>
<li>E：D里面的一个元素。</li>
</ul>
<p>要使用BSON，需要先导入下面的包：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;go.mongodb.org/mongo-driver/bson&quot;</span></span><br></pre></td></tr></table></figure>

<p>下面是一个使用D类型构建的<strong>过滤器</strong> 文档的例子，它可以用来查找name字段与’张三’或’李四’匹配的文档:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">bson.D&#123;&#123;</span><br><span class="line">	<span class="string">&quot;name&quot;</span>,</span><br><span class="line">	bson.D&#123;&#123;</span><br><span class="line">		<span class="string">&quot;$in&quot;</span>,</span><br><span class="line">		bson.A&#123;<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>&#125;,</span><br><span class="line">	&#125;&#125;,</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><code>Raw</code>类型家族用于验证字节切片。你还可以使用 <code>Lookup()</code>从原始类型检索单个元素。如果你不想要将BSON反序列化成另一种类型的开销，那么这是非常有用的。这个教程我们将只使用D类型。</p>
<h1 id="Golang操作MongoDB-添加文档"><a href="#Golang操作MongoDB-添加文档" class="headerlink" title="Golang操作MongoDB-添加文档"></a>Golang操作MongoDB-添加文档</h1><p><strong>创建一个结构体</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">	Age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>添加单个文档</strong></p>
<p>使用 <code>collection.InsertOne()</code>方法插入一条文档记录：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertOne</span><span class="params">(s Student)</span></span> &#123;</span><br><span class="line">	initDB()</span><br><span class="line">	collection := client.Database(<span class="string">&quot;go_db&quot;</span>).Collection(<span class="string">&quot;student&quot;</span>)</span><br><span class="line">	insertResult, err := collection.InsertOne(context.TODO(), s)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Inserted a single document: &quot;</span>, insertResult.InsertedID)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := Student&#123;Name: <span class="string">&quot;tom&quot;</span>, Age: <span class="number">20</span>&#125;</span><br><span class="line">	insertOne(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Connected to MongoDB!</span><br><span class="line">Inserted a single document:  ObjectID(&quot;61124558682f5c9583330222&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="客户端查看"><a href="#客户端查看" class="headerlink" title="客户端查看"></a>客户端查看</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongodb 打开客户端</span><br><span class="line">use go_db</span><br><span class="line">db.student.find()</span><br><span class="line">db.student.remove(&#123;&#125;) // 删除所有</span><br></pre></td></tr></table></figure>

<p><strong>插入多个文档</strong></p>
<p>使用 <code>collection.InsertMany()</code>方法插入多条文档记录：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertMore</span><span class="params">(students []<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	<span class="comment">//students := []interface&#123;&#125;&#123;s2, s3&#125;</span></span><br><span class="line">	initDB()</span><br><span class="line">	collection := client.Database(<span class="string">&quot;go_db&quot;</span>).Collection(<span class="string">&quot;student&quot;</span>)</span><br><span class="line">	insertManyResult, err := collection.InsertMany(context.TODO(), students)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Inserted multiple documents: &quot;</span>, insertManyResult.InsertedIDs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := Student&#123;Name: <span class="string">&quot;tom&quot;</span>, Age: <span class="number">20</span>&#125;</span><br><span class="line">	s1 := Student&#123;Name: <span class="string">&quot;kite&quot;</span>, Age: <span class="number">21</span>&#125;</span><br><span class="line">	s2 := Student&#123;Name: <span class="string">&quot;rose&quot;</span>, Age: <span class="number">22</span>&#125;</span><br><span class="line">	students := []<span class="keyword">interface</span>&#123;&#125;&#123;s, s1, s2&#125;</span><br><span class="line">	insertMore(students)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Connected to MongoDB!</span><br><span class="line">Inserted multiple documents:  [ObjectID(&quot;611246c56637c3554426bc92&quot;) ObjectID(&quot;611246c56637c3554426bc93&quot;) ObjectID(&quot;611246c56637c3554426bc94&quot;)]</span><br></pre></td></tr></table></figure>

<p>更多方法请查阅<a href="https://godoc.org/go.mongodb.org/mongo-driver">官方文档</a>。</p>
<h1 id="Golang操作MongoDB-查找文档"><a href="#Golang操作MongoDB-查找文档" class="headerlink" title="Golang操作MongoDB-查找文档"></a>Golang操作MongoDB-查找文档</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;go.mongodb.org/mongo-driver/bson&quot;</span></span><br><span class="line">	<span class="string">&quot;go.mongodb.org/mongo-driver/mongo&quot;</span></span><br><span class="line">	<span class="string">&quot;go.mongodb.org/mongo-driver/mongo/options&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> client *mongo.Client</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initDB</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 设置客户端连接配置</span></span><br><span class="line">	clientOptions := options.Client().ApplyURI(<span class="string">&quot;mongodb://localhost:27017&quot;</span>)</span><br><span class="line"></span><br><span class="line">	co := options.Client().ApplyURI(<span class="string">&quot;mongodb://localhost:27017&quot;</span>)</span><br><span class="line">	mongo.Connect(context.TODO(), co)</span><br><span class="line">	<span class="comment">// 连接到MongoDB</span></span><br><span class="line">	<span class="keyword">var</span> err error</span><br><span class="line">	client, err = mongo.Connect(context.TODO(), clientOptions)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	client.Ping(context.TODO(), <span class="literal">nil</span>)</span><br><span class="line">	<span class="comment">// 检查连接</span></span><br><span class="line">	err = client.Ping(context.TODO(), <span class="literal">nil</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Connected to MongoDB!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">find</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ctx, cancel := context.WithTimeout(context.Background(), <span class="number">30</span>*time.Second)</span><br><span class="line">	<span class="keyword">defer</span> cancel()</span><br><span class="line">	collection := client.Database(<span class="string">&quot;go_db&quot;</span>).Collection(<span class="string">&quot;student&quot;</span>)</span><br><span class="line">	cur, err := collection.Find(ctx, bson.D&#123;&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> cur.Close(ctx)</span><br><span class="line">	<span class="keyword">for</span> cur.Next(ctx) &#123;</span><br><span class="line">		<span class="keyword">var</span> result bson.D</span><br><span class="line">		err := cur.Decode(&amp;result)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Fatal(err)</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;result: %v\n&quot;</span>, result)</span><br><span class="line">		fmt.Printf(<span class="string">&quot;result.Map(): %v\n&quot;</span>, result.Map()[<span class="string">&quot;name&quot;</span>])</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> err := cur.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	initDB()</span><br><span class="line">	find()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang操作MongoDB-更新文档"><a href="#Golang操作MongoDB-更新文档" class="headerlink" title="Golang操作MongoDB-更新文档"></a>Golang操作MongoDB-更新文档</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;go.mongodb.org/mongo-driver/bson&quot;</span></span><br><span class="line">	<span class="string">&quot;go.mongodb.org/mongo-driver/mongo&quot;</span></span><br><span class="line">	<span class="string">&quot;go.mongodb.org/mongo-driver/mongo/options&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">	Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> client *mongo.Client</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initDb</span><span class="params">()</span></span> &#123;</span><br><span class="line">	co := options.Client().ApplyURI(<span class="string">&quot;mongodb://localhost:27017&quot;</span>)</span><br><span class="line">	c, err := mongo.Connect(context.TODO(), co)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	err2 := c.Ping(context.TODO(), <span class="literal">nil</span>)</span><br><span class="line">	<span class="keyword">if</span> err2 != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err2)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;连接成功！&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	client = c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ctx := context.TODO()</span><br><span class="line">	<span class="keyword">defer</span> client.Disconnect(ctx)</span><br><span class="line">	c := client.Database(<span class="string">&quot;go_db&quot;</span>).Collection(<span class="string">&quot;Student&quot;</span>)</span><br><span class="line"></span><br><span class="line">	update := bson.D&#123;&#123;<span class="string">&quot;$set&quot;</span>, bson.D&#123;&#123;<span class="string">&quot;Name&quot;</span>, <span class="string">&quot;big tom&quot;</span>&#125;, &#123;<span class="string">&quot;Age&quot;</span>, <span class="number">22</span>&#125;&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">	ur, err := c.UpdateMany(ctx, bson.D&#123;&#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;tom&quot;</span>&#125;&#125;, update)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;ur.ModifiedCount: %v\n&quot;</span>, ur.ModifiedCount)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	initDb()</span><br><span class="line">	update()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Golang操作MongoDB-删除文档"><a href="#Golang操作MongoDB-删除文档" class="headerlink" title="Golang操作MongoDB-删除文档"></a>Golang操作MongoDB-删除文档</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;go.mongodb.org/mongo-driver/bson&quot;</span></span><br><span class="line">	<span class="string">&quot;go.mongodb.org/mongo-driver/mongo&quot;</span></span><br><span class="line">	<span class="string">&quot;go.mongodb.org/mongo-driver/mongo/options&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">	Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> client *mongo.Client</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initDb</span><span class="params">()</span></span> &#123;</span><br><span class="line">	co := options.Client().ApplyURI(<span class="string">&quot;mongodb://localhost:27017&quot;</span>)</span><br><span class="line">	c, err := mongo.Connect(context.TODO(), co)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	err2 := c.Ping(context.TODO(), <span class="literal">nil</span>)</span><br><span class="line">	<span class="keyword">if</span> err2 != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err2)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;连接成功！&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	client = c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">del</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	initDb()</span><br><span class="line">	c := client.Database(<span class="string">&quot;go_db&quot;</span>).Collection(<span class="string">&quot;Student&quot;</span>)</span><br><span class="line">	ctx := context.TODO()</span><br><span class="line"></span><br><span class="line">	dr, err := c.DeleteMany(ctx, bson.D&#123;&#123;<span class="string">&quot;Name&quot;</span>, <span class="string">&quot;big kite&quot;</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;ur.ModifiedCount: %v\n&quot;</span>, dr.DeletedCount)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	del()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客使用静态链接</title>
    <url>/posts/11857/</url>
    <content><![CDATA[<h1 id="hexo-静态链接"><a href="#hexo-静态链接" class="headerlink" title="hexo-静态链接"></a>hexo-静态链接</h1><p>一个基于帖子标题生成静态帖子链接的Hexo插件。</p>
<h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p>添加插件到 HEXO 中，执行以下命令行安装:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在 config.yml 文件中配置以下信息:<span id="more"></span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">permalink: posts/:abbrlink/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>有以下两种设置:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alg -- Algorithm (currently support crc16 and crc32, which crc16 is default)</span><br><span class="line">rep -- Represent (the generated link could be presented in hex or dec value)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>示列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># abbrlink config</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  #support crc16(default) and crc32</span><br><span class="line">  rep: hex    #support dec(default) and hex</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="样品"><a href="#样品" class="headerlink" title="样品"></a>样品</h2><p>不同配置的链接效果如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crc16 &amp; hex</span><br><span class="line">https://post.zz173.com/posts/66c8.html</span><br><span class="line"></span><br><span class="line">crc16 &amp; dec</span><br><span class="line">https://post.zz173.com/posts/65535.html</span><br><span class="line"></span><br><span class="line">crc32 &amp; hex</span><br><span class="line">https://post.zz173.com/posts/8ddf18fb.html</span><br><span class="line"></span><br><span class="line">crc32 &amp; dec</span><br><span class="line">https://post.zz173.com/posts/1690090958.html</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h2><p>crc16 的最大帖子数是 65535 但是对于个人博客网站，这个也不错了</p>
<h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p><a href="https://github.com/NoahDragon">NoahDragon</a></p>
]]></content>
      <categories>
        <category>常用技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>node</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>HUGO博客程序的安装文档</title>
    <url>/posts/57274/</url>
    <content><![CDATA[<p>Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。</p>
<p><img data-src="https://raw.githubusercontent.com/gohugoio/hugoDocs/master/static/img/hugo-logo.png" alt="hugo" title="hugo"></p>
<blockquote>
<p>Hugo 是由 Go 语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。</p>
</blockquote>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="安装-Hugo"><a href="#安装-Hugo" class="headerlink" title="安装 Hugo"></a>安装 Hugo</h3><h4 id="二进制安装（推荐：简单、快速）"><a href="#二进制安装（推荐：简单、快速）" class="headerlink" title="二进制安装（推荐：简单、快速）"></a>二进制安装（推荐：简单、快速）</h4><p>到 <a href="https://github.com/spf13/hugo/releases" title="Hugo Releases">Hugo Releases</a> 下载对应的操作系统版本的 Hugo 二进制文件（hugo 或者 hugo.exe）<br>Mac 下直接使用 <code>Homebrew</code> 安装：</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install hugo</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-源码安装"><a href="#2-源码安装" class="headerlink" title="2. 源码安装"></a>2. 源码安装</h4><p>源码编译安装，首先安装好依赖的工具：</p>
<p><a href="https://git-scm.com/" title="Git">Git</a><br><a href="http://mercurial.selenic.com/" title="Mercurial">Mercurial</a><br><a href="https://golang.org/" title="Go">Go</a> 1.3+ (Go 1.4+ on Windows)<br>设置好 <code>GOPATH</code> 环境变量，获取源码并编译：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ export GOPATH=$HOME/go</span><br><span class="line">$ go get -v github.com/spf13/hugo</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>源码会下载到 <code>$GOPATH/src</code> 目录，二进制在 <code>$GOPATH/bin/</code></p>
<p>如果需要更新所有 Hugo 的依赖库，增加 <code>-u</code> 参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go get -u -v github.com/spf13/hugo</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="生成站点"><a href="#生成站点" class="headerlink" title="生成站点"></a>生成站点</h3><p>使用 Hugo 快速生成站点，比如希望生成到 <code>/path/to/site</code> 路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hugo new site /path/to/site</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这样就在 <code>/path/to/site</code> 目录里生成了初始站点，进去目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd /path/to/site</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>站点目录结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">▸ archetypes/</span><br><span class="line">▸ content/</span><br><span class="line">▸ layouts/</span><br><span class="line">▸ static/</span><br><span class="line">  config.toml</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><p>创建一个 <code>about</code> 页面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hugo new about.md</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>about.md</code> 自动生成到了 <code>content/about.md</code> ，打开 <code>about.md</code> 看下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+++</span><br><span class="line">date = &quot;2015-10-25T08:36:54-07:00&quot;</span><br><span class="line">draft = true</span><br><span class="line">title = &quot;about&quot;</span><br><span class="line">+++</span><br><span class="line">正文内容</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>内容是 Markdown 格式的，+++ 之间的内容是 TOML 格式的，根据你的喜好，你可以换成 YAML 格式（使用 — 标记）或者 JSON 格式。</p>
<p>创建第一篇文章，放到 <code>post</code> 目录，方便之后生成聚合页面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hugo new post/first.md</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>打开编辑 <code>post/first.md</code> ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">date: &quot;2015-10-25T08:36:54-07:00&quot;</span><br><span class="line">title: &quot;first&quot;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">### Hello Hugo</span><br><span class="line"></span><br><span class="line"> 1. aaa</span><br><span class="line"> 1. bbb</span><br><span class="line"> 1. ccc</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="安装皮肤"><a href="#安装皮肤" class="headerlink" title="安装皮肤"></a>安装皮肤</h3><p>到 皮肤列表 挑选一个心仪的皮肤，比如你觉得 Hyde 皮肤不错，找到相关的 GitHub 地址，创建目录 themes，在 <code>themes</code> 目录里把皮肤 <code>git clone</code> 下来：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建 themes 目录</span><br><span class="line">$ cd themes</span><br><span class="line">$ git clone https://github.com/spf13/hyde.git</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="运行-Hugo"><a href="#运行-Hugo" class="headerlink" title="运行 Hugo"></a>运行 Hugo</h3><p>在你的站点根目录执行 <code>Hugo</code> 命令进行调试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hugo server --theme=hyde --buildDrafts</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（注明：v0.15 版本之后，不再需要使用 <code>--watch</code> 参数了）</p>
<p>浏览器里打开： <code>http://localhost:1313</code></p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>假设你需要部署在 <code>GitHub Pages</code> 上，首先在 GitHub 上创建一个 Repository，命名为：<code>coderzh.github.io</code> （coderzh 替换为你的 github 用户名）。</p>
<p>在站点根目录执行 <code>Hugo</code> 命令生成最终页面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hugo --theme=hyde --baseUrl=&quot;http://coderzh.github.io/&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（注意，以上命令并不会生成草稿页面，如果未生成任何文章，请去掉文章头部的 <code>draft=true</code> 再重新生成。）</p>
<p>如果一切顺利，所有静态页面都会生成到 <code>public</code> 目录，将 pubilc 目录里所有文件 <code>push</code> 到刚创建的 Repository 的 <code>master</code> 分支。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd public</span><br><span class="line">$ git init</span><br><span class="line">$ git remote add origin https://github.com/coderzh/coderzh.github.io.git</span><br><span class="line">$ git add -A</span><br><span class="line">$ git commit -m &quot;first commit&quot;</span><br><span class="line">$ git push -u origin master</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>浏览器里访问：<code>http://coderzh.github.io/</code></p>
]]></content>
      <categories>
        <category>常用技术</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Hugo</tag>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang-gorm笔记</title>
    <url>/posts/3751/</url>
    <content><![CDATA[<h1 id="gorm-概述"><a href="#gorm-概述" class="headerlink" title="gorm 概述"></a>gorm 概述</h1><h2 id="ORM-简介"><a href="#ORM-简介" class="headerlink" title="ORM 简介"></a>ORM 简介</h2><p>对象关系映射（Object Relational Mapping，简称 ORM）模式是一种为了解决面向对象与关系数据库（如 mysql 数据库）存在的互不匹配的现象的技术。简单的说，ORM 是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系数据库中。</p>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> get -u gorm.io/gorm</span><br><span class="line"><span class="keyword">go</span> get -u gorm.io/driver/sqlite</span><br></pre></td></tr></table></figure>

<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">  <span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Code  <span class="keyword">string</span></span><br><span class="line">  Price <span class="keyword">uint</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  dsn := <span class="string">&quot;root:123456@tcp(127.0.0.1:3306)/golang_db?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;failed to connect database&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 迁移 schema</span></span><br><span class="line">  db.AutoMigrate(&amp;Product&#123;&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create</span></span><br><span class="line">  db.Create(&amp;Product&#123;Code: <span class="string">&quot;D42&quot;</span>, Price: <span class="number">100</span>&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Read</span></span><br><span class="line">  <span class="keyword">var</span> product Product</span><br><span class="line">  db.First(&amp;product, <span class="number">1</span>) <span class="comment">// 根据整形主键查找</span></span><br><span class="line">  db.First(&amp;product, <span class="string">&quot;code = ?&quot;</span>, <span class="string">&quot;D42&quot;</span>) <span class="comment">// 查找 code 字段值为 D42 的记录</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Update - 将 product 的 price 更新为 200</span></span><br><span class="line">  db.Model(&amp;product).Update(<span class="string">&quot;Price&quot;</span>, <span class="number">200</span>)</span><br><span class="line">  <span class="comment">// Update - 更新多个字段</span></span><br><span class="line">  db.Model(&amp;product).Updates(Product&#123;Price: <span class="number">200</span>, Code: <span class="string">&quot;F42&quot;</span>&#125;) <span class="comment">// 仅更新非零值字段</span></span><br><span class="line">  db.Model(&amp;product).Updates(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;Price&quot;</span>: <span class="number">200</span>, <span class="string">&quot;Code&quot;</span>: <span class="string">&quot;F42&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Delete - 删除 product</span></span><br><span class="line">  db.Delete(&amp;product, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="模型定义"><a href="#模型定义" class="headerlink" title="模型定义"></a>模型定义</h2><p>模型是标准的 struct，由 Go 的基本数据类型、实现了 <a href="https://pkg.go.dev/database/sql/?tab=doc#Scanner">Scanner</a> 和 <a href="https://pkg.go.dev/database/sql/driver#Valuer">Valuer</a> 接口的自定义类型及其指针或别名组成</p>
<p>例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID           <span class="keyword">uint</span></span><br><span class="line">  Name         <span class="keyword">string</span></span><br><span class="line">  Email        *<span class="keyword">string</span></span><br><span class="line">  Age          <span class="keyword">uint8</span></span><br><span class="line">  Birthday     *time.Time</span><br><span class="line">  MemberNumber sql.NullString</span><br><span class="line">  ActivatedAt  sql.NullTime</span><br><span class="line">  CreatedAt    time.Time</span><br><span class="line">  UpdatedAt    time.Time</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h2><p>GORM 倾向于约定，而不是配置。默认情况下，GORM 使用 <code>ID</code> 作为主键，使用结构体名的 <code>蛇形复数</code> 作为表名，字段名的 <code>蛇形</code> 作为列名，并使用 <code>CreatedAt</code>、<code>UpdatedAt</code> 字段追踪创建、更新时间</p>
<p>遵循 GORM 已有的约定，可以减少您的配置和代码量。如果约定不符合您的需求，GORM 允许您自定义配置它们</p>
<h2 id="gorm-Model"><a href="#gorm-Model" class="headerlink" title="gorm.Model"></a>gorm.Model</h2><p>GORM 定义一个 <code>gorm.Model</code> 结构体，其包括字段 <code>ID</code>、<code>CreatedAt</code>、<code>UpdatedAt</code>、<code>DeletedAt</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gorm.Model 的定义</span></span><br><span class="line"><span class="keyword">type</span> Model <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID        <span class="keyword">uint</span>           <span class="string">`gorm:&quot;primaryKey&quot;`</span></span><br><span class="line">  CreatedAt time.Time</span><br><span class="line">  UpdatedAt time.Time</span><br><span class="line">  DeletedAt gorm.DeletedAt <span class="string">`gorm:&quot;index&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>您可以将它嵌入到您的结构体中，以包含这几个字段，详情请参考 嵌入结构体</p>
<h2 id="高级选项"><a href="#高级选项" class="headerlink" title="高级选项"></a>高级选项</h2><h3 id="字段级权限控制"><a href="#字段级权限控制" class="headerlink" title="字段级权限控制"></a>字段级权限控制</h3><p>可导出的字段在使用 GORM 进行 CRUD 时拥有全部的权限，此外，GORM 允许您用标签控制字段级别的权限。这样您就可以让一个字段的权限是只读、只写、只创建、只更新或者被忽略</p>
<blockquote>
<p><strong>注意：</strong> 使用 GORM Migrator 创建表时，不会创建被忽略的字段</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name <span class="keyword">string</span> <span class="string">`gorm:&quot;&lt;-:create&quot;`</span> <span class="comment">// 允许读和创建</span></span><br><span class="line">  Name <span class="keyword">string</span> <span class="string">`gorm:&quot;&lt;-:update&quot;`</span> <span class="comment">// 允许读和更新</span></span><br><span class="line">  Name <span class="keyword">string</span> <span class="string">`gorm:&quot;&lt;-&quot;`</span>        <span class="comment">// 允许读和写（创建和更新）</span></span><br><span class="line">  Name <span class="keyword">string</span> <span class="string">`gorm:&quot;&lt;-:false&quot;`</span>  <span class="comment">// 允许读，禁止写</span></span><br><span class="line">  Name <span class="keyword">string</span> <span class="string">`gorm:&quot;-&gt;&quot;`</span>        <span class="comment">// 只读（除非有自定义配置，否则禁止写）</span></span><br><span class="line">  Name <span class="keyword">string</span> <span class="string">`gorm:&quot;-&gt;;&lt;-:create&quot;`</span> <span class="comment">// 允许读和写</span></span><br><span class="line">  Name <span class="keyword">string</span> <span class="string">`gorm:&quot;-&gt;:false;&lt;-:create&quot;`</span> <span class="comment">// 仅创建（禁止从 db 读）</span></span><br><span class="line">  Name <span class="keyword">string</span> <span class="string">`gorm:&quot;-&quot;`</span>  <span class="comment">// 通过 struct 读写会忽略该字段</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建-更新时间追踪（纳秒、毫秒、秒、Time）"><a href="#创建-更新时间追踪（纳秒、毫秒、秒、Time）" class="headerlink" title="创建/更新时间追踪（纳秒、毫秒、秒、Time）"></a>创建/更新时间追踪（纳秒、毫秒、秒、Time）</h3><p>GORM 约定使用 <code>CreatedAt</code>、<code>UpdatedAt</code> 追踪创建/更新时间。如果您定义了这种字段，GORM 在创建、更新时会自动填充 当前时间</p>
<p>要使用不同名称的字段，您可以配置 <code>autoCreateTime</code>、<code>autoUpdateTime</code> 标签</p>
<p>如果您想要保存 UNIX（毫/纳）秒时间戳，而不是 time，您只需简单地将 <code>time.Time</code> 修改为 <code>int</code> 即可</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  CreatedAt time.Time <span class="comment">// Set to current time if it is zero on creating</span></span><br><span class="line">  UpdatedAt <span class="keyword">int</span>       <span class="comment">// Set to current unix seconds on updating or if it is zero on creating</span></span><br><span class="line">  Updated   <span class="keyword">int64</span> <span class="string">`gorm:&quot;autoUpdateTime:nano&quot;`</span> <span class="comment">// Use unix nano seconds as updating time</span></span><br><span class="line">  Updated   <span class="keyword">int64</span> <span class="string">`gorm:&quot;autoUpdateTime:milli&quot;`</span><span class="comment">// Use unix milli seconds as updating time</span></span><br><span class="line">  Created   <span class="keyword">int64</span> <span class="string">`gorm:&quot;autoCreateTime&quot;`</span>      <span class="comment">// Use unix seconds as creating time</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="嵌入结构体"><a href="#嵌入结构体" class="headerlink" title="嵌入结构体"></a>嵌入结构体</h3><p>对于匿名字段，GORM 会将其字段包含在父结构体中，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等效于</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID        <span class="keyword">uint</span>           <span class="string">`gorm:&quot;primaryKey&quot;`</span></span><br><span class="line">  CreatedAt time.Time</span><br><span class="line">  UpdatedAt time.Time</span><br><span class="line">  DeletedAt gorm.DeletedAt <span class="string">`gorm:&quot;index&quot;`</span></span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于正常的结构体字段，你也可以通过标签 <code>embedded</code> 将其嵌入，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Author <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name  <span class="keyword">string</span></span><br><span class="line">    Email <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Blog <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID      <span class="keyword">int</span></span><br><span class="line">  Author  Author <span class="string">`gorm:&quot;embedded&quot;`</span></span><br><span class="line">  Upvotes <span class="keyword">int32</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等效于</span></span><br><span class="line"><span class="keyword">type</span> Blog <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID    <span class="keyword">int64</span></span><br><span class="line">  Name  <span class="keyword">string</span></span><br><span class="line">  Email <span class="keyword">string</span></span><br><span class="line">  Upvotes  <span class="keyword">int32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并且，您可以使用标签 <code>embeddedPrefix</code> 来为 db 中的字段名添加前缀，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Blog <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID      <span class="keyword">int</span></span><br><span class="line">  Author  Author <span class="string">`gorm:&quot;embedded;embeddedPrefix:author_&quot;`</span></span><br><span class="line">  Upvotes <span class="keyword">int32</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等效于</span></span><br><span class="line"><span class="keyword">type</span> Blog <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID          <span class="keyword">int64</span></span><br><span class="line">    AuthorName  <span class="keyword">string</span></span><br><span class="line">    AuthorEmail <span class="keyword">string</span></span><br><span class="line">  Upvotes     <span class="keyword">int32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字段标签"><a href="#字段标签" class="headerlink" title="字段标签"></a>字段标签</h3><p>声明 model 时，tag 是可选的，GORM 支持以下 tag： tag 名大小写不敏感，但建议使用 <code>camelCase</code> 风格</p>
<table>
<thead>
<tr>
<th align="left">标签名</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">column</td>
<td align="left">指定 db 列名</td>
</tr>
<tr>
<td align="left">type</td>
<td align="left">列数据类型，推荐使用兼容性好的通用类型，例如：所有数据库都支持 bool、int、uint、float、string、time、bytes 并且可以和其他标签一起使用，例如：<code>not null</code>、<code>size</code>, <code>autoIncrement</code>… 像 <code>varbinary(8)</code> 这样指定数据库数据类型也是支持的。在使用指定数据库数据类型时，它需要是完整的数据库数据类型，如：<code>MEDIUMINT UNSIGNED not NULL AUTO_INCREMENT</code></td>
</tr>
<tr>
<td align="left">size</td>
<td align="left">指定列大小，例如：<code>size:256</code></td>
</tr>
<tr>
<td align="left">primaryKey</td>
<td align="left">指定列为主键</td>
</tr>
<tr>
<td align="left">unique</td>
<td align="left">指定列为唯一</td>
</tr>
<tr>
<td align="left">default</td>
<td align="left">指定列的默认值</td>
</tr>
<tr>
<td align="left">precision</td>
<td align="left">指定列的精度</td>
</tr>
<tr>
<td align="left">scale</td>
<td align="left">指定列大小</td>
</tr>
<tr>
<td align="left">not null</td>
<td align="left">指定列为 NOT NULL</td>
</tr>
<tr>
<td align="left">autoIncrement</td>
<td align="left">指定列为自动增长</td>
</tr>
<tr>
<td align="left">autoIncrementIncrement</td>
<td align="left">自动步长，控制连续记录之间的间隔</td>
</tr>
<tr>
<td align="left">embedded</td>
<td align="left">嵌套字段</td>
</tr>
<tr>
<td align="left">embeddedPrefix</td>
<td align="left">嵌入字段的列名前缀</td>
</tr>
<tr>
<td align="left">autoCreateTime</td>
<td align="left">创建时追踪当前时间，对于 <code>int</code> 字段，它会追踪秒级时间戳，您可以使用 <code>nano</code>/<code>milli</code> 来追踪纳秒、毫秒时间戳，例如：<code>autoCreateTime:nano</code></td>
</tr>
<tr>
<td align="left">autoUpdateTime</td>
<td align="left">创建/更新时追踪当前时间，对于 <code>int</code> 字段，它会追踪秒级时间戳，您可以使用 <code>nano</code>/<code>milli</code> 来追踪纳秒、毫秒时间戳，例如：<code>autoUpdateTime:milli</code></td>
</tr>
<tr>
<td align="left">index</td>
<td align="left">根据参数创建索引，多个字段使用相同的名称则创建复合索引，查看<a href="https://gorm.io/zh_CN/docs/indexes.html">索引</a> 获取详情</td>
</tr>
<tr>
<td align="left">uniqueIndex</td>
<td align="left">与 <code>index</code> 相同，但创建的是唯一索引</td>
</tr>
<tr>
<td align="left">check</td>
<td align="left">创建检查约束，例如 <code>check:age &gt; 13</code>，查看 <a href="https://gorm.io/zh_CN/docs/constraints.html">约束</a> 获取详情</td>
</tr>
<tr>
<td align="left">&lt;-</td>
<td align="left">设置字段写入的权限，<code>&lt;-:create</code> 只创建、<code>&lt;-:update</code> 只更新、<code>&lt;-:false</code> 无写入权限、<code>&lt;-</code> 创建和更新权限</td>
</tr>
<tr>
<td align="left">-&gt;</td>
<td align="left">设置字段读的权限，<code>-&gt;:false</code> 无读权限</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">忽略该字段，<code>-</code> 无读写权限</td>
</tr>
<tr>
<td align="left">comment</td>
<td align="left">迁移时为字段添加注释</td>
</tr>
</tbody></table>
<h3 id="关联标签"><a href="#关联标签" class="headerlink" title="关联标签"></a>关联标签</h3><p>GORM 允许通过标签为关联配置外键、约束、many2many 表，详情请参考 关联部分</p>
<h1 id="gorm-连接到数据库"><a href="#gorm-连接到数据库" class="headerlink" title="gorm 连接到数据库"></a>gorm 连接到数据库</h1><p>GORM 官方支持的数据库类型有： MySQL, PostgreSQL, SQlite, SQL Server</p>
<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line">  <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 参考 https://github.com/go-sql-driver/mysql#dsn-data-source-name 获取详情</span></span><br><span class="line">  dsn := <span class="string">&quot;user:pass@tcp(127.0.0.1:3306)/dbname?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class="line">  db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：</strong>想要正确的处理 <code>time.Time</code> ，您需要带上 <code>parseTime</code> 参数， (<a href="https://github.com/go-sql-driver/mysql#parameters">更多参数</a>) 要支持完整的 UTF-8 编码，您需要将 <code>charset=utf8</code> 更改为 <code>charset=utf8mb4</code> 查看 <a href="https://mathiasbynens.be/notes/mysql-utf8mb4">此文章</a> 获取详情</p>
</blockquote>
<p>MySQl 驱动程序提供了 <a href="https://github.com/go-gorm/mysql">一些高级配置</a> 可以在初始化过程中使用，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db, err := gorm.Open(mysql.New(mysql.Config&#123;</span><br><span class="line">  DSN: <span class="string">&quot;gorm:gorm@tcp(127.0.0.1:3306)/gorm?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;</span>, <span class="comment">// DSN data source name</span></span><br><span class="line">  DefaultStringSize: <span class="number">256</span>, <span class="comment">// string 类型字段的默认长度</span></span><br><span class="line">  DisableDatetimePrecision: <span class="literal">true</span>, <span class="comment">// 禁用 datetime 精度，MySQL 5.6 之前的数据库不支持</span></span><br><span class="line">  DontSupportRenameIndex: <span class="literal">true</span>, <span class="comment">// 重命名索引时采用删除并新建的方式，MySQL 5.7 之前的数据库和 MariaDB 不支持重命名索引</span></span><br><span class="line">  DontSupportRenameColumn: <span class="literal">true</span>, <span class="comment">// 用 `change` 重命名列，MySQL 8 之前的数据库和 MariaDB 不支持重命名列</span></span><br><span class="line">  SkipInitializeWithVersion: <span class="literal">false</span>, <span class="comment">// 根据当前 MySQL 版本自动配置</span></span><br><span class="line">&#125;), &amp;gorm.Config&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="自定义驱动"><a href="#自定义驱动" class="headerlink" title="自定义驱动"></a>自定义驱动</h3><p>GORM 允许通过 <code>DriverName</code> 选项自定义 MySQL 驱动，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  _ <span class="string">&quot;example.com/my_mysql_driver&quot;</span></span><br><span class="line">  <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">db, err := gorm.Open(mysql.New(mysql.Config&#123;</span><br><span class="line">  DriverName: <span class="string">&quot;my_mysql_driver&quot;</span>,</span><br><span class="line">  DSN: <span class="string">&quot;gorm:gorm@tcp(localhost:9910)/gorm?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;</span>, <span class="comment">// Data Source Name，参考 https://github.com/go-sql-driver/mysql#dsn-data-source-name</span></span><br><span class="line">&#125;), &amp;gorm.Config&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="现有的数据库连接"><a href="#现有的数据库连接" class="headerlink" title="现有的数据库连接"></a>现有的数据库连接</h3><p>GORM 允许通过一个现有的数据库连接来初始化 <code>*gorm.DB</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;database/sql&quot;</span></span><br><span class="line">  <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">sqlDB, err := sql.Open(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;mydb_dsn&quot;</span>)</span><br><span class="line">gormDB, err := gorm.Open(mysql.New(mysql.Config&#123;</span><br><span class="line">  Conn: sqlDB,</span><br><span class="line">&#125;), &amp;gorm.Config&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;gorm.io/driver/postgres&quot;</span></span><br><span class="line">  <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">dsn := <span class="string">&quot;host=localhost user=gorm password=gorm dbname=gorm port=9920 sslmode=disable TimeZone=Asia/Shanghai&quot;</span></span><br><span class="line">db, err := gorm.Open(postgres.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>我们使用 <a href="https://github.com/jackc/pgx">pgx</a> 作为 postgres 的 database/sql 驱动，默认情况下，它会启用 prepared statement 缓存，你可以这样禁用它：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://github.com/go-gorm/postgres</span></span><br><span class="line">db, err := gorm.Open(postgres.New(postgres.Config&#123;</span><br><span class="line">  DSN: <span class="string">&quot;user=gorm password=gorm dbname=gorm port=9920 sslmode=disable TimeZone=Asia/Shanghai&quot;</span>,</span><br><span class="line">  PreferSimpleProtocol: <span class="literal">true</span>, <span class="comment">// disables implicit prepared statement usage</span></span><br><span class="line">&#125;), &amp;gorm.Config&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="自定义驱动-1"><a href="#自定义驱动-1" class="headerlink" title="自定义驱动"></a>自定义驱动</h3><p>GORM 允许通过 <code>DriverName</code> 选项自定义 PostgreSQL 驱动，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  _ <span class="string">&quot;github.com/GoogleCloudPlatform/cloudsql-proxy/proxy/dialers/postgres&quot;</span></span><br><span class="line">  <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">db, err := gorm.Open(postgres.New(postgres.Config&#123;</span><br><span class="line">  DriverName: <span class="string">&quot;cloudsqlpostgres&quot;</span>,</span><br><span class="line">  DSN: <span class="string">&quot;host=project:region:instance user=postgres dbname=postgres password=password sslmode=disable&quot;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="现有的数据库连接-1"><a href="#现有的数据库连接-1" class="headerlink" title="现有的数据库连接"></a>现有的数据库连接</h3><p>GORM 允许通过一个现有的数据库连接来初始化 <code>*gorm.DB</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;database/sql&quot;</span></span><br><span class="line">  <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">sqlDB, err := sql.Open(<span class="string">&quot;postgres&quot;</span>, <span class="string">&quot;mydb_dsn&quot;</span>)</span><br><span class="line">gormDB, err := gorm.Open(postgres.New(postgres.Config&#123;</span><br><span class="line">  Conn: sqlDB,</span><br><span class="line">&#125;), &amp;gorm.Config&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;gorm.io/driver/sqlite&quot;</span></span><br><span class="line">  <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// github.com/mattn/go-sqlite3</span></span><br><span class="line">db, err := gorm.Open(sqlite.Open(<span class="string">&quot;gorm.db&quot;</span>), &amp;gorm.Config&#123;&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：</strong> 您也可以使用 <code>file::memory:?cache=shared</code> 替代文件路径。 这会告诉 SQLite 在系统内存中使用一个临时数据库。 (查看 <a href="https://www.sqlite.org/inmemorydb.html">SQLite 文档</a> 获取详情)</p>
</blockquote>
<h2 id="SQL-Server"><a href="#SQL-Server" class="headerlink" title="SQL Server"></a>SQL Server</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;gorm.io/driver/sqlserver&quot;</span></span><br><span class="line">  <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// github.com/denisenkom/go-mssqldb</span></span><br><span class="line">dsn := <span class="string">&quot;sqlserver://gorm:LoremIpsum86@localhost:9930?database=gorm&quot;</span></span><br><span class="line">db, err := gorm.Open(sqlserver.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Clickhouse"><a href="#Clickhouse" class="headerlink" title="Clickhouse"></a>Clickhouse</h2><p><a href="https://github.com/go-gorm/clickhouse">https://github.com/go-gorm/clickhouse</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;gorm.io/driver/clickhouse&quot;</span></span><br><span class="line">  <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  dsn := <span class="string">&quot;tcp://localhost:9000?database=gorm&amp;username=gorm&amp;password=gorm&amp;read_timeout=10&amp;write_timeout=20&quot;</span></span><br><span class="line">  db, err := gorm.Open(clickhouse.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Auto Migrate</span></span><br><span class="line">  db.AutoMigrate(&amp;User&#123;&#125;)</span><br><span class="line">  <span class="comment">// Set table options</span></span><br><span class="line">  db.Set(<span class="string">&quot;gorm:table_options&quot;</span>, <span class="string">&quot;ENGINE=Distributed(cluster, default, hits)&quot;</span>).AutoMigrate(&amp;User&#123;&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 插入</span></span><br><span class="line">  db.Create(&amp;user)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查询</span></span><br><span class="line">  db.Find(&amp;user, <span class="string">&quot;id = ?&quot;</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 批量插入</span></span><br><span class="line">  <span class="keyword">var</span> users = []User&#123;user1, user2, user3&#125;</span><br><span class="line">  db.Create(&amp;users)</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><p>GORM 使用 <a href="https://pkg.go.dev/database/sql">database/sql</a> 维护连接池</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">sqlDB, err := db.DB()</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetMaxIdleConns 设置空闲连接池中连接的最大数量</span></span><br><span class="line">sqlDB.SetMaxIdleConns(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetMaxOpenConns 设置打开数据库连接的最大数量。</span></span><br><span class="line">sqlDB.SetMaxOpenConns(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetConnMaxLifetime 设置了连接可复用的最大时间。</span></span><br><span class="line">sqlDB.SetConnMaxLifetime(time.Hour)</span><br></pre></td></tr></table></figure>

<p>查看 <a href="https://gorm.io/zh_CN/docs/generic_interface.html">通用接口</a> 获取详情。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := User&#123;Name: <span class="string">&quot;Jinzhu&quot;</span>, Age: <span class="number">18</span>, Birthday: time.Now()&#125;</span><br><span class="line"></span><br><span class="line">result := db.Create(&amp;user) <span class="comment">// 通过数据的指针来创建</span></span><br><span class="line"></span><br><span class="line">user.ID             <span class="comment">// 返回插入数据的主键</span></span><br><span class="line">result.Error        <span class="comment">// 返回 error</span></span><br><span class="line">result.RowsAffected <span class="comment">// 返回插入记录的条数</span></span><br></pre></td></tr></table></figure>

<h2 id="用指定的字段创建记录"><a href="#用指定的字段创建记录" class="headerlink" title="用指定的字段创建记录"></a>用指定的字段创建记录</h2><p>创建记录并更新给出的字段。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Select(<span class="string">&quot;Name&quot;</span>, <span class="string">&quot;Age&quot;</span>, <span class="string">&quot;CreatedAt&quot;</span>).Create(&amp;user)</span><br><span class="line"><span class="comment">// INSERT INTO `users` (`name`,`age`,`created_at`) VALUES (&quot;jinzhu&quot;, 18, &quot;2020-07-04 11:05:21.775&quot;)</span></span><br></pre></td></tr></table></figure>

<p>创建一个记录且一同忽略传递给略去的字段值。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Omit(<span class="string">&quot;Name&quot;</span>, <span class="string">&quot;Age&quot;</span>, <span class="string">&quot;CreatedAt&quot;</span>).Create(&amp;user)</span><br><span class="line"><span class="comment">// INSERT INTO `users` (`birthday`,`updated_at`) VALUES (&quot;2020-01-01 00:00:00.000&quot;, &quot;2020-07-04 11:05:21.775&quot;)</span></span><br></pre></td></tr></table></figure>

<h2 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h2><p>要有效地插入大量记录，请将一个 <code>slice</code> 传递给 <code>Create</code> 方法。 GORM 将生成单独一条 SQL 语句来插入所有数据，并回填主键的值，钩子方法也会被调用。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> users = []User&#123;&#123;Name: <span class="string">&quot;jinzhu1&quot;</span>&#125;, &#123;Name: <span class="string">&quot;jinzhu2&quot;</span>&#125;, &#123;Name: <span class="string">&quot;jinzhu3&quot;</span>&#125;&#125;</span><br><span class="line">db.Create(&amp;users)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, user := <span class="keyword">range</span> users &#123;</span><br><span class="line">  user.ID <span class="comment">// 1,2,3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>CreateInBatches</code> 分批创建时，你可以指定每批的数量，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var users = []User&#123;&#123;name: &quot;jinzhu_1&quot;&#125;, ...., &#123;Name: &quot;jinzhu_10000&quot;&#125;&#125;</span><br><span class="line"></span><br><span class="line">// 数量为 100</span><br><span class="line">db.CreateInBatches(users, 100)</span><br></pre></td></tr></table></figure>

<p><a href="https://gorm.io/zh_CN/docs/create.html#upsert">Upsert</a> 和 <a href="https://gorm.io/zh_CN/docs/create.html#create_with_associations">Create With Associations</a> 也支持批量插入</p>
<blockquote>
<p><strong>注意</strong> 使用 <code>CreateBatchSize</code> 选项初始化 GORM 时，所有的创建&amp; 关联 <code>INSERT</code> 都将遵循该选项</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db, err := gorm.Open(sqlite.Open(<span class="string">&quot;gorm.db&quot;</span>), &amp;gorm.Config&#123;</span><br><span class="line">  CreateBatchSize: <span class="number">1000</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">db := db.Session(&amp;gorm.Session&#123;CreateBatchSize: <span class="number">1000</span>&#125;)</span><br><span class="line"></span><br><span class="line">users = [<span class="number">5000</span>]User&#123;&#123;Name: <span class="string">&quot;jinzhu&quot;</span>, Pets: []Pet&#123;pet1, pet2, pet3&#125;&#125;...&#125;</span><br><span class="line"></span><br><span class="line">db.Create(&amp;users)</span><br><span class="line"><span class="comment">// INSERT INTO users xxx (5 batches)</span></span><br><span class="line"><span class="comment">// INSERT INTO pets xxx (15 batches)</span></span><br></pre></td></tr></table></figure>

<h2 id="创建钩子"><a href="#创建钩子" class="headerlink" title="创建钩子"></a>创建钩子</h2><p>GORM 允许用户定义的钩子有 <code>BeforeSave</code>, <code>BeforeCreate</code>, <code>AfterSave</code>, <code>AfterCreate</code> 创建记录时将调用这些钩子方法，请参考 <a href="https://gorm.io/zh_CN/docs/hooks.html">Hooks</a> 中关于生命周期的详细信息</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span> <span class="title">BeforeCreate</span><span class="params">(tx *gorm.DB)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">  u.UUID = uuid.New()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> u.Role == <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errors.New(<span class="string">&quot;invalid role&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果您想跳过 <code>钩子</code> 方法，您可以使用 <code>SkipHooks</code> 会话模式，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">DB.Session(&amp;gorm.Session&#123;SkipHooks: <span class="literal">true</span>&#125;).Create(&amp;user)</span><br><span class="line"></span><br><span class="line">DB.Session(&amp;gorm.Session&#123;SkipHooks: <span class="literal">true</span>&#125;).Create(&amp;users)</span><br><span class="line"></span><br><span class="line">DB.Session(&amp;gorm.Session&#123;SkipHooks: <span class="literal">true</span>&#125;).CreateInBatches(users, <span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<h2 id="根据-Map-创建"><a href="#根据-Map-创建" class="headerlink" title="根据 Map 创建"></a>根据 Map 创建</h2><p>GORM 支持根据 <code>map[string]interface&#123;&#125;</code> 和 <code>[]map[string]interface&#123;&#125;&#123;&#125;</code> 创建记录，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Model(&amp;User&#123;&#125;).Create(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">  <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;jinzhu&quot;</span>, <span class="string">&quot;Age&quot;</span>: <span class="number">18</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// batch insert from `[]map[string]interface&#123;&#125;&#123;&#125;`</span></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Create([]<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">  &#123;<span class="string">&quot;Name&quot;</span>: <span class="string">&quot;jinzhu_1&quot;</span>, <span class="string">&quot;Age&quot;</span>: <span class="number">18</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&quot;Name&quot;</span>: <span class="string">&quot;jinzhu_2&quot;</span>, <span class="string">&quot;Age&quot;</span>: <span class="number">20</span>&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：</strong> 根据 map 创建记录时，association 不会被调用，且主键也不会自动填充</p>
</blockquote>
<h2 id="使用-SQL-表达式、Context-Valuer-创建记录"><a href="#使用-SQL-表达式、Context-Valuer-创建记录" class="headerlink" title="使用 SQL 表达式、Context Valuer 创建记录"></a>使用 SQL 表达式、Context Valuer 创建记录</h2><p>GORM 允许使用 SQL 表达式插入数据，有两种方法实现这个目标。根据 <code>map[string]interface&#123;&#125;</code> 或 <a href="https://gorm.io/zh_CN/docs/data_types.html#gorm_valuer_interface">自定义数据类型</a> 创建，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 map 创建记录</span></span><br><span class="line">db.Model(User&#123;&#125;).Create(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">  <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;jinzhu&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Location&quot;</span>: clause.Expr&#123;SQL: <span class="string">&quot;ST_PointFromText(?)&quot;</span>, Vars: []<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;POINT(100 100)&quot;</span>&#125;&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// INSERT INTO `users` (`name`,`location`) VALUES (&quot;jinzhu&quot;,ST_PointFromText(&quot;POINT(100 100)&quot;));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过自定义类型创建记录</span></span><br><span class="line"><span class="keyword">type</span> Location <span class="keyword">struct</span> &#123;</span><br><span class="line">    X, Y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Scan 方法实现了 sql.Scanner 接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(loc *Location)</span> <span class="title">Scan</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="comment">// Scan a value into struct from database driver</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(loc Location)</span> <span class="title">GormDataType</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;geometry&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(loc Location)</span> <span class="title">GormValue</span><span class="params">(ctx context.Context, db *gorm.DB)</span> <span class="title">clause</span>.<span class="title">Expr</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> clause.Expr&#123;</span><br><span class="line">    SQL:  <span class="string">&quot;ST_PointFromText(?)&quot;</span>,</span><br><span class="line">    Vars: []<span class="keyword">interface</span>&#123;&#125;&#123;fmt.Sprintf(<span class="string">&quot;POINT(%d %d)&quot;</span>, loc.X, loc.Y)&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name     <span class="keyword">string</span></span><br><span class="line">  Location Location</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Create(&amp;User&#123;</span><br><span class="line">  Name:     <span class="string">&quot;jinzhu&quot;</span>,</span><br><span class="line">  Location: Location&#123;X: <span class="number">100</span>, Y: <span class="number">100</span>&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// INSERT INTO `users` (`name`,`location`) VALUES (&quot;jinzhu&quot;,ST_PointFromText(&quot;POINT(100 100)&quot;))</span></span><br></pre></td></tr></table></figure>

<h2 id="高级选项-1"><a href="#高级选项-1" class="headerlink" title="高级选项"></a>高级选项</h2><h3 id="关联创建"><a href="#关联创建" class="headerlink" title="关联创建"></a>关联创建</h3><p>创建关联数据时，如果关联值是非零值，这些关联会被 upsert，且它们的 <code>Hook</code> 方法也会被调用</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> CreditCard <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Number   <span class="keyword">string</span></span><br><span class="line">  UserID   <span class="keyword">uint</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name       <span class="keyword">string</span></span><br><span class="line">  CreditCard CreditCard</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Create(&amp;User&#123;</span><br><span class="line">  Name: <span class="string">&quot;jinzhu&quot;</span>,</span><br><span class="line">  CreditCard: CreditCard&#123;Number: <span class="string">&quot;411111111111&quot;</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// INSERT INTO `users` ...</span></span><br><span class="line"><span class="comment">// INSERT INTO `credit_cards` ...</span></span><br></pre></td></tr></table></figure>

<p>您也可以通过 <code>Select</code>、 <code>Omit</code> 跳过关联保存，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Omit(<span class="string">&quot;CreditCard&quot;</span>).Create(&amp;user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳过所有关联</span></span><br><span class="line">db.Omit(clause.Associations).Create(&amp;user)</span><br></pre></td></tr></table></figure>

<h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>您可以通过标签 <code>default</code> 为字段定义默认值，如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID   <span class="keyword">int64</span></span><br><span class="line">  Name <span class="keyword">string</span> <span class="string">`gorm:&quot;default:galeone&quot;`</span></span><br><span class="line">  Age  <span class="keyword">int64</span>  <span class="string">`gorm:&quot;default:18&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>插入记录到数据库时，默认值 <em>会被用于</em> 填充值为 <a href="https://tour.golang.org/basics/12">零值</a> 的字段</p>
<blockquote>
<p><strong>注意</strong> 像 <code>0</code>、<code>&#39;&#39;</code>、<code>false</code> 等零值，不会将这些字段定义的默认值保存到数据库。您需要使用指针类型或 Scanner/Valuer 来避免这个问题，例如：</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">  Age  *<span class="keyword">int</span>           <span class="string">`gorm:&quot;default:18&quot;`</span></span><br><span class="line">  Active sql.NullBool <span class="string">`gorm:&quot;default:true&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong> 若要数据库有默认、虚拟/生成的值，你必须为字段设置 <code>default</code> 标签。若要在迁移时跳过默认值定义，你可以使用 <code>default:(-)</code>，例如：</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID        <span class="keyword">string</span> <span class="string">`gorm:&quot;default:uuid_generate_v3()&quot;`</span> <span class="comment">// db func</span></span><br><span class="line">  FirstName <span class="keyword">string</span></span><br><span class="line">  LastName  <span class="keyword">string</span></span><br><span class="line">  Age       <span class="keyword">uint8</span></span><br><span class="line">  FullName  <span class="keyword">string</span> <span class="string">`gorm:&quot;-&gt;;type:GENERATED ALWAYS AS (concat(firstname,&#x27; &#x27;,lastname));default:(-);&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用虚拟/生成的值时，你可能需要禁用它的创建、更新权限，查看 <a href="https://gorm.io/zh_CN/docs/models.html#field_permission">字段级权限</a> 获取详情</p>
<h3 id="Upsert-及冲突"><a href="#Upsert-及冲突" class="headerlink" title="Upsert 及冲突"></a>Upsert 及冲突</h3><p>GORM 为不同数据库提供了兼容的 Upsert 支持</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;gorm.io/gorm/clause&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在冲突时，什么都不做</span></span><br><span class="line">db.Clauses(clause.OnConflict&#123;DoNothing: <span class="literal">true</span>&#125;).Create(&amp;user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在`id`冲突时，将列更新为默认值</span></span><br><span class="line">db.Clauses(clause.OnConflict&#123;</span><br><span class="line">  Columns:   []clause.Column&#123;&#123;Name: <span class="string">&quot;id&quot;</span>&#125;&#125;,</span><br><span class="line">  DoUpdates: clause.Assignments(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>&#125;),</span><br><span class="line">&#125;).Create(&amp;users)</span><br><span class="line"><span class="comment">// MERGE INTO &quot;users&quot; USING *** WHEN NOT MATCHED THEN INSERT *** WHEN MATCHED THEN UPDATE SET ***; SQL Server</span></span><br><span class="line"><span class="comment">// INSERT INTO `users` *** ON DUPLICATE KEY UPDATE ***; MySQL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用SQL语句</span></span><br><span class="line">db.Clauses(clause.OnConflict&#123;</span><br><span class="line">  Columns:   []clause.Column&#123;&#123;Name: <span class="string">&quot;id&quot;</span>&#125;&#125;,</span><br><span class="line">  DoUpdates: clause.Assignments(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;count&quot;</span>: gorm.Expr(<span class="string">&quot;GREATEST(count, VALUES(count))&quot;</span>)&#125;),</span><br><span class="line">&#125;).Create(&amp;users)</span><br><span class="line"><span class="comment">// INSERT INTO `users` *** ON DUPLICATE KEY UPDATE `count`=GREATEST(count, VALUES(count));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在`id`冲突时，将列更新为新值</span></span><br><span class="line">db.Clauses(clause.OnConflict&#123;</span><br><span class="line">  Columns:   []clause.Column&#123;&#123;Name: <span class="string">&quot;id&quot;</span>&#125;&#125;,</span><br><span class="line">  DoUpdates: clause.AssignmentColumns([]<span class="keyword">string</span>&#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>&#125;),</span><br><span class="line">&#125;).Create(&amp;users)</span><br><span class="line"><span class="comment">// MERGE INTO &quot;users&quot; USING *** WHEN NOT MATCHED THEN INSERT *** WHEN MATCHED THEN UPDATE SET &quot;name&quot;=&quot;excluded&quot;.&quot;name&quot;; SQL Server</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;users&quot; *** ON CONFLICT (&quot;id&quot;) DO UPDATE SET &quot;name&quot;=&quot;excluded&quot;.&quot;name&quot;, &quot;age&quot;=&quot;excluded&quot;.&quot;age&quot;; PostgreSQL</span></span><br><span class="line"><span class="comment">// INSERT INTO `users` *** ON DUPLICATE KEY UPDATE `name`=VALUES(name),`age=VALUES(age); MySQL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在冲突时，更新除主键以外的所有列到新值。</span></span><br><span class="line">db.Clauses(clause.OnConflict&#123;</span><br><span class="line">  UpdateAll: <span class="literal">true</span>,</span><br><span class="line">&#125;).Create(&amp;users)</span><br><span class="line"><span class="comment">// INSERT INTO &quot;users&quot; *** ON CONFLICT (&quot;id&quot;) DO UPDATE SET &quot;name&quot;=&quot;excluded&quot;.&quot;name&quot;, &quot;age&quot;=&quot;excluded&quot;.&quot;age&quot;, ...;</span></span><br></pre></td></tr></table></figure>

<p>您还可以查看 <a href="https://gorm.io/zh_CN/docs/advanced_query.html">高级查询</a> 中的 <code>FirstOrInit</code>、<code>FirstOrCreate</code></p>
<h2 id="检索单个对象"><a href="#检索单个对象" class="headerlink" title="检索单个对象"></a>检索单个对象</h2><p>GORM 提供了 <code>First</code>、<code>Take</code>、<code>Last</code> 方法，以便从数据库中检索单个对象。当查询数据库时它添加了 <code>LIMIT 1</code> 条件，且没有找到记录时，它会返回 <code>ErrRecordNotFound</code> 错误</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取第一条记录（主键升序）</span></span><br><span class="line">db.First(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users ORDER BY id LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一条记录，没有指定排序字段</span></span><br><span class="line">db.Take(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取最后一条记录（主键降序）</span></span><br><span class="line">db.Last(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users ORDER BY id DESC LIMIT 1;</span></span><br><span class="line"></span><br><span class="line">result := db.First(&amp;user)</span><br><span class="line">result.RowsAffected <span class="comment">// 返回找到的记录数</span></span><br><span class="line">result.Error        <span class="comment">// returns error or nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 ErrRecordNotFound 错误</span></span><br><span class="line">errors.Is(result.Error, gorm.ErrRecordNotFound)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果你想避免 <code>ErrRecordNotFound</code>错误，你可以使用 <code>Find</code>，比如 <code>db.Limit(1).Find(&amp;user)</code>，<code>Find</code>方法可以接受 struct 和 slice 的数据。</p>
</blockquote>
<p><code>First</code> 和 <code>Last</code> 会根据主键排序，分别查询第一条和最后一条记录。 只有在目标 struct 是指针或者通过 <code>db.Model()</code> 指定 model 时，该方法才有效。 此外，如果相关 model 没有定义主键，那么将按 model 的第一个字段进行排序。 例如:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user User</span><br><span class="line"><span class="keyword">var</span> users []User</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有效，因为目标 struct 是指针</span></span><br><span class="line">db.First(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM `users` ORDER BY `users`.`id` LIMIT 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有效，因为通过 `db.Model()` 指定了 model</span></span><br><span class="line">result := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;&#125;</span><br><span class="line">db.Model(&amp;User&#123;&#125;).First(&amp;result)</span><br><span class="line"><span class="comment">// SELECT * FROM `users` ORDER BY `users`.`id` LIMIT 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 无效</span></span><br><span class="line">result := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;&#125;</span><br><span class="line">db.Table(<span class="string">&quot;users&quot;</span>).First(&amp;result)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配合 Take 有效</span></span><br><span class="line">result := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;&#125;</span><br><span class="line">db.Table(<span class="string">&quot;users&quot;</span>).Take(&amp;result)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 未指定主键，会根据第一个字段排序(即：`Code`)</span></span><br><span class="line"><span class="keyword">type</span> Language <span class="keyword">struct</span> &#123;</span><br><span class="line">  Code <span class="keyword">string</span></span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line">db.First(&amp;Language&#123;&#125;)</span><br><span class="line"><span class="comment">// SELECT * FROM `languages` ORDER BY `languages`.`code` LIMIT 1</span></span><br></pre></td></tr></table></figure>

<h3 id="用主键检索"><a href="#用主键检索" class="headerlink" title="用主键检索"></a>用主键检索</h3><p>如果主键是数字类型，您可以使用 <a href="https://gorm.io/zh_CN/docs/query.html#inline_conditions">内联条件</a> 来检索对象。 传入字符串参数时，需要特别注意 SQL 注入问题，查看 <a href="https://gorm.io/zh_CN/docs/security.html">安全</a> 获取详情.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.First(&amp;user, <span class="number">10</span>)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id = 10;</span></span><br><span class="line"></span><br><span class="line">db.First(&amp;user, <span class="string">&quot;10&quot;</span>)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id = 10;</span></span><br><span class="line"></span><br><span class="line">db.Find(&amp;users, []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id IN (1,2,3);</span></span><br></pre></td></tr></table></figure>

<p>如果主键是字符串（例如像 uuid），查询将被写成这样：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.First(&amp;user, <span class="string">&quot;id = ?&quot;</span>, <span class="string">&quot;1b74413f-f3b8-409f-ac47-e8c062e3472a&quot;</span>)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id = &quot;1b74413f-f3b8-409f-ac47-e8c062e3472a&quot;;</span></span><br></pre></td></tr></table></figure>

<h2 id="检索全部对象"><a href="#检索全部对象" class="headerlink" title="检索全部对象"></a>检索全部对象</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取全部记录</span></span><br><span class="line">result := db.Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users;</span></span><br><span class="line"></span><br><span class="line">result.RowsAffected <span class="comment">// 返回找到的记录数，相当于 `len(users)`</span></span><br><span class="line">result.Error        <span class="comment">// returns error</span></span><br></pre></td></tr></table></figure>

<h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><h3 id="String-条件"><a href="#String-条件" class="headerlink" title="String 条件"></a>String 条件</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取第一条匹配的记录</span></span><br><span class="line">db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).First(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; ORDER BY id LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取全部匹配的记录</span></span><br><span class="line">db.Where(<span class="string">&quot;name &lt;&gt; ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name &lt;&gt; &#x27;jinzhu&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IN</span></span><br><span class="line">db.Where(<span class="string">&quot;name IN ?&quot;</span>, []<span class="keyword">string</span>&#123;<span class="string">&quot;jinzhu&quot;</span>, <span class="string">&quot;jinzhu 2&quot;</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name IN (&#x27;jinzhu&#x27;,&#x27;jinzhu 2&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// LIKE</span></span><br><span class="line">db.Where(<span class="string">&quot;name LIKE ?&quot;</span>, <span class="string">&quot;%jin%&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name LIKE &#x27;%jin%&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// AND</span></span><br><span class="line">db.Where(<span class="string">&quot;name = ? AND age &gt;= ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>, <span class="string">&quot;22&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; AND age &gt;= 22;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Time</span></span><br><span class="line">db.Where(<span class="string">&quot;updated_at &gt; ?&quot;</span>, lastWeek).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE updated_at &gt; &#x27;2000-01-01 00:00:00&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// BETWEEN</span></span><br><span class="line">db.Where(<span class="string">&quot;created_at BETWEEN ? AND ?&quot;</span>, lastWeek, today).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE created_at BETWEEN &#x27;2000-01-01 00:00:00&#x27; AND &#x27;2000-01-08 00:00:00&#x27;;</span></span><br></pre></td></tr></table></figure>

<h3 id="Struct-amp-Map-条件"><a href="#Struct-amp-Map-条件" class="headerlink" title="Struct &amp; Map 条件"></a>Struct &amp; Map 条件</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Struct</span></span><br><span class="line">db.Where(&amp;User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>, Age: <span class="number">20</span>&#125;).First(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &quot;jinzhu&quot; AND age = 20 ORDER BY id LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line">db.Where(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;jinzhu&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">20</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &quot;jinzhu&quot; AND age = 20;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主键切片条件</span></span><br><span class="line">db.Where([]<span class="keyword">int64</span>&#123;<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id IN (20, 21, 22);</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong> 当使用结构作为条件查询时，GORM 只会查询非零值字段。这意味着如果您的字段值为 <code>0</code>、<code>&#39;&#39;</code>、<code>false</code> 或其他 <a href="https://tour.golang.org/basics/12">零值</a>，该字段不会被用于构建查询条件，例如：</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Where(&amp;User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>, Age: <span class="number">0</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &quot;jinzhu&quot;;</span></span><br></pre></td></tr></table></figure>

<p>如果想要包含零值查询条件，你可以使用 map，其会包含所有 key-value 的查询条件，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Where(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;Name&quot;</span>: <span class="string">&quot;jinzhu&quot;</span>, <span class="string">&quot;Age&quot;</span>: <span class="number">0</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &quot;jinzhu&quot; AND age = 0;</span></span><br></pre></td></tr></table></figure>

<p>查看 <a href="https://gorm.io/zh_CN/docs/query.html#specify_search_fields">指定结构体查询字段</a> 获取详情.</p>
<h3 id="指定结构体查询字段"><a href="#指定结构体查询字段" class="headerlink" title="指定结构体查询字段"></a>指定结构体查询字段</h3><p>当使用 struct 进行查询时，你可以通过向 <code>Where()</code> 传入 struct 来指定查询条件的字段、值、表名，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Where(&amp;User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>&#125;, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;Age&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &quot;jinzhu&quot; AND age = 0;</span></span><br><span class="line"></span><br><span class="line">db.Where(&amp;User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>&#125;, <span class="string">&quot;Age&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE age = 0;</span></span><br></pre></td></tr></table></figure>

<h3 id="内联条件"><a href="#内联条件" class="headerlink" title="内联条件"></a>内联条件</h3><p>查询条件也可以被内联到 <code>First</code> 和 <code>Find</code> 之类的方法中，其用法类似于 <code>Where</code>。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据主键获取记录，如果是非整型主键</span></span><br><span class="line">db.First(&amp;user, <span class="string">&quot;id = ?&quot;</span>, <span class="string">&quot;string_primary_key&quot;</span>)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id = &#x27;string_primary_key&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Plain SQL</span></span><br><span class="line">db.Find(&amp;user, <span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &quot;jinzhu&quot;;</span></span><br><span class="line"></span><br><span class="line">db.Find(&amp;users, <span class="string">&quot;name &lt;&gt; ? AND age &gt; ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>, <span class="number">20</span>)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name &lt;&gt; &quot;jinzhu&quot; AND age &gt; 20;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Struct</span></span><br><span class="line">db.Find(&amp;users, User&#123;Age: <span class="number">20</span>&#125;)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE age = 20;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line">db.Find(&amp;users, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;age&quot;</span>: <span class="number">20</span>&#125;)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE age = 20;</span></span><br></pre></td></tr></table></figure>

<h3 id="Not-条件"><a href="#Not-条件" class="headerlink" title="Not 条件"></a>Not 条件</h3><p>构建 NOT 条件，用法与 <code>Where</code> 类似</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Not(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).First(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE NOT name = &quot;jinzhu&quot; ORDER BY id LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Not In</span></span><br><span class="line">db.Not(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: []<span class="keyword">string</span>&#123;<span class="string">&quot;jinzhu&quot;</span>, <span class="string">&quot;jinzhu 2&quot;</span>&#125;&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name NOT IN (&quot;jinzhu&quot;, &quot;jinzhu 2&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Struct</span></span><br><span class="line">db.Not(User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>, Age: <span class="number">18</span>&#125;).First(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name &lt;&gt; &quot;jinzhu&quot; AND age &lt;&gt; 18 ORDER BY id LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不在主键切片中的记录</span></span><br><span class="line">db.Not([]<span class="keyword">int64</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;).First(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id NOT IN (1,2,3) ORDER BY id LIMIT 1;</span></span><br></pre></td></tr></table></figure>

<h3 id="Or-条件"><a href="#Or-条件" class="headerlink" title="Or 条件"></a>Or 条件</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Where(<span class="string">&quot;role = ?&quot;</span>, <span class="string">&quot;admin&quot;</span>).Or(<span class="string">&quot;role = ?&quot;</span>, <span class="string">&quot;super_admin&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE role = &#x27;admin&#x27; OR role = &#x27;super_admin&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Struct</span></span><br><span class="line">db.Where(<span class="string">&quot;name = &#x27;jinzhu&#x27;&quot;</span>).Or(User&#123;Name: <span class="string">&quot;jinzhu 2&quot;</span>, Age: <span class="number">18</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; OR (name = &#x27;jinzhu 2&#x27; AND age = 18);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line">db.Where(<span class="string">&quot;name = &#x27;jinzhu&#x27;&quot;</span>).Or(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;jinzhu 2&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; OR (name = &#x27;jinzhu 2&#x27; AND age = 18);</span></span><br></pre></td></tr></table></figure>

<p>更复杂的 SQL 查询， 请查看 <a href="https://gorm.io/zh_CN/docs/advanced_query.html#group_conditions">高级查询中的组条件</a>。</p>
<h2 id="选择特定字段"><a href="#选择特定字段" class="headerlink" title="选择特定字段"></a>选择特定字段</h2><p><code>Select</code> 允许您指定从数据库中检索哪些字段， 默认情况下，GORM 会检索所有字段。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Select(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT name, age FROM users;</span></span><br><span class="line"></span><br><span class="line">db.Select([]<span class="keyword">string</span>&#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT name, age FROM users;</span></span><br><span class="line"></span><br><span class="line">db.Table(<span class="string">&quot;users&quot;</span>).Select(<span class="string">&quot;COALESCE(age,?)&quot;</span>, <span class="number">42</span>).Rows()</span><br><span class="line"><span class="comment">// SELECT COALESCE(age,&#x27;42&#x27;) FROM users;</span></span><br></pre></td></tr></table></figure>

<p>还可以看一看 <a href="https://gorm.io/zh_CN/docs/advanced_query.html#smart_select">智能选择字段</a></p>
<h2 id="Order"><a href="#Order" class="headerlink" title="Order"></a>Order</h2><p>指定从数据库检索记录时的排序方式</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Order(<span class="string">&quot;age desc, name&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users ORDER BY age desc, name;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个 order</span></span><br><span class="line">db.Order(<span class="string">&quot;age desc&quot;</span>).Order(<span class="string">&quot;name&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users ORDER BY age desc, name;</span></span><br><span class="line"></span><br><span class="line">db.Clauses(clause.OrderBy&#123;</span><br><span class="line">  Expression: clause.Expr&#123;SQL: <span class="string">&quot;FIELD(id,?)&quot;</span>, Vars: []<span class="keyword">interface</span>&#123;&#125;&#123;[]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;&#125;, WithoutParentheses: <span class="literal">true</span>&#125;,</span><br><span class="line">&#125;).Find(&amp;User&#123;&#125;)</span><br><span class="line"><span class="comment">// SELECT * FROM users ORDER BY FIELD(id,1,2,3)</span></span><br></pre></td></tr></table></figure>

<h2 id="Limit-amp-Offset"><a href="#Limit-amp-Offset" class="headerlink" title="Limit &amp; Offset"></a>Limit &amp; Offset</h2><p><code>Limit</code> 指定获取记录的最大数量 <code>Offset</code> 指定在开始返回记录之前要跳过的记录数量</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Limit(<span class="number">3</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users LIMIT 3;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 -1 消除 Limit 条件</span></span><br><span class="line">db.Limit(<span class="number">10</span>).Find(&amp;users1).Limit(<span class="number">-1</span>).Find(&amp;users2)</span><br><span class="line"><span class="comment">// SELECT * FROM users LIMIT 10; (users1)</span></span><br><span class="line"><span class="comment">// SELECT * FROM users; (users2)</span></span><br><span class="line"></span><br><span class="line">db.Offset(<span class="number">3</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users OFFSET 3;</span></span><br><span class="line"></span><br><span class="line">db.Limit(<span class="number">10</span>).Offset(<span class="number">5</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users OFFSET 5 LIMIT 10;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 -1 消除 Offset 条件</span></span><br><span class="line">db.Offset(<span class="number">10</span>).Find(&amp;users1).Offset(<span class="number">-1</span>).Find(&amp;users2)</span><br><span class="line"><span class="comment">// SELECT * FROM users OFFSET 10; (users1)</span></span><br><span class="line"><span class="comment">// SELECT * FROM users; (users2)</span></span><br></pre></td></tr></table></figure>

<p>查看 <a href="https://gorm.io/zh_CN/docs/scopes.html#pagination">Pagination</a> 学习如何写一个分页器</p>
<h2 id="Group-By-amp-Having"><a href="#Group-By-amp-Having" class="headerlink" title="Group By &amp; Having"></a>Group By &amp; Having</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> result <span class="keyword">struct</span> &#123;</span><br><span class="line">  Date  time.Time</span><br><span class="line">  Total <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Select(<span class="string">&quot;name, sum(age) as total&quot;</span>).Where(<span class="string">&quot;name LIKE ?&quot;</span>, <span class="string">&quot;group%&quot;</span>).Group(<span class="string">&quot;name&quot;</span>).First(&amp;result)</span><br><span class="line"><span class="comment">// SELECT name, sum(age) as total FROM `users` WHERE name LIKE &quot;group%&quot; GROUP BY `name` LIMIT 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Select(<span class="string">&quot;name, sum(age) as total&quot;</span>).Group(<span class="string">&quot;name&quot;</span>).Having(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;group&quot;</span>).Find(&amp;result)</span><br><span class="line"><span class="comment">// SELECT name, sum(age) as total FROM `users` GROUP BY `name` HAVING name = &quot;group&quot;</span></span><br><span class="line"></span><br><span class="line">rows, err := db.Table(<span class="string">&quot;orders&quot;</span>).Select(<span class="string">&quot;date(created_at) as date, sum(amount) as total&quot;</span>).Group(<span class="string">&quot;date(created_at)&quot;</span>).Rows()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rows, err := db.Table(<span class="string">&quot;orders&quot;</span>).Select(<span class="string">&quot;date(created_at) as date, sum(amount) as total&quot;</span>).Group(<span class="string">&quot;date(created_at)&quot;</span>).Having(<span class="string">&quot;sum(amount) &gt; ?&quot;</span>, <span class="number">100</span>).Rows()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Result <span class="keyword">struct</span> &#123;</span><br><span class="line">  Date  time.Time</span><br><span class="line">  Total <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line">db.Table(<span class="string">&quot;orders&quot;</span>).Select(<span class="string">&quot;date(created_at) as date, sum(amount) as total&quot;</span>).Group(<span class="string">&quot;date(created_at)&quot;</span>).Having(<span class="string">&quot;sum(amount) &gt; ?&quot;</span>, <span class="number">100</span>).Scan(&amp;results)</span><br></pre></td></tr></table></figure>

<h2 id="Distinct"><a href="#Distinct" class="headerlink" title="Distinct"></a>Distinct</h2><p>从模型中选择不相同的值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Distinct(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>).Order(<span class="string">&quot;name, age desc&quot;</span>).Find(&amp;results)</span><br></pre></td></tr></table></figure>

<p><code>Distinct</code> 也可以配合 <a href="https://gorm.io/zh_CN/docs/advanced_query.html#pluck"><code>Pluck</code></a>, <a href="https://gorm.io/zh_CN/docs/advanced_query.html#count"><code>Count</code></a> 使用</p>
<h2 id="Joins"><a href="#Joins" class="headerlink" title="Joins"></a>Joins</h2><p>指定 Joins 条件</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> result <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name  <span class="keyword">string</span></span><br><span class="line">  Email <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Select(<span class="string">&quot;users.name, emails.email&quot;</span>).Joins(<span class="string">&quot;left join emails on emails.user_id = users.id&quot;</span>).Scan(&amp;result&#123;&#125;)</span><br><span class="line"><span class="comment">// SELECT users.name, emails.email FROM `users` left join emails on emails.user_id = users.id</span></span><br><span class="line"></span><br><span class="line">rows, err := db.Table(<span class="string">&quot;users&quot;</span>).Select(<span class="string">&quot;users.name, emails.email&quot;</span>).Joins(<span class="string">&quot;left join emails on emails.user_id = users.id&quot;</span>).Rows()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Table(<span class="string">&quot;users&quot;</span>).Select(<span class="string">&quot;users.name, emails.email&quot;</span>).Joins(<span class="string">&quot;left join emails on emails.user_id = users.id&quot;</span>).Scan(&amp;results)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带参数的多表连接</span></span><br><span class="line">db.Joins(<span class="string">&quot;JOIN emails ON emails.user_id = users.id AND emails.email = ?&quot;</span>, <span class="string">&quot;jinzhu@example.org&quot;</span>).Joins(<span class="string">&quot;JOIN credit_cards ON credit_cards.user_id = users.id&quot;</span>).Where(<span class="string">&quot;credit_cards.number = ?&quot;</span>, <span class="string">&quot;411111111111&quot;</span>).Find(&amp;user)</span><br></pre></td></tr></table></figure>

<h3 id="Joins-预加载"><a href="#Joins-预加载" class="headerlink" title="Joins 预加载"></a>Joins 预加载</h3><p>您可以使用 <code>Joins</code> 实现单条 SQL 预加载关联记录，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Joins(<span class="string">&quot;Company&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT `users`.`id`,`users`.`name`,`users`.`age`,`Company`.`id` AS `Company__id`,`Company`.`name` AS `Company__name` FROM `users` LEFT JOIN `companies` AS `Company` ON `users`.`company_id` = `Company`.`id`;</span></span><br></pre></td></tr></table></figure>

<p>Join with conditions</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Joins(<span class="string">&quot;Company&quot;</span>, DB.Where(&amp;Company&#123;Alive: <span class="literal">true</span>&#125;)).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT `users`.`id`,`users`.`name`,`users`.`age`,`Company`.`id` AS `Company__id`,`Company`.`name` AS `Company__name` FROM `users` LEFT JOIN `companies` AS `Company` ON `users`.`company_id` = `Company`.`id` AND `Company`.`alive` = true;</span></span><br></pre></td></tr></table></figure>

<p>For more details, please refer to <a href="https://gorm.io/zh_CN/docs/preload.html">Preloading (Eager Loading)</a>.</p>
<h2 id="Scan"><a href="#Scan" class="headerlink" title="Scan"></a>Scan</h2><p>Scanning results into a struct works similarly to the way we use <code>Find</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Result <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">  Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result Result</span><br><span class="line">db.Table(<span class="string">&quot;users&quot;</span>).Select(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;Antonio&quot;</span>).Scan(&amp;result)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Raw SQL</span></span><br><span class="line">db.Raw(<span class="string">&quot;SELECT name, age FROM users WHERE name = ?&quot;</span>, <span class="string">&quot;Antonio&quot;</span>).Scan(&amp;result)</span><br></pre></td></tr></table></figure>

<h2 id="智能选择字段"><a href="#智能选择字段" class="headerlink" title="智能选择字段"></a>智能选择字段</h2><p>GORM 允许通过 <a href="https://gorm.io/zh_CN/docs/query.html"><code>Select</code></a> 方法选择特定的字段，如果您在应用程序中经常使用此功能，你也可以定义一个较小的结构体，以实现调用 API 时自动选择特定的字段，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID     <span class="keyword">uint</span></span><br><span class="line">  Name   <span class="keyword">string</span></span><br><span class="line">  Age    <span class="keyword">int</span></span><br><span class="line">  Gender <span class="keyword">string</span></span><br><span class="line">  <span class="comment">// 假设后面还有几百个字段...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> APIUser <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID   <span class="keyword">uint</span></span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询时会自动选择 `id`, `name` 字段</span></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Limit(<span class="number">10</span>).Find(&amp;APIUser&#123;&#125;)</span><br><span class="line"><span class="comment">// SELECT `id`, `name` FROM `users` LIMIT 10</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong> <code>QueryFields</code> 模式会根据当前 model 的所有字段名称进行 select。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db, err := gorm.Open(sqlite.Open(<span class="string">&quot;gorm.db&quot;</span>), &amp;gorm.Config&#123;</span><br><span class="line">  QueryFields: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">db.Find(&amp;user)</span><br><span class="line"><span class="comment">// SELECT `users`.`name`, `users`.`age`, ... FROM `users` // 带上这个选项</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Session Mode</span></span><br><span class="line">db.Session(&amp;gorm.Session&#123;QueryFields: <span class="literal">true</span>&#125;).Find(&amp;user)</span><br><span class="line"><span class="comment">// SELECT `users`.`name`, `users`.`age`, ... FROM `users`</span></span><br></pre></td></tr></table></figure>

<h2 id="Locking-FOR-UPDATE"><a href="#Locking-FOR-UPDATE" class="headerlink" title="Locking (FOR UPDATE)"></a>Locking (FOR UPDATE)</h2><p>GORM 支持多种类型的锁，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Clauses(clause.Locking&#123;Strength: <span class="string">&quot;UPDATE&quot;</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM `users` FOR UPDATE</span></span><br><span class="line"></span><br><span class="line">db.Clauses(clause.Locking&#123;</span><br><span class="line">  Strength: <span class="string">&quot;SHARE&quot;</span>,</span><br><span class="line">  Table: clause.Table&#123;Name: clause.CurrentTable&#125;,</span><br><span class="line">&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM `users` FOR SHARE OF `users`</span></span><br></pre></td></tr></table></figure>

<p>查看 原生 SQL 及构造器 获取详情</p>
<h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>子查询可以嵌套在查询中，GORM 允许在使用 <code>*gorm.DB</code> 对象作为参数时生成子查询</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Where(<span class="string">&quot;amount &gt; (?)&quot;</span>, db.Table(<span class="string">&quot;orders&quot;</span>).Select(<span class="string">&quot;AVG(amount)&quot;</span>)).Find(&amp;orders)</span><br><span class="line"><span class="comment">// SELECT * FROM &quot;orders&quot; WHERE amount &gt; (SELECT AVG(amount) FROM &quot;orders&quot;);</span></span><br><span class="line"></span><br><span class="line">subQuery := db.Select(<span class="string">&quot;AVG(age)&quot;</span>).Where(<span class="string">&quot;name LIKE ?&quot;</span>, <span class="string">&quot;name%&quot;</span>).Table(<span class="string">&quot;users&quot;</span>)</span><br><span class="line">db.Select(<span class="string">&quot;AVG(age) as avgage&quot;</span>).Group(<span class="string">&quot;name&quot;</span>).Having(<span class="string">&quot;AVG(age) &gt; (?)&quot;</span>, subQuery).Find(&amp;results)</span><br><span class="line"><span class="comment">// SELECT AVG(age) as avgage FROM `users` GROUP BY `name` HAVING AVG(age) &gt; (SELECT AVG(age) FROM `users` WHERE name LIKE &quot;name%&quot;)</span></span><br></pre></td></tr></table></figure>

<h3 id="From-子查询"><a href="#From-子查询" class="headerlink" title="From 子查询"></a>From 子查询</h3><p>GORM 允许您在 <code>Table</code> 方法中通过 FROM 子句使用子查询，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Table(<span class="string">&quot;(?) as u&quot;</span>, db.Model(&amp;User&#123;&#125;).Select(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>)).Where(<span class="string">&quot;age = ?&quot;</span>, <span class="number">18</span>&#125;).Find(&amp;User&#123;&#125;)</span><br><span class="line"><span class="comment">// SELECT * FROM (SELECT `name`,`age` FROM `users`) as u WHERE `age` = 18</span></span><br><span class="line"></span><br><span class="line">subQuery1 := db.Model(&amp;User&#123;&#125;).Select(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">subQuery2 := db.Model(&amp;Pet&#123;&#125;).Select(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">db.Table(<span class="string">&quot;(?) as u, (?) as p&quot;</span>, subQuery1, subQuery2).Find(&amp;User&#123;&#125;)</span><br><span class="line"><span class="comment">// SELECT * FROM (SELECT `name` FROM `users`) as u, (SELECT `name` FROM `pets`) as p</span></span><br></pre></td></tr></table></figure>

<h2 id="Group-条件"><a href="#Group-条件" class="headerlink" title="Group 条件"></a>Group 条件</h2><p>使用 Group 条件可以更轻松的编写复杂 SQL</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Where(</span><br><span class="line">    db.Where(<span class="string">&quot;pizza = ?&quot;</span>, <span class="string">&quot;pepperoni&quot;</span>).Where(db.Where(<span class="string">&quot;size = ?&quot;</span>, <span class="string">&quot;small&quot;</span>).Or(<span class="string">&quot;size = ?&quot;</span>, <span class="string">&quot;medium&quot;</span>)),</span><br><span class="line">).Or(</span><br><span class="line">    db.Where(<span class="string">&quot;pizza = ?&quot;</span>, <span class="string">&quot;hawaiian&quot;</span>).Where(<span class="string">&quot;size = ?&quot;</span>, <span class="string">&quot;xlarge&quot;</span>),</span><br><span class="line">).Find(&amp;Pizza&#123;&#125;).Statement</span><br><span class="line"></span><br><span class="line"><span class="comment">// SELECT * FROM `pizzas` WHERE (pizza = &quot;pepperoni&quot; AND (size = &quot;small&quot; OR size = &quot;medium&quot;)) OR (pizza = &quot;hawaiian&quot; AND size = &quot;xlarge&quot;)</span></span><br></pre></td></tr></table></figure>

<h2 id="IN-with-multiple-columns"><a href="#IN-with-multiple-columns" class="headerlink" title="IN with multiple columns"></a>IN with multiple columns</h2><p>Selecting IN with multiple columns</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Where(<span class="string">&quot;(name, age, role) IN ?&quot;</span>, [][]<span class="keyword">interface</span>&#123;&#125;&#123;&#123;<span class="string">&quot;jinzhu&quot;</span>, <span class="number">18</span>, <span class="string">&quot;admin&quot;</span>&#125;, &#123;<span class="string">&quot;jinzhu2&quot;</span>, <span class="number">19</span>, <span class="string">&quot;user&quot;</span>&#125;&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE (name, age, role) IN ((&quot;jinzhu&quot;, 18, &quot;admin&quot;), (&quot;jinzhu 2&quot;, 19, &quot;user&quot;));</span></span><br></pre></td></tr></table></figure>

<h2 id="Named-Argument"><a href="#Named-Argument" class="headerlink" title="Named Argument"></a>Named Argument</h2><p>GORM supports named arguments with <a href="https://tip.golang.org/pkg/database/sql/#NamedArg"><code>sql.NamedArg</code></a> or <code>map[string]interface&#123;&#125;&#123;&#125;</code>, for example:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Where(<span class="string">&quot;name1 = @name OR name2 = @name&quot;</span>, sql.Named(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>)).Find(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM `users` WHERE name1 = &quot;jinzhu&quot; OR name2 = &quot;jinzhu&quot;</span></span><br><span class="line"></span><br><span class="line">db.Where(<span class="string">&quot;name1 = @name OR name2 = @name&quot;</span>, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;jinzhu&quot;</span>&#125;).First(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM `users` WHERE name1 = &quot;jinzhu&quot; OR name2 = &quot;jinzhu&quot; ORDER BY `users`.`id` LIMIT 1</span></span><br></pre></td></tr></table></figure>

<p>Check out <a href="https://gorm.io/zh_CN/docs/sql_builder.html#named_argument">Raw SQL and SQL Builder</a> for more detail</p>
<h2 id="Find-To-Map"><a href="#Find-To-Map" class="headerlink" title="Find To Map"></a>Find To Map</h2><p>GORM allows scan result to <code>map[string]interface&#123;&#125;</code> or <code>[]map[string]interface&#123;&#125;</code>, don’t forget to specify <code>Model</code> or <code>Table</code>, for example:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">result := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;&#125;</span><br><span class="line">db.Model(&amp;User&#123;&#125;).First(&amp;result, <span class="string">&quot;id = ?&quot;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> results []<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">db.Table(<span class="string">&quot;users&quot;</span>).Find(&amp;results)</span><br></pre></td></tr></table></figure>

<h2 id="FirstOrInit"><a href="#FirstOrInit" class="headerlink" title="FirstOrInit"></a>FirstOrInit</h2><p>Get first matched record or initialize a new instance with given conditions (only works with struct or map conditions)</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// User not found, initialize it with give conditions</span></span><br><span class="line">db.FirstOrInit(&amp;user, User&#123;Name: <span class="string">&quot;non_existing&quot;</span>&#125;)</span><br><span class="line"><span class="comment">// user -&gt; User&#123;Name: &quot;non_existing&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Found user with `name` = `jinzhu`</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>&#125;).FirstOrInit(&amp;user)</span><br><span class="line"><span class="comment">// user -&gt; User&#123;ID: 111, Name: &quot;Jinzhu&quot;, Age: 18&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Found user with `name` = `jinzhu`</span></span><br><span class="line">db.FirstOrInit(&amp;user, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;jinzhu&quot;</span>&#125;)</span><br><span class="line"><span class="comment">// user -&gt; User&#123;ID: 111, Name: &quot;Jinzhu&quot;, Age: 18&#125;</span></span><br></pre></td></tr></table></figure>

<p>initialize struct with more attributes if record not found, those <code>Attrs</code> won’t be used to build SQL query</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// User not found, initialize it with give conditions and Attrs</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;non_existing&quot;</span>&#125;).Attrs(User&#123;Age: <span class="number">20</span>&#125;).FirstOrInit(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM USERS WHERE name = &#x27;non_existing&#x27; ORDER BY id LIMIT 1;</span></span><br><span class="line"><span class="comment">// user -&gt; User&#123;Name: &quot;non_existing&quot;, Age: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// User not found, initialize it with give conditions and Attrs</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;non_existing&quot;</span>&#125;).Attrs(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>).FirstOrInit(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM USERS WHERE name = &#x27;non_existing&#x27; ORDER BY id LIMIT 1;</span></span><br><span class="line"><span class="comment">// user -&gt; User&#123;Name: &quot;non_existing&quot;, Age: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Found user with `name` = `jinzhu`, attributes will be ignored</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;Jinzhu&quot;</span>&#125;).Attrs(User&#123;Age: <span class="number">20</span>&#125;).FirstOrInit(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM USERS WHERE name = jinzhu&#x27; ORDER BY id LIMIT 1;</span></span><br><span class="line"><span class="comment">// user -&gt; User&#123;ID: 111, Name: &quot;Jinzhu&quot;, Age: 18&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>Assign</code> attributes to struct regardless it is found or not, those attributes won’t be used to build SQL query and the final data won’t be saved into database</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// User not found, initialize it with give conditions and Assign attributes</span><br><span class="line">db.Where(User&#123;Name: &quot;non_existing&quot;&#125;).Assign(User&#123;Age: 20&#125;).FirstOrInit(&amp;user)</span><br><span class="line">// user -&gt; User&#123;Name: &quot;non_existing&quot;, Age: 20&#125;</span><br><span class="line"></span><br><span class="line">// Found user with `name` = `jinzhu`, update it with Assign attributes</span><br><span class="line">db.Where(User&#123;Name: &quot;Jinzhu&quot;&#125;).Assign(User&#123;Age: 20&#125;).FirstOrInit(&amp;user)</span><br><span class="line">// SELECT * FROM USERS WHERE name = jinzhu&#x27; ORDER BY id LIMIT 1;</span><br><span class="line">// user -&gt; User&#123;ID: 111, Name: &quot;Jinzhu&quot;, Age: 20&#125;</span><br></pre></td></tr></table></figure>

<h2 id="FirstOrCreate"><a href="#FirstOrCreate" class="headerlink" title="FirstOrCreate"></a>FirstOrCreate</h2><p>Get first matched record or create a new one with given conditions (only works with struct, map conditions)</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// User not found, create a new record with give conditions</span></span><br><span class="line">db.FirstOrCreate(&amp;user, User&#123;Name: <span class="string">&quot;non_existing&quot;</span>&#125;)</span><br><span class="line"><span class="comment">// INSERT INTO &quot;users&quot; (name) VALUES (&quot;non_existing&quot;);</span></span><br><span class="line"><span class="comment">// user -&gt; User&#123;ID: 112, Name: &quot;non_existing&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Found user with `name` = `jinzhu`</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>&#125;).FirstOrCreate(&amp;user)</span><br><span class="line"><span class="comment">// user -&gt; User&#123;ID: 111, Name: &quot;jinzhu&quot;, &quot;Age&quot;: 18&#125;</span></span><br></pre></td></tr></table></figure>

<p>Create struct with more attributes if record not found, those <code>Attrs</code> won’t be used to build SQL query</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// User not found, create it with give conditions and Attrs</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;non_existing&quot;</span>&#125;).Attrs(User&#123;Age: <span class="number">20</span>&#125;).FirstOrCreate(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &#x27;non_existing&#x27; ORDER BY id LIMIT 1;</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;users&quot; (name, age) VALUES (&quot;non_existing&quot;, 20);</span></span><br><span class="line"><span class="comment">// user -&gt; User&#123;ID: 112, Name: &quot;non_existing&quot;, Age: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Found user with `name` = `jinzhu`, attributes will be ignored</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>&#125;).Attrs(User&#123;Age: <span class="number">20</span>&#125;).FirstOrCreate(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; ORDER BY id LIMIT 1;</span></span><br><span class="line"><span class="comment">// user -&gt; User&#123;ID: 111, Name: &quot;jinzhu&quot;, Age: 18&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>Assign</code> attributes to the record regardless it is found or not and save them back to the database.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// User not found, initialize it with give conditions and Assign attributes</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;non_existing&quot;</span>&#125;).Assign(User&#123;Age: <span class="number">20</span>&#125;).FirstOrCreate(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &#x27;non_existing&#x27; ORDER BY id LIMIT 1;</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;users&quot; (name, age) VALUES (&quot;non_existing&quot;, 20);</span></span><br><span class="line"><span class="comment">// user -&gt; User&#123;ID: 112, Name: &quot;non_existing&quot;, Age: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Found user with `name` = `jinzhu`, update it with Assign attributes</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>&#125;).Assign(User&#123;Age: <span class="number">20</span>&#125;).FirstOrCreate(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; ORDER BY id LIMIT 1;</span></span><br><span class="line"><span class="comment">// UPDATE users SET age=20 WHERE id = 111;</span></span><br><span class="line"><span class="comment">// user -&gt; User&#123;ID: 111, Name: &quot;jinzhu&quot;, Age: 20&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Optimizer-Index-Hints"><a href="#Optimizer-Index-Hints" class="headerlink" title="Optimizer/Index Hints"></a>Optimizer/Index Hints</h2><p>Optimizer hints allow to control the query optimizer to choose a certain query execution plan, GORM supports it with <code>gorm.io/hints</code>, e.g:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;gorm.io/hints&quot;</span></span><br><span class="line"></span><br><span class="line">db.Clauses(hints.New(<span class="string">&quot;MAX_EXECUTION_TIME(10000)&quot;</span>)).Find(&amp;User&#123;&#125;)</span><br><span class="line"><span class="comment">// SELECT * /*+ MAX_EXECUTION_TIME(10000) */ FROM `users`</span></span><br></pre></td></tr></table></figure>

<p>Index hints allow passing index hints to the database in case the query planner gets confused.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;gorm.io/hints&quot;</span></span><br><span class="line"></span><br><span class="line">db.Clauses(hints.UseIndex(<span class="string">&quot;idx_user_name&quot;</span>)).Find(&amp;User&#123;&#125;)</span><br><span class="line"><span class="comment">// SELECT * FROM `users` USE INDEX (`idx_user_name`)</span></span><br><span class="line"></span><br><span class="line">db.Clauses(hints.ForceIndex(<span class="string">&quot;idx_user_name&quot;</span>, <span class="string">&quot;idx_user_id&quot;</span>).ForJoin()).Find(&amp;User&#123;&#125;)</span><br><span class="line"><span class="comment">// SELECT * FROM `users` FORCE INDEX FOR JOIN (`idx_user_name`,`idx_user_id`)&quot;</span></span><br></pre></td></tr></table></figure>

<p>Refer <a href="https://gorm.io/zh_CN/docs/hints.html">Optimizer Hints/Index/Comment</a> for more details</p>
<h2 id="Iteration"><a href="#Iteration" class="headerlink" title="Iteration"></a>Iteration</h2><p>GORM supports iterating through Rows</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">rows, err := db.Model(&amp;User&#123;&#125;).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Rows()</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">  <span class="keyword">var</span> user User</span><br><span class="line">  <span class="comment">// ScanRows is a method of `gorm.DB`, it can be used to scan a row into a struct</span></span><br><span class="line">  db.ScanRows(rows, &amp;user)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="FindInBatches"><a href="#FindInBatches" class="headerlink" title="FindInBatches"></a>FindInBatches</h2><p>Query and process records in batch</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// batch size 100</span></span><br><span class="line">result := db.Where(<span class="string">&quot;processed = ?&quot;</span>, <span class="literal">false</span>).FindInBatches(&amp;results, <span class="number">100</span>, <span class="function"><span class="keyword">func</span><span class="params">(tx *gorm.DB, batch <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> _, result := <span class="keyword">range</span> results &#123;</span><br><span class="line">    <span class="comment">// batch processing found records</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tx.Save(&amp;results)</span><br><span class="line"></span><br><span class="line">  tx.RowsAffected <span class="comment">// number of records in this batch</span></span><br><span class="line"></span><br><span class="line">  batch <span class="comment">// Batch 1, 2, 3</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// returns error will stop future batches</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">result.Error <span class="comment">// returned error</span></span><br><span class="line">result.RowsAffected <span class="comment">// processed records count in all batches</span></span><br></pre></td></tr></table></figure>

<h2 id="Query-Hooks"><a href="#Query-Hooks" class="headerlink" title="Query Hooks"></a>Query Hooks</h2><p>GORM allows hooks <code>AfterFind</code> for a query, it will be called when querying a record, refer <a href="https://gorm.io/zh_CN/docs/hooks.html">Hooks</a> for details</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span> <span class="title">AfterFind</span><span class="params">(tx *gorm.DB)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> u.Role == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">    u.Role = <span class="string">&quot;user&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Pluck"><a href="#Pluck" class="headerlink" title="Pluck"></a>Pluck</h2><p>Query single column from database and scan into a slice, if you want to query multiple columns, use <code>Select</code> with <a href="https://gorm.io/zh_CN/docs/query.html#scan"><code>Scan</code></a> instead</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ages []<span class="keyword">int64</span></span><br><span class="line">db.Model(&amp;users).Pluck(<span class="string">&quot;age&quot;</span>, &amp;ages)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> names []<span class="keyword">string</span></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Pluck(<span class="string">&quot;name&quot;</span>, &amp;names)</span><br><span class="line"></span><br><span class="line">db.Table(<span class="string">&quot;deleted_users&quot;</span>).Pluck(<span class="string">&quot;name&quot;</span>, &amp;names)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Distinct Pluck</span></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Distinct().Pluck(<span class="string">&quot;Name&quot;</span>, &amp;names)</span><br><span class="line"><span class="comment">// SELECT DISTINCT `name` FROM `users`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Requesting more than one column, use `Scan` or `Find` like this:</span></span><br><span class="line">db.Select(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>).Scan(&amp;users)</span><br><span class="line">db.Select(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>).Find(&amp;users)</span><br></pre></td></tr></table></figure>

<h2 id="Scopes"><a href="#Scopes" class="headerlink" title="Scopes"></a>Scopes</h2><p><code>Scopes</code> allows you to specify commonly-used queries which can be referenced as method calls</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AmountGreaterThan1000</span><span class="params">(db *gorm.DB)</span> *<span class="title">gorm</span>.<span class="title">DB</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> db.Where(<span class="string">&quot;amount &gt; ?&quot;</span>, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PaidWithCreditCard</span><span class="params">(db *gorm.DB)</span> *<span class="title">gorm</span>.<span class="title">DB</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> db.Where(<span class="string">&quot;pay_mode_sign = ?&quot;</span>, <span class="string">&quot;C&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PaidWithCod</span><span class="params">(db *gorm.DB)</span> *<span class="title">gorm</span>.<span class="title">DB</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> db.Where(<span class="string">&quot;pay_mode_sign = ?&quot;</span>, <span class="string">&quot;C&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OrderStatus</span><span class="params">(status []<span class="keyword">string</span>)</span> <span class="title">func</span> <span class="params">(db *gorm.DB)</span> *<span class="title">gorm</span>.<span class="title">DB</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">func</span> <span class="params">(db *gorm.DB)</span> *<span class="title">gorm</span>.<span class="title">DB</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> db.Where(<span class="string">&quot;status IN (?)&quot;</span>, status)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Scopes(AmountGreaterThan1000, PaidWithCreditCard).Find(&amp;orders)</span><br><span class="line"><span class="comment">// Find all credit card orders and amount greater than 1000</span></span><br><span class="line"></span><br><span class="line">db.Scopes(AmountGreaterThan1000, PaidWithCod).Find(&amp;orders)</span><br><span class="line"><span class="comment">// Find all COD orders and amount greater than 1000</span></span><br><span class="line"></span><br><span class="line">db.Scopes(AmountGreaterThan1000, OrderStatus([]<span class="keyword">string</span>&#123;<span class="string">&quot;paid&quot;</span>, <span class="string">&quot;shipped&quot;</span>&#125;)).Find(&amp;orders)</span><br><span class="line"><span class="comment">// Find all paid, shipped orders that amount greater than 1000</span></span><br></pre></td></tr></table></figure>

<p>Checkout <a href="https://gorm.io/zh_CN/docs/scopes.html">Scopes</a> for details</p>
<h2 id="Count"><a href="#Count" class="headerlink" title="Count"></a>Count</h2><p>Get matched records count</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> count <span class="keyword">int64</span></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Or(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu 2&quot;</span>).Count(&amp;count)</span><br><span class="line"><span class="comment">// SELECT count(1) FROM users WHERE name = &#x27;jinzhu&#x27; OR name = &#x27;jinzhu 2&#x27;</span></span><br><span class="line"></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Count(&amp;count)</span><br><span class="line"><span class="comment">// SELECT count(1) FROM users WHERE name = &#x27;jinzhu&#x27;; (count)</span></span><br><span class="line"></span><br><span class="line">db.Table(<span class="string">&quot;deleted_users&quot;</span>).Count(&amp;count)</span><br><span class="line"><span class="comment">// SELECT count(1) FROM deleted_users;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Count with Distinct</span></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Distinct(<span class="string">&quot;name&quot;</span>).Count(&amp;count)</span><br><span class="line"><span class="comment">// SELECT COUNT(DISTINCT(`name`)) FROM `users`</span></span><br><span class="line"></span><br><span class="line">db.Table(<span class="string">&quot;deleted_users&quot;</span>).Select(<span class="string">&quot;count(distinct(name))&quot;</span>).Count(&amp;count)</span><br><span class="line"><span class="comment">// SELECT count(distinct(name)) FROM deleted_users</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Count with Group</span></span><br><span class="line">users := []User&#123;</span><br><span class="line">  &#123;Name: <span class="string">&quot;name1&quot;</span>&#125;,</span><br><span class="line">  &#123;Name: <span class="string">&quot;name2&quot;</span>&#125;,</span><br><span class="line">  &#123;Name: <span class="string">&quot;name3&quot;</span>&#125;,</span><br><span class="line">  &#123;Name: <span class="string">&quot;name3&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Group(<span class="string">&quot;name&quot;</span>).Count(&amp;count)</span><br><span class="line">count <span class="comment">// =&gt; 3</span></span><br></pre></td></tr></table></figure>

<h2 id="保存所有字段"><a href="#保存所有字段" class="headerlink" title="保存所有字段"></a>保存所有字段</h2><p><code>Save</code> 会保存所有的字段，即使字段是零值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.First(&amp;user)</span><br><span class="line"></span><br><span class="line">user.Name = <span class="string">&quot;jinzhu 2&quot;</span></span><br><span class="line">user.Age = <span class="number">100</span></span><br><span class="line">db.Save(&amp;user)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;jinzhu 2&#x27;, age=100, birthday=&#x27;2016-01-01&#x27;, updated_at = &#x27;2013-11-17 21:34:10&#x27; WHERE id=111;</span></span><br></pre></td></tr></table></figure>

<h2 id="更新单个列"><a href="#更新单个列" class="headerlink" title="更新单个列"></a>更新单个列</h2><p>当使用 <code>Update</code> 更新单个列时，你需要指定条件，否则会返回 <code>ErrMissingWhereClause</code> 错误，查看 <a href="https://gorm.io/zh_CN/docs/update.html#block_global_updates">Block Global Updates</a> 获取详情。当使用了 <code>Model</code> 方法，且该对象主键有值，该值会被用于构建条件，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 条件更新</span></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Where(<span class="string">&quot;active = ?&quot;</span>, <span class="literal">true</span>).Update(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27;, updated_at=&#x27;2013-11-17 21:34:10&#x27; WHERE active=true;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// User 的 ID 是 `111`</span></span><br><span class="line">db.Model(&amp;user).Update(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27;, updated_at=&#x27;2013-11-17 21:34:10&#x27; WHERE id=111;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据条件和 model 的值进行更新</span></span><br><span class="line">db.Model(&amp;user).Where(<span class="string">&quot;active = ?&quot;</span>, <span class="literal">true</span>).Update(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27;, updated_at=&#x27;2013-11-17 21:34:10&#x27; WHERE id=111 AND active=true;</span></span><br></pre></td></tr></table></figure>

<h2 id="更新多列"><a href="#更新多列" class="headerlink" title="更新多列"></a>更新多列</h2><p><code>Updates</code> 方法支持 <code>struct</code> 和 <code>map[string]interface&#123;&#125;</code> 参数。当使用 <code>struct</code> 更新时，默认情况下，GORM 只会更新非零值的字段</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据 `struct` 更新属性，只会更新非零值的字段</span></span><br><span class="line">db.Model(&amp;user).Updates(User&#123;Name: <span class="string">&quot;hello&quot;</span>, Age: <span class="number">18</span>, Active: <span class="literal">false</span>&#125;)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27;, age=18, updated_at = &#x27;2013-11-17 21:34:10&#x27; WHERE id = 111;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 `map` 更新属性</span></span><br><span class="line">db.Model(&amp;user).Updates(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>, <span class="string">&quot;active&quot;</span>: <span class="literal">false</span>&#125;)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27;, age=18, active=false, updated_at=&#x27;2013-11-17 21:34:10&#x27; WHERE id=111;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong> 当通过 struct 更新时，GORM 只会更新非零字段。 如果您想确保指定字段被更新，你应该使用 <code>Select</code> 更新选定字段，或使用 <code>map</code> 来完成更新操作</p>
</blockquote>
<h2 id="更新选定字段"><a href="#更新选定字段" class="headerlink" title="更新选定字段"></a>更新选定字段</h2><p>如果您想要在更新时选定、忽略某些字段，您可以使用 <code>Select</code>、<code>Omit</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 Map 进行 Select</span></span><br><span class="line"><span class="comment">// User&#x27;s ID is `111`:</span></span><br><span class="line">db.Model(&amp;user).Select(<span class="string">&quot;name&quot;</span>).Updates(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>, <span class="string">&quot;active&quot;</span>: <span class="literal">false</span>&#125;)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27; WHERE id=111;</span></span><br><span class="line"></span><br><span class="line">db.Model(&amp;user).Omit(<span class="string">&quot;name&quot;</span>).Updates(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>, <span class="string">&quot;active&quot;</span>: <span class="literal">false</span>&#125;)</span><br><span class="line"><span class="comment">// UPDATE users SET age=18, active=false, updated_at=&#x27;2013-11-17 21:34:10&#x27; WHERE id=111;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Struct 进行 Select（会 select 零值的字段）</span></span><br><span class="line">db.Model(&amp;user).Select(<span class="string">&quot;Name&quot;</span>, <span class="string">&quot;Age&quot;</span>).Updates(User&#123;Name: <span class="string">&quot;new_name&quot;</span>, Age: <span class="number">0</span>&#125;)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;new_name&#x27;, age=0 WHERE id=111;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Select 所有字段（查询包括零值字段的所有字段）</span></span><br><span class="line">db.Model(&amp;user).Select(<span class="string">&quot;*&quot;</span>).Update(User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>, Role: <span class="string">&quot;admin&quot;</span>, Age: <span class="number">0</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Select 除 Role 外的所有字段（包括零值字段的所有字段）</span></span><br><span class="line">db.Model(&amp;user).Select(<span class="string">&quot;*&quot;</span>).Omit(<span class="string">&quot;Role&quot;</span>).Update(User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>, Role: <span class="string">&quot;admin&quot;</span>, Age: <span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="更新-Hook"><a href="#更新-Hook" class="headerlink" title="更新 Hook"></a>更新 Hook</h2><p>对于更新操作，GORM 支持 <code>BeforeSave</code>、<code>BeforeUpdate</code>、<code>AfterSave</code>、<code>AfterUpdate</code> 钩子，这些方法将在更新记录时被调用，详情请参阅 <a href="https://gorm.io/zh_CN/docs/hooks.html">钩子</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span> <span class="title">BeforeUpdate</span><span class="params">(tx *gorm.DB)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> u.Role == <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errors.New(<span class="string">&quot;admin user not allowed to update&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="批量更新"><a href="#批量更新" class="headerlink" title="批量更新"></a>批量更新</h2><p>如果您尚未通过 <code>Model</code> 指定记录的主键，则 GORM 会执行批量更新</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据 struct 更新</span></span><br><span class="line">db.Model(User&#123;&#125;).Where(<span class="string">&quot;role = ?&quot;</span>, <span class="string">&quot;admin&quot;</span>).Updates(User&#123;Name: <span class="string">&quot;hello&quot;</span>, Age: <span class="number">18</span>&#125;)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27;, age=18 WHERE role = &#x27;admin&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 map 更新</span></span><br><span class="line">db.Table(<span class="string">&quot;users&quot;</span>).Where(<span class="string">&quot;id IN ?&quot;</span>, []<span class="keyword">int</span>&#123;<span class="number">10</span>, <span class="number">11</span>&#125;).Updates(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27;, age=18 WHERE id IN (10, 11);</span></span><br></pre></td></tr></table></figure>

<h3 id="阻止全局更新"><a href="#阻止全局更新" class="headerlink" title="阻止全局更新"></a>阻止全局更新</h3><p>如果在没有任何条件的情况下执行批量更新，默认情况下，GORM 不会执行该操作，并返回 <code>ErrMissingWhereClause</code> 错误</p>
<p>对此，你必须加一些条件，或者使用原生 SQL，或者启用 <code>AllowGlobalUpdate</code> 模式，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Model(&amp;User&#123;&#125;).Update(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Error <span class="comment">// gorm.ErrMissingWhereClause</span></span><br><span class="line"></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Where(<span class="string">&quot;1 = 1&quot;</span>).Update(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>)</span><br><span class="line"><span class="comment">// UPDATE users SET `name` = &quot;jinzhu&quot; WHERE 1=1</span></span><br><span class="line"></span><br><span class="line">db.Exec(<span class="string">&quot;UPDATE users SET name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>)</span><br><span class="line"><span class="comment">// UPDATE users SET name = &quot;jinzhu&quot;</span></span><br><span class="line"></span><br><span class="line">db.Session(&amp;gorm.Session&#123;AllowGlobalUpdate: <span class="literal">true</span>&#125;).Model(&amp;User&#123;&#125;).Update(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>)</span><br><span class="line"><span class="comment">// UPDATE users SET `name` = &quot;jinzhu&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="更新的记录数"><a href="#更新的记录数" class="headerlink" title="更新的记录数"></a>更新的记录数</h3><p>获取受更新影响的行数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 `RowsAffected` 得到更新的记录数</span></span><br><span class="line">result := db.Model(User&#123;&#125;).Where(<span class="string">&quot;role = ?&quot;</span>, <span class="string">&quot;admin&quot;</span>).Updates(User&#123;Name: <span class="string">&quot;hello&quot;</span>, Age: <span class="number">18</span>&#125;)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27;, age=18 WHERE role = &#x27;admin&#x27;;</span></span><br><span class="line"></span><br><span class="line">result.RowsAffected <span class="comment">// 更新的记录数</span></span><br><span class="line">result.Error        <span class="comment">// 更新的错误</span></span><br></pre></td></tr></table></figure>

<h2 id="高级选项-2"><a href="#高级选项-2" class="headerlink" title="高级选项"></a>高级选项</h2><h3 id="使用-SQL-表达式更新"><a href="#使用-SQL-表达式更新" class="headerlink" title="使用 SQL 表达式更新"></a>使用 SQL 表达式更新</h3><p>GORM 允许使用 SQL 表达式更新列，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// product 的 ID 是 `3`</span></span><br><span class="line">db.Model(&amp;product).Update(<span class="string">&quot;price&quot;</span>, gorm.Expr(<span class="string">&quot;price * ? + ?&quot;</span>, <span class="number">2</span>, <span class="number">100</span>))</span><br><span class="line"><span class="comment">// UPDATE &quot;products&quot; SET &quot;price&quot; = price * 2 + 100, &quot;updated_at&quot; = &#x27;2013-11-17 21:34:10&#x27; WHERE &quot;id&quot; = 3;</span></span><br><span class="line"></span><br><span class="line">db.Model(&amp;product).Updates(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;price&quot;</span>: gorm.Expr(<span class="string">&quot;price * ? + ?&quot;</span>, <span class="number">2</span>, <span class="number">100</span>)&#125;)</span><br><span class="line"><span class="comment">// UPDATE &quot;products&quot; SET &quot;price&quot; = price * 2 + 100, &quot;updated_at&quot; = &#x27;2013-11-17 21:34:10&#x27; WHERE &quot;id&quot; = 3;</span></span><br><span class="line"></span><br><span class="line">db.Model(&amp;product).UpdateColumn(<span class="string">&quot;quantity&quot;</span>, gorm.Expr(<span class="string">&quot;quantity - ?&quot;</span>, <span class="number">1</span>))</span><br><span class="line"><span class="comment">// UPDATE &quot;products&quot; SET &quot;quantity&quot; = quantity - 1 WHERE &quot;id&quot; = 3;</span></span><br><span class="line"></span><br><span class="line">db.Model(&amp;product).Where(<span class="string">&quot;quantity &gt; 1&quot;</span>).UpdateColumn(<span class="string">&quot;quantity&quot;</span>, gorm.Expr(<span class="string">&quot;quantity - ?&quot;</span>, <span class="number">1</span>))</span><br><span class="line"><span class="comment">// UPDATE &quot;products&quot; SET &quot;quantity&quot; = quantity - 1 WHERE &quot;id&quot; = 3 AND quantity &gt; 1;</span></span><br></pre></td></tr></table></figure>

<p>并且 GORM 也允许使用 SQL 表达式、<a href="https://gorm.io/zh_CN/docs/data_types.html#gorm_valuer_interface">自定义数据类型</a>的 Context Valuer 来更新，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据自定义数据类型创建</span></span><br><span class="line"><span class="keyword">type</span> Location <span class="keyword">struct</span> &#123;</span><br><span class="line">    X, Y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(loc Location)</span> <span class="title">GormValue</span><span class="params">(ctx context.Context, db *gorm.DB)</span> <span class="title">clause</span>.<span class="title">Expr</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> clause.Expr&#123;</span><br><span class="line">    SQL:  <span class="string">&quot;ST_PointFromText(?)&quot;</span>,</span><br><span class="line">    Vars: []<span class="keyword">interface</span>&#123;&#125;&#123;fmt.Sprintf(<span class="string">&quot;POINT(%d %d)&quot;</span>, loc.X, loc.Y)&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Model(&amp;User&#123;ID: <span class="number">1</span>&#125;).Updates(User&#123;</span><br><span class="line">  Name:  <span class="string">&quot;jinzhu&quot;</span>,</span><br><span class="line">  Location: Location&#123;X: <span class="number">100</span>, Y: <span class="number">100</span>&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// UPDATE `user_with_points` SET `name`=&quot;jinzhu&quot;,`location`=ST_PointFromText(&quot;POINT(100 100)&quot;) WHERE `id` = 1</span></span><br></pre></td></tr></table></figure>

<h3 id="根据子查询进行更新"><a href="#根据子查询进行更新" class="headerlink" title="根据子查询进行更新"></a>根据子查询进行更新</h3><p>使用子查询更新表</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Model(&amp;user).Update(<span class="string">&quot;company_name&quot;</span>, db.Model(&amp;Company&#123;&#125;).Select(<span class="string">&quot;name&quot;</span>).Where(<span class="string">&quot;companies.id = users.company_id&quot;</span>))</span><br><span class="line"><span class="comment">// UPDATE &quot;users&quot; SET &quot;company_name&quot; = (SELECT name FROM companies WHERE companies.id = users.company_id);</span></span><br><span class="line"></span><br><span class="line">db.Table(<span class="string">&quot;users as u&quot;</span>).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Update(<span class="string">&quot;company_name&quot;</span>, db.Table(<span class="string">&quot;companies as c&quot;</span>).Select(<span class="string">&quot;name&quot;</span>).Where(<span class="string">&quot;c.id = u.company_id&quot;</span>))</span><br><span class="line"></span><br><span class="line">db.Table(<span class="string">&quot;users as u&quot;</span>).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Updates(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;&#125;&#123;<span class="string">&quot;company_name&quot;</span>: db.Table(<span class="string">&quot;companies as c&quot;</span>).Select(<span class="string">&quot;name&quot;</span>).Where(<span class="string">&quot;c.id = u.company_id&quot;</span>)&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="不使用-Hook-和时间追踪"><a href="#不使用-Hook-和时间追踪" class="headerlink" title="不使用 Hook 和时间追踪"></a>不使用 Hook 和时间追踪</h3><p>如果您想在更新时跳过 <code>Hook</code> 方法且不追踪更新时间，可以使用 <code>UpdateColumn</code>、<code>UpdateColumns</code>，其用法类似于 <code>Update</code>、<code>Updates</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更新单个列</span></span><br><span class="line">db.Model(&amp;user).UpdateColumn(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27; WHERE id = 111;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新多个列</span></span><br><span class="line">db.Model(&amp;user).UpdateColumns(User&#123;Name: <span class="string">&quot;hello&quot;</span>, Age: <span class="number">18</span>&#125;)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27;, age=18 WHERE id = 111;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新选中的列</span></span><br><span class="line">db.Model(&amp;user).Select(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>).UpdateColumns(User&#123;Name: <span class="string">&quot;hello&quot;</span>, Age: <span class="number">0</span>&#125;)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27;, age=0 WHERE id = 111;</span></span><br></pre></td></tr></table></figure>

<h3 id="Returning-Data-From-Modified-Rows"><a href="#Returning-Data-From-Modified-Rows" class="headerlink" title="Returning Data From Modified Rows"></a>Returning Data From Modified Rows</h3><p>Return changed data, only works for database support Returning, for example:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// return all columns</span></span><br><span class="line"><span class="keyword">var</span> users []User</span><br><span class="line">DB.Model(&amp;users).Clauses(clause.Returning&#123;&#125;).Where(<span class="string">&quot;role = ?&quot;</span>, <span class="string">&quot;admin&quot;</span>).Update(<span class="string">&quot;salary&quot;</span>, gorm.Expr(<span class="string">&quot;salary * ?&quot;</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment">// UPDATE `users` SET `salary`=salary * 2,`updated_at`=&quot;2021-10-28 17:37:23.19&quot; WHERE role = &quot;admin&quot; RETURNING *</span></span><br><span class="line"><span class="comment">// users =&gt; []User&#123;&#123;ID: 1, Name: &quot;jinzhu&quot;, Role: &quot;admin&quot;, Salary: 100&#125;, &#123;ID: 2, Name: &quot;jinzhu.2&quot;, Role: &quot;admin&quot;, Salary: 1000&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// return specified columns</span></span><br><span class="line">DB.Model(&amp;users).Clauses(clause.Returning&#123;Columns: []clause.Column&#123;&#123;Name: <span class="string">&quot;name&quot;</span>&#125;, &#123;Name: <span class="string">&quot;salary&quot;</span>&#125;&#125;&#125;).Where(<span class="string">&quot;role = ?&quot;</span>, <span class="string">&quot;admin&quot;</span>).Update(<span class="string">&quot;salary&quot;</span>, gorm.Expr(<span class="string">&quot;salary * ?&quot;</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment">// UPDATE `users` SET `salary`=salary * 2,`updated_at`=&quot;2021-10-28 17:37:23.19&quot; WHERE role = &quot;admin&quot; RETURNING `name`, `salary`</span></span><br><span class="line"><span class="comment">// users =&gt; []User&#123;&#123;ID: 0, Name: &quot;jinzhu&quot;, Role: &quot;&quot;, Salary: 100&#125;, &#123;ID: 0, Name: &quot;jinzhu.2&quot;, Role: &quot;&quot;, Salary: 1000&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Check-Field-has-changed"><a href="#Check-Field-has-changed" class="headerlink" title="Check Field has changed?"></a>Check Field has changed?</h3><p>GORM provides <code>Changed</code> method could be used in <strong>Before Update Hooks</strong> , it will return the field changed or not</p>
<p>The <code>Changed</code> method only works with methods <code>Update</code>, <code>Updates</code>, and it only checks if the updating value from <code>Update</code> / <code>Updates</code> equals the model value, will return true if it is changed and not omitted</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span> <span class="title">BeforeUpdate</span><span class="params">(tx *gorm.DB)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">  <span class="comment">// if Role changed</span></span><br><span class="line">    <span class="keyword">if</span> tx.Statement.Changed(<span class="string">&quot;Role&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> errors.New(<span class="string">&quot;role not allowed to change&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> tx.Statement.Changed(<span class="string">&quot;Name&quot;</span>, <span class="string">&quot;Admin&quot;</span>) &#123; <span class="comment">// if Name or Role changed</span></span><br><span class="line">    tx.Statement.SetColumn(<span class="string">&quot;Age&quot;</span>, <span class="number">18</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if any fields changed</span></span><br><span class="line">    <span class="keyword">if</span> tx.Statement.Changed() &#123;</span><br><span class="line">        tx.Statement.SetColumn(<span class="string">&quot;RefreshedAt&quot;</span>, time.Now())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Model(&amp;User&#123;ID: <span class="number">1</span>, Name: <span class="string">&quot;jinzhu&quot;</span>&#125;).Updates(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;jinzhu2&quot;</span>&#125;)</span><br><span class="line"><span class="comment">// Changed(&quot;Name&quot;) =&gt; true</span></span><br><span class="line">db.Model(&amp;User&#123;ID: <span class="number">1</span>, Name: <span class="string">&quot;jinzhu&quot;</span>&#125;).Updates(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;jinzhu&quot;</span>&#125;)</span><br><span class="line"><span class="comment">// Changed(&quot;Name&quot;) =&gt; false, `Name` not changed</span></span><br><span class="line">db.Model(&amp;User&#123;ID: <span class="number">1</span>, Name: <span class="string">&quot;jinzhu&quot;</span>&#125;).Select(<span class="string">&quot;Admin&quot;</span>).Updates(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;jinzhu2&quot;</span>, <span class="string">&quot;admin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// Changed(&quot;Name&quot;) =&gt; false, `Name` not selected to update</span></span><br><span class="line"></span><br><span class="line">db.Model(&amp;User&#123;ID: <span class="number">1</span>, Name: <span class="string">&quot;jinzhu&quot;</span>&#125;).Updates(User&#123;Name: <span class="string">&quot;jinzhu2&quot;</span>&#125;)</span><br><span class="line"><span class="comment">// Changed(&quot;Name&quot;) =&gt; true</span></span><br><span class="line">db.Model(&amp;User&#123;ID: <span class="number">1</span>, Name: <span class="string">&quot;jinzhu&quot;</span>&#125;).Updates(User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>&#125;)</span><br><span class="line"><span class="comment">// Changed(&quot;Name&quot;) =&gt; false, `Name` not changed</span></span><br><span class="line">db.Model(&amp;User&#123;ID: <span class="number">1</span>, Name: <span class="string">&quot;jinzhu&quot;</span>&#125;).Select(<span class="string">&quot;Admin&quot;</span>).Updates(User&#123;Name: <span class="string">&quot;jinzhu2&quot;</span>&#125;)</span><br><span class="line"><span class="comment">// Changed(&quot;Name&quot;) =&gt; false, `Name` not selected to update</span></span><br></pre></td></tr></table></figure>

<h3 id="Change-Updating-Values"><a href="#Change-Updating-Values" class="headerlink" title="Change Updating Values"></a>Change Updating Values</h3><p>To change updating values in Before Hooks, you should use <code>SetColumn</code> unless it is a full updates with <code>Save</code>, for example:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(user *User)</span> <span class="title">BeforeSave</span><span class="params">(tx *gorm.DB)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> pw, err := bcrypt.GenerateFromPassword(user.Password, <span class="number">0</span>); err == <span class="literal">nil</span> &#123;</span><br><span class="line">    tx.Statement.SetColumn(<span class="string">&quot;EncryptedPassword&quot;</span>, pw)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> tx.Statement.Changed(<span class="string">&quot;Code&quot;</span>) &#123;</span><br><span class="line">    s.Age += <span class="number">20</span></span><br><span class="line">    tx.Statement.SetColumn(<span class="string">&quot;Age&quot;</span>, s.Age+<span class="number">20</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Model(&amp;user).Update(<span class="string">&quot;Name&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="删除一条记录"><a href="#删除一条记录" class="headerlink" title="删除一条记录"></a>删除一条记录</h2><p>删除一条记录时，删除对象需要指定主键，否则会触发 <a href="https://gorm.io/zh_CN/docs/delete.html#batch_delete">批量 Delete</a>，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Email 的 ID 是 `10`</span></span><br><span class="line">db.Delete(&amp;email)</span><br><span class="line"><span class="comment">// DELETE from emails where id = 10;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 带额外条件的删除</span></span><br><span class="line">db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Delete(&amp;email)</span><br><span class="line"><span class="comment">// DELETE from emails where id = 10 AND name = &quot;jinzhu&quot;;</span></span><br></pre></td></tr></table></figure>

<h2 id="根据主键删除"><a href="#根据主键删除" class="headerlink" title="根据主键删除"></a>根据主键删除</h2><p>GORM 允许通过主键(可以是复合主键)和内联条件来删除对象，它可以使用数字（如以下例子。也可以使用字符串——译者注）。查看 <a href="https://gorm.io/zh_CN/docs/query.html#inline_conditions">查询-内联条件（Query Inline Conditions）</a> 了解详情。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Delete(&amp;User&#123;&#125;, <span class="number">10</span>)</span><br><span class="line"><span class="comment">// DELETE FROM users WHERE id = 10;</span></span><br><span class="line"></span><br><span class="line">db.Delete(&amp;User&#123;&#125;, <span class="string">&quot;10&quot;</span>)</span><br><span class="line"><span class="comment">// DELETE FROM users WHERE id = 10;</span></span><br><span class="line"></span><br><span class="line">db.Delete(&amp;users, []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;)</span><br><span class="line"><span class="comment">// DELETE FROM users WHERE id IN (1,2,3);</span></span><br></pre></td></tr></table></figure>

<h2 id="Delete-Hook"><a href="#Delete-Hook" class="headerlink" title="Delete Hook"></a>Delete Hook</h2><p>对于删除操作，GORM 支持 <code>BeforeDelete</code>、<code>AfterDelete</code> Hook，在删除记录时会调用这些方法，查看 <a href="https://gorm.io/zh_CN/docs/hooks.html">Hook</a> 获取详情</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span> <span class="title">BeforeDelete</span><span class="params">(tx *gorm.DB)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> u.Role == <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errors.New(<span class="string">&quot;admin user not allowed to delete&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h2><p>如果指定的值不包括主属性，那么 GORM 会执行批量删除，它将删除所有匹配的记录</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Where(<span class="string">&quot;email LIKE ?&quot;</span>, <span class="string">&quot;%jinzhu%&quot;</span>).Delete(Email&#123;&#125;)</span><br><span class="line"><span class="comment">// DELETE from emails where email LIKE &quot;%jinzhu%&quot;;</span></span><br><span class="line"></span><br><span class="line">db.Delete(Email&#123;&#125;, <span class="string">&quot;email LIKE ?&quot;</span>, <span class="string">&quot;%jinzhu%&quot;</span>)</span><br><span class="line"><span class="comment">// DELETE from emails where email LIKE &quot;%jinzhu%&quot;;</span></span><br></pre></td></tr></table></figure>

<h3 id="阻止全局删除"><a href="#阻止全局删除" class="headerlink" title="阻止全局删除"></a>阻止全局删除</h3><p>如果在没有任何条件的情况下执行批量删除，GORM 不会执行该操作，并返回 <code>ErrMissingWhereClause</code> 错误</p>
<p>对此，你必须加一些条件，或者使用原生 SQL，或者启用 <code>AllowGlobalUpdate</code> 模式，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Delete(&amp;User&#123;&#125;).Error <span class="comment">// gorm.ErrMissingWhereClause</span></span><br><span class="line"></span><br><span class="line">db.Where(<span class="string">&quot;1 = 1&quot;</span>).Delete(&amp;User&#123;&#125;)</span><br><span class="line"><span class="comment">// DELETE FROM `users` WHERE 1=1</span></span><br><span class="line"></span><br><span class="line">db.Exec(<span class="string">&quot;DELETE FROM users&quot;</span>)</span><br><span class="line"><span class="comment">// DELETE FROM users</span></span><br><span class="line"></span><br><span class="line">db.Session(&amp;gorm.Session&#123;AllowGlobalUpdate: <span class="literal">true</span>&#125;).Delete(&amp;User&#123;&#125;)</span><br><span class="line"><span class="comment">// DELETE FROM users</span></span><br></pre></td></tr></table></figure>

<h3 id="从删除行返回数据"><a href="#从删除行返回数据" class="headerlink" title="从删除行返回数据"></a>从删除行返回数据</h3><p>返回删除的数据，仅适用于数据库支持返回，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// return all columns</span></span><br><span class="line"><span class="keyword">var</span> users []User</span><br><span class="line">DB.Clauses(clause.Returning&#123;&#125;).Where(<span class="string">&quot;role = ?&quot;</span>, <span class="string">&quot;admin&quot;</span>).Delete(&amp;users)</span><br><span class="line"><span class="comment">// DELETE FROM `users` WHERE role = &quot;admin&quot; RETURNING *</span></span><br><span class="line"><span class="comment">// users =&gt; []User&#123;&#123;ID: 1, Name: &quot;jinzhu&quot;, Role: &quot;admin&quot;, Salary: 100&#125;, &#123;ID: 2, Name: &quot;jinzhu.2&quot;, Role: &quot;admin&quot;, Salary: 1000&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// return specified columns</span></span><br><span class="line">DB.Clauses(clause.Returning&#123;Columns: []clause.Column&#123;&#123;Name: <span class="string">&quot;name&quot;</span>&#125;, &#123;Name: <span class="string">&quot;salary&quot;</span>&#125;&#125;&#125;).Where(<span class="string">&quot;role = ?&quot;</span>, <span class="string">&quot;admin&quot;</span>).Delete(&amp;users)</span><br><span class="line"><span class="comment">// DELETE FROM `users` WHERE role = &quot;admin&quot; RETURNING `name`, `salary`</span></span><br><span class="line"><span class="comment">// users =&gt; []User&#123;&#123;ID: 0, Name: &quot;jinzhu&quot;, Role: &quot;&quot;, Salary: 100&#125;, &#123;ID: 0, Name: &quot;jinzhu.2&quot;, Role: &quot;&quot;, Salary: 1000&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="软删除"><a href="#软删除" class="headerlink" title="软删除"></a>软删除</h2><p>如果您的模型包含一个 gorm.DeletedAt 字段（包含在 中 gorm.Model），它将自动获得软删除能力！</p>
<p>调用 时 Delete，记录不会从数据库中删除，但 GORM 会将 DeletedAt 的值设置为当前时间，并且不再使用正常的 Query 方法查找数据。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// user&#x27;s ID is `111`</span></span><br><span class="line">db.Delete(&amp;user)</span><br><span class="line"><span class="comment">// UPDATE users SET deleted_at=&quot;2013-10-29 10:23&quot; WHERE id = 111;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Batch Delete</span></span><br><span class="line">db.Where(<span class="string">&quot;age = ?&quot;</span>, <span class="number">20</span>).Delete(&amp;User&#123;&#125;)</span><br><span class="line"><span class="comment">// UPDATE users SET deleted_at=&quot;2013-10-29 10:23&quot; WHERE age = 20;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Soft deleted records will be ignored when querying</span></span><br><span class="line">db.Where(<span class="string">&quot;age = 20&quot;</span>).Find(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE age = 20 AND deleted_at IS NULL;</span></span><br></pre></td></tr></table></figure>

<p>如果您不想包含 gorm.Model，则可以启用软删除功能，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID      <span class="keyword">int</span></span><br><span class="line">  Deleted gorm.DeletedAt</span><br><span class="line">  Name    <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查找软删除记录"><a href="#查找软删除记录" class="headerlink" title="查找软删除记录"></a>查找软删除记录</h3><p>你可以找到软删除的记录 Unscoped</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Unscoped().Where(<span class="string">&quot;age = 20&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE age = 20;</span></span><br></pre></td></tr></table></figure>

<h3 id="永久删除"><a href="#永久删除" class="headerlink" title="永久删除"></a>永久删除</h3><p>您可以永久删除匹配的记录 Unscoped</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Unscoped().Delete(&amp;order)</span><br><span class="line"><span class="comment">// DELETE FROM orders WHERE id=10;</span></span><br></pre></td></tr></table></figure>

<h3 id="删除标记"><a href="#删除标记" class="headerlink" title="删除标记"></a>删除标记</h3><p>使用 unix 秒作为删除标志</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;gorm.io/plugin/soft_delete&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID        <span class="keyword">uint</span></span><br><span class="line">  Name      <span class="keyword">string</span></span><br><span class="line">  DeletedAt soft_delete.DeletedAt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Query</span></span><br><span class="line">SELECT * FROM users WHERE deleted_at = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete</span></span><br><span class="line">UPDATE users SET deleted_at = <span class="comment">/* current unix second */</span> WHERE ID = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>INFO 将唯一字段与软删除一起使用时，您应该使用基于 unix 的第二个 DeletedAt 字段创建一个复合索引，例如：</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;gorm.io/plugin/soft_delete&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">ID        <span class="keyword">uint</span></span><br><span class="line">Name      <span class="keyword">string</span>                <span class="string">`gorm:&quot;uniqueIndex:udx_name&quot;`</span></span><br><span class="line">DeletedAt soft_delete.DeletedAt <span class="string">`gorm:&quot;uniqueIndex:udx_name&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 1/0 作为删除标志</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;gorm.io/plugin/soft_delete&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID    <span class="keyword">uint</span></span><br><span class="line">  Name  <span class="keyword">string</span></span><br><span class="line">  IsDel soft_delete.DeletedAt <span class="string">`gorm:&quot;softDelete:flag&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Query</span></span><br><span class="line">SELECT * FROM users WHERE is_del = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete</span></span><br><span class="line">UPDATE users SET is_del = <span class="number">1</span> WHERE ID = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h2 id="原生-SQL"><a href="#原生-SQL" class="headerlink" title="原生 SQL"></a>原生 SQL</h2><p>原生查询 SQL 和 <code>Scan</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Result <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID   <span class="keyword">int</span></span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">  Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result Result</span><br><span class="line">db.Raw(<span class="string">&quot;SELECT id, name, age FROM users WHERE name = ?&quot;</span>, <span class="number">3</span>).Scan(&amp;result)</span><br><span class="line"></span><br><span class="line">db.Raw(<span class="string">&quot;SELECT id, name, age FROM users WHERE name = ?&quot;</span>, <span class="number">3</span>).Scan(&amp;result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age <span class="keyword">int</span></span><br><span class="line">db.Raw(<span class="string">&quot;SELECT SUM(age) FROM users WHERE role = ?&quot;</span>, <span class="string">&quot;admin&quot;</span>).Scan(&amp;age)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> users []User</span><br><span class="line">db.Raw(<span class="string">&quot;UPDATE users SET name = ? WHERE age = ? RETURNING id, name&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>, <span class="number">20</span>).Scan(&amp;users)</span><br></pre></td></tr></table></figure>

<p><code>Exec</code> 原生 SQL</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Exec(<span class="string">&quot;DROP TABLE users&quot;</span>)</span><br><span class="line">db.Exec(<span class="string">&quot;UPDATE orders SET shipped_at = ? WHERE id IN ?&quot;</span>, time.Now(), []<span class="keyword">int64</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exec with SQL Expression</span></span><br><span class="line">db.Exec(<span class="string">&quot;UPDATE users SET money = ? WHERE name = ?&quot;</span>, gorm.Expr(<span class="string">&quot;money * ? + ?&quot;</span>, <span class="number">10000</span>, <span class="number">1</span>), <span class="string">&quot;jinzhu&quot;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong> GORM 允许缓存预编译 SQL 语句来提高性能，查看 <a href="https://gorm.io/zh_CN/docs/performance.html">性能</a> 获取详情</p>
</blockquote>
<h2 id="命名参数"><a href="#命名参数" class="headerlink" title="命名参数"></a>命名参数</h2><p>GORM 支持 <a href="https://tip.golang.org/pkg/database/sql/#NamedArg"><code>sql.NamedArg</code></a>、<code>map[string]interface&#123;&#125;&#123;&#125;</code> 或 struct 形式的命名参数，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Where(<span class="string">&quot;name1 = @name OR name2 = @name&quot;</span>, sql.Named(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>)).Find(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM `users` WHERE name1 = &quot;jinzhu&quot; OR name2 = &quot;jinzhu&quot;</span></span><br><span class="line"></span><br><span class="line">db.Where(<span class="string">&quot;name1 = @name OR name2 = @name&quot;</span>, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;jinzhu2&quot;</span>&#125;).First(&amp;result3)</span><br><span class="line"><span class="comment">// SELECT * FROM `users` WHERE name1 = &quot;jinzhu2&quot; OR name2 = &quot;jinzhu2&quot; ORDER BY `users`.`id` LIMIT 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原生 SQL 及命名参数</span></span><br><span class="line">db.Raw(<span class="string">&quot;SELECT * FROM users WHERE name1 = @name OR name2 = @name2 OR name3 = @name&quot;</span>,</span><br><span class="line">   sql.Named(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jinzhu1&quot;</span>), sql.Named(<span class="string">&quot;name2&quot;</span>, <span class="string">&quot;jinzhu2&quot;</span>)).Find(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name1 = &quot;jinzhu1&quot; OR name2 = &quot;jinzhu2&quot; OR name3 = &quot;jinzhu1&quot;</span></span><br><span class="line"></span><br><span class="line">db.Exec(<span class="string">&quot;UPDATE users SET name1 = @name, name2 = @name2, name3 = @name&quot;</span>,</span><br><span class="line">   sql.Named(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jinzhunew&quot;</span>), sql.Named(<span class="string">&quot;name2&quot;</span>, <span class="string">&quot;jinzhunew2&quot;</span>))</span><br><span class="line"><span class="comment">// UPDATE users SET name1 = &quot;jinzhunew&quot;, name2 = &quot;jinzhunew2&quot;, name3 = &quot;jinzhunew&quot;</span></span><br><span class="line"></span><br><span class="line">db.Raw(<span class="string">&quot;SELECT * FROM users WHERE (name1 = @name AND name3 = @name) AND name2 = @name2&quot;</span>,</span><br><span class="line">   <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;jinzhu&quot;</span>, <span class="string">&quot;name2&quot;</span>: <span class="string">&quot;jinzhu2&quot;</span>&#125;).Find(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE (name1 = &quot;jinzhu&quot; AND name3 = &quot;jinzhu&quot;) AND name2 = &quot;jinzhu2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> NamedArgument <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Name2 <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Raw(<span class="string">&quot;SELECT * FROM users WHERE (name1 = @Name AND name3 = @Name) AND name2 = @Name2&quot;</span>,</span><br><span class="line">     NamedArgument&#123;Name: <span class="string">&quot;jinzhu&quot;</span>, Name2: <span class="string">&quot;jinzhu2&quot;</span>&#125;).Find(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE (name1 = &quot;jinzhu&quot; AND name3 = &quot;jinzhu&quot;) AND name2 = &quot;jinzhu2&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="DryRun-模式"><a href="#DryRun-模式" class="headerlink" title="DryRun 模式"></a>DryRun 模式</h2><p>Generate <code>SQL</code>及其参数不执行，可用于准备或测试生成的 SQL，Checkout <a href="https://gorm.io/zh_CN/docs/session.html">Session</a>了解详情</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">stmt := db.Session(&amp;Session&#123;DryRun: <span class="literal">true</span>&#125;).First(&amp;user, <span class="number">1</span>).Statement</span><br><span class="line">stmt.SQL.String() <span class="comment">//=&gt; SELECT * FROM `users` WHERE `id` = $1 ORDER BY `id`</span></span><br><span class="line">stmt.Vars         <span class="comment">//=&gt; []interface&#123;&#125;&#123;1&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="ToSQL"><a href="#ToSQL" class="headerlink" title="ToSQL"></a>ToSQL</h2><p>返回生成 <code>SQL</code>而不执行。</p>
<p>GORM 使用 database/sql 的参数占位符来构造 SQL 语句，会自动转义参数以避免 SQL 注入，但生成的 SQL 不提供安全保证，请仅用于调试。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">sql := DB.ToSQL(<span class="function"><span class="keyword">func</span><span class="params">(tx *gorm.DB)</span> *<span class="title">gorm</span>.<span class="title">DB</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> tx.Model(&amp;User&#123;&#125;).Where(<span class="string">&quot;id = ?&quot;</span>, <span class="number">100</span>).Limit(<span class="number">10</span>).Order(<span class="string">&quot;age desc&quot;</span>).Find(&amp;[]User&#123;&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">sql <span class="comment">//=&gt; SELECT * FROM &quot;users&quot; WHERE id = 100 AND &quot;users&quot;.&quot;deleted_at&quot; IS NULL ORDER BY age desc LIMIT 10</span></span><br></pre></td></tr></table></figure>

<h2 id="Row-amp-Rows"><a href="#Row-amp-Rows" class="headerlink" title="Row &amp; Rows"></a><code>Row</code> &amp; <code>Rows</code></h2><p>得到结果为 <code>*sql.Row</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Use GORM API build SQL</span></span><br><span class="line">row := db.Table(<span class="string">&quot;users&quot;</span>).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Select(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>).Row()</span><br><span class="line">row.Scan(&amp;name, &amp;age)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use Raw SQL</span></span><br><span class="line">row := db.Raw(<span class="string">&quot;select name, age, email from users where name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Row()</span><br><span class="line">row.Scan(&amp;name, &amp;age, &amp;email)</span><br></pre></td></tr></table></figure>

<p>得到结果为 <code>*sql.Rows</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Use GORM API build SQL</span></span><br><span class="line">rows, err := db.Model(&amp;User&#123;&#125;).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Select(<span class="string">&quot;name, age, email&quot;</span>).Rows()</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">  rows.Scan(&amp;name, &amp;age, &amp;email)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Raw SQL</span></span><br><span class="line">rows, err := db.Raw(<span class="string">&quot;select name, age, email from users where name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Rows()</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">  rows.Scan(&amp;name, &amp;age, &amp;email)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Checkout <a href="https://gorm.io/zh_CN/docs/advanced_query.html">FindInBatches</a>了解如何批量查询和处理记录 Checkout <a href="https://gorm.io/zh_CN/docs/advanced_query.html#group_conditions">Group 条件</a>，了解如何构建复杂的 SQL 查询</p>
<h2 id="扫描-sql-Rows到结构体"><a href="#扫描-sql-Rows到结构体" class="headerlink" title="扫描 *sql.Rows到结构体"></a>扫描 <code>*sql.Rows</code>到结构体</h2><p>用于 <code>ScanRows</code>将行扫描到结构中，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">rows, err := db.Model(&amp;User&#123;&#125;).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Select(<span class="string">&quot;name, age, email&quot;</span>).Rows() <span class="comment">// (*sql.Rows, error)</span></span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user User</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">  <span class="comment">// ScanRows scan a row into user</span></span><br><span class="line">  db.ScanRows(rows, &amp;user)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h2><h3 id="子句（Clause）"><a href="#子句（Clause）" class="headerlink" title="子句（Clause）"></a>子句（Clause）</h3><p>GORM 使用 SQL 生成器生成 SQL 内部，对于每个操作，GORM 创建一个 <code>*gorm.Statement</code>对象，所有的 API GORM 添加/改变 <code>Clause</code>为 <code>Statement</code>基于这些条款，最后，GORM 生成的 SQL</p>
<p>例如，当查询 with 时 <code>First</code>，它将以下子句添加到 <code>Statement</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">clause.Select&#123;Columns: <span class="string">&quot;*&quot;</span>&#125;</span><br><span class="line">clause.From&#123;Tables: clause.CurrentTable&#125;</span><br><span class="line">clause.Limit&#123;Limit: <span class="number">1</span>&#125;</span><br><span class="line">clause.OrderByColumn&#123;</span><br><span class="line">  Column: clause.Column&#123;Table: clause.CurrentTable, Name: clause.PrimaryKey&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后 GORM 构建最终在 <code>Query</code>回调中查询 SQL，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Statement.Build(<span class="string">&quot;SELECT&quot;</span>, <span class="string">&quot;FROM&quot;</span>, <span class="string">&quot;WHERE&quot;</span>, <span class="string">&quot;GROUP BY&quot;</span>, <span class="string">&quot;ORDER BY&quot;</span>, <span class="string">&quot;LIMIT&quot;</span>, <span class="string">&quot;FOR&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>其中生成 SQL：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">SELECT * FROM <span class="string">`users`</span> ORDER BY <span class="string">`users`</span>.<span class="string">`id`</span> LIMIT <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>您可以定义自己的 <code>Clause</code>并与 GORM 一起使用，它需要实现<a href="https://pkg.go.dev/gorm.io/gorm/clause?tab=doc#Interface">Interface</a></p>
<p>查看<a href="https://github.com/go-gorm/gorm/tree/master/clause">示例</a>以供参考</p>
<h3 id="子句构造器"><a href="#子句构造器" class="headerlink" title="子句构造器"></a>子句构造器</h3><p>对于不同的数据库，Clauses 可能会生成不同的 SQL，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Offset(<span class="number">10</span>).Limit(<span class="number">5</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// Generated for SQL Server</span></span><br><span class="line"><span class="comment">// SELECT * FROM &quot;users&quot; OFFSET 10 ROW FETCH NEXT 5 ROWS ONLY</span></span><br><span class="line"><span class="comment">// Generated for MySQL</span></span><br><span class="line"><span class="comment">// SELECT * FROM `users` LIMIT 5 OFFSET 10</span></span><br></pre></td></tr></table></figure>

<p>支持是因为 GORM 允许数据库驱动注册 Clause Builder 来代替默认的，以<a href="https://github.com/go-gorm/sqlserver/blob/512546241200023819d2e7f8f2f91d7fb3a52e42/sqlserver.go#L45">Limit</a>为例</p>
<h3 id="子句选项"><a href="#子句选项" class="headerlink" title="子句选项"></a>子句选项</h3><p>GORM 定义了<a href="https://github.com/go-gorm/gorm/tree/master/clause">许多子句</a>，并且一些子句提供了可用于您的应用程序的高级选项</p>
<p>虽然它们中的大多数很少使用，但如果您发现 GORM 公共 API 不能满足您的要求，可以查看它们，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Clauses(clause.Insert&#123;Modifier: <span class="string">&quot;IGNORE&quot;</span>&#125;).Create(&amp;user)</span><br><span class="line"><span class="comment">// INSERT IGNORE INTO users (name,age...) VALUES (&quot;jinzhu&quot;,18...);</span></span><br></pre></td></tr></table></figure>

<h3 id="语句修饰符"><a href="#语句修饰符" class="headerlink" title="语句修饰符"></a>语句修饰符</h3><p>GORM 提供接口<a href="https://pkg.go.dev/gorm.io/gorm?tab=doc#StatementModifier">StatementModifier</a>允许您修改语句以符合您的要求，以<a href="https://gorm.io/zh_CN/docs/hints.html">Hints</a>为例</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;gorm.io/hints&quot;</span></span><br><span class="line"></span><br><span class="line">db.Clauses(hints.New(<span class="string">&quot;hint&quot;</span>)).Find(&amp;User&#123;&#125;)</span><br><span class="line"><span class="comment">// SELECT * /*+ hint */ FROM `users`</span></span><br></pre></td></tr></table></figure>

<h2 id="Belongs-To"><a href="#Belongs-To" class="headerlink" title="Belongs To"></a>Belongs To</h2><p><code>belongs to</code> 会与另一个模型建立了一对一的连接。 这种模型的每一个实例都“属于”另一个模型的一个实例。</p>
<p>例如，您的应用包含 user 和 company，并且每个 user 能且只能被分配给一个 company。下面的类型就表示这种关系。 注意，在 <code>User</code> 对象中，有一个和 <code>Company</code> 一样的 <code>CompanyID</code>。 默认情况下， <code>CompanyID</code> 被隐含地用来在 <code>User</code> 和 <code>Company</code> 之间创建一个外键关系， 因此必须包含在 <code>User</code> 结构体中才能填充 <code>Company</code> 内部结构体。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// `User` 属于 `Company`，`CompanyID` 是外键</span><br><span class="line">type User struct &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name      string</span><br><span class="line">  CompanyID int</span><br><span class="line">  Company   Company</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Company struct &#123;</span><br><span class="line">  ID   int</span><br><span class="line">  Name string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>请参阅 <a href="https://gorm.io/zh_CN/docs/belongs_to.html#%E9%A2%84%E5%8A%A0%E8%BD%BD">预加载</a> 以了解内部结构的详细信息。</p>
<h2 id="重写外键"><a href="#重写外键" class="headerlink" title="重写外键"></a>重写外键</h2><p>要定义一个 belongs to 关系，数据库的表中必须存在外键。默认情况下，外键的名字，使用拥有者的类型名称加上表的主键的字段名字</p>
<p>例如，定义一个 User 实体属于 Company 实体，那么外键的名字一般使用 CompanyID。</p>
<p>GORM 同时提供自定义外键名字的方式，如下例所示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type User struct &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name         string</span><br><span class="line">  CompanyRefer int</span><br><span class="line">  Company      Company `gorm:&quot;foreignKey:CompanyRefer&quot;`</span><br><span class="line">  // 使用 CompanyRefer 作为外键</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Company struct &#123;</span><br><span class="line">  ID   int</span><br><span class="line">  Name string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="重写引用"><a href="#重写引用" class="headerlink" title="重写引用"></a>重写引用</h2><p>对于 belongs to 关系，GORM 通常使用数据库表，主表（拥有者）的主键值作为外键参考。 正如上面的例子，我们使用主表 Company 中的主键字段 ID 作为外键的参考值。</p>
<p>如果在 Company 实体中设置了 User 实体，那么 GORM 会自动把 Company 中的 ID 属性保存到 User 的 CompanyID 属性中。</p>
<p>同样的，您也可以使用标签 <code>references</code> 来更改它，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type User struct &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name      string</span><br><span class="line">  CompanyID string</span><br><span class="line">  Company   Company `gorm:&quot;references:Code&quot;` // 使用 Code 作为引用</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Company struct &#123;</span><br><span class="line">  ID   int</span><br><span class="line">  Code string</span><br><span class="line">  Name string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Belongs-to-的-CRUD"><a href="#Belongs-to-的-CRUD" class="headerlink" title="Belongs to 的 CRUD"></a>Belongs to 的 CRUD</h2><p>点击 <a href="https://gorm.io/zh_CN/docs/associations.html#Association-Mode">关联模式</a> 链接获取 belongs to 相关的用法</p>
<h2 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h2><p>GORM 允许通过使用 <code>Preload</code>或者 <code>Joins</code>来主动加载实体的关联关系，具体内容请参考，<a href="https://gorm.io/zh_CN/docs/preload.html">预加载（主动加载）</a></p>
<h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><p>你可以通过 <code>OnUpdate</code>, <code>OnDelete</code>配置标签来增加关联关系的级联操作，如下面的例子，通过 GORM 可以完成用户和公司的级联更新和级联删除操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type User struct &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name      string</span><br><span class="line">  CompanyID int</span><br><span class="line">  Company   Company `gorm:&quot;constraint:OnUpdate:CASCADE,OnDelete:SET NULL;&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Company struct &#123;</span><br><span class="line">  ID   int</span><br><span class="line">  Name string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Has-Many"><a href="#Has-Many" class="headerlink" title="Has Many"></a>Has Many</h2><p><code>has many</code> 与另一个模型建立了一对多的连接。 不同于 <code>has one</code>，拥有者可以有零或多个关联模型。</p>
<p>例如，您的应用包含 user 和 credit card 模型，且每个 user 可以有多张 credit card。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// User 有多张 CreditCard，UserID 是外键</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  CreditCards []CreditCard</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreditCard <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Number <span class="keyword">string</span></span><br><span class="line">  UserID <span class="keyword">uint</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="重写外键-1"><a href="#重写外键-1" class="headerlink" title="重写外键"></a>重写外键</h2><p>要定义 <code>has many</code> 关系，同样必须存在外键。 默认的外键名是拥有者的类型名加上其主键字段名</p>
<p>例如，要定义一个属于 <code>User</code> 的模型，则其外键应该是 <code>UserID</code>。</p>
<p>此外，想要使用另一个字段作为外键，您可以使用 <code>foreignKey</code> 标签自定义它：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  CreditCards []CreditCard <span class="string">`gorm:&quot;foreignKey:UserRefer&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreditCard <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Number    <span class="keyword">string</span></span><br><span class="line">  UserRefer <span class="keyword">uint</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="重写引用-1"><a href="#重写引用-1" class="headerlink" title="重写引用"></a>重写引用</h2><p>GORM 通常使用拥有者的主键作为外键的值。 对于上面的例子，它是 <code>User</code> 的 <code>ID</code> 字段。</p>
<p>为 user 添加 credit card 时，GORM 会将 user 的 <code>ID</code> 字段保存到 credit card 的 <code>UserID</code> 字段。</p>
<p>同样的，您也可以使用标签 <code>references</code> 来更改它，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  MemberNumber <span class="keyword">string</span></span><br><span class="line">  CreditCards  []CreditCard <span class="string">`gorm:&quot;foreignKey:UserNumber;references:MemberNumber&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreditCard <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Number     <span class="keyword">string</span></span><br><span class="line">  UserNumber <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多态关联"><a href="#多态关联" class="headerlink" title="多态关联"></a>多态关联</h2><p>GORM 为 <code>has one</code> 和 <code>has many</code> 提供了多态关联支持，它会将拥有者实体的表名、主键都保存到多态类型的字段中。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID   <span class="keyword">int</span></span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">  Toys []Toy <span class="string">`gorm:&quot;polymorphic:Owner;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Toy <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID        <span class="keyword">int</span></span><br><span class="line">  Name      <span class="keyword">string</span></span><br><span class="line">  OwnerID   <span class="keyword">int</span></span><br><span class="line">  OwnerType <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Create(&amp;Dog&#123;Name: <span class="string">&quot;dog1&quot;</span>, Toys: []Toy&#123;&#123;Name: <span class="string">&quot;toy1&quot;</span>&#125;, &#123;Name: <span class="string">&quot;toy2&quot;</span>&#125;&#125;&#125;)</span><br><span class="line"><span class="comment">// INSERT INTO `dogs` (`name`) VALUES (&quot;dog1&quot;)</span></span><br><span class="line"><span class="comment">// INSERT INTO `toys` (`name`,`owner_id`,`owner_type`) VALUES (&quot;toy1&quot;,&quot;1&quot;,&quot;dogs&quot;), (&quot;toy2&quot;,&quot;1&quot;,&quot;dogs&quot;)</span></span><br></pre></td></tr></table></figure>

<p>您可以使用标签 <code>polymorphicValue</code> 来更改多态类型的值，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID   <span class="keyword">int</span></span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">  Toys []Toy <span class="string">`gorm:&quot;polymorphic:Owner;polymorphicValue:master&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Toy <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID        <span class="keyword">int</span></span><br><span class="line">  Name      <span class="keyword">string</span></span><br><span class="line">  OwnerID   <span class="keyword">int</span></span><br><span class="line">  OwnerType <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Create(&amp;Dog&#123;Name: <span class="string">&quot;dog1&quot;</span>, Toys: []Toy&#123;&#123;Name: <span class="string">&quot;toy1&quot;</span>&#125;, &#123;Name: <span class="string">&quot;toy2&quot;</span>&#125;&#125;&#125;)</span><br><span class="line"><span class="comment">// INSERT INTO `dogs` (`name`) VALUES (&quot;dog1&quot;)</span></span><br><span class="line"><span class="comment">// INSERT INTO `toys` (`name`,`owner_id`,`owner_type`) VALUES (&quot;toy1&quot;,&quot;1&quot;,&quot;master&quot;), (&quot;toy2&quot;,&quot;1&quot;,&quot;master&quot;)</span></span><br></pre></td></tr></table></figure>

<h2 id="Has-Many-的-CURD"><a href="#Has-Many-的-CURD" class="headerlink" title="Has Many 的 CURD"></a>Has Many 的 CURD</h2><p>查看 <a href="https://gorm.io/zh_CN/docs/associations.html#Association-Mode">关联模式</a> 获取 has many 相关的用法</p>
<h2 id="预加载-1"><a href="#预加载-1" class="headerlink" title="预加载"></a>预加载</h2><p>GORM 可以通过 <code>Preload</code> 预加载 has many 关联的记录，查看 <a href="https://gorm.io/zh_CN/docs/preload.html">预加载</a> 获取详情</p>
<h2 id="自引用-Has-Many"><a href="#自引用-Has-Many" class="headerlink" title="自引用 Has Many"></a>自引用 Has Many</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name      <span class="keyword">string</span></span><br><span class="line">  ManagerID *<span class="keyword">uint</span></span><br><span class="line">  Team      []User <span class="string">`gorm:&quot;foreignkey:ManagerID&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="外键约束-1"><a href="#外键约束-1" class="headerlink" title="外键约束"></a>外键约束</h2><p>你可以通过为标签 <code>constraint</code> 配置 <code>OnUpdate</code>、<code>OnDelete</code> 实现外键约束，在使用 GORM 进行迁移时它会被创建，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  CreditCards []CreditCard <span class="string">`gorm:&quot;constraint:OnUpdate:CASCADE,OnDelete:SET NULL;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreditCard <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Number <span class="keyword">string</span></span><br><span class="line">  UserID <span class="keyword">uint</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你也可以在删除记录时通过 <code>Select</code> 来删除 has many 关联的记录，查看 <a href="https://gorm.io/zh_CN/docs/associations.html#delete_with_select">Delete with Select</a> 获取详情</p>
<h2 id="Has-One"><a href="#Has-One" class="headerlink" title="Has One"></a>Has One</h2><p><code>has one</code> 与另一个模型建立一对一的关联，但它和一对一关系有些许不同。 这种关联表明一个模型的每个实例都包含或拥有另一个模型的一个实例。</p>
<p>例如，您的应用包含 user 和 credit card 模型，且每个 user 只能有一张 credit card。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// User 有一张 CreditCard，UserID 是外键</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  CreditCard CreditCard</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreditCard <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Number <span class="keyword">string</span></span><br><span class="line">  UserID <span class="keyword">uint</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="重写外键-2"><a href="#重写外键-2" class="headerlink" title="重写外键"></a>重写外键</h2><p>对于 <code>has one</code> 关系，同样必须存在外键字段。拥有者将把属于它的模型的主键保存到这个字段。</p>
<p>这个字段的名称通常由 <code>has one</code> 模型的类型加上其 <code>主键</code> 生成，对于上面的例子，它是 <code>UserID</code>。</p>
<p>为 user 添加 credit card 时，它会将 user 的 <code>ID</code> 保存到自己的 <code>UserID</code> 字段。</p>
<p>如果你想要使用另一个字段来保存该关系，你同样可以使用标签 <code>foreignKey</code> 来更改它，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  CreditCard CreditCard <span class="string">`gorm:&quot;foreignKey:UserName&quot;`</span></span><br><span class="line">  <span class="comment">// 使用 UserName 作为外键</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreditCard <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Number   <span class="keyword">string</span></span><br><span class="line">  UserName <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="重写引用-2"><a href="#重写引用-2" class="headerlink" title="重写引用"></a>重写引用</h2><p>默认情况下，拥有者实体会将 <code>has one</code> 对应模型的主键保存为外键，您也可以修改它，用另一个字段来保存，例如下个这个使用 <code>Name</code> 来保存的例子。</p>
<p>您可以使用标签 <code>references</code> 来更改它，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name       <span class="keyword">string</span>     <span class="string">`gorm:&quot;index&quot;`</span></span><br><span class="line">  CreditCard CreditCard <span class="string">`gorm:&quot;foreignkey:UserName;references:name&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreditCard <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Number   <span class="keyword">string</span></span><br><span class="line">  UserName <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多态关联-1"><a href="#多态关联-1" class="headerlink" title="多态关联"></a>多态关联</h2><p>GORM 为 <code>has one</code> 和 <code>has many</code> 提供了多态关联支持，它会将拥有者实体的表名、主键值都保存到多态类型的字段中。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID    <span class="keyword">int</span></span><br><span class="line">  Name  <span class="keyword">string</span></span><br><span class="line">  Toy   Toy <span class="string">`gorm:&quot;polymorphic:Owner;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID   <span class="keyword">int</span></span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">  Toy  Toy <span class="string">`gorm:&quot;polymorphic:Owner;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Toy <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID        <span class="keyword">int</span></span><br><span class="line">  Name      <span class="keyword">string</span></span><br><span class="line">  OwnerID   <span class="keyword">int</span></span><br><span class="line">  OwnerType <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Create(&amp;Dog&#123;Name: <span class="string">&quot;dog1&quot;</span>, Toy: Toy&#123;Name: <span class="string">&quot;toy1&quot;</span>&#125;&#125;)</span><br><span class="line"><span class="comment">// INSERT INTO `dogs` (`name`) VALUES (&quot;dog1&quot;)</span></span><br><span class="line"><span class="comment">// INSERT INTO `toys` (`name`,`owner_id`,`owner_type`) VALUES (&quot;toy1&quot;,&quot;1&quot;,&quot;dogs&quot;)</span></span><br></pre></td></tr></table></figure>

<p>您可以使用标签 <code>polymorphicValue</code> 来更改多态类型的值，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID   <span class="keyword">int</span></span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">  Toy  Toy <span class="string">`gorm:&quot;polymorphic:Owner;polymorphicValue:master&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Toy <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID        <span class="keyword">int</span></span><br><span class="line">  Name      <span class="keyword">string</span></span><br><span class="line">  OwnerID   <span class="keyword">int</span></span><br><span class="line">  OwnerType <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Create(&amp;Dog&#123;Name: <span class="string">&quot;dog1&quot;</span>, Toy: Toy&#123;Name: <span class="string">&quot;toy1&quot;</span>&#125;&#125;)</span><br><span class="line"><span class="comment">// INSERT INTO `dogs` (`name`) VALUES (&quot;dog1&quot;)</span></span><br><span class="line"><span class="comment">// INSERT INTO `toys` (`name`,`owner_id`,`owner_type`) VALUES (&quot;toy1&quot;,&quot;1&quot;,&quot;master&quot;)</span></span><br></pre></td></tr></table></figure>

<h2 id="Has-One-的-CURD"><a href="#Has-One-的-CURD" class="headerlink" title="Has One 的 CURD"></a>Has One 的 CURD</h2><p>查看 <a href="https://gorm.io/zh_CN/docs/associations.html#Association-Mode">关联模式</a> 获取 <code>has one</code> 相关的用法</p>
<h2 id="预加载-2"><a href="#预加载-2" class="headerlink" title="预加载"></a>预加载</h2><p>GORM 可以通过 <code>Preload</code>、<code>Joins</code> 预加载 <code>has one</code> 关联的记录，查看 <a href="https://gorm.io/zh_CN/docs/preload.html">预加载</a> 获取详情</p>
<h2 id="自引用-Has-One"><a href="#自引用-Has-One" class="headerlink" title="自引用 Has One"></a>自引用 Has One</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name      <span class="keyword">string</span></span><br><span class="line">  ManagerID *<span class="keyword">uint</span></span><br><span class="line">  Manager   *User</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="外键约束-2"><a href="#外键约束-2" class="headerlink" title="外键约束"></a>外键约束</h2><p>你可以通过为标签 <code>constraint</code> 配置 <code>OnUpdate</code>、<code>OnDelete</code> 实现外键约束，在使用 GORM 进行迁移时它会被创建，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  CreditCard CreditCard <span class="string">`gorm:&quot;constraint:OnUpdate:CASCADE,OnDelete:SET NULL;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreditCard <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Number <span class="keyword">string</span></span><br><span class="line">  UserID <span class="keyword">uint</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你也可以在删除记录时通过 <code>Select</code> 来删除关联的记录，查看 <a href="https://gorm.io/zh_CN/docs/associations.html#delete_with_select">Delete with Select</a> 获取详情</p>
<h2 id="Many-To-Many"><a href="#Many-To-Many" class="headerlink" title="Many To Many"></a>Many To Many</h2><p>Many to Many 会在两个 model 中添加一张连接表。</p>
<p>例如，您的应用包含了 user 和 language，且一个 user 可以说多种 language，多个 user 也可以说一种 language。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// User 拥有并属于多种 language，`user_languages` 是连接表</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Languages []Language <span class="string">`gorm:&quot;many2many:user_languages;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Language <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当使用 GORM 的 <code>AutoMigrate</code> 为 <code>User</code> 创建表时，GORM 会自动创建连接表</p>
<h2 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// User 拥有并属于多种 language，`user_languages` 是连接表</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Languages []*Language <span class="string">`gorm:&quot;many2many:user_languages;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Language <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">  Users []*User <span class="string">`gorm:&quot;many2many:user_languages;&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="重写外键-3"><a href="#重写外键-3" class="headerlink" title="重写外键"></a>重写外键</h2><p>对于 <code>many2many</code> 关系，连接表会同时拥有两个模型的外键，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Languages []Language <span class="string">`gorm:&quot;many2many:user_languages;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Language <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Join Table: user_languages</span></span><br><span class="line"><span class="comment">//   foreign key: user_id, reference: users.id</span></span><br><span class="line"><span class="comment">//   foreign key: language_id, reference: languages.id</span></span><br></pre></td></tr></table></figure>

<p>若要重写它们，可以使用标签 <code>foreignKey</code>、<code>references</code>、<code>joinforeignKey</code>、<code>joinReferences</code>。当然，您不需要使用全部的标签，你可以仅使用其中的一个重写部分的外键、引用。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    gorm.Model</span><br><span class="line">    Profiles []Profile <span class="string">`gorm:&quot;many2many:user_profiles;foreignKey:Refer;joinForeignKey:UserReferID;References:UserRefer;joinReferences:ProfileRefer&quot;`</span></span><br><span class="line">    Refer    <span class="keyword">uint</span>      <span class="string">`gorm:&quot;index:,unique&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Profile <span class="keyword">struct</span> &#123;</span><br><span class="line">    gorm.Model</span><br><span class="line">    Name      <span class="keyword">string</span></span><br><span class="line">    UserRefer <span class="keyword">uint</span> <span class="string">`gorm:&quot;index:,unique&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Which creates join table: user_profiles</span></span><br><span class="line"><span class="comment">//   foreign key: user_refer_id, reference: users.refer</span></span><br><span class="line"><span class="comment">//   foreign key: profile_refer, reference: profiles.user_refer</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：</strong> 某些数据库只允许在唯一索引字段上创建外键，如果您在迁移时会创建外键，则需要指定 <code>unique index</code> 标签。</p>
</blockquote>
<h2 id="自引用-Many2Many"><a href="#自引用-Many2Many" class="headerlink" title="自引用 Many2Many"></a>自引用 Many2Many</h2><p>自引用 many2many 关系</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">    Friends []*User <span class="string">`gorm:&quot;many2many:user_friends&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会创建连接表：user_friends</span></span><br><span class="line"><span class="comment">//   foreign key: user_id, reference: users.id</span></span><br><span class="line"><span class="comment">//   foreign key: friend_id, reference: users.id</span></span><br></pre></td></tr></table></figure>

<h2 id="预加载-3"><a href="#预加载-3" class="headerlink" title="预加载"></a>预加载</h2><p>GORM 可以通过 <code>Preload</code> 预加载 has many 关联的记录，查看 <a href="https://gorm.io/zh_CN/docs/preload.html">预加载</a> 获取详情</p>
<h2 id="Many2Many-的-CURD"><a href="#Many2Many-的-CURD" class="headerlink" title="Many2Many 的 CURD"></a>Many2Many 的 CURD</h2><p>查看 <a href="https://gorm.io/zh_CN/docs/associations.html#Association-Mode">关联模式</a> 获取 many2many 相关的用法</p>
<h2 id="自定义连接表"><a href="#自定义连接表" class="headerlink" title="自定义连接表"></a>自定义连接表</h2><p><code>连接表</code> 可以是一个全功能的模型，支持 <code>Soft Delete</code>、<code>钩子</code>、更多的字段，就跟其它模型一样。您可以通过 <code>SetupJoinTable</code> 指定它，例如：</p>
<blockquote>
<p><strong>注意：</strong> 自定义连接表要求外键是复合主键或复合唯一索引</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID        <span class="keyword">int</span></span><br><span class="line">  Name      <span class="keyword">string</span></span><br><span class="line">  Addresses []Address <span class="string">`gorm:&quot;many2many:person_addresses;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Address <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID   <span class="keyword">uint</span></span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PersonAddress <span class="keyword">struct</span> &#123;</span><br><span class="line">  PersonID  <span class="keyword">int</span> <span class="string">`gorm:&quot;primaryKey&quot;`</span></span><br><span class="line">  AddressID <span class="keyword">int</span> <span class="string">`gorm:&quot;primaryKey&quot;`</span></span><br><span class="line">  CreatedAt time.Time</span><br><span class="line">  DeletedAt gorm.DeletedAt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(PersonAddress)</span> <span class="title">BeforeCreate</span><span class="params">(db *gorm.DB)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改 Person 的 Addresses 字段的连接表为 PersonAddress</span></span><br><span class="line"><span class="comment">// PersonAddress 必须定义好所需的外键，否则会报错</span></span><br><span class="line">err := db.SetupJoinTable(&amp;Person&#123;&#125;, <span class="string">&quot;Addresses&quot;</span>, &amp;PersonAddress&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="外键约束-3"><a href="#外键约束-3" class="headerlink" title="外键约束"></a>外键约束</h2><p>你可以通过为标签 <code>constraint</code> 配置 <code>OnUpdate</code>、<code>OnDelete</code> 实现外键约束，在使用 GORM 进行迁移时它会被创建，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Languages []Language <span class="string">`gorm:&quot;many2many:user_speaks;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Language <span class="keyword">struct</span> &#123;</span><br><span class="line">  Code <span class="keyword">string</span> <span class="string">`gorm:&quot;primarykey&quot;`</span></span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CREATE TABLE `user_speaks` (`user_id` integer,`language_code` text,PRIMARY KEY (`user_id`,`language_code`),CONSTRAINT `fk_user_speaks_user` FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON DELETE SET NULL ON UPDATE CASCADE,CONSTRAINT `fk_user_speaks_language` FOREIGN KEY (`language_code`) REFERENCES `languages`(`code`) ON DELETE SET NULL ON UPDATE CASCADE);</span></span><br></pre></td></tr></table></figure>

<p>你也可以在删除记录时通过 <code>Select</code> 来删除 many2many 关系的记录，查看 <a href="https://gorm.io/zh_CN/docs/associations.html#delete_with_select">Delete with Select</a> 获取详情</p>
<h2 id="复合外键"><a href="#复合外键" class="headerlink" title="复合外键"></a>复合外键</h2><p>如果您的模型使用了 <a href="https://gorm.io/zh_CN/docs/composite_primary_key.html">复合主键</a>，GORM 会默认启用复合外键。</p>
<p>您也可以覆盖默认的外键、指定多个外键，只需用逗号分隔那些键名，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Tag <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID     <span class="keyword">uint</span>   <span class="string">`gorm:&quot;primaryKey&quot;`</span></span><br><span class="line">  Locale <span class="keyword">string</span> <span class="string">`gorm:&quot;primaryKey&quot;`</span></span><br><span class="line">  Value  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Blog <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID         <span class="keyword">uint</span>   <span class="string">`gorm:&quot;primaryKey&quot;`</span></span><br><span class="line">  Locale     <span class="keyword">string</span> <span class="string">`gorm:&quot;primaryKey&quot;`</span></span><br><span class="line">  Subject    <span class="keyword">string</span></span><br><span class="line">  Body       <span class="keyword">string</span></span><br><span class="line">  Tags       []Tag <span class="string">`gorm:&quot;many2many:blog_tags;&quot;`</span></span><br><span class="line">  LocaleTags []Tag <span class="string">`gorm:&quot;many2many:locale_blog_tags;ForeignKey:id,locale;References:id&quot;`</span></span><br><span class="line">  SharedTags []Tag <span class="string">`gorm:&quot;many2many:shared_blog_tags;ForeignKey:id;References:id&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接表：blog_tags</span></span><br><span class="line"><span class="comment">//   foreign key: blog_id, reference: blogs.id</span></span><br><span class="line"><span class="comment">//   foreign key: blog_locale, reference: blogs.locale</span></span><br><span class="line"><span class="comment">//   foreign key: tag_id, reference: tags.id</span></span><br><span class="line"><span class="comment">//   foreign key: tag_locale, reference: tags.locale</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接表：locale_blog_tags</span></span><br><span class="line"><span class="comment">//   foreign key: blog_id, reference: blogs.id</span></span><br><span class="line"><span class="comment">//   foreign key: blog_locale, reference: blogs.locale</span></span><br><span class="line"><span class="comment">//   foreign key: tag_id, reference: tags.id</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接表：shared_blog_tags</span></span><br><span class="line"><span class="comment">//   foreign key: blog_id, reference: blogs.id</span></span><br><span class="line"><span class="comment">//   foreign key: tag_id, reference: tags.id</span></span><br></pre></td></tr></table></figure>

<p>查看 <a href="https://gorm.io/zh_CN/docs/composite_primary_key.html">复合主键</a> 获取详情</p>
<h2 id="自动创建、更新"><a href="#自动创建、更新" class="headerlink" title="自动创建、更新"></a>自动创建、更新</h2><p>在创建、更新记录时，GORM 会通过 <a href="https://gorm.io/zh_CN/docs/create.html#upsert">Upsert</a> 自动保存关联及其引用记录。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := User&#123;</span><br><span class="line">  Name:            <span class="string">&quot;jinzhu&quot;</span>,</span><br><span class="line">  BillingAddress:  Address&#123;Address1: <span class="string">&quot;Billing Address - Address 1&quot;</span>&#125;,</span><br><span class="line">  ShippingAddress: Address&#123;Address1: <span class="string">&quot;Shipping Address - Address 1&quot;</span>&#125;,</span><br><span class="line">  Emails:          []Email&#123;</span><br><span class="line">    &#123;Email: <span class="string">&quot;jinzhu@example.com&quot;</span>&#125;,</span><br><span class="line">    &#123;Email: <span class="string">&quot;jinzhu-2@example.com&quot;</span>&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  Languages:       []Language&#123;</span><br><span class="line">    &#123;Name: <span class="string">&quot;ZH&quot;</span>&#125;,</span><br><span class="line">    &#123;Name: <span class="string">&quot;EN&quot;</span>&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Create(&amp;user)</span><br><span class="line"><span class="comment">// BEGIN TRANSACTION;</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;addresses&quot; (address1) VALUES (&quot;Billing Address - Address 1&quot;), (&quot;Shipping Address - Address 1&quot;) ON DUPLICATE KEY DO NOTHING;</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;users&quot; (name,billing_address_id,shipping_address_id) VALUES (&quot;jinzhu&quot;, 1, 2);</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;emails&quot; (user_id,email) VALUES (111, &quot;jinzhu@example.com&quot;), (111, &quot;jinzhu-2@example.com&quot;) ON DUPLICATE KEY DO NOTHING;</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;languages&quot; (&quot;name&quot;) VALUES (&#x27;ZH&#x27;), (&#x27;EN&#x27;) ON DUPLICATE KEY DO NOTHING;</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;user_languages&quot; (&quot;user_id&quot;,&quot;language_id&quot;) VALUES (111, 1), (111, 2) ON DUPLICATE KEY DO NOTHING;</span></span><br><span class="line"><span class="comment">// COMMIT;</span></span><br><span class="line"></span><br><span class="line">db.Save(&amp;user)</span><br></pre></td></tr></table></figure>

<p>如果您想要更新关联的数据，您应该使用 <code>FullSaveAssociations</code> 模式：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Session(&amp;gorm.Session&#123;FullSaveAssociations: <span class="literal">true</span>&#125;).Updates(&amp;user)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;addresses&quot; (address1) VALUES (&quot;Billing Address - Address 1&quot;), (&quot;Shipping Address - Address 1&quot;) ON DUPLICATE KEY SET address1=VALUES(address1);</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;users&quot; (name,billing_address_id,shipping_address_id) VALUES (&quot;jinzhu&quot;, 1, 2);</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;emails&quot; (user_id,email) VALUES (111, &quot;jinzhu@example.com&quot;), (111, &quot;jinzhu-2@example.com&quot;) ON DUPLICATE KEY SET email=VALUES(email);</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<h2 id="跳过自动创建、更新"><a href="#跳过自动创建、更新" class="headerlink" title="跳过自动创建、更新"></a>跳过自动创建、更新</h2><p>若要在创建、更新时跳过自动保存，您可以使用 <code>Select</code> 或 <code>Omit</code>，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := User&#123;</span><br><span class="line">  Name:            <span class="string">&quot;jinzhu&quot;</span>,</span><br><span class="line">  BillingAddress:  Address&#123;Address1: <span class="string">&quot;Billing Address - Address 1&quot;</span>&#125;,</span><br><span class="line">  ShippingAddress: Address&#123;Address1: <span class="string">&quot;Shipping Address - Address 1&quot;</span>&#125;,</span><br><span class="line">  Emails:          []Email&#123;</span><br><span class="line">    &#123;Email: <span class="string">&quot;jinzhu@example.com&quot;</span>&#125;,</span><br><span class="line">    &#123;Email: <span class="string">&quot;jinzhu-2@example.com&quot;</span>&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  Languages:       []Language&#123;</span><br><span class="line">    &#123;Name: <span class="string">&quot;ZH&quot;</span>&#125;,</span><br><span class="line">    &#123;Name: <span class="string">&quot;EN&quot;</span>&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Select(<span class="string">&quot;Name&quot;</span>).Create(&amp;user)</span><br><span class="line"><span class="comment">// INSERT INTO &quot;users&quot; (name) VALUES (&quot;jinzhu&quot;, 1, 2);</span></span><br><span class="line"></span><br><span class="line">db.Omit(<span class="string">&quot;BillingAddress&quot;</span>).Create(&amp;user)</span><br><span class="line"><span class="comment">// Skip create BillingAddress when creating a user</span></span><br><span class="line"></span><br><span class="line">db.Omit(clause.Associations).Create(&amp;user)</span><br><span class="line"><span class="comment">// Skip all associations when creating a user</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>NOTE:</strong> 对于 many2many 关联，GORM 在创建连接表引用之前，会先 upsert 关联。如果你想跳过关联的 upsert，你可以这样做：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Omit(<span class="string">&quot;Languages.*&quot;</span>).Create(&amp;user)</span><br></pre></td></tr></table></figure>

<p>下面的代码将跳过创建关联及其引用</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Omit(<span class="string">&quot;Languages&quot;</span>).Create(&amp;user)</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="Select-Omit-关联字段"><a href="#Select-Omit-关联字段" class="headerlink" title="Select/Omit 关联字段"></a>Select/Omit 关联字段</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := User&#123;</span><br><span class="line">  Name:            <span class="string">&quot;jinzhu&quot;</span>,</span><br><span class="line">  BillingAddress:  Address&#123;Address1: <span class="string">&quot;Billing Address - Address 1&quot;</span>, Address2: <span class="string">&quot;addr2&quot;</span>&#125;,</span><br><span class="line">  ShippingAddress: Address&#123;Address1: <span class="string">&quot;Shipping Address - Address 1&quot;</span>, Address2: <span class="string">&quot;addr2&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 user 及其 BillingAddress、ShippingAddress</span></span><br><span class="line"><span class="comment">// 在创建 BillingAddress 时，仅使用其 address1、address2 字段，忽略其它字段</span></span><br><span class="line">db.Select(<span class="string">&quot;BillingAddress.Address1&quot;</span>, <span class="string">&quot;BillingAddress.Address2&quot;</span>).Create(&amp;user)</span><br><span class="line"></span><br><span class="line">db.Omit(<span class="string">&quot;BillingAddress.Address2&quot;</span>, <span class="string">&quot;BillingAddress.CreatedAt&quot;</span>).Create(&amp;user)</span><br></pre></td></tr></table></figure>

<h2 id="关联模式"><a href="#关联模式" class="headerlink" title="关联模式"></a>关联模式</h2><p>关联模式包含一些在处理关系时有用的方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开始关联模式</span></span><br><span class="line"><span class="keyword">var</span> user User</span><br><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>)</span><br><span class="line"><span class="comment">// `user` 是源模型，它的主键不能为空</span></span><br><span class="line"><span class="comment">// 关系的字段名是 `Languages`</span></span><br><span class="line"><span class="comment">// 如果匹配了上面两个要求，会开始关联模式，否则会返回错误</span></span><br><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Error</span><br></pre></td></tr></table></figure>

<h3 id="查找关联"><a href="#查找关联" class="headerlink" title="查找关联"></a>查找关联</h3><p>查找所有匹配的关联记录</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Find(&amp;languages)</span><br></pre></td></tr></table></figure>

<p>查找带条件的关联</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">codes := []<span class="keyword">string</span>&#123;<span class="string">&quot;zh-CN&quot;</span>, <span class="string">&quot;en-US&quot;</span>, <span class="string">&quot;ja-JP&quot;</span>&#125;</span><br><span class="line">db.Model(&amp;user).Where(<span class="string">&quot;code IN ?&quot;</span>, codes).Association(<span class="string">&quot;Languages&quot;</span>).Find(&amp;languages)</span><br><span class="line"></span><br><span class="line">db.Model(&amp;user).Where(<span class="string">&quot;code IN ?&quot;</span>, codes).Order(<span class="string">&quot;code desc&quot;</span>).Association(<span class="string">&quot;Languages&quot;</span>).Find(&amp;languages)</span><br></pre></td></tr></table></figure>

<h3 id="添加关联"><a href="#添加关联" class="headerlink" title="添加关联"></a>添加关联</h3><p>为 <code>many to many</code>、<code>has many</code> 添加新的关联；为 <code>has one</code>, <code>belongs to</code> 替换当前的关联</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Append([]Language&#123;languageZH, languageEN&#125;)</span><br><span class="line"></span><br><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Append(&amp;Language&#123;Name: <span class="string">&quot;DE&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;CreditCard&quot;</span>).Append(&amp;CreditCard&#123;Number: <span class="string">&quot;411111111111&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="替换关联"><a href="#替换关联" class="headerlink" title="替换关联"></a>替换关联</h3><p>用一个新的关联替换当前的关联</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Replace([]Language&#123;languageZH, languageEN&#125;)</span><br><span class="line"></span><br><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Replace(Language&#123;Name: <span class="string">&quot;DE&quot;</span>&#125;, languageEN)</span><br></pre></td></tr></table></figure>

<h3 id="删除关联"><a href="#删除关联" class="headerlink" title="删除关联"></a>删除关联</h3><p>如果存在，则删除源模型与参数之间的关系，只会删除引用，不会从数据库中删除这些对象。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Delete([]Language&#123;languageZH, languageEN&#125;)</span><br><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Delete(languageZH, languageEN)</span><br></pre></td></tr></table></figure>

<h3 id="清空关联"><a href="#清空关联" class="headerlink" title="清空关联"></a>清空关联</h3><p>删除源模型与关联之间的所有引用，但不会删除这些关联</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Clear()</span><br></pre></td></tr></table></figure>

<h3 id="关联计数"><a href="#关联计数" class="headerlink" title="关联计数"></a>关联计数</h3><p>返回当前关联的计数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Count()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件计数</span></span><br><span class="line">codes := []<span class="keyword">string</span>&#123;<span class="string">&quot;zh-CN&quot;</span>, <span class="string">&quot;en-US&quot;</span>, <span class="string">&quot;ja-JP&quot;</span>&#125;</span><br><span class="line">db.Model(&amp;user).Where(<span class="string">&quot;code IN ?&quot;</span>, codes).Association(<span class="string">&quot;Languages&quot;</span>).Count()</span><br></pre></td></tr></table></figure>

<h3 id="批量处理数据"><a href="#批量处理数据" class="headerlink" title="批量处理数据"></a>批量处理数据</h3><p>关联模式也支持批量处理，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询所有用户的所有角色</span></span><br><span class="line">db.Model(&amp;users).Association(<span class="string">&quot;Role&quot;</span>).Find(&amp;roles)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从所有 team 中删除 user A</span></span><br><span class="line">db.Model(&amp;users).Association(<span class="string">&quot;Team&quot;</span>).Delete(&amp;userA)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取去重的用户所属 team 数量</span></span><br><span class="line">db.Model(&amp;users).Association(<span class="string">&quot;Team&quot;</span>).Count()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于批量数据的 `Append`、`Replace`，参数的长度必须与数据的长度相同，否则会返回 error</span></span><br><span class="line"><span class="keyword">var</span> users = []User&#123;user1, user2, user3&#125;</span><br><span class="line"><span class="comment">// 例如：现在有三个 user，Append userA 到 user1 的 team，Append userB 到 user2 的 team，Append userA、userB 和 userC 到 user3 的 team</span></span><br><span class="line">db.Model(&amp;users).Association(<span class="string">&quot;Team&quot;</span>).Append(&amp;userA, &amp;userB, &amp;[]User&#123;userA, userB, userC&#125;)</span><br><span class="line"><span class="comment">// 重置 user1 team 为 userA，重置 user2 的 team 为 userB，重置 user3 的 team 为 userA、 userB 和 userC</span></span><br><span class="line">db.Model(&amp;users).Association(<span class="string">&quot;Team&quot;</span>).Replace(&amp;userA, &amp;userB, &amp;[]User&#123;userA, userB, userC&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="带-Select-的删除"><a href="#带-Select-的删除" class="headerlink" title="带 Select 的删除"></a>带 Select 的删除</h2><p>你可以在删除记录时通过 <code>Select</code> 来删除具有 has one、has many、many2many 关系的记录，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除 user 时，也删除 user 的 account</span></span><br><span class="line">db.Select(<span class="string">&quot;Account&quot;</span>).Delete(&amp;user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 user 时，也删除 user 的 Orders、CreditCards 记录</span></span><br><span class="line">db.Select(<span class="string">&quot;Orders&quot;</span>, <span class="string">&quot;CreditCards&quot;</span>).Delete(&amp;user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 user 时，也删除用户所有 has one/many、many2many 记录</span></span><br><span class="line">db.Select(clause.Associations).Delete(&amp;user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 users 时，也删除每一个 user 的 account</span></span><br><span class="line">db.Select(<span class="string">&quot;Account&quot;</span>).Delete(&amp;users)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：</strong> 只有当记录的主键不为空时，关联才会被删除，GORM 会使用这些主键作为条件来删除关联记录</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DOESN&#x27;T WORK</span></span><br><span class="line">db.Select(<span class="string">&quot;Account&quot;</span>).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Delete(&amp;User&#123;&#125;)</span><br><span class="line"><span class="comment">// 会删除所有 name=`jinzhu` 的 user，但这些 user 的 account 不会被删除</span></span><br><span class="line"></span><br><span class="line">db.Select(<span class="string">&quot;Account&quot;</span>).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Delete(&amp;User&#123;ID: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="comment">// 会删除 name = `jinzhu` 且 id = `1` 的 user，并且 user `1` 的 account 也会被删除</span></span><br><span class="line"></span><br><span class="line">db.Select(<span class="string">&quot;Account&quot;</span>).Delete(&amp;User&#123;ID: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="comment">// 会删除 id = `1` 的 user，并且 user `1` 的 account 也会被删除</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="关联标签-1"><a href="#关联标签-1" class="headerlink" title="关联标签"></a>关联标签</h2><table>
<thead>
<tr>
<th align="left">标签</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">foreignKey</td>
<td align="left">指定当前模型的列作为连接表的外键</td>
</tr>
<tr>
<td align="left">references</td>
<td align="left">指定引用表的列名，其将被映射为连接表外键</td>
</tr>
<tr>
<td align="left">polymorphic</td>
<td align="left">指定多态类型，比如模型名</td>
</tr>
<tr>
<td align="left">polymorphicValue</td>
<td align="left">指定多态值、默认表名</td>
</tr>
<tr>
<td align="left">many2many</td>
<td align="left">指定连接表表名</td>
</tr>
<tr>
<td align="left">joinForeignKey</td>
<td align="left">指定连接表的外键列名，其将被映射到当前表</td>
</tr>
<tr>
<td align="left">joinReferences</td>
<td align="left">指定连接表的外键列名，其将被映射到引用表</td>
</tr>
<tr>
<td align="left">constraint</td>
<td align="left">关系约束，例如：<code>OnUpdate</code>、<code>OnDelete</code></td>
</tr>
</tbody></table>
<h2 id="预加载-4"><a href="#预加载-4" class="headerlink" title="预加载"></a>预加载</h2><p>GORM 允许在 <code>Preload</code> 的其它 SQL 中直接加载关系，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Username <span class="keyword">string</span></span><br><span class="line">  Orders   []Order</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Order <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  UserID <span class="keyword">uint</span></span><br><span class="line">  Price  <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找 user 时预加载相关 Order</span></span><br><span class="line">db.Preload(<span class="string">&quot;Orders&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users;</span></span><br><span class="line"><span class="comment">// SELECT * FROM orders WHERE user_id IN (1,2,3,4);</span></span><br><span class="line"></span><br><span class="line">db.Preload(<span class="string">&quot;Orders&quot;</span>).Preload(<span class="string">&quot;Profile&quot;</span>).Preload(<span class="string">&quot;Role&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users;</span></span><br><span class="line"><span class="comment">// SELECT * FROM orders WHERE user_id IN (1,2,3,4); // has many</span></span><br><span class="line"><span class="comment">// SELECT * FROM profiles WHERE user_id IN (1,2,3,4); // has one</span></span><br><span class="line"><span class="comment">// SELECT * FROM roles WHERE id IN (4,5,6); // belongs to</span></span><br></pre></td></tr></table></figure>

<h2 id="Joins-预加载-1"><a href="#Joins-预加载-1" class="headerlink" title="Joins 预加载"></a>Joins 预加载</h2><p><code>Preload</code> 在一个单独查询中加载关联数据。而 <code>Join Preload</code> 会使用 inner join 加载关联数据，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Joins(<span class="string">&quot;Company&quot;</span>).Joins(<span class="string">&quot;Manager&quot;</span>).Joins(<span class="string">&quot;Account&quot;</span>).First(&amp;user, <span class="number">1</span>)</span><br><span class="line">db.Joins(<span class="string">&quot;Company&quot;</span>).Joins(<span class="string">&quot;Manager&quot;</span>).Joins(<span class="string">&quot;Account&quot;</span>).First(&amp;user, <span class="string">&quot;users.name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>)</span><br><span class="line">db.Joins(<span class="string">&quot;Company&quot;</span>).Joins(<span class="string">&quot;Manager&quot;</span>).Joins(<span class="string">&quot;Account&quot;</span>).Find(&amp;users, <span class="string">&quot;users.id IN ?&quot;</span>, []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>Join with conditions</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Joins(<span class="string">&quot;Company&quot;</span>, DB.Where(&amp;Company&#123;Alive: <span class="literal">true</span>&#125;)).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT `users`.`id`,`users`.`name`,`users`.`age`,`Company`.`id` AS `Company__id`,`Company`.`name` AS `Company__name` FROM `users` LEFT JOIN `companies` AS `Company` ON `users`.`company_id` = `Company`.`id` AND `Company`.`alive` = true;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注：</strong> <code>Join Preload</code>作品有一个一对一的关系，如：<code>has one</code>，<code>belongs to</code></p>
</blockquote>
<h2 id="预加载全部"><a href="#预加载全部" class="headerlink" title="预加载全部"></a>预加载全部</h2><p><code>clause.Associations</code>可以在创建/更新时使用 <code>Preload</code>类似的方法 <code>Select</code>，您可以将它用于 <code>Preload</code>所有关联，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name       <span class="keyword">string</span></span><br><span class="line">  CompanyID  <span class="keyword">uint</span></span><br><span class="line">  Company    Company</span><br><span class="line">  Role       Role</span><br><span class="line">  Orders     []Order</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Preload(clause.Associations).Find(&amp;users)</span><br></pre></td></tr></table></figure>

<p><code>clause.Associations</code>不会预加载嵌套关联，但您可以将它与<a href="https://gorm.io/zh_CN/docs/preload.html#nested_preloading">嵌套预加载</a>一起使用，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Preload(<span class="string">&quot;Orders.OrderItems.Product&quot;</span>).Preload(clause.Associations).Find(&amp;users)</span><br></pre></td></tr></table></figure>

<h2 id="带条件的预加载"><a href="#带条件的预加载" class="headerlink" title="带条件的预加载"></a>带条件的预加载</h2><p>GORM 允许预加载与条件的关联，它的工作原理类似于<a href="https://gorm.io/zh_CN/docs/query.html#inline_conditions">内联条件</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Preload Orders with conditions</span></span><br><span class="line">db.Preload(<span class="string">&quot;Orders&quot;</span>, <span class="string">&quot;state NOT IN (?)&quot;</span>, <span class="string">&quot;cancelled&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users;</span></span><br><span class="line"><span class="comment">// SELECT * FROM orders WHERE user_id IN (1,2,3,4) AND state NOT IN (&#x27;cancelled&#x27;);</span></span><br><span class="line"></span><br><span class="line">db.Where(<span class="string">&quot;state = ?&quot;</span>, <span class="string">&quot;active&quot;</span>).Preload(<span class="string">&quot;Orders&quot;</span>, <span class="string">&quot;state NOT IN (?)&quot;</span>, <span class="string">&quot;cancelled&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE state = &#x27;active&#x27;;</span></span><br><span class="line"><span class="comment">// SELECT * FROM orders WHERE user_id IN (1,2) AND state NOT IN (&#x27;cancelled&#x27;);</span></span><br></pre></td></tr></table></figure>

<h2 id="自定义预加载-SQL"><a href="#自定义预加载-SQL" class="headerlink" title="自定义预加载 SQL"></a>自定义预加载 SQL</h2><p>您可以通过传入自定义预加载 SQL <code>func(db *gorm.DB) *gorm.DB</code>，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Preload(<span class="string">&quot;Orders&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(db *gorm.DB)</span> *<span class="title">gorm</span>.<span class="title">DB</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> db.Order(<span class="string">&quot;orders.amount DESC&quot;</span>)</span><br><span class="line">&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users;</span></span><br><span class="line"><span class="comment">// SELECT * FROM orders WHERE user_id IN (1,2,3,4) order by orders.amount DESC;</span></span><br></pre></td></tr></table></figure>

<h2 id="嵌套预加载"><a href="#嵌套预加载" class="headerlink" title="嵌套预加载"></a>嵌套预加载</h2><p>GORM 支持嵌套预加载，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Preload(<span class="string">&quot;Orders.OrderItems.Product&quot;</span>).Preload(<span class="string">&quot;CreditCard&quot;</span>).Find(&amp;users)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Customize Preload conditions for `Orders`</span></span><br><span class="line"><span class="comment">// And GORM won&#x27;t preload unmatched order&#x27;s OrderItems then</span></span><br><span class="line">db.Preload(<span class="string">&quot;Orders&quot;</span>, <span class="string">&quot;state = ?&quot;</span>, <span class="string">&quot;paid&quot;</span>).Preload(<span class="string">&quot;Orders.OrderItems&quot;</span>).Find(&amp;users)</span><br></pre></td></tr></table></figure>

<p>GORM 通过 <code>WithContext</code> 方法提供了 Context 支持</p>
<h2 id="单会话模式"><a href="#单会话模式" class="headerlink" title="单会话模式"></a>单会话模式</h2><p>单会话模式通常被用于执行单次操作</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.WithContext(ctx).Find(&amp;users)</span><br></pre></td></tr></table></figure>

<h2 id="持续会话模式"><a href="#持续会话模式" class="headerlink" title="持续会话模式"></a>持续会话模式</h2><p>持续会话模式通常被用于执行一系列操作，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">tx := db.WithContext(ctx)</span><br><span class="line">tx.First(&amp;user, <span class="number">1</span>)</span><br><span class="line">tx.Model(&amp;user).Update(<span class="string">&quot;role&quot;</span>, <span class="string">&quot;admin&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="在-Hooks-Callbacks-中使用-Context"><a href="#在-Hooks-Callbacks-中使用-Context" class="headerlink" title="在 Hooks/Callbacks 中使用 Context"></a>在 Hooks/Callbacks 中使用 Context</h2><p>您可以从当前 <code>Statement</code>中访问 <code>Context</code> 对象，例如︰</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span> <span class="title">BeforeCreate</span><span class="params">(tx *gorm.DB)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">  ctx := tx.Statement.Context</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Chi-中间件示例"><a href="#Chi-中间件示例" class="headerlink" title="Chi 中间件示例"></a>Chi 中间件示例</h2><p>在处理 API 请求时持续会话模式会比较有用。例如，您可以在中间件中为 <code>*gorm.DB</code> 设置超时 Context，然后使用 <code>*gorm.DB</code> 处理所有请求</p>
<p>下面是一个 Chi 中间件的示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetDBMiddleware</span><span class="params">(next http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    timeoutContext, _ := context.WithTimeout(context.Background(), time.Second)</span><br><span class="line">    ctx := context.WithValue(r.Context(), <span class="string">&quot;DB&quot;</span>, db.WithContext(timeoutContext))</span><br><span class="line">    next.ServeHTTP(w, r.WithContext(ctx))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r := chi.NewRouter()</span><br><span class="line">r.Use(SetDBMiddleware)</span><br><span class="line"></span><br><span class="line">r.Get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">  db, ok := ctx.Value(<span class="string">&quot;DB&quot;</span>).(*gorm.DB)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> users []User</span><br><span class="line">  db.Find(&amp;users)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 你的其他 DB 操作...</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.Get(<span class="string">&quot;/user&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">  db, ok := ctx.Value(<span class="string">&quot;DB&quot;</span>).(*gorm.DB)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> user User</span><br><span class="line">  db.First(&amp;user)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 你的其他 DB 操作...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong> 通过 <code>WithContext</code> 设置的 <code>Context</code> 是线程安全的，参考<a href="https://gorm.io/zh_CN/docs/session.html">会话</a>获取详情</p>
</blockquote>
<h2 id="Logger"><a href="#Logger" class="headerlink" title="Logger"></a>Logger</h2><p>Logger 也可以支持 <code>Context</code>，可用于日志追踪，查看 <a href="https://gorm.io/zh_CN/docs/logger.html">Logger</a> 获取详情</p>
<p>在 Go 中，处理错误是很重要的。</p>
<p>我们鼓励您在调用任何 <a href="https://gorm.io/zh_CN/docs/method_chaining.html#finisher_method">Finisher 方法</a> 后，都进行错误检查</p>
<h2 id="处理错误"><a href="#处理错误" class="headerlink" title="处理错误"></a>处理错误</h2><p>GORM 的错误处理与常见的 Go 代码不同，因为 GORM 提供的是链式 API。</p>
<p>如果遇到任何错误，GORM 会设置 <code>*gorm.DB</code> 的 <code>Error</code> 字段，您需要像这样检查它：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> err := db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).First(&amp;user).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="comment">// 处理错误...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> result := db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).First(&amp;user); result.Error != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="comment">// 处理错误...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ErrRecordNotFound"><a href="#ErrRecordNotFound" class="headerlink" title="ErrRecordNotFound"></a>ErrRecordNotFound</h2><p>当 <code>First</code>、<code>Last</code>、<code>Take</code> 方法找不到记录时，GORM 会返回 <code>ErrRecordNotFound</code> 错误。如果发生了多个错误，你可以通过 <code>errors.Is</code> 判断错误是否为 <code>ErrRecordNotFound</code>，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检查错误是否为 RecordNotFound</span></span><br><span class="line">err := db.First(&amp;user, <span class="number">100</span>).Error</span><br><span class="line">errors.Is(err, gorm.ErrRecordNotFound)</span><br></pre></td></tr></table></figure>

<p>GORM 允许进行链式操作，所以您可以像这样写代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Where(<span class="string">&quot;age = ?&quot;</span>, <span class="number">18</span>).First(&amp;user)</span><br></pre></td></tr></table></figure>

<p>GORM 中有三种类型的方法： <code>链式方法</code>、<code>Finisher 方法</code>、<code>新建会话方法</code></p>
<h2 id="链式方法"><a href="#链式方法" class="headerlink" title="链式方法"></a>链式方法</h2><p>链式方法是将 <code>Clauses</code> 修改或添加到当前 <code>Statement</code> 的方法，例如：</p>
<p><code>Where</code>、<code>Select</code>、<code>Omit</code>、<code>Joins</code>、<code>Scopes</code>、<code>Preload</code>、<code>Raw</code>（但在构建 SQL 语句时，<code>Raw</code> 不能与其它链式方法一起使用）…</p>
<p>这是 <a href="https://github.com/go-gorm/gorm/blob/master/chainable_api.go">完整方法列表</a>，也可以查看 <a href="https://gorm.io/zh_CN/docs/sql_builder.html">SQL 构建器</a> 获取更多关于 <code>Clauses</code> 的信息</p>
<h2 id="Finisher-方法"><a href="#Finisher-方法" class="headerlink" title="Finisher 方法"></a>Finisher 方法</h2><p>Finishers 是会立即执行注册回调的方法，然后生成并执行 SQL，比如这些方法：</p>
<p><code>Create</code>, <code>First</code>, <code>Find</code>, <code>Take</code>, <code>Save</code>, <code>Update</code>, <code>Delete</code>, <code>Scan</code>, <code>Row</code>, <code>Rows</code>…</p>
<p>查看<a href="https://github.com/go-gorm/gorm/blob/master/finisher_api.go">完整方法列表</a></p>
<h2 id="新建会话模式"><a href="#新建会话模式" class="headerlink" title="新建会话模式"></a>新建会话模式</h2><p>在初始化了 <code>*gorm.DB</code> 或 <code>新建会话方法</code> 后， 调用下面的方法会创建一个新的 <code>Statement</code> 实例而不是使用当前的</p>
<p>GORM 定义了 <code>Session</code>、<code>WithContext</code>、<code>Debug</code> 方法做为 <code>新建会话方法</code>，查看<a href="https://gorm.io/zh_CN/docs/session.html">会话</a> 获取详情.</p>
<p>让我们用一些例子来解释它：</p>
<p>示例 1：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db, err := gorm.Open(sqlite.Open(<span class="string">&quot;test.db&quot;</span>), &amp;gorm.Config&#123;&#125;)</span><br><span class="line"><span class="comment">// db 是一个刚完成初始化的 *gorm.DB 实例，其属于 `新建会话模式`</span></span><br><span class="line">db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Where(<span class="string">&quot;age = ?&quot;</span>, <span class="number">18</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// `Where(&quot;name = ?&quot;, &quot;jinzhu&quot;)` 是调用的第一个方法，它会创建一个新 `Statement`</span></span><br><span class="line"><span class="comment">// `Where(&quot;age = ?&quot;, 18)` 会复用 `Statement`，并将条件添加至这个 `Statement`</span></span><br><span class="line"><span class="comment">// `Find(&amp;users)` 是一个 finisher 方法，它运行注册的查询回调，生成并运行下面这条 SQL：</span></span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; AND age = 18;</span></span><br><span class="line"></span><br><span class="line">db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu2&quot;</span>).Where(<span class="string">&quot;age = ?&quot;</span>, <span class="number">20</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// `Where(&quot;name = ?&quot;, &quot;jinzhu2&quot;)` 也是调用的第一个方法，也会创建一个新 `Statement`</span></span><br><span class="line"><span class="comment">// `Where(&quot;age = ?&quot;, 20)` 会复用 `Statement`，并将条件添加至这个 `Statement`</span></span><br><span class="line"><span class="comment">// `Find(&amp;users)` 是一个 finisher 方法，它运行注册的查询回调，生成并运行下面这条 SQL：</span></span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &#x27;jinzhu2&#x27; AND age = 20;</span></span><br><span class="line"></span><br><span class="line">db.Find(&amp;users)</span><br><span class="line"><span class="comment">// 对于这个 `新建会话模式` 的 `*gorm.DB` 实例来说，`Find(&amp;users)` 是一个 finisher 方法也是第一个调用的方法。</span></span><br><span class="line"><span class="comment">// 它创建了一个新的 `Statement` 运行注册的查询回调，生成并运行下面这条 SQL：</span></span><br><span class="line"><span class="comment">// SELECT * FROM users;</span></span><br></pre></td></tr></table></figure>

<p>示例 2：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db, err := gorm.Open(sqlite.Open(<span class="string">&quot;test.db&quot;</span>), &amp;gorm.Config&#123;&#125;)</span><br><span class="line"><span class="comment">// db 是一个刚完成初始化的 *gorm.DB 实例，其属于 `新建会话模式`</span></span><br><span class="line">tx := db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>)</span><br><span class="line"><span class="comment">// `Where(&quot;name = ?&quot;, &quot;jinzhu&quot;)` 是第一个被调用的方法，它创建了一个新的 `Statement` 并添加条件</span></span><br><span class="line"></span><br><span class="line">tx.Where(<span class="string">&quot;age = ?&quot;</span>, <span class="number">18</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// `tx.Where(&quot;age = ?&quot;, 18)` 会复用上面的那个 `Statement`，并向其添加条件</span></span><br><span class="line"><span class="comment">// `Find(&amp;users)` 是一个 finisher 方法，它运行注册的查询回调，生成并运行下面这条 SQL：</span></span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; AND age = 18</span></span><br><span class="line"></span><br><span class="line">tx.Where(<span class="string">&quot;age = ?&quot;</span>, <span class="number">28</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// `tx.Where(&quot;age = ?&quot;, 18)` 同样会复用上面的那个 `Statement`，并向其添加条件</span></span><br><span class="line"><span class="comment">// `Find(&amp;users)` 是一个 finisher 方法，它运行注册的查询回调，生成并运行下面这条 SQL：</span></span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; AND age = 18 AND age = 28;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：</strong> 在示例 2 中，第一个查询会影响第二个查询生成的 SQL，因为 GORM 复用了 <code>Statement</code> 这可能会导致预期之外的问题，查看 <a href="https://gorm.io/zh_CN/docs/method_chaining.html#goroutine_safe">协程安全</a> 以避免该问题</p>
</blockquote>
<h2 id="方法链和协程安全"><a href="#方法链和协程安全" class="headerlink" title="方法链和协程安全"></a>方法链和协程安全</h2><p>新初始化的 <code>*gorm.DB</code> 或调用 <code>新建会话方法</code> 后，GORM 会创建新的 <code>Statement</code> 实例。因此想要复用 <code>*gorm.DB</code>，您需要确保它们处于 <code>新建会话模式</code>，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db, err := gorm.Open(sqlite.Open(<span class="string">&quot;test.db&quot;</span>), &amp;gorm.Config&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 安全的使用新初始化的 *gorm.DB</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">  <span class="keyword">go</span> db.Where(...).First(&amp;user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tx := db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>)</span><br><span class="line"><span class="comment">// 不安全的复用 Statement</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">  <span class="keyword">go</span> tx.Where(...).First(&amp;user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx, _ := context.WithTimeout(context.Background(), time.Second)</span><br><span class="line">ctxDB := db.WithContext(ctx)</span><br><span class="line"><span class="comment">// 在 `新建会话方法` 之后是安全的</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">  <span class="keyword">go</span> ctxDB.Where(...).First(&amp;user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx, _ := context.WithTimeout(context.Background(), time.Second)</span><br><span class="line">ctxDB := db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).WithContext(ctx)</span><br><span class="line"><span class="comment">// 在 `新建会话方法` 之后是安全的</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">  <span class="keyword">go</span> ctxDB.Where(...).First(&amp;user) <span class="comment">// `name = &#x27;jinzhu&#x27;` 会应用到查询中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tx := db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Session(&amp;gorm.Session&#123;&#125;)</span><br><span class="line"><span class="comment">// 在 `新建会话方法` 之后是安全的</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">  <span class="keyword">go</span> tx.Where(...).First(&amp;user) <span class="comment">// `name = &#x27;jinzhu&#x27;` 会应用到查询中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>GORM 提供了 <code>Session</code> 方法，这是一个 <a href="https://gorm.io/zh_CN/docs/method_chaining.html"><code>New Session Method</code></a>，它允许创建带配置的新建会话模式：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Session 配置</span></span><br><span class="line"><span class="keyword">type</span> Session <span class="keyword">struct</span> &#123;</span><br><span class="line">  DryRun                 <span class="keyword">bool</span></span><br><span class="line">  PrepareStmt            <span class="keyword">bool</span></span><br><span class="line">  NewDB                  <span class="keyword">bool</span></span><br><span class="line">  SkipHooks              <span class="keyword">bool</span></span><br><span class="line">  SkipDefaultTransaction <span class="keyword">bool</span></span><br><span class="line">  AllowGlobalUpdate      <span class="keyword">bool</span></span><br><span class="line">  FullSaveAssociations   <span class="keyword">bool</span></span><br><span class="line">  Context                context.Context</span><br><span class="line">  Logger                 logger.Interface</span><br><span class="line">  NowFunc                <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Time</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="DryRun"><a href="#DryRun" class="headerlink" title="DryRun"></a>DryRun</h2><p>生成 <code>SQL</code> 但不执行。 它可以用于准备或测试生成的 SQL，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新建会话模式</span></span><br><span class="line">stmt := db.Session(&amp;Session&#123;DryRun: <span class="literal">true</span>&#125;).First(&amp;user, <span class="number">1</span>).Statement</span><br><span class="line">stmt.SQL.String() <span class="comment">//=&gt; SELECT * FROM `users` WHERE `id` = $1 ORDER BY `id`</span></span><br><span class="line">stmt.Vars         <span class="comment">//=&gt; []interface&#123;&#125;&#123;1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局 DryRun 模式</span></span><br><span class="line">db, err := gorm.Open(sqlite.Open(<span class="string">&quot;gorm.db&quot;</span>), &amp;gorm.Config&#123;DryRun: <span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不同的数据库生成不同的 SQL</span></span><br><span class="line">stmt := db.Find(&amp;user, <span class="number">1</span>).Statement</span><br><span class="line">stmt.SQL.String() <span class="comment">//=&gt; SELECT * FROM `users` WHERE `id` = $1 // PostgreSQL</span></span><br><span class="line">stmt.SQL.String() <span class="comment">//=&gt; SELECT * FROM `users` WHERE `id` = ?  // MySQL</span></span><br><span class="line">stmt.Vars         <span class="comment">//=&gt; []interface&#123;&#125;&#123;1&#125;</span></span><br></pre></td></tr></table></figure>

<p>你可以使用下面的代码生成最终的 SQL：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意：SQL 并不总是能安全地执行，GORM 仅将其用于日志，它可能导致会 SQL 注入</span></span><br><span class="line">db.Dialector.Explain(stmt.SQL.String(), stmt.Vars...)</span><br><span class="line"><span class="comment">// SELECT * FROM `users` WHERE `id` = 1</span></span><br></pre></td></tr></table></figure>

<h2 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h2><p><code>PreparedStmt</code> 在执行任何 SQL 时都会创建一个 prepared statement 并将其缓存，以提高后续的效率，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局模式，所有 DB 操作都会创建并缓存预编译语句</span></span><br><span class="line">db, err := gorm.Open(sqlite.Open(<span class="string">&quot;gorm.db&quot;</span>), &amp;gorm.Config&#123;</span><br><span class="line">  PrepareStmt: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会话模式</span></span><br><span class="line">tx := db.Session(&amp;Session&#123;PrepareStmt: <span class="literal">true</span>&#125;)</span><br><span class="line">tx.First(&amp;user, <span class="number">1</span>)</span><br><span class="line">tx.Find(&amp;users)</span><br><span class="line">tx.Model(&amp;user).Update(<span class="string">&quot;Age&quot;</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// returns prepared statements manager</span></span><br><span class="line">stmtManger, ok := tx.ConnPool.(*PreparedStmtDB)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭 *当前会话* 的预编译模式</span></span><br><span class="line">stmtManger.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 *当前会话* 预编译 SQL</span></span><br><span class="line">stmtManger.PreparedSQL <span class="comment">// =&gt; []string&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为当前数据库连接池的（所有会话）开启预编译模式</span></span><br><span class="line">stmtManger.Stmts <span class="comment">// map[string]*sql.Stmt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sql, stmt := <span class="keyword">range</span> stmtManger.Stmts &#123;</span><br><span class="line">  sql  <span class="comment">// 预编译 SQL</span></span><br><span class="line">  stmt <span class="comment">// 预编译模式</span></span><br><span class="line">  stmt.Close() <span class="comment">// 关闭预编译模式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="NewDB"><a href="#NewDB" class="headerlink" title="NewDB"></a>NewDB</h2><p>通过 <code>NewDB</code> 选项创建一个不带之前条件的新 DB，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">tx := db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Session(&amp;gorm.Session&#123;NewDB: <span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line">tx.First(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users ORDER BY id LIMIT 1</span></span><br><span class="line"></span><br><span class="line">tx.First(&amp;user, <span class="string">&quot;id = ?&quot;</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id = 10 ORDER BY id</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不带 `NewDB` 选项</span></span><br><span class="line">tx2 := db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Session(&amp;gorm.Session&#123;&#125;)</span><br><span class="line">tx2.First(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &quot;jinzhu&quot; ORDER BY id</span></span><br></pre></td></tr></table></figure>

<h2 id="跳过钩子"><a href="#跳过钩子" class="headerlink" title="跳过钩子"></a>跳过钩子</h2><p>如果您想跳过 <code>钩子</code> 方法，您可以使用 <code>SkipHooks</code> 会话模式，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">DB.Session(&amp;gorm.Session&#123;SkipHooks: <span class="literal">true</span>&#125;).Create(&amp;user)</span><br><span class="line"></span><br><span class="line">DB.Session(&amp;gorm.Session&#123;SkipHooks: <span class="literal">true</span>&#125;).Create(&amp;users)</span><br><span class="line"></span><br><span class="line">DB.Session(&amp;gorm.Session&#123;SkipHooks: <span class="literal">true</span>&#125;).CreateInBatches(users, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">DB.Session(&amp;gorm.Session&#123;SkipHooks: <span class="literal">true</span>&#125;).Find(&amp;user)</span><br><span class="line"></span><br><span class="line">DB.Session(&amp;gorm.Session&#123;SkipHooks: <span class="literal">true</span>&#125;).Delete(&amp;user)</span><br><span class="line"></span><br><span class="line">DB.Session(&amp;gorm.Session&#123;SkipHooks: <span class="literal">true</span>&#125;).Model(User&#123;&#125;).Where(<span class="string">&quot;age &gt; ?&quot;</span>, <span class="number">18</span>).Updates(&amp;user)</span><br></pre></td></tr></table></figure>

<h2 id="禁用嵌套事务"><a href="#禁用嵌套事务" class="headerlink" title="禁用嵌套事务"></a>禁用嵌套事务</h2><p>在一个 DB 事务中使用 <code>Transaction</code> 方法，GORM 会使用 <code>SavePoint(savedPointName)</code>，<code>RollbackTo(savedPointName)</code> 为你提供嵌套事务支持。 你可以通过 <code>DisableNestedTransaction</code> 选项关闭它，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Session(&amp;gorm.Session&#123;</span><br><span class="line">  DisableNestedTransaction: <span class="literal">true</span>,</span><br><span class="line">&#125;).CreateInBatches(&amp;users, <span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<h2 id="AllowGlobalUpdate"><a href="#AllowGlobalUpdate" class="headerlink" title="AllowGlobalUpdate"></a>AllowGlobalUpdate</h2><p>GORM 默认不允许进行全局 update/delete，该操作会返回 <code>ErrMissingWhereClause</code> 错误。 您可以通过将一个选项设置为 true 来启用它，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Session(&amp;gorm.Session&#123;</span><br><span class="line">  AllowGlobalUpdate: <span class="literal">true</span>,</span><br><span class="line">&#125;).Model(&amp;User&#123;&#125;).Update(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>)</span><br><span class="line"><span class="comment">// UPDATE users SET `name` = &quot;jinzhu&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="FullSaveAssociations"><a href="#FullSaveAssociations" class="headerlink" title="FullSaveAssociations"></a>FullSaveAssociations</h2><p>在创建、更新记录时，GORM 会通过 <a href="https://gorm.io/zh_CN/docs/create.html#upsert">Upsert</a> 自动保存关联及其引用记录。 如果您想要更新关联的数据，您应该使用 <code>FullSaveAssociations</code> 模式，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Session(&amp;gorm.Session&#123;FullSaveAssociations: <span class="literal">true</span>&#125;).Updates(&amp;user)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;addresses&quot; (address1) VALUES (&quot;Billing Address - Address 1&quot;), (&quot;Shipping Address - Address 1&quot;) ON DUPLICATE KEY SET address1=VALUES(address1);</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;users&quot; (name,billing_address_id,shipping_address_id) VALUES (&quot;jinzhu&quot;, 1, 2);</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;emails&quot; (user_id,email) VALUES (111, &quot;jinzhu@example.com&quot;), (111, &quot;jinzhu-2@example.com&quot;) ON DUPLICATE KEY SET email=VALUES(email);</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p>通过 <code>Context</code> 选项，您可以传入 <code>Context</code> 来追踪 SQL 操作，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">timeoutCtx, _ := context.WithTimeout(context.Background(), time.Second)</span><br><span class="line">tx := db.Session(&amp;Session&#123;Context: timeoutCtx&#125;)</span><br><span class="line"></span><br><span class="line">tx.First(&amp;user) <span class="comment">// 带 timeoutCtx 的查询</span></span><br><span class="line">tx.Model(&amp;user).Update(<span class="string">&quot;role&quot;</span>, <span class="string">&quot;admin&quot;</span>) <span class="comment">// 带 timeoutCtx 的更新</span></span><br></pre></td></tr></table></figure>

<p>GORM 也提供了快捷调用方法 <code>WithContext</code>，其实现如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span> <span class="title">WithContext</span><span class="params">(ctx context.Context)</span> *<span class="title">DB</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> db.Session(&amp;Session&#123;Context: ctx&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Logger-1"><a href="#Logger-1" class="headerlink" title="Logger"></a>Logger</h2><p>Gorm 允许使用 <code>Logger</code> 选项自定义内建 Logger，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">newLogger := logger.New(log.New(os.Stdout, <span class="string">&quot;\r\n&quot;</span>, log.LstdFlags),</span><br><span class="line">              logger.Config&#123;</span><br><span class="line">                SlowThreshold: time.Second,</span><br><span class="line">                LogLevel:      logger.Silent,</span><br><span class="line">                Colorful:      <span class="literal">false</span>,</span><br><span class="line">              &#125;)</span><br><span class="line">db.Session(&amp;Session&#123;Logger: newLogger&#125;)</span><br><span class="line"></span><br><span class="line">db.Session(&amp;Session&#123;Logger: logger.Default.LogMode(logger.Silent)&#125;)</span><br></pre></td></tr></table></figure>

<p>查看 <a href="https://gorm.io/zh_CN/docs/logger.html">Logger</a> 获取详情.</p>
<h2 id="NowFunc"><a href="#NowFunc" class="headerlink" title="NowFunc"></a>NowFunc</h2><p><code>NowFunc</code> 允许改变 GORM 获取当前时间的实现，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Session(&amp;Session&#123;</span><br><span class="line">  NowFunc: <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Time</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> time.Now().Local()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><p><code>Debug</code> 只是将会话的 <code>Logger</code> 修改为调试模式的快捷方法，其实现如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span> <span class="title">Debug</span><span class="params">()</span> <span class="params">(tx *DB)</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> db.Session(&amp;Session&#123;</span><br><span class="line">    Logger:         db.Logger.LogMode(logger.Info),</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="QueryFields"><a href="#QueryFields" class="headerlink" title="QueryFields"></a>QueryFields</h2><p>Select by fields</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Session(&amp;gorm.Session&#123;QueryFields: <span class="literal">true</span>&#125;).Find(&amp;user)</span><br><span class="line"><span class="comment">// SELECT `users`.`name`, `users`.`age`, ... FROM `users` // 带该选项</span></span><br><span class="line"><span class="comment">// SELECT * FROM `users` // 不带该选项</span></span><br></pre></td></tr></table></figure>

<h2 id="CreateBatchSize"><a href="#CreateBatchSize" class="headerlink" title="CreateBatchSize"></a>CreateBatchSize</h2><p>Default batch size</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">users = [<span class="number">5000</span>]User&#123;&#123;Name: <span class="string">&quot;jinzhu&quot;</span>, Pets: []Pet&#123;pet1, pet2, pet3&#125;&#125;...&#125;</span><br><span class="line"></span><br><span class="line">db.Session(&amp;gorm.Session&#123;CreateBatchSize: <span class="number">1000</span>&#125;).Create(&amp;users)</span><br><span class="line"><span class="comment">// INSERT INTO users xxx (需 5 次)</span></span><br><span class="line"><span class="comment">// INSERT INTO pets xxx (需 15 次)</span></span><br></pre></td></tr></table></figure>

<h2 id="对象生命周期"><a href="#对象生命周期" class="headerlink" title="对象生命周期"></a>对象生命周期</h2><p>Hook 是在创建、查询、更新、删除等操作之前、之后调用的函数。</p>
<p>如果您已经为模型定义了指定的方法，它会在创建、更新、查询、删除时自动被调用。如果任何回调返回错误，GORM 将停止后续的操作并回滚事务。</p>
<p>钩子方法的函数签名应该是 <code>func(*gorm.DB) error</code></p>
<h2 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>创建时可用的 hook</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开始事务</span></span><br><span class="line">BeforeSave</span><br><span class="line">BeforeCreate</span><br><span class="line"><span class="comment">// 关联前的 save</span></span><br><span class="line"><span class="comment">// 插入记录至 db</span></span><br><span class="line"><span class="comment">// 关联后的 save</span></span><br><span class="line">AfterCreate</span><br><span class="line">AfterSave</span><br><span class="line"><span class="comment">// 提交或回滚事务</span></span><br></pre></td></tr></table></figure>

<p>代码示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span> <span class="title">BeforeCreate</span><span class="params">(tx *gorm.DB)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">  u.UUID = uuid.New()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> !u.IsValid() &#123;</span><br><span class="line">    err = errors.New(<span class="string">&quot;can&#x27;t save invalid data&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span> <span class="title">AfterCreate</span><span class="params">(tx *gorm.DB)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> u.ID == <span class="number">1</span> &#123;</span><br><span class="line">    tx.Model(u).Update(<span class="string">&quot;role&quot;</span>, <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong> 在 GORM 中保存、删除操作会默认运行在事务上， 因此在事务完成之前该事务中所作的更改是不可见的，如果您的钩子返回了任何错误，则修改将被回滚。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span> <span class="title">AfterCreate</span><span class="params">(tx *gorm.DB)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> !u.IsValid() &#123;</span><br><span class="line">    <span class="keyword">return</span> errors.New(<span class="string">&quot;rollback invalid user&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="更新对象"><a href="#更新对象" class="headerlink" title="更新对象"></a>更新对象</h3><p>更新时可用的 hook</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开始事务</span></span><br><span class="line">BeforeSave</span><br><span class="line">BeforeUpdate</span><br><span class="line"><span class="comment">// 关联前的 save</span></span><br><span class="line"><span class="comment">// 更新 db</span></span><br><span class="line"><span class="comment">// 关联后的 save</span></span><br><span class="line">AfterUpdate</span><br><span class="line">AfterSave</span><br><span class="line"><span class="comment">// 提交或回滚事务</span></span><br></pre></td></tr></table></figure>

<p>代码示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span> <span class="title">BeforeUpdate</span><span class="params">(tx *gorm.DB)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> u.readonly() &#123;</span><br><span class="line">    err = errors.New(<span class="string">&quot;read only user&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在同一个事务中更新数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span> <span class="title">AfterUpdate</span><span class="params">(tx *gorm.DB)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> u.Confirmed &#123;</span><br><span class="line">    tx.Model(&amp;Address&#123;&#125;).Where(<span class="string">&quot;user_id = ?&quot;</span>, u.ID).Update(<span class="string">&quot;verfied&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除对象"><a href="#删除对象" class="headerlink" title="删除对象"></a>删除对象</h3><p>删除时可用的 hook</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开始事务</span></span><br><span class="line">BeforeDelete</span><br><span class="line"><span class="comment">// 删除 db 中的数据</span></span><br><span class="line">AfterDelete</span><br><span class="line"><span class="comment">// 提交或回滚事务</span></span><br></pre></td></tr></table></figure>

<p>代码示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在同一个事务中更新数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span> <span class="title">AfterDelete</span><span class="params">(tx *gorm.DB)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> u.Confirmed &#123;</span><br><span class="line">    tx.Model(&amp;Address&#123;&#125;).Where(<span class="string">&quot;user_id = ?&quot;</span>, u.ID).Update(<span class="string">&quot;invalid&quot;</span>, <span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查询对象"><a href="#查询对象" class="headerlink" title="查询对象"></a>查询对象</h3><p>查询时可用的 hook</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从 db 中加载数据</span></span><br><span class="line"><span class="comment">// Preloading (eager loading)</span></span><br><span class="line">AfterFind</span><br></pre></td></tr></table></figure>

<p>代码示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span> <span class="title">AfterFind</span><span class="params">(tx *gorm.DB)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> u.MemberShip == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">    u.MemberShip = <span class="string">&quot;user&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="修改当前操作"><a href="#修改当前操作" class="headerlink" title="修改当前操作"></a>修改当前操作</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span> <span class="title">BeforeCreate</span><span class="params">(tx *gorm.DB)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="comment">// 通过 tx.Statement 修改当前操作，例如：</span></span><br><span class="line">  tx.Statement.Select(<span class="string">&quot;Name&quot;</span>, <span class="string">&quot;Age&quot;</span>)</span><br><span class="line">  tx.Statement.AddClause(clause.OnConflict&#123;DoNothing: <span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// tx 是带有 `NewDB` 选项的新会话模式</span></span><br><span class="line">  <span class="comment">// 基于 tx 的操作会在同一个事务中，但不会带上任何当前的条件</span></span><br><span class="line">  err := tx.First(&amp;role, <span class="string">&quot;name = ?&quot;</span>, user.Role).Error</span><br><span class="line">  <span class="comment">// SELECT * FROM roles WHERE name = &quot;admin&quot;</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="禁用默认事务"><a href="#禁用默认事务" class="headerlink" title="禁用默认事务"></a>禁用默认事务</h2><p>为了确保数据一致性，GORM 会在事务里执行写入操作（创建、更新、删除）。如果没有这方面的要求，您可以在初始化时禁用它，这将获得大约 30%+ 性能提升。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局禁用</span></span><br><span class="line">db, err := gorm.Open(sqlite.Open(<span class="string">&quot;gorm.db&quot;</span>), &amp;gorm.Config&#123;</span><br><span class="line">  SkipDefaultTransaction: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 持续会话模式</span></span><br><span class="line">tx := db.Session(&amp;Session&#123;SkipDefaultTransaction: <span class="literal">true</span>&#125;)</span><br><span class="line">tx.First(&amp;user, <span class="number">1</span>)</span><br><span class="line">tx.Find(&amp;users)</span><br><span class="line">tx.Model(&amp;user).Update(<span class="string">&quot;Age&quot;</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure>

<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>要在事务中执行一系列操作，一般流程如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Transaction(<span class="function"><span class="keyword">func</span><span class="params">(tx *gorm.DB)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="comment">// 在事务中执行一些 db 操作（从这里开始，您应该使用 &#x27;tx&#x27; 而不是 &#x27;db&#x27;）</span></span><br><span class="line">  <span class="keyword">if</span> err := tx.Create(&amp;Animal&#123;Name: <span class="string">&quot;Giraffe&quot;</span>&#125;).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// 返回任何错误都会回滚事务</span></span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err := tx.Create(&amp;Animal&#123;Name: <span class="string">&quot;Lion&quot;</span>&#125;).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回 nil 提交事务</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="嵌套事务"><a href="#嵌套事务" class="headerlink" title="嵌套事务"></a>嵌套事务</h3><p>GORM 支持嵌套事务，您可以回滚较大事务内执行的一部分操作，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Transaction(<span class="function"><span class="keyword">func</span><span class="params">(tx *gorm.DB)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  tx.Create(&amp;user1)</span><br><span class="line"></span><br><span class="line">  tx.Transaction(<span class="function"><span class="keyword">func</span><span class="params">(tx2 *gorm.DB)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    tx2.Create(&amp;user2)</span><br><span class="line">    <span class="keyword">return</span> errors.New(<span class="string">&quot;rollback user2&quot;</span>) <span class="comment">// Rollback user2</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  tx.Transaction(<span class="function"><span class="keyword">func</span><span class="params">(tx2 *gorm.DB)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    tx2.Create(&amp;user3)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Commit user1, user3</span></span><br></pre></td></tr></table></figure>

<h2 id="Control-the-transaction-manually"><a href="#Control-the-transaction-manually" class="headerlink" title="Control the transaction manually"></a>Control the transaction manually</h2><p>Gorm supports calling transaction control functions (commit / rollback) directly, for example:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开始事务</span></span><br><span class="line">tx := db.Begin()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在事务中执行一些 db 操作（从这里开始，您应该使用 &#x27;tx&#x27; 而不是 &#x27;db&#x27;）</span></span><br><span class="line">tx.Create(...)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遇到错误时回滚事务</span></span><br><span class="line">tx.Rollback()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 否则，提交事务</span></span><br><span class="line">tx.Commit()</span><br></pre></td></tr></table></figure>

<h3 id="一个特殊的示例"><a href="#一个特殊的示例" class="headerlink" title="一个特殊的示例"></a>一个特殊的示例</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateAnimals</span><span class="params">(db *gorm.DB)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="comment">// 再唠叨一下，事务一旦开始，你就应该使用 tx 处理数据</span></span><br><span class="line">  tx := db.Begin()</span><br><span class="line">  <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> r := <span class="built_in">recover</span>(); r != <span class="literal">nil</span> &#123;</span><br><span class="line">      tx.Rollback()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err := tx.Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err := tx.Create(&amp;Animal&#123;Name: <span class="string">&quot;Giraffe&quot;</span>&#125;).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">     tx.Rollback()</span><br><span class="line">     <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err := tx.Create(&amp;Animal&#123;Name: <span class="string">&quot;Lion&quot;</span>&#125;).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">     tx.Rollback()</span><br><span class="line">     <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> tx.Commit().Error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SavePoint、RollbackTo"><a href="#SavePoint、RollbackTo" class="headerlink" title="SavePoint、RollbackTo"></a>SavePoint、RollbackTo</h2><p>GORM provides <code>SavePoint</code>, <code>RollbackTo</code> to save points and roll back to a savepoint, for example:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">tx := db.Begin()</span><br><span class="line">tx.Create(&amp;user1)</span><br><span class="line"></span><br><span class="line">tx.SavePoint(<span class="string">&quot;sp1&quot;</span>)</span><br><span class="line">tx.Create(&amp;user2)</span><br><span class="line">tx.RollbackTo(<span class="string">&quot;sp1&quot;</span>) <span class="comment">// Rollback user2</span></span><br><span class="line"></span><br><span class="line">tx.Commit() <span class="comment">// Commit user1</span></span><br></pre></td></tr></table></figure>

<h2 id="AutoMigrate"><a href="#AutoMigrate" class="headerlink" title="AutoMigrate"></a>AutoMigrate</h2><p>AutoMigrate 用于自动迁移您的 schema，保持您的 schema 是最新的。</p>
<blockquote>
<p><strong>注意：</strong> AutoMigrate 会创建表、缺失的外键、约束、列和索引。 如果大小、精度、是否为空可以更改，则 AutoMigrate 会改变列的类型。 出于保护您数据的目的，它 <strong>不会</strong> 删除未使用的列</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.AutoMigrate(&amp;User&#123;&#125;)</span><br><span class="line"></span><br><span class="line">db.AutoMigrate(&amp;User&#123;&#125;, &amp;Product&#123;&#125;, &amp;Order&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建表时添加后缀</span></span><br><span class="line">db.Set(<span class="string">&quot;gorm:table_options&quot;</span>, <span class="string">&quot;ENGINE=InnoDB&quot;</span>).AutoMigrate(&amp;User&#123;&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong> AutoMigrate 会自动创建数据库外键约束，您可以在初始化时禁用此功能，例如：</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db, err := gorm.Open(sqlite.Open(<span class="string">&quot;gorm.db&quot;</span>), &amp;gorm.Config&#123;</span><br><span class="line">  DisableForeignKeyConstraintWhenMigrating: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Migrator-接口"><a href="#Migrator-接口" class="headerlink" title="Migrator 接口"></a>Migrator 接口</h2><p>GORM 提供了 Migrator 接口，该接口为每个数据库提供了统一的 API 接口，可用来为您的数据库构建独立迁移，例如：</p>
<p>SQLite 不支持 <code>ALTER COLUMN</code>、<code>DROP COLUMN</code>，当你试图修改表结构，GORM 将创建一个新表、复制所有数据、删除旧表、重命名新表。</p>
<p>一些版本的 MySQL 不支持 rename 列，索引。GORM 将基于您使用 MySQL 的版本执行不同 SQL</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Migrator <span class="keyword">interface</span> &#123;</span><br><span class="line">  <span class="comment">// AutoMigrate</span></span><br><span class="line">  AutoMigrate(dst ...<span class="keyword">interface</span>&#123;&#125;) error</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Database</span></span><br><span class="line">  CurrentDatabase() <span class="keyword">string</span></span><br><span class="line">  FullDataTypeOf(*schema.Field) clause.Expr</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Tables</span></span><br><span class="line">  CreateTable(dst ...<span class="keyword">interface</span>&#123;&#125;) error</span><br><span class="line">  DropTable(dst ...<span class="keyword">interface</span>&#123;&#125;) error</span><br><span class="line">  HasTable(dst <span class="keyword">interface</span>&#123;&#125;) <span class="keyword">bool</span></span><br><span class="line">  RenameTable(oldName, newName <span class="keyword">interface</span>&#123;&#125;) error</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Columns</span></span><br><span class="line">  AddColumn(dst <span class="keyword">interface</span>&#123;&#125;, field <span class="keyword">string</span>) error</span><br><span class="line">  DropColumn(dst <span class="keyword">interface</span>&#123;&#125;, field <span class="keyword">string</span>) error</span><br><span class="line">  AlterColumn(dst <span class="keyword">interface</span>&#123;&#125;, field <span class="keyword">string</span>) error</span><br><span class="line">  HasColumn(dst <span class="keyword">interface</span>&#123;&#125;, field <span class="keyword">string</span>) <span class="keyword">bool</span></span><br><span class="line">  RenameColumn(dst <span class="keyword">interface</span>&#123;&#125;, oldName, field <span class="keyword">string</span>) error</span><br><span class="line">  MigrateColumn(dst <span class="keyword">interface</span>&#123;&#125;, field *schema.Field, columnType *sql.ColumnType) error</span><br><span class="line">  ColumnTypes(dst <span class="keyword">interface</span>&#123;&#125;) ([]*sql.ColumnType, error)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Constraints</span></span><br><span class="line">  CreateConstraint(dst <span class="keyword">interface</span>&#123;&#125;, name <span class="keyword">string</span>) error</span><br><span class="line">  DropConstraint(dst <span class="keyword">interface</span>&#123;&#125;, name <span class="keyword">string</span>) error</span><br><span class="line">  HasConstraint(dst <span class="keyword">interface</span>&#123;&#125;, name <span class="keyword">string</span>) <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Indexes</span></span><br><span class="line">  CreateIndex(dst <span class="keyword">interface</span>&#123;&#125;, name <span class="keyword">string</span>) error</span><br><span class="line">  DropIndex(dst <span class="keyword">interface</span>&#123;&#125;, name <span class="keyword">string</span>) error</span><br><span class="line">  HasIndex(dst <span class="keyword">interface</span>&#123;&#125;, name <span class="keyword">string</span>) <span class="keyword">bool</span></span><br><span class="line">  RenameIndex(dst <span class="keyword">interface</span>&#123;&#125;, oldName, newName <span class="keyword">string</span>) error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="当前数据库"><a href="#当前数据库" class="headerlink" title="当前数据库"></a>当前数据库</h3><p>返回当前使用的数据库名</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Migrator().CurrentDatabase()</span><br></pre></td></tr></table></figure>

<h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为 `User` 创建表</span></span><br><span class="line">db.Migrator().CreateTable(&amp;User&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 &quot;ENGINE=InnoDB&quot; 添加到创建 `User` 的 SQL 里去</span></span><br><span class="line">db.Set(<span class="string">&quot;gorm:table_options&quot;</span>, <span class="string">&quot;ENGINE=InnoDB&quot;</span>).Migrator().CreateTable(&amp;User&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 `User` 对应的表是否存在</span></span><br><span class="line">db.Migrator().HasTable(&amp;User&#123;&#125;)</span><br><span class="line">db.Migrator().HasTable(<span class="string">&quot;users&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果存在表则删除（删除时会忽略、删除外键约束)</span></span><br><span class="line">db.Migrator().DropTable(&amp;User&#123;&#125;)</span><br><span class="line">db.Migrator().DropTable(<span class="string">&quot;users&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重命名表</span></span><br><span class="line">db.Migrator().RenameTable(&amp;User&#123;&#125;, &amp;UserInfo&#123;&#125;)</span><br><span class="line">db.Migrator().RenameTable(<span class="string">&quot;users&quot;</span>, <span class="string">&quot;user_infos&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="列"><a href="#列" class="headerlink" title="列"></a>列</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加 name 字段</span></span><br><span class="line">db.Migrator().AddColumn(&amp;User&#123;&#125;, <span class="string">&quot;Name&quot;</span>)</span><br><span class="line"><span class="comment">// 删除 name 字段</span></span><br><span class="line">db.Migrator().DropColumn(&amp;User&#123;&#125;, <span class="string">&quot;Name&quot;</span>)</span><br><span class="line"><span class="comment">// 修改 name 字段</span></span><br><span class="line">db.Migrator().AlterColumn(&amp;User&#123;&#125;, <span class="string">&quot;Name&quot;</span>)</span><br><span class="line"><span class="comment">// 检查字段是否存在</span></span><br><span class="line">db.Migrator().HasColumn(&amp;User&#123;&#125;, <span class="string">&quot;Name&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name    <span class="keyword">string</span></span><br><span class="line">  NewName <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重命名字段</span></span><br><span class="line">db.Migrator().RenameColumn(&amp;User&#123;&#125;, <span class="string">&quot;Name&quot;</span>, <span class="string">&quot;NewName&quot;</span>)</span><br><span class="line">db.Migrator().RenameColumn(&amp;User&#123;&#125;, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;new_name&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取字段类型</span></span><br><span class="line">db.Migrator().ColumnTypes(&amp;User&#123;&#125;) ([]*sql.ColumnType, error)</span><br></pre></td></tr></table></figure>

<h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> UserIndex <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name  <span class="keyword">string</span> <span class="string">`gorm:&quot;check:name_checker,name &lt;&gt; &#x27;jinzhu&#x27;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建约束</span></span><br><span class="line">db.Migrator().CreateConstraint(&amp;User&#123;&#125;, <span class="string">&quot;name_checker&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除约束</span></span><br><span class="line">db.Migrator().DropConstraint(&amp;User&#123;&#125;, <span class="string">&quot;name_checker&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查约束是否存在</span></span><br><span class="line">db.Migrator().HasConstraint(&amp;User&#123;&#125;, <span class="string">&quot;name_checker&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>为 relation 创建外键</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  CreditCards []CreditCard</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreditCard <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Number <span class="keyword">string</span></span><br><span class="line">  UserID <span class="keyword">uint</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 user &amp; credit_cards 创建 db 外键</span></span><br><span class="line">db.Migrator().CreateConstraint(&amp;User&#123;&#125;, <span class="string">&quot;CreditCards&quot;</span>)</span><br><span class="line">db.Migrator().CreateConstraint(&amp;User&#123;&#125;, <span class="string">&quot;fk_users_credit_cards&quot;</span>)</span><br><span class="line"><span class="comment">// ALTER TABLE `credit_cards` ADD CONSTRAINT `fk_users_credit_cards` FOREIGN KEY (`user_id`) REFERENCES `users`(`id`)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 user &amp; credit_cards 的外键是否存在</span></span><br><span class="line">db.Migrator().HasConstraint(&amp;User&#123;&#125;, <span class="string">&quot;CreditCards&quot;</span>)</span><br><span class="line">db.Migrator().HasConstraint(&amp;User&#123;&#125;, <span class="string">&quot;fk_users_credit_cards&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 user &amp; credit_cards 的 db 外键</span></span><br><span class="line">db.Migrator().DropConstraint(&amp;User&#123;&#125;, <span class="string">&quot;CreditCards&quot;</span>)</span><br><span class="line">db.Migrator().DropConstraint(&amp;User&#123;&#125;, <span class="string">&quot;fk_users_credit_cards&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name <span class="keyword">string</span> <span class="string">`gorm:&quot;size:255;index:idx_name,unique&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 Name 字段创建索引</span></span><br><span class="line">db.Migrator().CreateIndex(&amp;User&#123;&#125;, <span class="string">&quot;Name&quot;</span>)</span><br><span class="line">db.Migrator().CreateIndex(&amp;User&#123;&#125;, <span class="string">&quot;idx_name&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 Name 字段删除索引</span></span><br><span class="line">db.Migrator().DropIndex(&amp;User&#123;&#125;, <span class="string">&quot;Name&quot;</span>)</span><br><span class="line">db.Migrator().DropIndex(&amp;User&#123;&#125;, <span class="string">&quot;idx_name&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查索引是否存在</span></span><br><span class="line">db.Migrator().HasIndex(&amp;User&#123;&#125;, <span class="string">&quot;Name&quot;</span>)</span><br><span class="line">db.Migrator().HasIndex(&amp;User&#123;&#125;, <span class="string">&quot;idx_name&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name  <span class="keyword">string</span> <span class="string">`gorm:&quot;size:255;index:idx_name,unique&quot;`</span></span><br><span class="line">  Name2 <span class="keyword">string</span> <span class="string">`gorm:&quot;size:255;index:idx_name_2,unique&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改索引名</span></span><br><span class="line">db.Migrator().RenameIndex(&amp;User&#123;&#125;, <span class="string">&quot;Name&quot;</span>, <span class="string">&quot;Name2&quot;</span>)</span><br><span class="line">db.Migrator().RenameIndex(&amp;User&#123;&#125;, <span class="string">&quot;idx_name&quot;</span>, <span class="string">&quot;idx_name_2&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="约束-1"><a href="#约束-1" class="headerlink" title="约束"></a>约束</h2><p>GORM 会在自动迁移或建表时创建约束，请参阅 <a href="https://gorm.io/zh_CN/docs/constraints.html">约束</a> 或 <a href="https://gorm.io/zh_CN/docs/indexes.html">数据库索引</a> 以了解详情</p>
<h2 id="其他迁移工具"><a href="#其他迁移工具" class="headerlink" title="其他迁移工具"></a>其他迁移工具</h2><p>GORM 的 AutoMigrate 适用于大多数的迁移，如果您需要更加个性化的迁移工具 ，GORM 提供的一个通用数据库接口可能对您有帮助。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// returns `*sql.DB`</span><br><span class="line">db.DB()</span><br></pre></td></tr></table></figure>

<p>查看 <a href="https://gorm.io/zh_CN/docs/generic_interface.html">通用接口</a> 获取更多详情。</p>
<h2 id="Logger-2"><a href="#Logger-2" class="headerlink" title="Logger"></a>Logger</h2><p>Gorm 有一个 <a href="https://github.com/go-gorm/gorm/blob/master/logger/logger.go">默认 logger 实现</a>，默认情况下，它会打印慢 SQL 和错误</p>
<p>Logger 接受的选项不多，您可以在初始化时自定义它，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">newLogger := logger.New(</span><br><span class="line">  log.New(os.Stdout, <span class="string">&quot;\r\n&quot;</span>, log.LstdFlags), <span class="comment">// io writer（日志输出的目标，前缀和日志包含的内容——译者注）</span></span><br><span class="line">  logger.Config&#123;</span><br><span class="line">    SlowThreshold: time.Second,   <span class="comment">// 慢 SQL 阈值</span></span><br><span class="line">    LogLevel:      logger.Silent, <span class="comment">// 日志级别</span></span><br><span class="line">    IgnoreRecordNotFoundError: <span class="literal">true</span>,   <span class="comment">// 忽略ErrRecordNotFound（记录未找到）错误</span></span><br><span class="line">    Colorful:      <span class="literal">false</span>,         <span class="comment">// 禁用彩色打印</span></span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局模式</span></span><br><span class="line">db, err := gorm.Open(sqlite.Open(<span class="string">&quot;test.db&quot;</span>), &amp;gorm.Config&#123;</span><br><span class="line">  Logger: newLogger,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建会话模式</span></span><br><span class="line">tx := db.Session(&amp;Session&#123;Logger: newLogger&#125;)</span><br><span class="line">tx.First(&amp;user)</span><br><span class="line">tx.Model(&amp;user).Update(<span class="string">&quot;Age&quot;</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure>

<h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><p>GORM 定义了这些日志级别：<code>Silent</code>、<code>Error</code>、<code>Warn</code>、<code>Info</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db, err := gorm.Open(sqlite.Open(&quot;test.db&quot;), &amp;gorm.Config&#123;</span><br><span class="line">  Logger: logger.Default.LogMode(logger.Silent),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="Debug-1"><a href="#Debug-1" class="headerlink" title="Debug"></a>Debug</h3><p>Debug 单个操作，将当前操作的 log 级别调整为 logger.Info</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.Debug().Where(&quot;name = ?&quot;, &quot;jinzhu&quot;).First(&amp;User&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="自定义-Logger"><a href="#自定义-Logger" class="headerlink" title="自定义 Logger"></a>自定义 Logger</h2><p>参考 GORM 的 <a href="https://github.com/go-gorm/gorm/blob/master/logger/logger.go">默认 logger</a> 来定义您自己的 logger</p>
<p>Logger 需要实现以下接口，它接受 <code>context</code>，所以你可以用它来追踪日志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Interface interface &#123;</span><br><span class="line">    LogMode(LogLevel) Interface</span><br><span class="line">    Info(context.Context, string, ...interface&#123;&#125;)</span><br><span class="line">    Warn(context.Context, string, ...interface&#123;&#125;)</span><br><span class="line">    Error(context.Context, string, ...interface&#123;&#125;)</span><br><span class="line">    Trace(ctx context.Context, begin time.Time, fc func() (sql string, rowsAffected int64), err error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>GORM 已经优化了许多东西来提高性能，其默认性能对大多数应用来说都够用了。但这里还是有一些关于如何为您的应用改进性能的方法。</p>
<h2 id="禁用默认事务-1"><a href="#禁用默认事务-1" class="headerlink" title="禁用默认事务"></a><a href="https://gorm.io/zh_CN/docs/transactions.html">禁用默认事务</a></h2><p>对于写操作（创建、更新、删除），为了确保数据的完整性，GORM 会将它们封装在事务内运行。但这会降低性能，你可以在初始化时禁用这种方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db, err := gorm.Open(sqlite.Open(&quot;gorm.db&quot;), &amp;gorm.Config&#123;</span><br><span class="line">  SkipDefaultTransaction: true,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="缓存预编译语句"><a href="#缓存预编译语句" class="headerlink" title="缓存预编译语句"></a><a href="https://gorm.io/zh_CN/docs/session.html">缓存预编译语句</a></h2><p>执行任何 SQL 时都创建并缓存预编译语句，可以提高后续的调用速度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 全局模式</span><br><span class="line">db, err := gorm.Open(sqlite.Open(&quot;gorm.db&quot;), &amp;gorm.Config&#123;</span><br><span class="line">  PrepareStmt: true,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 会话模式</span><br><span class="line">tx := db.Session(&amp;Session&#123;PrepareStmt: true&#125;)</span><br><span class="line">tx.First(&amp;user, 1)</span><br><span class="line">tx.Find(&amp;users)</span><br><span class="line">tx.Model(&amp;user).Update(&quot;Age&quot;, 18)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong> 也可以参考如何为 MySQL 开启 interpolateparams 以减少 roundtrip <a href="https://github.com/go-sql-driver/mysql#interpolateparams">https://github.com/go-sql-driver/mysql#interpolateparams</a></p>
</blockquote>
<h3 id="带-PreparedStmt-的-SQL-生成器"><a href="#带-PreparedStmt-的-SQL-生成器" class="headerlink" title="带 PreparedStmt 的 SQL 生成器"></a><a href="https://gorm.io/zh_CN/docs/sql_builder.html">带 PreparedStmt 的 SQL 生成器</a></h3><p>Prepared Statement 也可以和原生 SQL 一起使用，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db, err := gorm.Open(sqlite.Open(&quot;gorm.db&quot;), &amp;gorm.Config&#123;</span><br><span class="line">  PrepareStmt: true,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">db.Raw(&quot;select sum(age) from users where role = ?&quot;, &quot;admin&quot;).Scan(&amp;age)</span><br></pre></td></tr></table></figure>

<p>您也可以使用 GORM 的 API <a href="https://gorm.io/zh_CN/docs/session.html">DryRun 模式</a> 编写 SQL 并执行 prepared statement ，查看 <a href="https://gorm.io/zh_CN/docs/session.html">会话模式</a> 获取详情</p>
<h2 id="选择字段"><a href="#选择字段" class="headerlink" title="选择字段"></a>选择字段</h2><p>默认情况下，GORM 在查询时会选择所有的字段，您可以使用 <code>Select</code> 来指定您想要的字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.Select(&quot;Name&quot;, &quot;Age&quot;).Find(&amp;Users&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>或者定义一个较小的 API 结构体，使用 <a href="https://gorm.io/zh_CN/docs/advanced_query.html">智能选择字段功能</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type User struct &#123;</span><br><span class="line">  ID     uint</span><br><span class="line">  Name   string</span><br><span class="line">  Age    int</span><br><span class="line">  Gender string</span><br><span class="line">  // 假设后面还有几百个字段...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type APIUser struct &#123;</span><br><span class="line">  ID   uint</span><br><span class="line">  Name string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 查询时会自动选择 `id`、`name` 字段</span><br><span class="line">db.Model(&amp;User&#123;&#125;).Limit(10).Find(&amp;APIUser&#123;&#125;)</span><br><span class="line">// SELECT `id`, `name` FROM `users` LIMIT 10</span><br></pre></td></tr></table></figure>

<h2 id="迭代、FindInBatches"><a href="#迭代、FindInBatches" class="headerlink" title="迭代、FindInBatches"></a><a href="https://gorm.io/zh_CN/docs/advanced_query.html">迭代、FindInBatches</a></h2><p>用迭代或 in batches 查询并处理记录</p>
<h2 id="Index-Hints"><a href="#Index-Hints" class="headerlink" title="Index Hints"></a><a href="https://gorm.io/zh_CN/docs/hints.html">Index Hints</a></h2><p><a href="https://gorm.io/zh_CN/docs/indexes.html">Index</a> 用于提高数据检索和 SQL 查询性能。 <code>Index Hints</code> 向优化器提供了在查询处理过程中如何选择索引的信息。与 optimizer 相比，它可以更灵活地选择更有效的执行计划</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &quot;gorm.io/hints&quot;</span><br><span class="line"></span><br><span class="line">db.Clauses(hints.UseIndex(&quot;idx_user_name&quot;)).Find(&amp;User&#123;&#125;)</span><br><span class="line">// SELECT * FROM `users` USE INDEX (`idx_user_name`)</span><br><span class="line"></span><br><span class="line">db.Clauses(hints.ForceIndex(&quot;idx_user_name&quot;, &quot;idx_user_id&quot;).ForJoin()).Find(&amp;User&#123;&#125;)</span><br><span class="line">// SELECT * FROM `users` FORCE INDEX FOR JOIN (`idx_user_name`,`idx_user_id`)&quot;</span><br><span class="line"></span><br><span class="line">db.Clauses(</span><br><span class="line">    hints.ForceIndex(&quot;idx_user_name&quot;, &quot;idx_user_id&quot;).ForOrderBy(),</span><br><span class="line">    hints.IgnoreIndex(&quot;idx_user_name&quot;).ForGroupBy(),</span><br><span class="line">).Find(&amp;User&#123;&#125;)</span><br><span class="line">// SELECT * FROM `users` FORCE INDEX FOR ORDER BY (`idx_user_name`,`idx_user_id`) IGNORE INDEX FOR GROUP BY (`idx_user_name`)&quot;</span><br></pre></td></tr></table></figure>

<h2 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h2><p>通过读写分离提高数据吞吐量，查看 <a href="https://gorm.io/zh_CN/docs/dbresolver.html">Database Resolver</a> 获取详情</p>
<p>Scopes 允许你重用常用逻辑，共享逻辑需要定义为类型 <code>func(*gorm.DB) *gorm.DB</code></p>
<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>Scope 查询示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func AmountGreaterThan1000(db *gorm.DB) *gorm.DB &#123;</span><br><span class="line">  return db.Where(&quot;amount &gt; ?&quot;, 1000)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func PaidWithCreditCard(db *gorm.DB) *gorm.DB &#123;</span><br><span class="line">  return db.Where(&quot;pay_mode_sign = ?&quot;, &quot;C&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func PaidWithCod(db *gorm.DB) *gorm.DB &#123;</span><br><span class="line">  return db.Where(&quot;pay_mode_sign = ?&quot;, &quot;C&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func OrderStatus(status []string) func (db *gorm.DB) *gorm.DB &#123;</span><br><span class="line">  return func (db *gorm.DB) *gorm.DB &#123;</span><br><span class="line">    return db.Where(&quot;status IN (?)&quot;, status)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Scopes(AmountGreaterThan1000, PaidWithCreditCard).Find(&amp;orders)</span><br><span class="line">// 查找所有金额大于 1000 的信用卡订单</span><br><span class="line"></span><br><span class="line">db.Scopes(AmountGreaterThan1000, PaidWithCod).Find(&amp;orders)</span><br><span class="line">// 查找所有金额大于 1000 的 COD 订单</span><br><span class="line"></span><br><span class="line">db.Scopes(AmountGreaterThan1000, OrderStatus([]string&#123;&quot;paid&quot;, &quot;shipped&quot;&#125;)).Find(&amp;orders)</span><br><span class="line">// 查找所有金额大于1000 的已付款或已发货订单</span><br></pre></td></tr></table></figure>

<h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func Paginate(r *http.Request) func(db *gorm.DB) *gorm.DB &#123;</span><br><span class="line">  return func (db *gorm.DB) *gorm.DB &#123;</span><br><span class="line">    page, _ := strconv.Atoi(r.Query(&quot;page&quot;))</span><br><span class="line">    if page == 0 &#123;</span><br><span class="line">      page = 1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pageSize, _ := strconv.Atoi(r.Query(&quot;page_size&quot;))</span><br><span class="line">    switch &#123;</span><br><span class="line">    case pageSize &gt; 100:</span><br><span class="line">      pageSize = 100</span><br><span class="line">    case pageSize &lt;= 0:</span><br><span class="line">      pageSize = 10</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    offset := (page - 1) * pageSize</span><br><span class="line">    return db.Offset(offset).Limit(pageSize)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Scopes(Paginate(r)).Find(&amp;users)</span><br><span class="line">db.Scopes(Paginate(r)).Find(&amp;articles)</span><br></pre></td></tr></table></figure>

<h2 id="动态表"><a href="#动态表" class="headerlink" title="动态表"></a>动态表</h2><p>使用 <code>Scopes</code>动态设置查询表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func TableOfYear(user *User, year int) func(db *gorm.DB) *gorm.DB &#123;</span><br><span class="line">  return func(db *gorm.DB) *gorm.DB &#123;</span><br><span class="line">        tableName := user.TableName() + strconv.Itoa(year)</span><br><span class="line">        return db.Table(tableName)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DB.Scopes(TableOfYear(user, 2019)).Find(&amp;users)</span><br><span class="line">// SELECT * FROM users_2019;</span><br><span class="line"></span><br><span class="line">DB.Scopes(TableOfYear(user, 2020)).Find(&amp;users)</span><br><span class="line">// SELECT * FROM users_2020;</span><br><span class="line"></span><br><span class="line">// Table form different database</span><br><span class="line">func TableOfOrg(user *User, dbName string) func(db *gorm.DB) *gorm.DB &#123;</span><br><span class="line">  return func(db *gorm.DB) *gorm.DB &#123;</span><br><span class="line">        tableName := dbName + &quot;.&quot; + user.TableName()</span><br><span class="line">        return db.Table(tableName)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DB.Scopes(TableOfOrg(user, &quot;org1&quot;)).Find(&amp;users)</span><br><span class="line">// SELECT * FROM org1.users;</span><br><span class="line"></span><br><span class="line">DB.Scopes(TableOfOrg(user, &quot;org2&quot;)).Find(&amp;users)</span><br><span class="line">// SELECT * FROM org1.users;</span><br></pre></td></tr></table></figure>

<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>更新/删除的范围示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func CurOrganization(r *http.Request) func(db *gorm.DB) *gorm.DB &#123;</span><br><span class="line">  return func (db *gorm.DB) *gorm.DB &#123;</span><br><span class="line">    org := r.Query(&quot;org&quot;)</span><br><span class="line"></span><br><span class="line">    if org != &quot;&quot; &#123;</span><br><span class="line">      var organization Organization</span><br><span class="line">      if db.Session(&amp;Session&#123;&#125;).First(&amp;organization, &quot;name = ?&quot;, org).Error == nil &#123;</span><br><span class="line">        return db.Where(&quot;org_id = ?&quot;, organization.ID)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    db.AddError(&quot;invalid organization&quot;)</span><br><span class="line">    return db</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Model(&amp;article).Scopes(CurOrganization(r)).Update(&quot;Name&quot;, &quot;name 1&quot;)</span><br><span class="line">// UPDATE articles SET name = &quot;name 1&quot; WHERE org_id = 111</span><br><span class="line">db.Scopes(CurOrganization(r)).Delete(&amp;Article&#123;&#125;)</span><br><span class="line">// DELETE FROM articles WHERE org_id = 111</span><br></pre></td></tr></table></figure>

<h2 id="使用-ID-作为主键"><a href="#使用-ID-作为主键" class="headerlink" title="使用 ID 作为主键"></a>使用 <code>ID</code> 作为主键</h2><p>默认情况下，GORM 会使用 <code>ID</code> 作为表的主键。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type User struct &#123;</span><br><span class="line">  ID   string // 默认情况下，名为 `ID` 的字段会作为表的主键</span><br><span class="line">  Name string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你可以通过标签 <code>primaryKey</code> 将其它字段设为主键</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 将 `UUID` 设为主键</span><br><span class="line">type Animal struct &#123;</span><br><span class="line">  ID     int64</span><br><span class="line">  UUID   string `gorm:&quot;primaryKey&quot;`</span><br><span class="line">  Name   string</span><br><span class="line">  Age    int64</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此外，您还可以看看 <a href="https://gorm.io/zh_CN/docs/composite_primary_key.html">复合主键</a></p>
<h2 id="复数表名"><a href="#复数表名" class="headerlink" title="复数表名"></a>复数表名</h2><p>GORM 使用结构体名的 <code>蛇形命名</code> 作为表名。对于结构体 <code>User</code>，根据约定，其表名为 <code>users</code></p>
<h3 id="TableName"><a href="#TableName" class="headerlink" title="TableName"></a>TableName</h3><p>您可以实现 <code>Tabler</code> 接口来更改默认表名，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Tabler interface &#123;</span><br><span class="line">    TableName() string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// TableName 会将 User 的表名重写为 `profiles`</span><br><span class="line">func (User) TableName() string &#123;</span><br><span class="line">  return &quot;profiles&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：</strong> <code>TableName</code> 不支持动态变化，它会被缓存下来以便后续使用。想要使用动态表名，你可以使用 <code>Scopes</code>，例如：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func UserTable(user User) func (tx *gorm.DB) *gorm.DB &#123;</span><br><span class="line">  return func (tx *gorm.DB) *gorm.DB &#123;</span><br><span class="line">    if user.Admin &#123;</span><br><span class="line">      return tx.Table(&quot;admin_users&quot;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return tx.Table(&quot;users&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Scopes(UserTable(user)).Create(&amp;user)</span><br></pre></td></tr></table></figure>

<h3 id="临时指定表名"><a href="#临时指定表名" class="headerlink" title="临时指定表名"></a>临时指定表名</h3><p>您可以使用 <code>Table</code> 方法临时指定表名，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 根据 User 的字段创建 `deleted_users` 表</span><br><span class="line">db.Table(&quot;deleted_users&quot;).AutoMigrate(&amp;User&#123;&#125;)</span><br><span class="line"></span><br><span class="line">// 从另一张表查询数据</span><br><span class="line">var deletedUsers []User</span><br><span class="line">db.Table(&quot;deleted_users&quot;).Find(&amp;deletedUsers)</span><br><span class="line">// SELECT * FROM deleted_users;</span><br><span class="line"></span><br><span class="line">db.Table(&quot;deleted_users&quot;).Where(&quot;name = ?&quot;, &quot;jinzhu&quot;).Delete(&amp;User&#123;&#125;)</span><br><span class="line">// DELETE FROM deleted_users WHERE name = &#x27;jinzhu&#x27;;</span><br></pre></td></tr></table></figure>

<p>查看 <a href="https://gorm.io/zh_CN/docs/advanced_query.html#from_subquery">from 子查询</a> 了解如何在 FROM 子句中使用子查询</p>
<h3 id="命名策略"><a href="#命名策略" class="headerlink" title="命名策略"></a>命名策略</h3><p>GORM 允许用户通过覆盖默认的 <code>命名策略</code>更改默认的命名约定，命名策略被用于构建： <code>TableName</code>、<code>ColumnName</code>、<code>JoinTableName</code>、<code>RelationshipFKName</code>、<code>CheckerName</code>、<code>IndexName</code>。查看 <a href="https://gorm.io/zh_CN/docs/gorm_config.html#naming_strategy">GORM 配置</a> 获取详情</p>
<h2 id="列名"><a href="#列名" class="headerlink" title="列名"></a>列名</h2><p>根据约定，数据表的列名使用的是 struct 字段名的 <code>蛇形命名</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type User struct &#123;</span><br><span class="line">  ID        uint      // 列名是 `id`</span><br><span class="line">  Name      string    // 列名是 `name`</span><br><span class="line">  Birthday  time.Time // 列名是 `birthday`</span><br><span class="line">  CreatedAt time.Time // 列名是 `created_at`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>您可以使用 <code>column</code> 标签或 <a href="https://gorm.io/zh_CN/docs/conventions.html#naming_strategy"><code>命名策略</code></a> 来覆盖列名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Animal struct &#123;</span><br><span class="line">  AnimalID int64     `gorm:&quot;column:beast_id&quot;`         // 将列名设为 `beast_id`</span><br><span class="line">  Birthday time.Time `gorm:&quot;column:day_of_the_beast&quot;` // 将列名设为 `day_of_the_beast`</span><br><span class="line">  Age      int64     `gorm:&quot;column:age_of_the_beast&quot;` // 将列名设为 `age_of_the_beast`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="时间戳追踪"><a href="#时间戳追踪" class="headerlink" title="时间戳追踪"></a>时间戳追踪</h2><h3 id="CreatedAt"><a href="#CreatedAt" class="headerlink" title="CreatedAt"></a>CreatedAt</h3><p>对于有 <code>CreatedAt</code> 字段的模型，创建记录时，如果该字段值为零值，则将该字段的值设为当前时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.Create(&amp;user) // 将 `CreatedAt` 设为当前时间</span><br><span class="line"></span><br><span class="line">user2 := User&#123;Name: &quot;jinzhu&quot;, CreatedAt: time.Now()&#125;</span><br><span class="line">db.Create(&amp;user2) // user2 的 `CreatedAt` 不会被修改</span><br><span class="line"></span><br><span class="line">// 想要修改该值，您可以使用 `Update`</span><br><span class="line">db.Model(&amp;user).Update(&quot;CreatedAt&quot;, time.Now())</span><br></pre></td></tr></table></figure>

<h3 id="UpdatedAt"><a href="#UpdatedAt" class="headerlink" title="UpdatedAt"></a>UpdatedAt</h3><p>对于有 <code>UpdatedAt</code> 字段的模型，更新记录时，将该字段的值设为当前时间。创建记录时，如果该字段值为零值，则将该字段的值设为当前时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.Save(&amp;user) // 将 `UpdatedAt` 设为当前时间</span><br><span class="line"></span><br><span class="line">db.Model(&amp;user).Update(&quot;name&quot;, &quot;jinzhu&quot;) // 会将 `UpdatedAt` 设为当前时间</span><br><span class="line"></span><br><span class="line">db.Model(&amp;user).UpdateColumn(&quot;name&quot;, &quot;jinzhu&quot;) // `UpdatedAt` 不会被修改</span><br><span class="line"></span><br><span class="line">user2 := User&#123;Name: &quot;jinzhu&quot;, UpdatedAt: time.Now()&#125;</span><br><span class="line">db.Create(&amp;user2) // 创建记录时，user2 的 `UpdatedAt` 不会被修改</span><br><span class="line"></span><br><span class="line">user3 := User&#123;Name: &quot;jinzhu&quot;, UpdatedAt: time.Now()&#125;</span><br><span class="line">db.Save(&amp;user3) // 更新世，user3 的 `UpdatedAt` 会修改为当前时间</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong> GORM 支持拥有多种类型的时间追踪字段。可以根据 UNIX（毫/纳）秒，查看 <a href="https://gorm.io/zh_CN/docs/models.html#time_tracking">Model</a> 获取详情</p>
</blockquote>
<p>GORM 提供了 <code>Set</code>, <code>Get</code>, <code>InstanceSet</code>, <code>InstanceGet</code> 方法来允许用户传值给 <a href="https://gorm.io/zh_CN/docs/hooks.html">勾子</a> 或其他方法</p>
<p>Gorm 中有一些特性用到了这种机制，如迁移表格时传递表格选项。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 创建表时添加表后缀</span><br><span class="line">db.Set(&quot;gorm:table_options&quot;, &quot;ENGINE=InnoDB&quot;).AutoMigrate(&amp;User&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Set-Get"><a href="#Set-Get" class="headerlink" title="Set / Get"></a>Set / Get</h2><p>使用 <code>Set</code> / <code>Get</code> 传递设置到钩子方法，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type User struct &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  CreditCard CreditCard</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (u *User) BeforeCreate(tx *gorm.DB) error &#123;</span><br><span class="line">  myValue, ok := tx.Get(&quot;my_value&quot;)</span><br><span class="line">  // ok =&gt; true</span><br><span class="line">  // myValue =&gt; 123</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type CreditCard struct &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (card *CreditCard) BeforeCreate(tx *gorm.DB) error &#123;</span><br><span class="line">  myValue, ok := tx.Get(&quot;my_value&quot;)</span><br><span class="line">  // ok =&gt; true</span><br><span class="line">  // myValue =&gt; 123</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myValue := 123</span><br><span class="line">db.Set(&quot;my_value&quot;, myValue).Create(&amp;User&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="InstanceSet-InstanceGet"><a href="#InstanceSet-InstanceGet" class="headerlink" title="InstanceSet / InstanceGet"></a>InstanceSet / InstanceGet</h2><p>使用 <code>InstanceSet</code> / <code>InstanceGet</code> 传递设置到 <code>*Statement</code> 的钩子方法，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type User struct &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  CreditCard CreditCard</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (u *User) BeforeCreate(tx *gorm.DB) error &#123;</span><br><span class="line">  myValue, ok := tx.InstanceGet(&quot;my_value&quot;)</span><br><span class="line">  // ok =&gt; true</span><br><span class="line">  // myValue =&gt; 123</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type CreditCard struct &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在创建关联时，GORM 创建了一个新 `*Statement`，所以它不能读取到其它实例的设置</span><br><span class="line">func (card *CreditCard) BeforeCreate(tx *gorm.DB) error &#123;</span><br><span class="line">  myValue, ok := tx.InstanceGet(&quot;my_value&quot;)</span><br><span class="line">  // ok =&gt; false</span><br><span class="line">  // myValue =&gt; nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myValue := 123</span><br><span class="line">db.InstanceSet(&quot;my_value&quot;, myValue).Create(&amp;User&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>DBResolver 为 GORM 提供了多个数据库支持，支持以下功能：</p>
<ul>
<li>支持多个 sources、replicas</li>
<li>读写分离</li>
<li>根据工作表、struct 自动切换连接</li>
<li>手动切换连接</li>
<li>Sources/Replicas 负载均衡</li>
<li>适用于原生 SQL</li>
</ul>
<p><a href="https://github.com/go-gorm/dbresolver">https://github.com/go-gorm/dbresolver</a></p>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import (</span><br><span class="line">  &quot;gorm.io/gorm&quot;</span><br><span class="line">  &quot;gorm.io/plugin/dbresolver&quot;</span><br><span class="line">  &quot;gorm.io/driver/mysql&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">db, err := gorm.Open(mysql.Open(&quot;db1_dsn&quot;), &amp;gorm.Config&#123;&#125;)</span><br><span class="line"></span><br><span class="line">db.Use(dbresolver.Register(dbresolver.Config&#123;</span><br><span class="line">  // `db2` 作为 sources，`db3`、`db4` 作为 replicas</span><br><span class="line">  Sources:  []gorm.Dialector&#123;mysql.Open(&quot;db2_dsn&quot;)&#125;,</span><br><span class="line">  Replicas: []gorm.Dialector&#123;mysql.Open(&quot;db3_dsn&quot;), mysql.Open(&quot;db4_dsn&quot;)&#125;,</span><br><span class="line">  // sources/replicas 负载均衡策略</span><br><span class="line">  Policy: dbresolver.RandomPolicy&#123;&#125;,</span><br><span class="line">&#125;).Register(dbresolver.Config&#123;</span><br><span class="line">  // `db1` 作为 sources（DB 的默认连接），对于 `User`、`Address` 使用 `db5` 作为 replicas</span><br><span class="line">  Replicas: []gorm.Dialector&#123;mysql.Open(&quot;db5_dsn&quot;)&#125;,</span><br><span class="line">&#125;, &amp;User&#123;&#125;, &amp;Address&#123;&#125;).Register(dbresolver.Config&#123;</span><br><span class="line">  // `db6`、`db7` 作为 sources，对于 `orders`、`Product` 使用 `db8` 作为 replicas</span><br><span class="line">  Sources:  []gorm.Dialector&#123;mysql.Open(&quot;db6_dsn&quot;), mysql.Open(&quot;db7_dsn&quot;)&#125;,</span><br><span class="line">  Replicas: []gorm.Dialector&#123;mysql.Open(&quot;db8_dsn&quot;)&#125;,</span><br><span class="line">&#125;, &quot;orders&quot;, &amp;Product&#123;&#125;, &quot;secondary&quot;))</span><br></pre></td></tr></table></figure>

<h2 id="事务-1"><a href="#事务-1" class="headerlink" title="事务"></a>事务</h2><p>使用 transaction 时，DBResolver 也会使用一个事务，且不会切换 sources/replicas 连接</p>
<h2 id="自动切换连接"><a href="#自动切换连接" class="headerlink" title="自动切换连接"></a>自动切换连接</h2><p>DBResolver 会根据工作表、struct 自动切换连接</p>
<p>对于原生 SQL，DBResolver 会从 SQL 中提取表名以匹配 Resolver，除非 SQL 开头为 <code>SELECT</code>（select for update 除外），否则 DBResolver 总是会使用 <code>sources</code> ，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// `User` Resolver 示例</span><br><span class="line">db.Table(&quot;users&quot;).Rows() // replicas `db5`</span><br><span class="line">db.Model(&amp;User&#123;&#125;).Find(&amp;AdvancedUser&#123;&#125;) // replicas `db5`</span><br><span class="line">db.Exec(&quot;update users set name = ?&quot;, &quot;jinzhu&quot;) // sources `db1`</span><br><span class="line">db.Raw(&quot;select name from users&quot;).Row().Scan(&amp;name) // replicas `db5`</span><br><span class="line">db.Create(&amp;user) // sources `db1`</span><br><span class="line">db.Delete(&amp;User&#123;&#125;, &quot;name = ?&quot;, &quot;jinzhu&quot;) // sources `db1`</span><br><span class="line">db.Table(&quot;users&quot;).Update(&quot;name&quot;, &quot;jinzhu&quot;) // sources `db1`</span><br><span class="line"></span><br><span class="line">// Global Resolver 示例</span><br><span class="line">db.Find(&amp;Pet&#123;&#125;) // replicas `db3`/`db4`</span><br><span class="line">db.Save(&amp;Pet&#123;&#125;) // sources `db2`</span><br><span class="line"></span><br><span class="line">// Orders Resolver 示例</span><br><span class="line">db.Find(&amp;Order&#123;&#125;) // replicas `db8`</span><br><span class="line">db.Table(&quot;orders&quot;).Find(&amp;Report&#123;&#125;) // replicas `db8`</span><br></pre></td></tr></table></figure>

<h2 id="读写分离-1"><a href="#读写分离-1" class="headerlink" title="读写分离"></a>读写分离</h2><p>DBResolver 的读写分离目前是基于 <a href="https://gorm.io/docs/write_plugins.html">GORM callback</a> 实现的。</p>
<p>对于 <code>Query</code>、<code>Row</code> callback，如果手动指定为 <code>Write</code> 模式，此时会使用 <code>sources</code>，否则使用 <code>replicas</code>。 对于 <code>Raw</code> callback，如果 SQL 是以 <code>SELECT</code> 开头，语句会被认为是只读的，会使用 <code>replicas</code>，否则会使用 <code>sources</code>。</p>
<h2 id="手动切换连接"><a href="#手动切换连接" class="headerlink" title="手动切换连接"></a>手动切换连接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 使用 Write 模式：从 sources db `db1` 读取 user</span><br><span class="line">db.Clauses(dbresolver.Write).First(&amp;user)</span><br><span class="line"></span><br><span class="line">// 指定 Resolver：从 `secondary` 的 replicas db `db8` 读取 user</span><br><span class="line">db.Clauses(dbresolver.Use(&quot;secondary&quot;)).First(&amp;user)</span><br><span class="line"></span><br><span class="line">// 指定 Resolver 和 Write 模式：从 `secondary` 的 sources db `db6` 或 `db7` 读取 user</span><br><span class="line">db.Clauses(dbresolver.Use(&quot;secondary&quot;), dbresolver.Write).First(&amp;user)</span><br></pre></td></tr></table></figure>

<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>GORM 支持基于策略的 sources/replicas 负载均衡，自定义策略应该是一个实现了以下接口的 struct：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Policy interface &#123;</span><br><span class="line">    Resolve([]gorm.ConnPool) gorm.ConnPool</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当前只实现了一个 <code>RandomPolicy</code> 策略，如果没有指定其它策略，它就是默认策略。</p>
<h2 id="连接池-1"><a href="#连接池-1" class="headerlink" title="连接池"></a>连接池</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.Use(</span><br><span class="line">  dbresolver.Register(dbresolver.Config&#123; /* xxx */ &#125;).</span><br><span class="line">  SetConnMaxIdleTime(time.Hour).</span><br><span class="line">  SetConnMaxLifetime(24 * time.Hour).</span><br><span class="line">  SetMaxIdleConns(100).</span><br><span class="line">  SetMaxOpenConns(200)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>GORM 提供了 Prometheus 插件来收集 <a href="https://pkg.go.dev/database/sql?tab=doc#DBStats">DBStats</a> 和用户自定义指标</p>
<p><a href="https://github.com/go-gorm/prometheus">https://github.com/go-gorm/prometheus</a></p>
<h2 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import (</span><br><span class="line">  &quot;gorm.io/gorm&quot;</span><br><span class="line">  &quot;gorm.io/driver/sqlite&quot;</span><br><span class="line">  &quot;gorm.io/plugin/prometheus&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">db, err := gorm.Open(sqlite.Open(&quot;gorm.db&quot;), &amp;gorm.Config&#123;&#125;)</span><br><span class="line"></span><br><span class="line">db.Use(prometheus.New(prometheus.Config&#123;</span><br><span class="line">  DBName:          &quot;db1&quot;, // 使用 `DBName` 作为指标 label</span><br><span class="line">  RefreshInterval: 15,    // 指标刷新频率（默认为 15 秒）</span><br><span class="line">  PushAddr:        &quot;prometheus pusher address&quot;, // 如果配置了 `PushAddr`，则推送指标</span><br><span class="line">  StartServer:     true,  // 启用一个 http 服务来暴露指标</span><br><span class="line">  HTTPServerPort:  8080,  // 配置 http 服务监听端口，默认端口为 8080 （如果您配置了多个，只有第一个 `HTTPServerPort` 会被使用）</span><br><span class="line">  MetricsCollector: []prometheus.MetricsCollector &#123;</span><br><span class="line">    &amp;prometheus.MySQL&#123;</span><br><span class="line">      VariableNames: []string&#123;&quot;Threads_running&quot;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,  // 用户自定义指标</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>

<h2 id="用户自定义指标"><a href="#用户自定义指标" class="headerlink" title="用户自定义指标"></a>用户自定义指标</h2><p>您可以通过 GORM Prometheus 插件定义并收集自定义的指标，这需要实现 <code>MetricCollector</code> 接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type MetricsCollector interface &#123;</span><br><span class="line">  Metrics(*Prometheus) []prometheus.Collector</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="MySQL-1"><a href="#MySQL-1" class="headerlink" title="MySQL"></a>MySQL</h3><p>GORM 提供了一个示例，说明如何收集 MySQL 状态指标，查看 <a href="https://github.com/go-gorm/prometheus/blob/master/mysql.go">prometheus.MySQL</a> 获取详情</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;prometheus.MySQL&#123;</span><br><span class="line">  // 指标名前缀，默认为 `gorm_status_`</span><br><span class="line">  // 例如： Threads_running 的指标名就是 `gorm_status_Threads_running`</span><br><span class="line">  Prefix: &quot;gorm_status_&quot;,</span><br><span class="line">  // 拉取频率，默认使用 Prometheus 的 RefreshInterval</span><br><span class="line">  Interval: 100,</span><br><span class="line">  // 从 SHOW STATUS 选择变量变量，如果不设置，则使用全部的状态变量</span><br><span class="line">  VariableNames: []string&#123;&quot;Threads_running&quot;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>GORM 提供了 optimizer/index/comment hint 支持</p>
<p><a href="https://github.com/go-gorm/hints">https://github.com/go-gorm/hints</a></p>
<h2 id="Optimizer-Hints"><a href="#Optimizer-Hints" class="headerlink" title="Optimizer Hints"></a>Optimizer Hints</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &quot;gorm.io/hints&quot;</span><br><span class="line"></span><br><span class="line">db.Clauses(hints.New(&quot;hint&quot;)).Find(&amp;User&#123;&#125;)</span><br><span class="line">// SELECT * /*+ hint */ FROM `users`</span><br></pre></td></tr></table></figure>

<h2 id="Index-Hints-1"><a href="#Index-Hints-1" class="headerlink" title="Index Hints"></a>Index Hints</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &quot;gorm.io/hints&quot;</span><br><span class="line"></span><br><span class="line">db.Clauses(hints.UseIndex(&quot;idx_user_name&quot;)).Find(&amp;User&#123;&#125;)</span><br><span class="line">// SELECT * FROM `users` USE INDEX (`idx_user_name`)</span><br><span class="line"></span><br><span class="line">db.Clauses(hints.ForceIndex(&quot;idx_user_name&quot;, &quot;idx_user_id&quot;).ForJoin()).Find(&amp;User&#123;&#125;)</span><br><span class="line">// SELECT * FROM `users` FORCE INDEX FOR JOIN (`idx_user_name`,`idx_user_id`)&quot;</span><br><span class="line"></span><br><span class="line">db.Clauses(</span><br><span class="line">    hints.ForceIndex(&quot;idx_user_name&quot;, &quot;idx_user_id&quot;).ForOrderBy(),</span><br><span class="line">    hints.IgnoreIndex(&quot;idx_user_name&quot;).ForGroupBy(),</span><br><span class="line">).Find(&amp;User&#123;&#125;)</span><br><span class="line">// SELECT * FROM `users` FORCE INDEX FOR ORDER BY (`idx_user_name`,`idx_user_id`) IGNORE INDEX FOR GROUP BY (`idx_user_name`)&quot;</span><br></pre></td></tr></table></figure>

<h2 id="Comment-Hints"><a href="#Comment-Hints" class="headerlink" title="Comment Hints"></a>Comment Hints</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &quot;gorm.io/hints&quot;</span><br><span class="line"></span><br><span class="line">db.Clauses(hints.Comment(&quot;select&quot;, &quot;master&quot;)).Find(&amp;User&#123;&#125;)</span><br><span class="line">// SELECT /*master*/ * FROM `users`;</span><br><span class="line"></span><br><span class="line">db.Clauses(hints.CommentBefore(&quot;insert&quot;, &quot;node2&quot;)).Create(&amp;user)</span><br><span class="line">// /*node2*/ INSERT INTO `users` ...;</span><br><span class="line"></span><br><span class="line">db.Clauses(hints.CommentAfter(&quot;select&quot;, &quot;node2&quot;)).Create(&amp;user)</span><br><span class="line">// /*node2*/ INSERT INTO `users` ...;</span><br><span class="line"></span><br><span class="line">db.Clauses(hints.CommentAfter(&quot;where&quot;, &quot;hint&quot;)).Find(&amp;User&#123;&#125;, &quot;id = ?&quot;, 1)</span><br><span class="line">// SELECT * FROM `users` WHERE id = ? /* hint */</span><br></pre></td></tr></table></figure>

<p>GORM 允许通过 <code>index</code>、<code>uniqueIndex</code> 标签创建索引，这些索引将在使用 GORM 进行<a href="https://gorm.io/zh_CN/docs/migration.html">AutoMigrate 或 Createtable </a>时创建</p>
<h2 id="索引标签"><a href="#索引标签" class="headerlink" title="索引标签"></a>索引标签</h2><p>GORM 可以接受很多索引设置，例如 <code>class</code>、<code>type</code>、<code>where</code>、<code>comment</code>、<code>expression</code>、<code>sort</code>、<code>collate</code>、<code>option</code></p>
<p>下面的示例演示了如何使用它：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type User struct &#123;</span><br><span class="line">    Name  string `gorm:&quot;index&quot;`</span><br><span class="line">    Name2 string `gorm:&quot;index:idx_name,unique&quot;`</span><br><span class="line">    Name3 string `gorm:&quot;index:,sort:desc,collate:utf8,type:btree,length:10,where:name3 != &#x27;jinzhu&#x27;&quot;`</span><br><span class="line">    Name4 string `gorm:&quot;uniqueIndex&quot;`</span><br><span class="line">    Age   int64  `gorm:&quot;index:,class:FULLTEXT,comment:hello \\, world,where:age &gt; 10&quot;`</span><br><span class="line">    Age2  int64  `gorm:&quot;index:,expression:ABS(age)&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// MySQL 选项</span><br><span class="line">type User struct &#123;</span><br><span class="line">    Name string `gorm:&quot;index:,class:FULLTEXT,option:WITH PARSER ngram INVISIBLE&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// PostgreSQL 选项</span><br><span class="line">type User struct &#123;</span><br><span class="line">    Name string `gorm:&quot;index:,option:CONCURRENTLY&quot;`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uniqueIndex` 标签的作用与 `index` 类似，它等效于 `index:,unique</span><br><span class="line">type User struct &#123;</span><br><span class="line">    Name1 string `gorm:&quot;uniqueIndex&quot;`</span><br><span class="line">    Name2 string `gorm:&quot;uniqueIndex:idx_name,sort:desc&quot;`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="复合索引"><a href="#复合索引" class="headerlink" title="复合索引"></a>复合索引</h2><p>两个字段使用同一个索引名将创建复合索引，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type User struct &#123;</span><br><span class="line">    Name   string `gorm:&quot;index:idx_member&quot;`</span><br><span class="line">    Number string `gorm:&quot;index:idx_member&quot;`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字段优先级"><a href="#字段优先级" class="headerlink" title="字段优先级"></a>字段优先级</h3><p>复合索引列的顺序会影响其性能，因此必须仔细考虑</p>
<p>您可以使用 <code>priority</code> 指定顺序，默认优先级值是 <code>10</code>，如果优先级值相同，则顺序取决于模型结构体字段的顺序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type User struct &#123;</span><br><span class="line">    Name   string `gorm:&quot;index:idx_member&quot;`</span><br><span class="line">    Number string `gorm:&quot;index:idx_member&quot;`</span><br><span class="line">&#125;</span><br><span class="line">// column order: name, number</span><br><span class="line"></span><br><span class="line">type User struct &#123;</span><br><span class="line">    Name   string `gorm:&quot;index:idx_member,priority:2&quot;`</span><br><span class="line">    Number string `gorm:&quot;index:idx_member,priority:1&quot;`</span><br><span class="line">&#125;</span><br><span class="line">// column order: number, name</span><br><span class="line"></span><br><span class="line">type User struct &#123;</span><br><span class="line">    Name   string `gorm:&quot;index:idx_member,priority:12&quot;`</span><br><span class="line">    Number string `gorm:&quot;index:idx_member&quot;`</span><br><span class="line">&#125;</span><br><span class="line">// column order: number, name</span><br></pre></td></tr></table></figure>

<h2 id="多索引"><a href="#多索引" class="headerlink" title="多索引"></a>多索引</h2><p>一个字段接受多个 <code>index</code>、<code>uniqueIndex</code> 标签，这会在一个字段上创建多个索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type UserIndex struct &#123;</span><br><span class="line">    OID          int64  `gorm:&quot;index:idx_id;index:idx_oid,unique&quot;`</span><br><span class="line">    MemberNumber string `gorm:&quot;index:idx_id&quot;`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>GORM 允许通过标签创建数据库约束，约束会在通过 GORM 进行 <a href="https://gorm.io/zh_CN/docs/migration.html">AutoMigrate 或创建数据表</a>时被创建。</p>
<h2 id="检查约束"><a href="#检查约束" class="headerlink" title="检查约束"></a>检查约束</h2><p>通过 <code>check</code> 标签创建检查约束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type UserIndex struct &#123;</span><br><span class="line">    Name  string `gorm:&quot;check:name_checker,name &lt;&gt; &#x27;jinzhu&#x27;&quot;`</span><br><span class="line">    Name2 string `gorm:&quot;check:name &lt;&gt; &#x27;jinzhu&#x27;&quot;`</span><br><span class="line">    Name3 string `gorm:&quot;check:,name &lt;&gt; &#x27;jinzhu&#x27;&quot;`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="索引约束"><a href="#索引约束" class="headerlink" title="索引约束"></a>索引约束</h2><p>查看 <a href="https://gorm.io/zh_CN/docs/indexes.html">数据库索引</a> 获取详情</p>
<h2 id="外键约束-4"><a href="#外键约束-4" class="headerlink" title="外键约束"></a>外键约束</h2><p>GORM 会为关联创建外键约束，您可以在初始化过程中禁用此功能：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db, err := gorm.Open(sqlite.Open(&quot;gorm.db&quot;), &amp;gorm.Config&#123;</span><br><span class="line">  DisableForeignKeyConstraintWhenMigrating: true,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>GORM 允许您通过 <code>constraint</code> 标签的 <code>OnDelete</code>、<code>OnUpdate</code> 选项设置外键约束，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type User struct &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  CompanyID  int</span><br><span class="line">  Company    Company    `gorm:&quot;constraint:OnUpdate:CASCADE,OnDelete:SET NULL;&quot;`</span><br><span class="line">  CreditCard CreditCard `gorm:&quot;constraint:OnUpdate:CASCADE,OnDelete:SET NULL;&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type CreditCard struct &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Number string</span><br><span class="line">  UserID uint</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Company struct &#123;</span><br><span class="line">  ID   int</span><br><span class="line">  Name string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过将多个字段设为主键，以创建复合主键，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Product struct &#123;</span><br><span class="line">  ID           string `gorm:&quot;primaryKey&quot;`</span><br><span class="line">  LanguageCode string `gorm:&quot;primaryKey&quot;`</span><br><span class="line">  Code         string</span><br><span class="line">  Name         string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>默认情况下，整型 <code>PrioritizedPrimaryField</code> 启用了 <code>AutoIncrement</code>，要禁用它，您需要为整型字段关闭 <code>autoIncrement</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Product struct &#123;</span><br><span class="line">  CategoryID uint64 `gorm:&quot;primaryKey;autoIncrement:false&quot;`</span><br><span class="line">  TypeID     uint64 `gorm:&quot;primaryKey;autoIncrement:false&quot;`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>GORM 使用 <code>database/sql</code> 的参数占位符来构造 SQL 语句，这可以自动转义参数，避免 SQL 注入数据</p>
<blockquote>
<p><strong>注意</strong> Logger 打印的 SQL 并不像最终执行的 SQL 那样已经转义，复制和运行这些 SQL 时应当注意。</p>
</blockquote>
<h2 id="查询条件"><a href="#查询条件" class="headerlink" title="查询条件"></a>查询条件</h2><p>用户的输入只能作为参数，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">userInput := &quot;jinzhu;drop table users;&quot;</span><br><span class="line"></span><br><span class="line">// 安全的，会被转义</span><br><span class="line">db.Where(&quot;name = ?&quot;, userInput).First(&amp;user)</span><br><span class="line"></span><br><span class="line">// SQL 注入</span><br><span class="line">db.Where(fmt.Sprintf(&quot;name = %v&quot;, userInput)).First(&amp;user)</span><br></pre></td></tr></table></figure>

<h2 id="内联条件-1"><a href="#内联条件-1" class="headerlink" title="内联条件"></a>内联条件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 会被转义</span><br><span class="line">db.First(&amp;user, &quot;name = ?&quot;, userInput)</span><br><span class="line"></span><br><span class="line">// SQL 注入</span><br><span class="line">db.First(&amp;user, fmt.Sprintf(&quot;name = %v&quot;, userInput))</span><br></pre></td></tr></table></figure>

<h2 id="SQL-注入方法"><a href="#SQL-注入方法" class="headerlink" title="SQL 注入方法"></a>SQL 注入方法</h2><p>为了支持某些功能，一些输入不会被转义，调用方法时要小心用户输入的参数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.Select(&quot;name; drop table users;&quot;).First(&amp;user)</span><br><span class="line">db.Distinct(&quot;name; drop table users;&quot;).First(&amp;user)</span><br><span class="line"></span><br><span class="line">db.Model(&amp;user).Pluck(&quot;name; drop table users;&quot;, &amp;names)</span><br><span class="line"></span><br><span class="line">db.Group(&quot;name; drop table users;&quot;).First(&amp;user)</span><br><span class="line"></span><br><span class="line">db.Group(&quot;name&quot;).Having(&quot;1 = 1;drop table users;&quot;).First(&amp;user)</span><br><span class="line"></span><br><span class="line">db.Raw(&quot;select name from users; drop table users;&quot;).First(&amp;user)</span><br><span class="line"></span><br><span class="line">db.Exec(&quot;select name from users; drop table users;&quot;)</span><br><span class="line"></span><br><span class="line">db.Order(&quot;name; drop table users;&quot;).First(&amp;user)</span><br></pre></td></tr></table></figure>

<p>避免 SQL 注入的一般原则是，不信任用户提交的数据。您可以进行白名单验证来测试用户的输入是否为已知安全的、已批准、已定义的输入，并且在使用用户的输入时，仅将它们作为参数。</p>
<h2 id="GORM-提供的配置可以在初始化时使用"><a href="#GORM-提供的配置可以在初始化时使用" class="headerlink" title="GORM 提供的配置可以在初始化时使用"></a>GORM 提供的配置可以在初始化时使用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Config struct &#123;</span><br><span class="line">  SkipDefaultTransaction   bool</span><br><span class="line">  NamingStrategy           schema.Namer</span><br><span class="line">  Logger                   logger.Interface</span><br><span class="line">  NowFunc                  func() time.Time</span><br><span class="line">  DryRun                   bool</span><br><span class="line">  PrepareStmt              bool</span><br><span class="line">  DisableNestedTransaction bool</span><br><span class="line">  AllowGlobalUpdate        bool</span><br><span class="line">  DisableAutomaticPing     bool</span><br><span class="line">  DisableForeignKeyConstraintWhenMigrating bool</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="跳过默认事务"><a href="#跳过默认事务" class="headerlink" title="跳过默认事务"></a>跳过默认事务</h2><p>为了确保数据一致性，GORM 会在事务里执行写入操作（创建、更新、删除）。如果没有这方面的要求，您可以在初始化时禁用它。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db, err := gorm.Open(sqlite.Open(&quot;gorm.db&quot;), &amp;gorm.Config&#123;</span><br><span class="line">  SkipDefaultTransaction: true,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="命名策略-1"><a href="#命名策略-1" class="headerlink" title="命名策略"></a>命名策略</h2><p>GORM 允许用户通过覆盖默认的 <code>NamingStrategy</code>来更改命名约定，这需要实现接口 <code>Namer</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Namer interface &#123;</span><br><span class="line">    TableName(table string) string</span><br><span class="line">    SchemaName(table string) string</span><br><span class="line">    ColumnName(table, column string) string</span><br><span class="line">    JoinTableName(table string) string</span><br><span class="line">    RelationshipFKName(Relationship) string</span><br><span class="line">    CheckerName(table, column string) string</span><br><span class="line">    IndexName(table, column string) string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>默认 <code>NamingStrategy</code> 也提供了几个选项，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db, err := gorm.Open(sqlite.Open(&quot;gorm.db&quot;), &amp;gorm.Config&#123;</span><br><span class="line">  NamingStrategy: schema.NamingStrategy&#123;</span><br><span class="line">    TablePrefix: &quot;t_&quot;,   // 表名前缀，`User`表为`t_users`</span><br><span class="line">    SingularTable: true, // 使用单数表名，启用该选项后，`User` 表将是`user`</span><br><span class="line">    NameReplacer: strings.NewReplacer(&quot;CID&quot;, &quot;Cid&quot;), // 在转为数据库名称之前，使用NameReplacer更改结构/字段名称。</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Logger-3"><a href="#Logger-3" class="headerlink" title="Logger"></a>Logger</h2><p>允许通过覆盖此选项更改 GORM 的默认 logger，参考 <a href="https://gorm.io/zh_CN/docs/logger.html">Logger</a> 获取详情</p>
<h2 id="NowFunc-1"><a href="#NowFunc-1" class="headerlink" title="NowFunc"></a>NowFunc</h2><p>更改创建时间使用的函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db, err := gorm.Open(sqlite.Open(&quot;gorm.db&quot;), &amp;gorm.Config&#123;</span><br><span class="line">  NowFunc: func() time.Time &#123;</span><br><span class="line">    return time.Now().Local()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="DryRun-1"><a href="#DryRun-1" class="headerlink" title="DryRun"></a>DryRun</h2><p>生成 <code>SQL</code> 但不执行，可以用于准备或测试生成的 SQL，参考 <a href="https://gorm.io/zh_CN/docs/session.html">会话</a> 获取详情</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db, err := gorm.Open(sqlite.Open(&quot;gorm.db&quot;), &amp;gorm.Config&#123;</span><br><span class="line">  DryRun: false,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="PrepareStmt"><a href="#PrepareStmt" class="headerlink" title="PrepareStmt"></a>PrepareStmt</h2><p><code>PreparedStmt</code> 在执行任何 SQL 时都会创建一个 prepared statement 并将其缓存，以提高后续的效率，参考 <a href="https://gorm.io/zh_CN/docs/session.html">会话</a> 获取详情</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db, err := gorm.Open(sqlite.Open(&quot;gorm.db&quot;), &amp;gorm.Config&#123;</span><br><span class="line">  PrepareStmt: false,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="禁用嵌套事务-1"><a href="#禁用嵌套事务-1" class="headerlink" title="禁用嵌套事务"></a>禁用嵌套事务</h2><p>在一个事务中使用 <code>Transaction</code> 方法，GORM 会使用 <code>SavePoint(savedPointName)</code>，<code>RollbackTo(savedPointName)</code> 为你提供嵌套事务支持，你可以通过 <code>DisableNestedTransaction</code> 选项关闭它，查看 <a href="https://gorm.io/zh_CN/docs/session.html">Session</a> 获取详情</p>
<h2 id="AllowGlobalUpdate-1"><a href="#AllowGlobalUpdate-1" class="headerlink" title="AllowGlobalUpdate"></a>AllowGlobalUpdate</h2><p>启用全局 update/delete，查看 <a href="https://gorm.io/zh_CN/docs/session.html">Session</a> 获取详情</p>
<h2 id="DisableAutomaticPing"><a href="#DisableAutomaticPing" class="headerlink" title="DisableAutomaticPing"></a>DisableAutomaticPing</h2><p>在完成初始化后，GORM 会自动 ping 数据库以检查数据库的可用性，若要禁用该特性，可将其设置为 <code>true</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db, err := gorm.Open(sqlite.Open(&quot;gorm.db&quot;), &amp;gorm.Config&#123;</span><br><span class="line">  DisableAutomaticPing: true,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="DisableForeignKeyConstraintWhenMigrating"><a href="#DisableForeignKeyConstraintWhenMigrating" class="headerlink" title="DisableForeignKeyConstraintWhenMigrating"></a>DisableForeignKeyConstraintWhenMigrating</h2><p>在 <code>AutoMigrate</code> 或 <code>CreateTable</code> 时，GORM 会自动创建外键约束，若要禁用该特性，可将其设置为 <code>true</code>，参考 <a href="https://gorm.io/zh_CN/docs/migration.html">迁移</a> 获取详情。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db, err := gorm.Open(sqlite.Open(&quot;gorm.db&quot;), &amp;gorm.Config&#123;</span><br><span class="line">  DisableForeignKeyConstraintWhenMigrating: true,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Callbacks"><a href="#Callbacks" class="headerlink" title="Callbacks"></a>Callbacks</h2><p>GORM 自身也是基于 <code>Callbacks</code> 的，包括 <code>Create</code>、<code>Query</code>、<code>Update</code>、<code>Delete</code>、<code>Row</code>、<code>Raw</code>。此外，您也完全可以根据自己的意愿自定义 GORM</p>
<p>回调会注册到全局 <code>*gorm.DB</code>，而不是会话级别。如果您想要 <code>*gorm.DB</code> 具有不同的回调，您需要初始化另一个 <code>*gorm.DB</code></p>
<h3 id="注册-Callback"><a href="#注册-Callback" class="headerlink" title="注册 Callback"></a>注册 Callback</h3><p>注册 callback 至 callbacks</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func cropImage(db *gorm.DB) &#123;</span><br><span class="line">  if db.Statement.Schema != nil &#123;</span><br><span class="line">    // 裁剪图片字段并上传到CDN，dummy code</span><br><span class="line">    for _, field := range db.Statement.Schema.Fields &#123;</span><br><span class="line">      switch db.Statement.ReflectValue.Kind() &#123;</span><br><span class="line">      case reflect.Slice, reflect.Array:</span><br><span class="line">        for i := 0; i &lt; db.Statement.ReflectValue.Len(); i++ &#123;</span><br><span class="line">          // 从字段中获取数值</span><br><span class="line">          if fieldValue, isZero := field.ValueOf(db.Statement.ReflectValue.Index(i)); !isZero &#123;</span><br><span class="line">            if crop, ok := fieldValue.(CropInterface); ok &#123;</span><br><span class="line">              crop.Crop()</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      case reflect.Struct:</span><br><span class="line">        // 从字段中获取数值</span><br><span class="line">        if fieldValue, isZero := field.ValueOf(db.Statement.ReflectValue); !isZero &#123;</span><br><span class="line">          if crop, ok := fieldValue.(CropInterface); ok &#123;</span><br><span class="line">            crop.Crop()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 将值设置给字段</span><br><span class="line">        err := field.Set(db.Statement.ReflectValue, &quot;newValue&quot;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 当前实体的所有字段</span><br><span class="line">    db.Statement.Schema.Fields</span><br><span class="line"></span><br><span class="line">    // 当前实体的所有主键字段</span><br><span class="line">    db.Statement.Schema.PrimaryFields</span><br><span class="line"></span><br><span class="line">    // 优先主键字段：带有数据库名称`id`或第一个定义的主键的字段。</span><br><span class="line">    db.Statement.Schema.PrioritizedPrimaryField</span><br><span class="line"></span><br><span class="line">    // 当前模型的所有关系</span><br><span class="line">    db.Statement.Schema.Relationships</span><br><span class="line"></span><br><span class="line">    // 使用字段名或数据库名查找字段</span><br><span class="line">    field := db.Statement.Schema.LookUpField(&quot;Name&quot;)</span><br><span class="line"></span><br><span class="line">    // processing</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Callback().Create().Register(&quot;crop_image&quot;, cropImage)</span><br><span class="line">// 为Create注册一个回调</span><br></pre></td></tr></table></figure>

<h3 id="删除-Callback"><a href="#删除-Callback" class="headerlink" title="删除 Callback"></a>删除 Callback</h3><p>从 callbacks 中删除回调</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.Callback().Create().Remove(&quot;gorm:create&quot;)</span><br><span class="line">// 从 Create 的 callbacks 中删除 `gorm:create`</span><br></pre></td></tr></table></figure>

<h3 id="替换-Callback"><a href="#替换-Callback" class="headerlink" title="替换 Callback"></a>替换 Callback</h3><p>用一个新的回调替换已有的同名回调</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.Callback().Create().Replace(&quot;gorm:create&quot;, newCreateFunction)</span><br><span class="line">// 用新函数 `newCreateFunction` 替换 Create 流程目前的 `gorm:create`</span><br></pre></td></tr></table></figure>

<h3 id="注册带顺序的-Callback"><a href="#注册带顺序的-Callback" class="headerlink" title="注册带顺序的 Callback"></a>注册带顺序的 Callback</h3><p>注册带顺序的 Callback</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// gorm:create 之前</span><br><span class="line">db.Callback().Create().Before(&quot;gorm:create&quot;).Register(&quot;update_created_at&quot;, updateCreated)</span><br><span class="line"></span><br><span class="line">// gorm:create 之后</span><br><span class="line">db.Callback().Create().After(&quot;gorm:create&quot;).Register(&quot;update_created_at&quot;, updateCreated)</span><br><span class="line"></span><br><span class="line">// gorm:query 之后</span><br><span class="line">db.Callback().Query().After(&quot;gorm:query&quot;).Register(&quot;my_plugin:after_query&quot;, afterQuery)</span><br><span class="line"></span><br><span class="line">// gorm:delete 之后</span><br><span class="line">db.Callback().Delete().After(&quot;gorm:delete&quot;).Register(&quot;my_plugin:after_delete&quot;, afterDelete)</span><br><span class="line"></span><br><span class="line">// gorm:update 之前</span><br><span class="line">db.Callback().Update().Before(&quot;gorm:update&quot;).Register(&quot;my_plugin:before_update&quot;, beforeUpdate)</span><br><span class="line"></span><br><span class="line">// 位于 gorm:before_create 之后 gorm:create 之前</span><br><span class="line">db.Callback().Create().Before(&quot;gorm:create&quot;).After(&quot;gorm:before_create&quot;).Register(&quot;my_plugin:before_create&quot;, beforeCreate)</span><br><span class="line"></span><br><span class="line">// 所有其它 callback 之前</span><br><span class="line">db.Callback().Create().Before(&quot;*&quot;).Register(&quot;update_created_at&quot;, updateCreated)</span><br><span class="line"></span><br><span class="line">// 所有其它 callback 之后</span><br><span class="line">db.Callback().Create().After(&quot;*&quot;).Register(&quot;update_created_at&quot;, updateCreated)</span><br></pre></td></tr></table></figure>

<h3 id="预定义-Callback"><a href="#预定义-Callback" class="headerlink" title="预定义 Callback"></a>预定义 Callback</h3><p>GORM 已经定义了 <a href="https://github.com/go-gorm/gorm/blob/master/callbacks/callbacks.go">一些 callback</a> 来支持当前的 GORM 功能，在启动您的插件之前可以先看看这些 callback</p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>GORM 提供了 <code>Use</code> 方法来注册插件，插件需要实现 <code>Plugin</code> 接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Plugin interface &#123;</span><br><span class="line">  Name() string</span><br><span class="line">  Initialize(*gorm.DB) error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当插件首次注册到 GORM 时将调用 <code>Initialize</code> 方法，且 GORM 会保存已注册的插件，你可以这样访问访问：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.Config.Plugins[pluginName]</span><br></pre></td></tr></table></figure>

<h2 id="编写新驱动"><a href="#编写新驱动" class="headerlink" title="编写新驱动"></a>编写新驱动</h2><p>GORM 官方支持 <code>sqlite</code>、<code>mysql</code>、<code>postgres</code>、<code>sqlserver</code>。</p>
<p>有些数据库可能兼容 <code>mysql</code>、<code>postgres</code> 的方言，在这种情况下，你可以直接使用这些数据库的方言。</p>
<p>对于其它不兼容的情况，您可以自行编写一个新驱动，这需要实现 <a href="https://pkg.go.dev/gorm.io/gorm?tab=doc#Dialector">方言接口</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Dialector interface &#123;</span><br><span class="line">    Name() string</span><br><span class="line">    Initialize(*DB) error</span><br><span class="line">    Migrator(db *DB) Migrator</span><br><span class="line">    DataTypeOf(*schema.Field) string</span><br><span class="line">    DefaultValueOf(*schema.Field) clause.Expression</span><br><span class="line">    BindVarTo(writer clause.Writer, stmt *Statement, v interface&#123;&#125;)</span><br><span class="line">    QuoteTo(clause.Writer, string)</span><br><span class="line">    Explain(sql string, vars ...interface&#123;&#125;) string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看 <a href="https://github.com/go-gorm/mysql">MySQL 驱动</a> 的例子</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>gorm</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JUC笔记PDF-狂神</title>
    <url>/posts/24041/</url>
    <content><![CDATA[<h1 id="多线程进阶-gt-JUC-并发编程"><a href="#多线程进阶-gt-JUC-并发编程" class="headerlink" title="多线程进阶=&gt;JUC 并发编程"></a>多线程进阶=&gt;JUC 并发编程</h1><span id="more"></span>

<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><div class="pdfobject-container" data-target="JUC.pdf" data-height="900px"></div>

<h2 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h2><p><a href="%E4%BB%A3%E7%A0%81.rar" title="下载代码">juc</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>JUC</tag>
        <tag>线程</tag>
        <tag>进程</tag>
        <tag>并行</tag>
      </tags>
  </entry>
  <entry>
    <title>Java注解和反射-KuangShen</title>
    <url>/posts/41977/</url>
    <content><![CDATA[<h1 id="注解和反射"><a href="#注解和反射" class="headerlink" title="注解和反射"></a>注解和反射</h1><p>注解(Annotation)是 jdk5 引入的新技术。</p>
<p>Anotation 的作用：可以对程序作出解释，可以被其它程序（比如编译器等）读取。</p>
<p>Annotation 的格式：注解是以”@注释名”在代码中存在的，还可以添加一些参数值。</p>
<p>Annotation 可以在 package，class，method，filed 等上面，相当于给它们添加了额外的辅助信息，可以通过反射机制来实现这些元数据的访问。</p>
<span id="more"></span>

<h2 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h2><p>@Override：定义在 java.long.Override 中，此注解只适用于修辞方法，表示一个方法声明打算重写超类中的另一个方法声明。</p>
<p>@Deprecated：定义在 java.long.Deprecated 中，此注解可用于修辞方法，属性，类表示不鼓励使用这样的元素。</p>
<p>@SuppressWarnings：定义在 java.long.SuppressWarnings 中，用来抑制编译时的警告信息。需添加一个参数才能正常使用。</p>
<h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><p>元注解的作用就是负责注解其他注解，Java 定义了 4 个标准的 meta-annotation 类型，它们被用来提供对其他 annotation 类型作说明。</p>
<p>这些类型和它所支持的类在 java.long.annotation 包中可恶意找到（@Target，@Retention，@Decumented，@Inherited）。</p>
<p>@Target：用于描述注解使用的范围（即：被描述的注解可以用在什么地方）。</p>
<p>@Retention：表示需要在什么级别保存该注释信息用于描述注解的生命周期（source&lt;class&lt;runtime）。</p>
<p>@Decumented：说明该注解将被包含在 javadoc 中。</p>
<p>@Inherite：说明子类可以继承父类中的该注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="comment">//元注解</span></span><br><span class="line"><span class="meta">@MyAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个注解</span></span><br><span class="line"><span class="comment">//Target表示注解可以用在哪些地方</span></span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.METHOD,ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="comment">//表示注解在什么地方还有效</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="comment">//表示是否将注解生成在javadoc中</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">//表示子类可以继承父类的注解</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p>使用@interface 自定义注解时，自动继承了 java.long.annotation.Annotation 接口。</p>
<ul>
<li>@interface 用来声明一个注解，格式：public interface 注解名（定义内容）。</li>
<li>其中的每一个方法实际上是声明了一个配置参数。</li>
<li>方法的名称就是参数的名称。</li>
<li>返回值的类型就是参数的类型（返回值只能是基本数据类型，Class，String，enum）。</li>
<li>可以通过 default 来声明参数的默认值。</li>
<li>如果只有一个参数成员，一般参数名为 value。</li>
<li>注解元素必须要有值，我们定义注解元素时，经常使用空字符串，0 作为默认值。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="comment">//自定义注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注解可以显示赋值  如果没有默认值 就一定要给注解赋值</span></span><br><span class="line">    <span class="meta">@MyAnnotation2(name = &quot;zz&quot;,school = &#123;&quot;西北&quot;,&quot;华中&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//只有一个参数且是value时 value可以不写</span></span><br><span class="line">    <span class="meta">@MyAnnotation3(&quot;周&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation2&#123;</span><br><span class="line">    <span class="comment">//注解的参数  参数类型+参数名 （）</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;<span class="comment">//如果默认值为-1 代表不存在</span></span><br><span class="line">    String[] school();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation3&#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><p>Reflection（反射）是 Java 被视为动态语言的关键，反射机制允许程序在执行期间借助于 Reflection API 取得任何类的内部消息，并能直接操作任意对象的内部属性及方法。</p>
<p>加载完类之后，在堆内存的方法区中就产生了一个 Class 类型的对象（一个类只有一个 Class 对象），这个对象包含了完整的类的结构信息。我们可以通过这个对象看到类的结构，这个对象就像一面镜子，透过这个镜子看到类的结构，我们形象称之为：反射。</p>
<p>反射可以实现动态创建对象和编译，体现出很大的灵活性。但是对性能有影响。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.annotation;</span><br><span class="line"><span class="comment">//反射</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//通过反射获取类的Class对象</span></span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;com.annotation.User&quot;</span>);</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        <span class="comment">//一个类在内存中只有一个Class对象</span></span><br><span class="line">        <span class="comment">//一个类被加载后，类的整个结构都会被封装在Class对象中</span></span><br><span class="line">        Class c2 = Class.forName(<span class="string">&quot;com.annotation.User&quot;</span>);</span><br><span class="line">        Class c3 = Class.forName(<span class="string">&quot;com.annotation.User&quot;</span>);</span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实体类  pojo，entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> id, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h3><p>对象通过反射得到的信息：某个类的属性，方法和构造器，某个类到底实现了哪些接口；对于每个类而言，JRE 都为其保留一个不变的 Class 类型的对象，一个 Class 包含了特定某个结构的有关信息。</p>
<ul>
<li>Class 本身也是一个类，Class 对象只能由系统建立对象。</li>
<li>一个加载的类在 JVM 中只有一个 Class 实列，一个 Class 对象对应的是一个加载到 JVM 中的.class 文件。</li>
<li>每个类的实例都会记得自己是哪个 Class 实例所生成，通过 Class 对象可以完整地得到一个类中所有被加载的结构。</li>
<li>Class 类是 Reflecion 的根源，针对任何你想动态加载运行的类，唯有先获得相应的 Class 对象。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.annotation;</span><br><span class="line"><span class="comment">//Class类的创建方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(person.name);</span><br><span class="line">        <span class="comment">//通过对象获得</span></span><br><span class="line">        Class c1 = person.getClass();</span><br><span class="line">        System.out.println(c1.hashCode());</span><br><span class="line">        <span class="comment">//forname获得</span></span><br><span class="line">        Class c2 = Class.forName(<span class="string">&quot;com.annotation.Student&quot;</span>);</span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line">        <span class="comment">//通过类名.class获得</span></span><br><span class="line">        Class c3 = Student.class;</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line">        <span class="comment">//基本内置类型的包装类都有一个Type属性</span></span><br><span class="line">        Class c4 = Integer.TYPE;</span><br><span class="line">        System.out.println(c4);</span><br><span class="line">        <span class="comment">//获得父类的类型</span></span><br><span class="line">        Class c5 = c1.getSuperclass();</span><br><span class="line">        System.out.println(c5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;学生&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;老师&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Class，接口，数组，枚举，注解，基本数据类型，void 都有 Class 类对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="comment">//所有类型的Class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class c1 = Object.class;<span class="comment">//类</span></span><br><span class="line">        Class c2 = Comparable.class;<span class="comment">//接口</span></span><br><span class="line">        Class c3 = String[].class;<span class="comment">//一维数组</span></span><br><span class="line">        Class c4 = <span class="keyword">int</span>[][].class;<span class="comment">//二维数组</span></span><br><span class="line">        Class c5 = Override.class;<span class="comment">//注解</span></span><br><span class="line">        Class c6 = ElementType.class;<span class="comment">//枚举</span></span><br><span class="line">        Class c7 = Integer.class;<span class="comment">//基本数据类型</span></span><br><span class="line">        Class c8 = <span class="keyword">void</span>.class;<span class="comment">//void</span></span><br><span class="line">        Class c9 = Class.class;<span class="comment">//Class</span></span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        System.out.println(c3);</span><br><span class="line">        System.out.println(c4);</span><br><span class="line">        System.out.println(c5);</span><br><span class="line">        System.out.println(c6);</span><br><span class="line">        System.out.println(c7);</span><br><span class="line">        System.out.println(c8);</span><br><span class="line">        System.out.println(c9);</span><br><span class="line">        <span class="comment">//同一类型只有一个Class对象</span></span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        System.out.println(a.getClass().hashCode());</span><br><span class="line">        System.out.println(b.getClass().hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h3><p>当程序主动使用某个类时，如果该类还未加载到内存中，则系统会通过如下三个步骤来对类进行初始化。</p>
<ol>
<li>类的加载：将类的 class 文件读入内存，并将这些静态数据转化成方法区运行时的数据结构，然后为之创建一个 java.long.Class 对象，此过程由类加载器完成。</li>
<li>类的链接：将类的二进制数据合并到 JVM 中。<ul>
<li>验证：确保加载的类的信息符合 JVM 规范，没有安全方面问题。</li>
<li>准备：正式为类变量（staic）分配内存并设置类变量默认初始值，这些内存都将在方法区中分配。解析：虚拟机</li>
<li>量池内的符号引用（常量名）替换为直接引用（地址）的过程。</li>
</ul>
</li>
<li>类的初始化：JVM 负责对类进行初始化。<ul>
<li>执行类构造器<code>&lt;clinit&gt;</code>()方法的过程，类构造器<code>&lt;clinit&gt;</code>()方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。（类构造器是构造类信息的，不是构造该类对象的）</li>
<li>当初始化一个类时，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li>
<li>虚拟机会保证一个类的<code>&lt;clinit&gt;</code>()方法在多线程环境中被正确加锁和同步。</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.annotation;</span><br><span class="line"><span class="comment">//类的加载</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        System.out.println(A.m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A类的静态代码块初始化&quot;</span>);</span><br><span class="line">        m = <span class="number">88</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A类的无参构造初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类初始化"><a href="#类初始化" class="headerlink" title="类初始化"></a>类初始化</h3><p>类的主动引用（一定会发生类的初始化）</p>
<ul>
<li>当虚拟机启动，先初始化 main 方法所在的类。、</li>
<li>new 一个类的对象。</li>
<li>调用类的静态成员（除了 final 常量）和静态方法。</li>
<li>使用 java.long.reflect 包的方法对类进行反射调用。</li>
<li>当初始化一个类，如果父类没有被初始化，则先会初始化它的父类。</li>
</ul>
<p>类的被动引用（不会发生类的初始化）</p>
<ul>
<li>当访问一个静态域时，只有真正声明这个域的类才会被初始化，如：通过子类引用父类的静态变量，不会导致子类初始化。</li>
<li>通过数组定义类引用，不会触发类的初始化。</li>
<li>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池了）。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.annotation;</span><br><span class="line"><span class="comment">//类什么时候会被初始化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test08</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main类被加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//主动引用</span></span><br><span class="line">        <span class="comment">//Son son = new Son();</span></span><br><span class="line">        <span class="comment">//反射会产生主动引用</span></span><br><span class="line">        <span class="comment">//Class.forName(&quot;com.annotation.Son&quot;);</span></span><br><span class="line">        <span class="comment">//不会产生子类的引用的方法</span></span><br><span class="line">        <span class="comment">//System.out.println(Son.b);</span></span><br><span class="line">        <span class="comment">//数组</span></span><br><span class="line">        <span class="comment">//Son[] array = new Son[8];</span></span><br><span class="line">        <span class="comment">//常量</span></span><br><span class="line">        System.out.println(Son.M);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类被加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类被加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">88</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> M = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p>类加载的作用：将 class 文件字节码加载到内存中，并将这些静态的数据转化成方法区运行时的数据结构，然后在堆中生成一个代表这个类的 Class 对象，作为方法区中类数据的访问入口。</p>
<p>类缓存：标准的 JavaSE 类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间，不过 JVM 垃圾回收机制可以回收这些 Class 对象。</p>
<p>JVM 定义了如下类型的类加载器：</p>
<ul>
<li>引导类(根)加载器：用 C++编写，是 JVM 自带的类加载器，负责 Java 平台核心库，用来装载核心类库，该加载器无法直接获取。</li>
<li>拓展类加载器：负责 jre/lib/ext 目录下的 jar 包或 D java.ext.dirs 指定目录下的 jar 包装入工作库。</li>
<li>系统类加载器：负责 Java-classpath 或 D java.class.path 所指的目录下的类与 jar 包装入工作库，是最常用的加载器。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.annotation;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test09</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//获取系统类加载器</span></span><br><span class="line">        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(systemClassLoader);</span><br><span class="line">        <span class="comment">//获取系统类加载器的父类加载器 扩展类加载器</span></span><br><span class="line">        ClassLoader parent = systemClassLoader.getParent();</span><br><span class="line">        System.out.println(parent);</span><br><span class="line">        <span class="comment">//获取拓展类加载器额父类 根加载器 无法获取</span></span><br><span class="line">        ClassLoader parent1 = parent.getParent();</span><br><span class="line">        System.out.println(parent1);</span><br><span class="line">        <span class="comment">//测试当前类是哪个加载器加载的</span></span><br><span class="line">        ClassLoader classLoader = Class.forName(<span class="string">&quot;com.annotation.Test07&quot;</span>).getClassLoader();</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line">        <span class="comment">//测试JDK内置的类是哪个加载器加载的</span></span><br><span class="line">        ClassLoader classLoader1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getClassLoader();</span><br><span class="line">        System.out.println(classLoader1);</span><br><span class="line">        <span class="comment">//如何获得系统类加载器可以加载的路径</span></span><br><span class="line">        System.out.println(System.getProperty(<span class="string">&quot;java.class.path&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取类运行时结构"><a href="#获取类运行时结构" class="headerlink" title="获取类运行时结构"></a>获取类运行时结构</h3><p>通过反射获取运行时类的完整结构：FieId，Method，Constructor，Superclass，Interface，Annotation。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="comment">//获得类的信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;com.annotation.User&quot;</span>);</span><br><span class="line">        <span class="comment">//User user = new User();</span></span><br><span class="line">        <span class="comment">//Class c1 = user.getClass();</span></span><br><span class="line">        <span class="comment">//获得类的名字</span></span><br><span class="line">        System.out.println(c1.getName());<span class="comment">//获得包名+类名</span></span><br><span class="line">        System.out.println(c1.getSimpleName());<span class="comment">//获得类名</span></span><br><span class="line">        <span class="comment">//获得类的属性</span></span><br><span class="line">        Field[] fields = c1.getFields();<span class="comment">//只能找到public属性</span></span><br><span class="line">        fields = c1.getDeclaredFields();<span class="comment">//可以获得所有的属性</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">        Field name = c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);<span class="comment">//获得指定属性的值</span></span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(<span class="string">&quot;================================&quot;</span>);</span><br><span class="line">        <span class="comment">//获得类的方法</span></span><br><span class="line">        Method[] methods = c1.getMethods();<span class="comment">//获得本类及其父类的所有方法</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;================================&quot;</span>);</span><br><span class="line">        Method[] declaredMethods = c1.getDeclaredMethods();<span class="comment">//获得本类的所有方法（包括私有方法）</span></span><br><span class="line">        <span class="keyword">for</span> (Method declaredMethod : declaredMethods) &#123;</span><br><span class="line">            System.out.println(declaredMethod);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;================================&quot;</span>);</span><br><span class="line">        <span class="comment">//获得指定方法</span></span><br><span class="line">        <span class="comment">//重载 需要放参数类型</span></span><br><span class="line">        Method getName = c1.getMethod(<span class="string">&quot;getName&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">        Method setName = c1.getMethod(<span class="string">&quot;setName&quot;</span>,String.class);</span><br><span class="line">        System.out.println(getName);</span><br><span class="line">        System.out.println(setName);</span><br><span class="line">        System.out.println(<span class="string">&quot;================================&quot;</span>);</span><br><span class="line">        <span class="comment">//获得所有的构造器</span></span><br><span class="line">        Constructor[] constructors = c1.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor[] declaredConstructors = c1.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor declaredConstructor : declaredConstructors) &#123;</span><br><span class="line">            System.out.println(declaredConstructor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得指定构造器</span></span><br><span class="line">        Constructor constructor = c1.getConstructor(String.class, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;指定：&quot;</span>+constructor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="动态创建对象执行方法"><a href="#动态创建对象执行方法" class="headerlink" title="动态创建对象执行方法"></a>动态创建对象执行方法</h3><p>创建类的对象：调用 Class 对象的 newinstapce()方法</p>
<ul>
<li>类必须有一个无参构造器。</li>
<li>类的构造器的访问权限足够。</li>
</ul>
<p>没有无参构造器，操作类中的构造器时需要将参数传递进去，才可以实例化操作。</p>
<ul>
<li>通过 Class 类的 getDeclaredConstructor()取得本类的指定形参类型的构造器。</li>
<li>向构造器的形参中传递一个对象数组进去，里面包含了构造器中所需的各个参数。</li>
<li>通过 Constructor 实例化对象。</li>
</ul>
<p>私有的方法，字段，构造器：调用对象的 setAccessible(true)方法才可访问。关闭安全检测的开关。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="comment">//通过反射动态创建对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test11</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;com.annotation.User&quot;</span>);</span><br><span class="line">        <span class="comment">//构造一个对象</span></span><br><span class="line">        User user = (User) c1.newInstance();<span class="comment">//本质上调用了类的无参构造器</span></span><br><span class="line">        <span class="comment">//System.out.println(user);</span></span><br><span class="line">        <span class="comment">//通过构造器创建对象</span></span><br><span class="line">        Constructor constructor = c1.getDeclaredConstructor(String.class, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class);</span><br><span class="line">        User user2 = (User) constructor.newInstance(<span class="string">&quot;周&quot;</span>, <span class="number">22</span>, <span class="number">88</span>);</span><br><span class="line">        <span class="comment">//System.out.println(user2);</span></span><br><span class="line">        <span class="comment">//通过反射调用普通方法</span></span><br><span class="line">        User user3 = (User) c1.newInstance();</span><br><span class="line">        <span class="comment">//通过反射获得一个方法</span></span><br><span class="line">        Method setName = c1.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        setName.invoke(user3,<span class="string">&quot;周&quot;</span>);<span class="comment">//激活（对象，方法的值）</span></span><br><span class="line">        System.out.println(user3.getName());</span><br><span class="line">        <span class="comment">//通过反射操作属性</span></span><br><span class="line">        User user4 = (User) c1.newInstance();</span><br><span class="line">        Field name = c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="keyword">true</span>);<span class="comment">//关掉权限检测 后才能操作程序的私有属性</span></span><br><span class="line">        name.set(user4,<span class="string">&quot;周2&quot;</span>);</span><br><span class="line">        System.out.println(user4.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="setAccessible-性能分析"><a href="#setAccessible-性能分析" class="headerlink" title="setAccessible 性能分析"></a>setAccessible 性能分析</h3><p>setAccessible 的作用是启动和禁用安全检测的开关。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="comment">//分析setAccessible的性能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test12</span> </span>&#123;</span><br><span class="line">    <span class="comment">//普通反射调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++) &#123;</span><br><span class="line">            user.getName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;普通方法执行需要的时间&quot;</span>+(endTime-startTime)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过反射反射调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;com.annotation.User&quot;</span>);</span><br><span class="line">        Method getName = c1.getMethod(<span class="string">&quot;getName&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++) &#123;</span><br><span class="line">            getName.invoke(user,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;反射方法执行需要的时间&quot;</span>+(endTime-startTime)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反射方式调用 关闭检测</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;com.annotation.User&quot;</span>);</span><br><span class="line">        Method getName = c1.getMethod(<span class="string">&quot;getName&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        getName.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++) &#123;</span><br><span class="line">            getName.invoke(user,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;反射关闭检测方法执行需要的时间&quot;</span>+(endTime-startTime)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        test01();</span><br><span class="line">        test02();</span><br><span class="line">        test03();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取泛型信息"><a href="#获取泛型信息" class="headerlink" title="获取泛型信息"></a>获取泛型信息</h3><p>Java 采用泛型擦除的机制来引入泛型，Java 中的泛型仅仅是给编译器 javac 使用的，确保数值的安全性和免去强制类型转化问题，一旦编译完成后，所有与泛型有关的类型全部擦除。</p>
<p>为了通过反射操作这些类型，Java 新增了 ParameterizedType，GenericArrayType，TypeVariable 和 WildcardType 几种类型来代表不能被归一到 Class 类中的类型但又和原始类型齐名的类型。</p>
<ul>
<li>ParameterizedType：表示一种参数化类型，比如 Collection<code>&lt;String&gt;</code>。</li>
<li>GenericArrayType：表示一种类型是参数化类型或者类型变量的数组类型。</li>
<li>TypeVariable：是各种类型变量的公共父接口。</li>
<li>WildcardType：代表一种通配符类型表达式。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">//通过反射获取泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test13</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">(Map&lt;String,User&gt; map, List&lt;User&gt; list)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;tset01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,User&gt; <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test02&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Method method = Test13.class.getMethod(<span class="string">&quot;test01&quot;</span>, Map.class, List.class);</span><br><span class="line">        Type[] genericParameterTypes = method.getGenericParameterTypes();</span><br><span class="line">        <span class="keyword">for</span> (Type genericParameterType : genericParameterTypes) &#123;</span><br><span class="line">            System.out.println(genericParameterType);</span><br><span class="line">            <span class="keyword">if</span> (genericParameterType <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">                <span class="comment">//强转参数化类型后获取真实类型</span></span><br><span class="line">                Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments();</span><br><span class="line">                <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">                    System.out.println(actualTypeArgument);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Method method2 = Test13.class.getMethod(<span class="string">&quot;test02&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        Type genericReturnType = method2.getGenericReturnType();</span><br><span class="line">        <span class="keyword">if</span> (genericReturnType <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">            <span class="comment">//强转参数化类型后获取真实类型</span></span><br><span class="line">            Type[] actualTypeArguments = ((ParameterizedType) genericReturnType).getActualTypeArguments();</span><br><span class="line">            <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">                System.out.println(actualTypeArgument);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取注解信息"><a href="#获取注解信息" class="headerlink" title="获取注解信息"></a>获取注解信息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.annotation;</span><br><span class="line"><span class="keyword">import</span> com.sun.deploy.security.ValidationState;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="comment">//练习反射操作注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test14</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;com.annotation.Student2&quot;</span>);</span><br><span class="line">        <span class="comment">//通过反射获得注解</span></span><br><span class="line">        Annotation[] annotations = c1.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(annotation);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得注解的value的值</span></span><br><span class="line">        Tablezhou tablezhou = (Tablezhou)c1.getAnnotation(Tablezhou.class);</span><br><span class="line">        String value = tablezhou.value();</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        <span class="comment">//获得类指定的注解</span></span><br><span class="line">        Field f = c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        Fieldzhou annotation = f.getAnnotation(Fieldzhou.class);</span><br><span class="line">        System.out.println(annotation.columnName());</span><br><span class="line">        System.out.println(annotation.type());</span><br><span class="line">        System.out.println(annotation.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Tablezhou(&quot;db_student&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student2</span></span>&#123;</span><br><span class="line">    <span class="meta">@Fieldzhou(columnName = &quot;db_id&quot;,type = &quot;int&quot;,length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="meta">@Fieldzhou(columnName = &quot;db_age&quot;,type = &quot;int&quot;,length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@Fieldzhou(columnName = &quot;db_name&quot;,type = &quot;varchar&quot;,length = 6)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student2</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student2&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类名的注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Tablezhou&#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//属性的注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Fieldzhou&#123;</span><br><span class="line">    <span class="function">String <span class="title">columnName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">type</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h2><p>哔哩哔哩地址：<a href="https://www.bilibili.com/video/BV1p4411P7V3" title="https://www.bilibili.com/video/BV1p4411P7V3">https://www.bilibili.com/video/BV1p4411P7V3</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>注解</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatisPlus视频笔记PDF-狂神</title>
    <url>/posts/41591/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>MyBatis-Plus (opens new window)（简称 MP）是一个 MyBatis (opens new window)的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>
<span id="more"></span>

<h1 id="PDF资料"><a href="#PDF资料" class="headerlink" title="PDF资料"></a>PDF资料</h1><hr>
<div class="pdfobject-container" data-target="MyBatisPlus.pdf" data-height="900px"></div>

<hr>
<h1 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h1><p><a href="%E4%BB%A3%E7%A0%81.rar">代码下载</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>Mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis 学习笔记</title>
    <url>/posts/47476/</url>
    <content><![CDATA[<h2 id="Mybatis-9-28"><a href="#Mybatis-9-28" class="headerlink" title="Mybatis-9.28"></a>Mybatis-9.28</h2><p>环境：</p>
<ul>
<li>JDK1.8</li>
<li>Mysql 5.7</li>
<li>maven 3.6.1</li>
<li>IDEA<span id="more"></span></li>
</ul>
<p>回顾：</p>
<ul>
<li>JDBC</li>
<li>Mysql</li>
<li>Java基础</li>
<li>Maven</li>
<li>Junit</li>
</ul>
<p>SSM框架：配置文件的。  最好的方式：看官网文档；</p>
<h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><h3 id="1-1、什么是Mybatis"><a href="#1-1、什么是Mybatis" class="headerlink" title="1.1、什么是Mybatis"></a>1.1、什么是Mybatis</h3><p><img data-src="1569633932712.png" alt="1569633932712"></p>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>它支持定制化 SQL、存储过程以及高级映射。</li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li>
<li>MyBatis 本是<a href="https://baike.baidu.com/item/apache/6265">apache</a>的一个开源项目<a href="https://baike.baidu.com/item/iBatis">iBatis</a>, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到Github。</li>
</ul>
<p>如何获得Mybatis？</p>
<ul>
<li><p>maven仓库：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Github ： <a href="https://github.com/mybatis/mybatis-3/releases">https://github.com/mybatis/mybatis-3/releases</a></p>
</li>
<li><p>中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p>
</li>
</ul>
<h3 id="1-2、持久化"><a href="#1-2、持久化" class="headerlink" title="1.2、持久化"></a>1.2、持久化</h3><p>数据持久化</p>
<ul>
<li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li>
<li>内存：<strong>断电即失</strong></li>
<li>数据库(Jdbc)，io文件持久化。</li>
<li>生活：冷藏. 罐头。</li>
</ul>
<p><strong>为什么需要需要持久化？</strong></p>
<ul>
<li>有一些对象，不能让他丢掉。</li>
<li>内存太贵了</li>
</ul>
<h3 id="1-3、持久层"><a href="#1-3、持久层" class="headerlink" title="1.3、持久层"></a>1.3、持久层</h3><p>Dao层，Service层，Controller层….</p>
<ul>
<li>完成持久化工作的代码块</li>
<li>层界限十分明显。</li>
</ul>
<h3 id="1-4-为什么需要Mybatis？"><a href="#1-4-为什么需要Mybatis？" class="headerlink" title="1.4 为什么需要Mybatis？"></a>1.4 为什么需要Mybatis？</h3><ul>
<li>帮助程序猿将数据存入到数据库中。</li>
<li>方便</li>
<li>传统的JDBC代码太复杂了。简化。框架。自动化。</li>
<li>不用Mybatis也可以。更容易上手。<strong>技术没有高低之分</strong></li>
<li>优点：<ul>
<li>简单易学</li>
<li>灵活</li>
<li>sql和代码的分离，提高了可维护性。</li>
<li>提供映射标签，支持对象与数据库的orm字段关系映射</li>
<li>提供对象关系映射标签，支持对象关系组建维护</li>
<li>提供xml标签，支持编写动态sql。</li>
</ul>
</li>
</ul>
<p><strong>最重要的一点：使用的人多！</strong></p>
<p>Spring   SpringMVC    SpringBoot</p>
<h2 id="2、第一个Mybatis程序"><a href="#2、第一个Mybatis程序" class="headerlink" title="2、第一个Mybatis程序"></a>2、第一个Mybatis程序</h2><p>思路：搭建环境–&gt;导入Mybatis–&gt;编写代码–&gt;测试！</p>
<h3 id="2-1、搭建环境"><a href="#2-1、搭建环境" class="headerlink" title="2.1、搭建环境"></a>2.1、搭建环境</h3><p>搭建数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE `mybatis`;</span><br><span class="line"></span><br><span class="line">USE `mybatis`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `user`(</span><br><span class="line">  `id` INT(<span class="number">20</span>) NOT NULL PRIMARY KEY,</span><br><span class="line">  `name` VARCHAR(<span class="number">30</span>) DEFAULT NULL,</span><br><span class="line">  `pwd` VARCHAR(<span class="number">30</span>) DEFAULT NULL</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO `user`(`id`,`name`,`pwd`) VALUES </span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;狂神&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;123890&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>新建项目</p>
<ol>
<li><p>新建一个普通的maven项目</p>
</li>
<li><p>删除src目录</p>
</li>
<li><p>导入maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-2、创建一个模块"><a href="#2-2、创建一个模块" class="headerlink" title="2.2、创建一个模块"></a>2.2、创建一个模块</h3><ul>
<li><p>编写mybatis的核心配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--configuration核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写mybatis工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//sqlSessionFactory --&gt; sqlSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用Mybatis第一步：获取sqlSessionFactory对象</span></span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//既然有了 SqlSessionFactory，顾名思义，我们就可以从中获得 SqlSession 的实例了。</span></span><br><span class="line">    <span class="comment">// SqlSession 完全包含了面向数据库执行 SQL 命令所需的所有方法。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession  <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-3、编写代码"><a href="#2-3、编写代码" class="headerlink" title="2.3、编写代码"></a>2.3、编写代码</h3><ul>
<li><p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>Dao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>接口实现类由原来的UserDaoImpl转变为一个 Mapper配置文件.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line">        <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">                <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">                <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--namespace=绑定一个对应的Dao/Mapper接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--select查询语句--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">       select * from mybatis.user</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-4、测试"><a href="#2-4、测试" class="headerlink" title="2.4、测试"></a>2.4、测试</h3><p>注意点：</p>
<p>org.apache.ibatis.binding.BindingException: Type interface com.kuang.dao.UserDao is not known to the MapperRegistry.</p>
<p><strong>MapperRegistry是什么？</strong></p>
<p>核心配置文件中注册 mappers</p>
<ul>
<li><p>junit测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//第一步：获得SqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式一：getMapper</span></span><br><span class="line">    UserDao userDao = sqlSession.getMapper(UserDao.class);</span><br><span class="line">    List&lt;User&gt; userList = userDao.getUserList();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭SqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p>你们可以能会遇到的问题：</p>
<ol>
<li>配置文件没有注册</li>
<li>绑定接口错误。</li>
<li>方法名不对</li>
<li>返回类型不对</li>
<li>Maven导出资源问题</li>
</ol>
<h2 id="3、CRUD"><a href="#3、CRUD" class="headerlink" title="3、CRUD"></a>3、CRUD</h2><h3 id="1、namespace"><a href="#1、namespace" class="headerlink" title="1、namespace"></a>1、namespace</h3><p>namespace中的包名要和 Dao/mapper 接口的包名一致！</p>
<h3 id="2、select"><a href="#2、select" class="headerlink" title="2、select"></a>2、select</h3><p>选择，查询语句;</p>
<ul>
<li>id : 就是对应的namespace中的方法名；</li>
<li>resultType：Sql语句执行的返回值！</li>
<li>parameterType ： 参数类型！</li>
</ul>
<ol>
<li><p>编写接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据ID查询用户</span></span><br><span class="line"><span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>编写对应的mapper中的sql语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;getUserById&quot;</span> parameterType=<span class="string">&quot;int&quot;</span> resultType=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span><br><span class="line">        select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    User user = mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3、Insert"><a href="#3、Insert" class="headerlink" title="3、Insert"></a>3、Insert</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--对象中的属性，可以直接取出来--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    insert into mybatis.user (id, name, pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4、update"><a href="#4、update" class="headerlink" title="4、update"></a>4、update</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    update mybatis.user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125;  where id = #&#123;id&#125; ;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5、Delete"><a href="#5、Delete" class="headerlink" title="5、Delete"></a>5、Delete</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    delete from mybatis.user where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意点：</p>
<ul>
<li>增删改需要提交事务！</li>
</ul>
<h3 id="6、分析错误"><a href="#6、分析错误" class="headerlink" title="6、分析错误"></a>6、分析错误</h3><ul>
<li>标签不要匹配错</li>
<li>resource 绑定mapper，需要使用路径！</li>
<li>程序配置文件必须符合规范！</li>
<li>NullPointerException，没有注册到资源!</li>
<li>输出的xml文件中存在中文乱码问题！</li>
<li>maven资源没有导出问题！</li>
</ul>
<h3 id="7、万能Map"><a href="#7、万能Map" class="headerlink" title="7、万能Map"></a>7、万能Map</h3><p>假设，我们的实体类，或者数据库中的表，字段或者参数过多，我们应当考虑使用Map！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//万能的Map</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser2</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--对象中的属性，可以直接取出来    传递map的key--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    insert into mybatis.user (id, pwd) values (#&#123;userid&#125;,#&#123;passWord&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void addUser2()&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">    map.put(&quot;userid&quot;,5);</span><br><span class="line">    map.put(&quot;passWord&quot;,&quot;2222333&quot;);</span><br><span class="line"></span><br><span class="line">    mapper.addUser2(map);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Map传递参数，直接在sql中取出key即可！    【parameterType=”map”】</p>
<p>对象传递参数，直接在sql中取对象的属性即可！【parameterType=”Object”】</p>
<p>只有一个基本类型参数的情况下，可以直接在sql中取到！</p>
<p>多个参数用Map，<strong>或者注解！</strong></p>
<h3 id="8、思考题"><a href="#8、思考题" class="headerlink" title="8、思考题"></a>8、思考题</h3><p>模糊查询怎么写？</p>
<ol>
<li><p>Java代码执行的时候，传递通配符 % %</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userList = mapper.getUserLike(<span class="string">&quot;%李%&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>在sql拼接中使用通配符！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">select * from mybatis.user where name like <span class="string">&quot;%&quot;</span>#&#123;value&#125;<span class="string">&quot;%&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="4、配置解析"><a href="#4、配置解析" class="headerlink" title="4、配置解析"></a>4、配置解析</h2><h3 id="1、核心配置文件"><a href="#1、核心配置文件" class="headerlink" title="1、核心配置文件"></a>1、核心配置文件</h3><ul>
<li><p>mybatis-config.xml</p>
</li>
<li><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">configuration（配置）</span><br><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2、环境配置（environments）"><a href="#2、环境配置（environments）" class="headerlink" title="2、环境配置（environments）"></a>2、环境配置（environments）</h3><p>MyBatis 可以配置成适应多种环境</p>
<p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p>
<p>学会使用配置多套运行环境！</p>
<p>Mybatis默认的事务管理器就是 JDBC  ， 连接池 ： POOLED</p>
<h3 id="3、属性（properties）"><a href="#3、属性（properties）" class="headerlink" title="3、属性（properties）"></a>3、属性（properties）</h3><p>我们可以通过properties属性来实现引用配置文件</p>
<p>这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递。【db.properties】</p>
<p><img data-src="1569656528134.png" alt="1569656528134"></p>
<p>编写一个配置文件</p>
<p>db.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<p>在核心配置文件中映入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入外部配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11111&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>可以直接引入外部文件</li>
<li>可以在其中增加一些属性配置</li>
<li>如果两个文件有同一个字段，优先使用外部配置文件的！</li>
</ul>
<h3 id="4、类型别名（typeAliases）"><a href="#4、类型别名（typeAliases）" class="headerlink" title="4、类型别名（typeAliases）"></a>4、类型别名（typeAliases）</h3><ul>
<li>类型别名是为 Java 类型设置一个短的名字。‘</li>
<li>存在的意义仅在于用来减少类完全限定名的冗余。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以给实体类起别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：</p>
<p>扫描实体类的包，它的默认别名就为这个类的 类名，首字母小写！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以给实体类起别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.kuang.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在实体类比较少的时候，使用第一种方式。</p>
<p>如果实体类十分多，建议使用第二种。</p>
<p>第一种可以DIY别名，第二种则·不行·，如果非要改，需要在实体上增加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、设置"><a href="#5、设置" class="headerlink" title="5、设置"></a>5、设置</h3><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。</p>
<p><img data-src="1569657659080.png" alt="1569657659080"></p>
<p><img data-src="1569657672791.png" alt="1569657672791"></p>
<h3 id="6、其他配置"><a href="#6、其他配置" class="headerlink" title="6、其他配置"></a>6、其他配置</h3><ul>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">typeHandlers（类型处理器）</a></li>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory">objectFactory（对象工厂）</a></li>
<li>plugins插件<ul>
<li>mybatis-generator-core</li>
<li>mybatis-plus</li>
<li>通用mapper</li>
</ul>
</li>
</ul>
<h3 id="7、映射器（mappers）"><a href="#7、映射器（mappers）" class="headerlink" title="7、映射器（mappers）"></a>7、映射器（mappers）</h3><p>MapperRegistry：注册绑定我们的Mapper文件；</p>
<p>方式一： 【推荐使用】</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/kuang/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方式二：使用class文件绑定注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意点：</p>
<ul>
<li>接口和他的Mapper配置文件必须同名！</li>
<li>接口和他的Mapper配置文件必须在同一个包下！</li>
</ul>
<p>方式三：使用扫描包进行注入绑定</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.kuang.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意点：</p>
<ul>
<li>接口和他的Mapper配置文件必须同名！</li>
<li>接口和他的Mapper配置文件必须在同一个包下！</li>
</ul>
<p>练习时间：</p>
<ul>
<li>将数据库配置文件外部引入</li>
<li>实体类别名</li>
<li>保证UserMapper 接口 和 UserMapper .xml 改为一致！并且放在同一个包下！</li>
</ul>
<h3 id="8、生命周期和作用域"><a href="#8、生命周期和作用域" class="headerlink" title="8、生命周期和作用域"></a>8、生命周期和作用域</h3><p><img data-src="1569660357745.png" alt="1569660357745"></p>
<p>生命周期，和作用域，是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p>
<p><strong>SqlSessionFactoryBuilder：</strong></p>
<ul>
<li>一旦创建了 SqlSessionFactory，就不再需要它了</li>
<li>局部变量</li>
</ul>
<p><strong>SqlSessionFactory：</strong></p>
<ul>
<li>说白了就是可以想象为 ：数据库连接池</li>
<li>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃它或重新创建另一个实例。</strong></li>
<li>因此 SqlSessionFactory 的最佳作用域是应用作用域。</li>
<li>最简单的就是使用<strong>单例模式</strong>或者静态单例模式。</li>
</ul>
<p><strong>SqlSession</strong></p>
<ul>
<li>连接到连接池的一个请求！</li>
<li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。</li>
<li>用完之后需要赶紧关闭，否则资源被占用！</li>
</ul>
<p><img data-src="1569660737088.png" alt="1569660737088"></p>
<p>这里面的每一个Mapper，就代表一个具体的业务！</p>
<h2 id="5、解决属性名和字段名不一致的问题"><a href="#5、解决属性名和字段名不一致的问题" class="headerlink" title="5、解决属性名和字段名不一致的问题"></a>5、解决属性名和字段名不一致的问题</h2><h3 id="1、-问题"><a href="#1、-问题" class="headerlink" title="1、 问题"></a>1、 问题</h3><p>数据库中的字段</p>
<p><img data-src="1569660831076.png" alt="1569660831076"></p>
<p>新建一个项目，拷贝之前的，测试实体类字段不一致的情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试出现问题</p>
<p><img data-src="1569661145806.png" alt="1569661145806"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//    select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line">//类型处理器</span><br><span class="line">//    select id,name,pwd from mybatis.user where id = #&#123;id&#125;</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<ul>
<li><p>起别名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select id,name,pwd as password from mybatis.user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2、resultMap"><a href="#2、resultMap" class="headerlink" title="2、resultMap"></a>2、resultMap</h3><p>结果集映射</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id   name   pwd</span><br><span class="line">id   name   password</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--结果集映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--column数据库中的字段，property实体类中的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素</li>
<li>ResultMap 的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句只需要描述它们的关系就行了。</li>
<li><code>ResultMap</code> 最优秀的地方在于，虽然你已经对它相当了解了，但是根本就不需要显式地用到他们。</li>
<li>如果世界总是这么简单就好了。</li>
</ul>
<h2 id="6、日志"><a href="#6、日志" class="headerlink" title="6、日志"></a>6、日志</h2><h3 id="6-1、日志工厂"><a href="#6-1、日志工厂" class="headerlink" title="6.1、日志工厂"></a>6.1、日志工厂</h3><p>如果一个数据库操作，出现了异常，我们需要排错。日志就是最好的助手！</p>
<p>曾经：sout 、debug</p>
<p>现在：日志工厂！</p>
<p><img data-src="1569892155104.png" alt="1569892155104"></p>
<ul>
<li>SLF4J</li>
<li>LOG4J  【掌握】</li>
<li>LOG4J2</li>
<li>JDK_LOGGING</li>
<li>COMMONS_LOGGING</li>
<li>STDOUT_LOGGING   【掌握】</li>
<li>NO_LOGGING</li>
</ul>
<p>在Mybatis中具体使用那个一日志实现，在设置中设定！</p>
<p><strong>STDOUT_LOGGING标准日志输出</strong></p>
<p>在mybatis核心配置文件中，配置我们的日志！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="1569892595060.png" alt="1569892595060"></p>
<h3 id="6-2、Log4j"><a href="#6-2、Log4j" class="headerlink" title="6.2、Log4j"></a>6.2、Log4j</h3><p>什么是Log4j？</p>
<ul>
<li>Log4j是<a href="https://baike.baidu.com/item/Apache/8512995">Apache</a>的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%B0/2438626">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI">GUI</a>组件</li>
<li>我们也可以控制每一条日志的输出格式；</li>
<li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。</li>
<li>通过一个<a href="https://baike.baidu.com/item/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/286550">配置文件</a>来灵活地进行配置，而不需要修改应用的代码。</li>
</ul>
<ol>
<li><p>先导入log4j的包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>log4j.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/kuang.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置log4j为日志的实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Log4j的使用！，直接测试运行刚才的查询</p>
<p><img data-src="1569893505842.png" alt="1569893505842"></p>
</li>
</ol>
<p><strong>简单使用</strong></p>
<ol>
<li><p>在要使用Log4j 的类中，导入包  import org.apache.log4j.Logger;</p>
</li>
<li><p>日志对象，参数为当前类的class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Logger logger = Logger.getLogger(UserDaoTest.class);</span><br></pre></td></tr></table></figure></li>
<li><p>日志级别</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.info(<span class="string">&quot;info:进入了testLog4j&quot;</span>);</span><br><span class="line">logger.debug(<span class="string">&quot;debug:进入了testLog4j&quot;</span>);</span><br><span class="line">logger.error(<span class="string">&quot;error:进入了testLog4j&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="7、分页"><a href="#7、分页" class="headerlink" title="7、分页"></a>7、分页</h2><p><strong>思考：为什么要分页？</strong></p>
<ul>
<li>减少数据的处理量</li>
</ul>
<h3 id="7-1、使用Limit分页"><a href="#7-1、使用Limit分页" class="headerlink" title="7.1、使用Limit分页"></a>7.1、使用Limit分页</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">语法：<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit startIndex,pageSize;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">3</span>;  #[<span class="number">0</span>,n]</span><br></pre></td></tr></table></figure>

<p>使用Mybatis实现分页，核心SQL</p>
<ol>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByLimit</span><span class="params">(Map&lt;String,Integer&gt; map)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--//分页--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLimit&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select * from  mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByLimit</span><span class="params">()</span></span>&#123;</span><br><span class="line">SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;startIndex&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    map.put(<span class="string">&quot;pageSize&quot;</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userList =  mapper.getUserByLimit(map);</span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="7-2、RowBounds分页"><a href="#7-2、RowBounds分页" class="headerlink" title="7.2、RowBounds分页"></a>7.2、RowBounds分页</h3><p>不再使用SQL实现分页</p>
<ol>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页2</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByRowBounds</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--分页2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByRowBounds&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select * from  mybatis.user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByRowBounds</span><span class="params">()</span></span>&#123;</span><br><span class="line">SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//RowBounds实现</span></span><br><span class="line">RowBounds rowBounds = <span class="keyword">new</span> RowBounds(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过Java代码层面实现分页</span></span><br><span class="line">List&lt;User&gt; userList = sqlSession.selectList(<span class="string">&quot;com.kuang.dao.UserMapper.getUserByRowBounds&quot;</span>,<span class="keyword">null</span>,rowBounds);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="7-3、分页插件"><a href="#7-3、分页插件" class="headerlink" title="7.3、分页插件"></a>7.3、分页插件</h3><p><img data-src="1569896603103.png" alt="1569896603103"></p>
<p>了解即可，万一 以后公司的架构师，说要使用，你需要知道它是什么东西！</p>
<h2 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h2><h3 id="8-1、面向接口编程"><a href="#8-1、面向接口编程" class="headerlink" title="8.1、面向接口编程"></a>8.1、面向接口编程</h3><p>- 大家之前都学过面向对象编程，也学习过接口，但在真正的开发中，很多时候我们会选择面向接口编程<br>- <strong>根本原因 :  ==解耦== , 可拓展 , 提高复用 , 分层开发中 , 上层不用管具体的实现 , 大家都遵守共同的标准 , 使得开发变得容易 , 规范性更好</strong><br>- 在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的,对系统设计人员来讲就不那么重要了；<br>- 而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。</p>
<p><strong>关于接口的理解</strong></p>
<p>- 接口从更深层次的理解，应是定义（规范，约束）与实现（名实分离的原则）的分离。<br>- 接口的本身反映了系统设计人员对系统的抽象理解。<br>- 接口应有两类：<br>- 第一类是对一个个体的抽象，它可对应为一个抽象体(abstract class)；<br>- 第二类是对一个个体某一方面的抽象，即形成一个抽象面（interface）；<br>- 一个体有可能有多个抽象面。抽象体与抽象面是有区别的。</p>
<p><strong>三个面向区别</strong></p>
<p>- 面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法 .<br>- 面向过程是指，我们考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现 .<br>- 接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题.更多的体现就是对系统整体的架构</p>
<h3 id="8-2、使用注解开发"><a href="#8-2、使用注解开发" class="headerlink" title="8.2、使用注解开发"></a>8.2、使用注解开发</h3><ol>
<li><p>注解在接口上实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>需要再核心配置文件中绑定接口！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--绑定接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
</li>
</ol>
<p>本质：反射机制实现</p>
<p>底层：动态代理！</p>
<p><img data-src="1569898830704.png" alt="1569898830704"></p>
<p><strong>Mybatis详细的执行流程！</strong></p>
<p><img data-src="Temp.png" alt="1569898830704"></p>
<h3 id="8-3、CRUD"><a href="#8-3、CRUD" class="headerlink" title="8.3、CRUD"></a>8.3、CRUD</h3><p>我们可以在工具类创建的时候实现自动提交事务！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession  <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写接口，增加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法存在多个参数，所有的参数前面必须加上 @Param(&quot;id&quot;)注解</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">getUserByID</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user(id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Update(&quot;update user set name=#&#123;name&#125;,pwd=#&#123;password&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Delete(&quot;delete from user where id = #&#123;uid&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="meta">@Param(&quot;uid&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类</p>
<p>【注意：我们必须要讲接口注册绑定到我们的核心配置文件中！】</p>
<p><strong>关于@Param() 注解</strong></p>
<ul>
<li>基本类型的参数或者String类型，需要加上</li>
<li>引用类型不需要加</li>
<li>如果只有一个基本类型的话，可以忽略，但是建议大家都加上！</li>
<li>我们在SQL中引用的就是我们这里的 @Param() 中设定的属性名！</li>
</ul>
<p><strong>#{}     ${} 区别</strong></p>
<h2 id="9、Lombok"><a href="#9、Lombok" class="headerlink" title="9、Lombok"></a>9、Lombok</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.</span><br><span class="line">Never write another getter or equals method again, with one annotation your <span class="class"><span class="keyword">class</span> <span class="title">has</span> <span class="title">a</span> <span class="title">fully</span> <span class="title">featured</span> <span class="title">builder</span>, <span class="title">Automate</span> <span class="title">your</span> <span class="title">logging</span> <span class="title">variables</span>, <span class="title">and</span> <span class="title">much</span> <span class="title">more</span>.</span></span><br></pre></td></tr></table></figure>

<ul>
<li>java library</li>
<li>plugs</li>
<li>build tools</li>
<li>with one annotation your class</li>
</ul>
<p>使用步骤：</p>
<ol>
<li><p>在IDEA中安装Lombok插件！</p>
</li>
<li><p>在项目中导入lombok的jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在实体类上加注解即可！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br></pre></td></tr></table></figure></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span> and <span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@FieldNameConstants</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>, <span class="meta">@RequiredArgsConstructor</span> and <span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Log</span>, <span class="meta">@Log4j</span>, <span class="meta">@Log4j2</span>, <span class="meta">@Slf4j</span>, <span class="meta">@XSlf4j</span>, <span class="meta">@CommonsLog</span>, <span class="meta">@JBossLog</span>, <span class="meta">@Flogger</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@Singular</span></span><br><span class="line"><span class="meta">@Delegate</span></span><br><span class="line"><span class="meta">@Value</span></span><br><span class="line"><span class="meta">@Accessors</span></span><br><span class="line"><span class="meta">@Wither</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data：无参构造，get、set、tostring、hashcode，equals</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@EqualsAndHashCode</span><br><span class="line">@ToString</span><br><span class="line">@Getter</span><br></pre></td></tr></table></figure>

<h2 id="10、多对一处理"><a href="#10、多对一处理" class="headerlink" title="10、多对一处理"></a>10、多对一处理</h2><p>多对一：</p>
<p><img data-src="1569909163944.png" alt="1569909163944"></p>
<ul>
<li>多个学生，对应一个老师</li>
<li>对于学生这边而言，<strong>关联</strong> ..  多个学生，关联一个老师  【多对一】</li>
<li>对于老师而言，<strong>集合</strong> ， 一个老师，有很多学生 【一对多】</li>
</ul>
<p><img data-src="1569909422471.png" alt="1569909422471"></p>
<p>SQL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `teacher` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher(`id`, `name`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;秦老师&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `fktid` (`tid`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `fktid` <span class="keyword">FOREIGN</span> KEY (`tid`) <span class="keyword">REFERENCES</span> `teacher` (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;1&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;1&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;小张&#x27;</span>, <span class="string">&#x27;1&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;小李&#x27;</span>, <span class="string">&#x27;1&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;小王&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h3><ol>
<li>导入lombok</li>
<li>新建实体类 Teacher，Student</li>
<li>建立Mapper接口</li>
<li>建立Mapper.XML文件</li>
<li>在核心配置文件中绑定注册我们的Mapper接口或者文件！【方式很多，随心选】</li>
<li>测试查询是否能够成功！</li>
</ol>
<h3 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    思路:</span></span><br><span class="line"><span class="comment">        1. 查询所有的学生信息</span></span><br><span class="line"><span class="comment">        2. 根据查询出来的学生的tid，寻找对应的老师！  子查询</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--复杂的属性，我们需要单独处理 对象： association 集合： collection --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    select * from teacher where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--按照结果嵌套处理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher2&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid,s.name sname,t.name tname</span><br><span class="line">    from student s,teacher t</span><br><span class="line">    where s.tid = t.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>回顾Mysql 多对一查询方式：</p>
<ul>
<li>子查询</li>
<li>联表查询</li>
</ul>
<h2 id="11、一对多处理"><a href="#11、一对多处理" class="headerlink" title="11、一对多处理"></a>11、一对多处理</h2><p>比如：一个老师拥有多个学生！</p>
<p>对于老师而言，就是一对多的关系!</p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol>
<li>环境搭建，和刚才一样</li>
</ol>
<p><strong>实体类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一个老师拥有多个学生</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="按照结果嵌套处理-1"><a href="#按照结果嵌套处理-1" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--按结果嵌套查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid, s.name sname, t.name tname,t.id tid</span><br><span class="line">    from student s,teacher t</span><br><span class="line">    where s.tid = t.id and t.id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--复杂的属性，我们需要单独处理 对象： association 集合： collection</span></span><br><span class="line"><span class="comment">    javaType=&quot;&quot; 指定属性的类型！</span></span><br><span class="line"><span class="comment">    集合中的泛型信息，我们使用ofType获取</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="按照查询嵌套处理-1"><a href="#按照查询嵌套处理-1" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent2&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.teacher where id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.student where tid = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol>
<li>关联 - association   【多对一】</li>
<li>集合 - collection   【一对多】</li>
<li>javaType    &amp;   ofType<ol>
<li>JavaType  用来指定实体类中属性的类型</li>
<li>ofType  用来指定映射到List或者集合中的 pojo类型，泛型中的约束类型！</li>
</ol>
</li>
</ol>
<p>注意点：</p>
<ul>
<li>保证SQL的可读性，尽量保证通俗易懂</li>
<li>注意一对多和多对一中，属性名和字段的问题！</li>
<li>如果问题不好排查错误，可以使用日志 ， 建议使用 Log4j</li>
</ul>
<p><strong>慢SQL       1s        1000s</strong></p>
<p>面试高频</p>
<ul>
<li>Mysql引擎</li>
<li>InnoDB底层原理</li>
<li>索引</li>
<li>索引优化！</li>
</ul>
<h2 id="12、动态-SQL"><a href="#12、动态-SQL" class="headerlink" title="12、动态 SQL"></a>12、动态 SQL</h2><p>==<strong>什么是动态SQL：动态SQL就是指根据不同的条件生成不同的SQL语句</strong>==</p>
<p>利用动态 SQL 这一特性可以彻底摆脱这种痛苦。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。</span><br><span class="line"></span><br><span class="line">if</span><br><span class="line">choose (when, otherwise)</span><br><span class="line">trim (where, set)</span><br><span class="line">foreach</span><br></pre></td></tr></table></figure>

<h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `blog` (</span><br><span class="line">  `id` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客id&#x27;</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客标题&#x27;</span>,</span><br><span class="line">  `author` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客作者&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `views` <span class="type">int</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;浏览量&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建一个基础工程</p>
<ol>
<li><p>导包</p>
</li>
<li><p>编写配置文件</p>
</li>
<li><p>编写实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> views;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写实体类对应Mapper接口 和 Mapper.XML文件</p>
</li>
</ol>
<h3 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIF&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        and title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose (when, otherwise)"></a>choose (when, otherwise)</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogChoose&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">                title = #&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">                and author = #&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and views = #&#123;views&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim (where,set)"></a>trim (where,set)</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">select * from mybatis.blog</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    update mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>==<strong>所谓的动态SQL，本质还是SQL语句 ， 只是我们可以在SQL层面，去执行一个逻辑代码</strong>==</p>
<p>if</p>
<p>where ， set  ， choose ，when</p>
<h3 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h3><p>有的时候，我们可能会将一些功能的部分抽取出来，方便复用！</p>
<ol>
<li><p>使用SQL标签抽取公共的部分</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在需要使用的地方使用Include标签引用即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIF&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>注意事项：</p>
<ul>
<li>最好基于单表来定义SQL片段！</li>
<li>不要存在where标签</li>
</ul>
<h3 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> </span><br><span class="line"></span><br><span class="line">  <span class="operator">&lt;</span>foreach item<span class="operator">=</span>&quot;id&quot; collection<span class="operator">=</span>&quot;ids&quot;</span><br><span class="line">      <span class="keyword">open</span><span class="operator">=</span>&quot;(&quot; separator<span class="operator">=</span>&quot;or&quot; <span class="keyword">close</span><span class="operator">=</span>&quot;)&quot;<span class="operator">&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">  <span class="operator">&lt;</span><span class="operator">/</span>foreach<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line">(id<span class="operator">=</span><span class="number">1</span> <span class="keyword">or</span> id<span class="operator">=</span><span class="number">2</span> <span class="keyword">or</span> id<span class="operator">=</span><span class="number">3</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img data-src="1569979229205.png" alt="1569979229205"></p>
<p><img data-src="1569979339190.png" alt="1569979339190"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        select * from mybatis.blog where 1=1 and (id=1 or id = 2 or id=3)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        我们现在传递一个万能的map ， 这map中可以存在一个集合！</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogForeach&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;and (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">            id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>==动态SQL就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL的格式，去排列组合就可以了==</p>
<p>建议：</p>
<ul>
<li>现在Mysql中写出完整的SQL,再对应的去修改成为我们的动态SQL实现通用即可！</li>
</ul>
<h2 id="13、缓存-（了解）"><a href="#13、缓存-（了解）" class="headerlink" title="13、缓存 （了解）"></a>13、缓存 （了解）</h2><h3 id="13-1、简介"><a href="#13-1、简介" class="headerlink" title="13.1、简介"></a>13.1、简介</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查询  ：  连接数据库 ，耗资源！</span><br><span class="line">	一次查询的结果，给他暂存在一个可以直接取到的地方！--&gt; 内存 ： 缓存</span><br><span class="line"></span><br><span class="line">我们再次查询相同数据的时候，直接走缓存，就不用走数据库了</span><br></pre></td></tr></table></figure>

<ol>
<li><p>什么是缓存 [ Cache ]？</p>
<ul>
<li>存在内存中的临时数据。</li>
<li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</li>
</ul>
</li>
<li><p>为什么使用缓存？</p>
<ul>
<li>减少和数据库的交互次数，减少系统开销，提高系统效率。</li>
</ul>
</li>
<li><p>什么样的数据能使用缓存？</p>
<ul>
<li>经常查询并且不经常改变的数据。【可以使用缓存】</li>
</ul>
</li>
</ol>
<h3 id="13-2、Mybatis缓存"><a href="#13-2、Mybatis缓存" class="headerlink" title="13.2、Mybatis缓存"></a>13.2、Mybatis缓存</h3><ul>
<li>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</li>
<li>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong><ul>
<li>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</li>
<li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</li>
<li>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</li>
</ul>
</li>
</ul>
<h3 id="13-3、一级缓存"><a href="#13-3、一级缓存" class="headerlink" title="13.3、一级缓存"></a>13.3、一级缓存</h3><ul>
<li>一级缓存也叫本地缓存：  SqlSession<ul>
<li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li>
<li>以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库；</li>
</ul>
</li>
</ul>
<p>测试步骤：</p>
<ol>
<li>开启日志！</li>
<li>测试在一个Sesion中查询两次相同记录</li>
<li>查看日志输出</li>
</ol>
<p><img data-src="1569983650437.png" alt="1569983650437"></p>
<p>缓存失效的情况：</p>
<ol>
<li><p>查询不同的东西</p>
</li>
<li><p>增删改操作，可能会改变原来的数据，所以必定会刷新缓存！</p>
<p><img data-src="1569983952321.png" alt="1569983952321"></p>
</li>
<li><p>查询不同的Mapper.xml</p>
</li>
<li><p>手动清理缓存！</p>
<p><img data-src="1569984008824.png" alt="1569984008824"></p>
</li>
</ol>
<p>小结：一级缓存默认是开启的，只在一次SqlSession中有效，也就是拿到连接到关闭连接这个区间段！</p>
<p>一级缓存就是一个Map。</p>
<h3 id="13-4、二级缓存"><a href="#13-4、二级缓存" class="headerlink" title="13.4、二级缓存"></a>13.4、二级缓存</h3><ul>
<li>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</li>
<li>基于namespace级别的缓存，一个名称空间，对应一个二级缓存；</li>
<li>工作机制<ul>
<li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li>
<li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；</li>
<li>新的会话查询信息，就可以从二级缓存中获取内容；</li>
<li>不同的mapper查出的数据会放在自己对应的缓存（map）中；</li>
</ul>
</li>
</ul>
<p>步骤：</p>
<ol>
<li><p>开启全局缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--显示的开启全局缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在要使用二级缓存的Mapper中开启</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以自定义参数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>  <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<ol>
<li><p>问题:我们需要将实体类序列化！否则就会报错！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Caused by: java.io.NotSerializableException: com.kuang.pojo.User</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<p>小结：</p>
<ul>
<li>只要开启了二级缓存，在同一个Mapper下就有效</li>
<li>所有的数据都会先放在一级缓存中；</li>
<li>只有当会话提交，或者关闭的时候，才会提交到二级缓冲中！</li>
</ul>
<h3 id="13-5、缓存原理"><a href="#13-5、缓存原理" class="headerlink" title="13.5、缓存原理"></a>13.5、缓存原理</h3><p><img data-src="1569985541106.png" alt="1569985541106"></p>
<h3 id="13-6、自定义缓存-ehcache"><a href="#13-6、自定义缓存-ehcache" class="headerlink" title="13.6、自定义缓存-ehcache"></a>13.6、自定义缓存-ehcache</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存</span><br></pre></td></tr></table></figure>

<p>要在程序中使用ehcache，先要导包！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在mapper中指定使用我们的ehcache缓存实现！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>ehcache.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">updateCheck</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：</span></span><br><span class="line"><span class="comment">       user.home – 用户主目录</span></span><br><span class="line"><span class="comment">       user.dir  – 用户当前工作目录</span></span><br><span class="line"><span class="comment">       java.io.tmpdir – 默认临时文件路径</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;./tmpdir/Tmp_EhCache&quot;</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;10000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;1800&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;259200&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;cloud_user&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;5000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;1800&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;1800&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      name:缓存名称。</span></span><br><span class="line"><span class="comment">      maxElementsInMemory:缓存最大数目</span></span><br><span class="line"><span class="comment">      maxElementsOnDisk：硬盘最大缓存个数。</span></span><br><span class="line"><span class="comment">      eternal:对象是否永久有效，一但设置了，timeout将不起作用。</span></span><br><span class="line"><span class="comment">      overflowToDisk:是否保存到磁盘，当系统当机时</span></span><br><span class="line"><span class="comment">      timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。</span></span><br><span class="line"><span class="comment">      timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。</span></span><br><span class="line"><span class="comment">      diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.</span></span><br><span class="line"><span class="comment">      diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</span></span><br><span class="line"><span class="comment">      diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。</span></span><br><span class="line"><span class="comment">      memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</span></span><br><span class="line"><span class="comment">      clearOnFlush：内存数量最大时是否清除。</span></span><br><span class="line"><span class="comment">      memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。</span></span><br><span class="line"><span class="comment">      FIFO，first in first out，这个是大家最熟的，先进先出。</span></span><br><span class="line"><span class="comment">      LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。</span></span><br><span class="line"><span class="comment">      LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Redis数据库来做缓存！  K-V</p>
<p><a href="smbms.sql" title="文件下载">数据库文件</a></p>
<p><a href="Mybatis-Study.zip" title="Mybatis-Study">代码文件</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-学习笔记及演示代码</title>
    <url>/posts/52199/</url>
    <content><![CDATA[<p>1.Spring</p>
<h3 id="1-1、简介"><a href="#1-1、简介" class="headerlink" title="1.1、简介"></a>1.1、简介</h3><ul>
<li>Spring：春天—&gt; 给软件行业带来了春天</li>
<li>2002年，Rod Jahnson首次推出了Spring框架雏形interface21框架。</li>
<li>2004年3月24日，Spring框架以interface21框架为基础，经过重新设计，发布了1.0正式版。</li>
<li>很难想象Rod Johnson的学历 , 他是悉尼大学的博士，然而他的专业不是计算机，而是音乐学。</li>
<li>Spring理念 : 使现有技术更加实用 . 本身就是一个大杂烩 , 整合现有的框架技术</li>
</ul>
<span id="more"></span>

<ul>
<li>SSH : Struct2 + Spring + Hibernate!</li>
<li>SSM : SpringMvc + Spring + Mybatis!</li>
</ul>
<ul>
<li>官网 : <a href="http://spring.io/">http://spring.io/</a></li>
<li>官方下载地址 : <a href="https://repo.spring.io/libs-release-local/org/springframework/spring/">https://repo.spring.io/libs-release-local/org/springframework/spring/</a></li>
<li>GitHub : <a href="https://github.com/spring-projects">https://github.com/spring-projects</a></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-2、优点"><a href="#1-2、优点" class="headerlink" title="1.2、优点"></a>1.2、优点</h3><ul>
<li>Spring是一个开源免费的框架 , 容器 </li>
<li>Spring是一个轻量级的框架 , 非侵入式的 .</li>
<li><strong>控制反转 IoC  , 面向切面 Aop</strong></li>
<li>对事物的支持 , 对框架的支持</li>
</ul>
<p><strong>总结一句话：Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器（框架）。</strong></p>
<h3 id="1-3、组成"><a href="#1-3、组成" class="headerlink" title="1.3、组成"></a>1.3、组成</h3><p><img data-src="1078856-20170205160357354-490660449.gif" alt="1078856-20170205160357354-490660449"></p>
<ul>
<li><strong>核心容器</strong>：核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory，它是工厂模式的实现。BeanFactory 使用<em>控制反转</em>（IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。</li>
<li><strong>Spring 上下文</strong>：Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。</li>
<li><strong>Spring AOP</strong>：通过配置管理特性，Spring AOP 模块直接将面向切面的编程功能 , 集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理任何支持 AOP的对象。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖组件，就可以将声明性事务管理集成到应用程序中。</li>
<li><strong>Spring DAO</strong>：JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。</li>
<li><strong>Spring ORM</strong>：Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。</li>
<li><strong>Spring Web 模块</strong>：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。</li>
<li><strong>Spring MVC 框架</strong>：MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。</li>
</ul>
<h3 id="1-4、拓展"><a href="#1-4、拓展" class="headerlink" title="1.4、拓展"></a>1.4、拓展</h3><p>在Spring的官网有这个介绍：现代化的java开发！说白就是基于Spring的开发！</p>
<p><img data-src="1.png" alt="1078856-20170205160357354-490660449"></p>
<ul>
<li>Spring Boot<ul>
<li>一个快速开发的脚手架</li>
<li>基于SpringBoot可以快速开发单个微服务</li>
<li>约定大于配置！</li>
</ul>
</li>
<li>Spring Cloud<ul>
<li>Spring CLoud是基于SpringBoot实现的</li>
</ul>
</li>
</ul>
<p>因为现在大所述公司都在使用SpringBoot进行快速开发，学习SpringBoot的前提，需要完全掌握Spring及SpringMVC！承上启下的作用</p>
<p><strong>弊端：发展太久了之后，违背了原来的理念！配置十分繁琐，人称：“配置地狱”！</strong></p>
<h2 id="2、IOC理论推导"><a href="#2、IOC理论推导" class="headerlink" title="2、IOC理论推导"></a>2、IOC理论推导</h2><h3 id="2-1、IoC基础"><a href="#2-1、IoC基础" class="headerlink" title="2.1、IoC基础"></a>2.1、IoC基础</h3><p>1.UserDao接口</p>
<p>2.UserDaoImpl实现类</p>
<p>3.UserService业务接口</p>
<p>4.UserServiceImpl业务实现类</p>
<p>在我们之前的业务中，用户的需求可能会影响我们原来的代码，我们需要更具用户的需求去修改源代码！如果程序代码量十分大，修改一次的成本代价十分昂贵！</p>
<p><img data-src="2.png" alt="1078856-20170205160357354-490660449"></p>
<p>我们使用一个Set接口实现，已经发生了革命性的变化！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用set进行动态实现值的注入</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>之前，程序是主动创建对象！控制权在程序员手上！</li>
<li>使用了set注入之后，程序不再有主动性，而是变成了被动的接受对象！</li>
</ul>
<p>这种思想从本质上实现了问题，我们程序员不用再去管理对象的创建了。系统的耦合性大大降低，可以更加专注的在业务的实现上！这是IOC的原型！</p>
<p><img data-src="3.png" alt="1078856-20170205160357354-490660449"></p>
<h3 id="2-2、IOC本质"><a href="#2-2、IOC本质" class="headerlink" title="2.2、IOC本质"></a>2.2、IOC本质</h3><p><strong>控制反转IoC(Inversion of Control)，是一种设计思想，DI(依赖注入)是实现IoC的一种方法</strong>，也有人认为DI只是IoC的另一种说法。没有IoC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。</p>
<p>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。</p>
<p><strong>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）。</strong></p>
<h2 id="3、HelloSpring"><a href="#3、HelloSpring" class="headerlink" title="3、HelloSpring"></a>3、HelloSpring</h2><p><strong>导入Jar包</strong></p>
<p>注 : spring 需要导入commons-logging进行日志记录 . 我们利用maven , 他会自动下载对应的依赖项 .</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>编写代码</strong></p>
<p>1、编写一个Hello实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;str=&#x27;&quot;</span> + str + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、编写我们的spring文件 , 这里我们命名为beans.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--bean就是java对象 , 由Spring创建和管理</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    类型 变量名 = new 类型();</span></span><br><span class="line"><span class="comment">    Hello hello = new Hello();</span></span><br><span class="line"><span class="comment">    bean = 对象   new Hello();</span></span><br><span class="line"><span class="comment">    id = 变量名</span></span><br><span class="line"><span class="comment">    class = new的对象</span></span><br><span class="line"><span class="comment">    property 相当于给对象中的属性设置一个变量</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Hello&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、我们可以去进行测试了 .</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取Spring的上下文对象</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//我们的对象现在都在Spring中管理了，我们要使用，直接去里面取出来就可以</span></span><br><span class="line">        Hello hello = (Hello)context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>思考问题？</strong></p>
<ul>
<li>Hello 对象是谁创建的 ?  </li>
<li>hello 对象是由Spring创建的</li>
<li>Hello 对象的属性是怎么设置的 ?  </li>
<li>hello 对象的属性是由Spring容器设置的</li>
</ul>
<p>这个过程就叫控制反转 :</p>
<ul>
<li>控制 : 谁来控制对象的创建 , 传统应用程序的对象是由程序本身控制创建的 , 使用Spring后 , 对象是由Spring来创建的</li>
<li>反转 : 程序本身不创建对象 , 而变成被动的接收对象 </li>
<li>依赖注入 : 就是利用set方法来进行注入的.</li>
</ul>
<p> IOC是一种编程思想，由主动的编程变成被动的接收</p>
<p>可以通过new ClassPathXmlApplicationContext去浏览一下底层源码 </p>
<p>**OK , 到了现在 , 我们彻底不用再程序中去改动了 , 要实现不同的操作 , 只需要在xml配置文件中进行修改 , 所谓的IoC,一句话搞定 : 对象由Spring 来创建 , 管理 , 装配 ! **</p>
<h2 id="4、IOC创建对象的方式"><a href="#4、IOC创建对象的方式" class="headerlink" title="4、IOC创建对象的方式"></a>4、IOC创建对象的方式</h2><p>1.使用无参构造创建对象，默认！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--无参构造器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;狂神&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.假设我们要使用有参构造创建对象。</p>
<ol>
<li><p>下标赋值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--有参构造器1，下标赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;狂神说Java&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>类型</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--有参构造器2，类型，但同类型只能一个，不建议使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;狂神&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>参数名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--有参构造器3，参数名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;狂神&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>总结：在配置文件加载的时候。其中管理的对象都已经初始化了！</p>
<h2 id="5、Spring配置"><a href="#5、Spring配置" class="headerlink" title="5、Spring配置"></a>5、Spring配置</h2><h3 id="5-1、别名"><a href="#5-1、别名" class="headerlink" title="5.1、别名"></a>5.1、别名</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--别名，如果添加了别名也可以使用别名获取到这个对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;userNew&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2、Bean的配置"><a href="#5-2、Bean的配置" class="headerlink" title="5.2、Bean的配置"></a>5.2、Bean的配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        id:bean的唯一标识符，也就是相当于我们学的对象名</span></span><br><span class="line"><span class="comment">        class：bean 对象所对应的权限定名：包名 + 类型</span></span><br><span class="line"><span class="comment">        name: 也是别名,而且name更高级，可以起多个别名，通过逗号空格分号等分割</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.UserT&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userT2,t2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;西部开源&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-3、import"><a href="#5-3、import" class="headerlink" title="5.3、import"></a>5.3、import</h3><p>团队的合作通过import来实现 ,可以将多个配置文件，导入合并为一个</p>
<p>假设，现在项目中有多个人开发，这三个人复制不同的类开发，不同的类需要不同的bean中，我们可以利用import将所有人的beans.xml合并为一个总的</p>
<ul>
<li>张三 beans.xml</li>
<li>李四 beans2.xml</li>
<li>王五 beans3.xml</li>
<li>applicationContext</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans2.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans3.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用的时候，直接使用总的配置就可以了</p>
<h2 id="6、依赖注入"><a href="#6、依赖注入" class="headerlink" title="6、依赖注入"></a>6、依赖注入</h2><h3 id="6-1、构造器注入"><a href="#6-1、构造器注入" class="headerlink" title="6.1、构造器注入"></a>6.1、构造器注入</h3><p>前面已经说过了</p>
<h3 id="6-2、set方式注入【重点】"><a href="#6-2、set方式注入【重点】" class="headerlink" title="6.2、set方式注入【重点】"></a>6.2、set方式注入【重点】</h3><ul>
<li>依赖注入（Dependency Injection,DI）。<ul>
<li>依赖 : 指Bean对象的创建依赖于容器 . Bean对象的依赖资源 .</li>
<li>注入 : 指Bean对象所依赖的资源 , 由容器来设置和装配 .</li>
</ul>
</li>
</ul>
<p>【环境搭建】</p>
<ol>
<li><p>复杂类型 Address.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Address&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>真实测试对象 Student.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getBooks() &#123;</span><br><span class="line">        <span class="keyword">return</span> books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBooks</span><span class="params">(String[] books)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.books = books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getHobbies</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobbies</span><span class="params">(List&lt;String&gt; hobbies)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobbies = hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getCard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCard</span><span class="params">(Map&lt;String, String&gt; card)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.card = card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getGames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> games;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGames</span><span class="params">(Set&lt;String&gt; games)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.games = games;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWife</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWife</span><span class="params">(String wife)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wife = wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Properties <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(Properties info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&quot;</span> + address.toString +</span><br><span class="line">                <span class="string">&quot;, books=&quot;</span> + Arrays.toString(books) +</span><br><span class="line">                <span class="string">&quot;, hobbies=&quot;</span> + hobbies +</span><br><span class="line">                <span class="string">&quot;, card=&quot;</span> + card +</span><br><span class="line">                <span class="string">&quot;, games=&quot;</span> + games +</span><br><span class="line">                <span class="string">&quot;, wife=&#x27;&quot;</span> + wife + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, info=&quot;</span> + info +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>beans.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;西安&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第一种，普通值注入 value--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;狂神&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--第二种： Bean注入 ref--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--第三种： 数组注入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--第四种：list注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>听歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>敲代码<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--第五种：map注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;111111111111111111&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;银行卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22222222222222222222&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--第六种：set注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>COC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>BOB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--第七种：null注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--第七种：Properties注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;driver&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;url&quot;</span>&gt;</span>localhost://3306<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        Student student = (Student)context.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="6-3、拓展方式注入"><a href="#6-3、拓展方式注入" class="headerlink" title="6.3、拓展方式注入"></a>6.3、拓展方式注入</h3><p>我们可以使用p命令空间和c命令空间进行注入</p>
<p>官方解释：</p>
<p><img data-src="4.png" alt="1078856-20170205160357354-490660449"></p>
<p>使用！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--p命名空间可以直接注入属性的值 property--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;狂神&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--c命名空间可以通过构造器注入 construct-args--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.User&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;狂神2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;userBeans.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//User user = (User)context.getBean(&quot;user&quot;);</span></span><br><span class="line">    User user = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意点：p命名和c命名空间不能直接使用，需要引入xml约束!</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br></pre></td></tr></table></figure>



<h3 id="6-4、Bean的作用域"><a href="#6-4、Bean的作用域" class="headerlink" title="6.4、Bean的作用域"></a>6.4、Bean的作用域</h3><p><img data-src="5.png" alt="1078856-20170205160357354-490660449"></p>
<ol>
<li><p>单例模式(Spring默认机制)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>原型模式：每次从容器中get的时候，都会产生一个现对象！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>其余的request、session、application这些个只能在web开发中使用到</p>
</li>
</ol>
<h2 id="7、Bean的自动装配"><a href="#7、Bean的自动装配" class="headerlink" title="7、Bean的自动装配"></a>7、Bean的自动装配</h2><ul>
<li>自动装配是Spring满足bean依赖的一种方式</li>
<li>Spring会在上下文自动寻找，并自动给bean装配属性！</li>
</ul>
<p>在Spring中有三种自动装配的方式</p>
<ol>
<li>在xml中显示的配置</li>
<li>在java中显示配置</li>
<li>隐式的自动装配bean【重要】</li>
</ol>
<p>这里我们主要讲第三种：自动化的装配bean。</p>
<h3 id="7-1、测试"><a href="#7-1、测试" class="headerlink" title="7.1、测试"></a>7.1、测试</h3><p>环境搭建：一个人有两个宠物</p>
<h3 id="7-2、ByName自动装配"><a href="#7-2、ByName自动装配" class="headerlink" title="7.2、ByName自动装配"></a>7.2、ByName自动装配</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    byName:会自动在容器上下文中套接，和自己对象的set方法后面的值相对应的beanid</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;狂神&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-3、ByType自动装配"><a href="#7-3、ByType自动装配" class="headerlink" title="7.3、ByType自动装配"></a>7.3、ByType自动装配</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    byType:会自动在容器上下文中套接，和自己对象属性类型相同的beanid</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;狂神&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>小结：</p>
<ul>
<li>byname的时候，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法的值一致</li>
<li>bytype的时候，需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致</li>
</ul>
<h3 id="7-4、使用注解实现自动装配"><a href="#7-4、使用注解实现自动装配" class="headerlink" title="7.4、使用注解实现自动装配"></a>7.4、使用注解实现自动装配</h3><p>jdk1.5支持的注解，Spring2.5就支持注解了！</p>
<p>The introduction of annotation-based configuration raised the question of whether this approach is “better” than XML. </p>
<p>要使用注解需知：</p>
<ol>
<li><p>导入约束：context支持</p>
</li>
<li><p>配置注解的支持：<a href="context:annotation-config/">context:annotation-config/</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Autowired注解"><a href="#Autowired注解" class="headerlink" title="@Autowired注解"></a>@Autowired注解</h4><ul>
<li><p>需要导入 spring-aop的包！</p>
</li>
<li><p>直接在属性上使用即可！也可以在set方式上使用！</p>
</li>
<li><p>使用Autowired我们可以不用编写set方法，前提是你这个自动装配的属性在IOC（Spring）容器中存在，且符合名字byName和类型byType！</p>
<ul>
<li><p>正常1（byName）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.People&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>正常2（byType）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat111&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog222&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.People&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>正常3（混合使用，先类型后名字）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat11&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog222&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.People&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>不正常（多种类型且名字也不匹配，报错）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat11&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat111&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog22&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog222&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.pojo.People&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>科普：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Nullable 字段标记了这个注解，说明这个字段可以为null</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果显示的定义了Autowired的required属性为false，说明这个对象可以为null，否则不允许为空</span></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>如果@Autowired自动装配的环境比较复杂，自动装配无法通过一个注解【@Autowired】完成的时候，我们可以使用@Qualifilter(value=”xxx”)去配合@Autowired的使用，指定一个唯一的bean对象注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;cat11&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value=&quot;dog222&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Resource注解"><a href="#Resource注解" class="headerlink" title="Resource注解"></a>Resource注解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;cat1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<p>@Resource和@Autowired</p>
<ul>
<li>都是用来自动装配的，都可以放在属性字段上</li>
<li>实现方式不同<ul>
<li>@Autowired默认通过bytype的方式实现，如果有多个类型，则通过byname实现，如果两个都找不到，就报错！</li>
<li>@Resource默认通过byname的方式实现，如果找不到名字，则通过bytype实现，如果两个都找不到，就报错！</li>
</ul>
</li>
<li>执行的顺序不同：<ul>
<li>@Autowired默认通过bytype的方式实现</li>
<li>@Resource默认通过byname的方式实现</li>
</ul>
</li>
<li>类型重复的话，如果名字不是默认的（如cat11，cat111，而没有默认的cat）<ul>
<li>@Autowired配合@Qualifier(value = “cat11”)使用</li>
<li>@Resource直接使用@Resource(name = “cat11”)</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="8-使用注解开发"><a href="#8-使用注解开发" class="headerlink" title="8.使用注解开发"></a>8.使用注解开发</h2><p>在Spring4之后，要使用注解开发，必须要保证aop的包导入了</p>
<p><img data-src="6.png" alt="1078856-20170205160357354-490660449"></p>
<p>使用注解需要导入context约束，增加注解的支持！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 等价于 &lt;bean id=&quot;user&quot; class=&quot;nuc.ss.pojo.User&quot;/&gt;</span></span><br><span class="line"><span class="meta">@Component</span></span><br></pre></td></tr></table></figure></li>
<li><p>属性如何注入@Value(“xxx”)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//相当于&lt;property name=&quot;name&quot; value=&quot;狂神&quot;/&gt;</span></span><br><span class="line">    <span class="meta">@Value(&quot;狂神&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>衍生的注解</p>
<p>@Component有几个衍生的注解，我们在web开发中，会按照mvc三层架构分层！</p>
<ul>
<li><p>dao【@Repository】</p>
</li>
<li><p>service 【@Service】</p>
</li>
<li><p>controller 【@Controller】</p>
<p>这四个注解功能都是一样的，都是代表将某个注册类注入到Spring中，装配Bean</p>
</li>
</ul>
</li>
<li><p>自动装配置</p>
<ul>
<li>@Autowired：自动装配通过类型、名字<ul>
<li>如果Autowired不能唯一自动装配上属性，则需要通过@Qualifilter(value=”xxx”)</li>
</ul>
</li>
<li>@Nullable：字段标记了这个注解，说明这个字段可以为null</li>
<li>@Resource：自动装配通过名字、类型 </li>
</ul>
</li>
<li><p>作用域 @Scope</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//相当于&lt;property name=&quot;name&quot; value=&quot;狂神&quot;/&gt;</span></span><br><span class="line">    <span class="meta">@Value(&quot;狂神&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>小结</p>
<p>xml与注解</p>
<ul>
<li>xml更加万能，适用于任何场合！维护简单方便</li>
<li>注解不是自己的类用不了，维护相对复杂</li>
</ul>
<p>xml与注解的最佳实践：</p>
<ul>
<li><p>xml用来管理bean;</p>
</li>
<li><p>注解只负责完成属性的注入;</p>
</li>
<li><p>我们在使用的过程中，只需要注意一个问题：必须让注解生效，就需要开启注解支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定要扫描的包，这个包下面的注解就会生效--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;nuc.ss&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="9-使用java的方式配置Spring"><a href="#9-使用java的方式配置Spring" class="headerlink" title="9.使用java的方式配置Spring"></a>9.使用java的方式配置Spring</h2><p>我们现在要完全不适用Spring的xml配置了，全权交给java来做</p>
<p>javaConfig是Spring的一个子项目，在Spring4之后，它成为了一个核心功能！</p>
<p><img data-src="7.png" alt="1078856-20170205160357354-490660449"></p>
<p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//这里这个注解的意思，就是说明这个类被Spring接管了。注解到了容器中</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性注入值</span></span><br><span class="line">    <span class="meta">@Value(&quot;狂神&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个也被Spring容器托管，注册到容器里，因为他本来就是一个@Component，</span></span><br><span class="line"><span class="comment">// @Component代表这是一个配置类，就和我们之前看的beans.xml是一样的</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;nuc.ss.pojo&quot;)</span></span><br><span class="line"><span class="meta">@Import(MyConfig2.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册一个bean，就相当于我们之前写的一个bean标签，</span></span><br><span class="line">    <span class="comment">//这个方法的名字就相当于bean标签的id属性</span></span><br><span class="line">    <span class="comment">//这个方法的返回值,就相当于bean标签中的class属性</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();<span class="comment">//就是要返回注入到bean的对象!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果完全使用了配置类的方式去做,我们就只能通过AnnotationConfig 上下文来获取容器,通过配置类的class对象加载!</span></span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(MyConfig.class);</span><br><span class="line"></span><br><span class="line">    User getUser = context.getBean(<span class="string">&quot;getUser&quot;</span>, User.class);</span><br><span class="line"></span><br><span class="line">    System.out.println(getUser.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种纯java的配置方式，在SpringBoot中随处可见！</p>
<h2 id="10、代理模式"><a href="#10、代理模式" class="headerlink" title="10、代理模式"></a>10、代理模式</h2><p>为什么要学习代理模式？因为这就是SpringAOP的底层！【SpringAOP和SpringMVC】</p>
<p>代理模式的分类：</p>
<ul>
<li>静态代理</li>
<li>动态代理</li>
</ul>
<p><img data-src="8.png" alt="1078856-20170205160357354-490660449"></p>
<h3 id="10-1、静态代理"><a href="#10-1、静态代理" class="headerlink" title="10.1、静态代理"></a>10.1、静态代理</h3><p>角色分析：</p>
<ul>
<li>抽象角色：一般会使用接口或者抽象类来解决</li>
<li>真实角色：被代理的角色</li>
<li>代理角色：代理真实角色，代理真实角色后，我们一般会做一些附属操作</li>
<li>客户：访问代理对象的人！</li>
</ul>
<p>代码步骤：</p>
<ol>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>真实角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东要出租房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>代理角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Host host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        seeHouse();</span><br><span class="line">        fare();</span><br><span class="line">        contract();</span><br><span class="line">        host.rent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//看房</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介带你看房&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//收中介费</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收中介费&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//收中介费</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;签租赁合同&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>客户端访问代理角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//房东要租房子</span></span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line">        <span class="comment">//代理，中介帮房东租房子，但是代理一般会有一些附属操作</span></span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy(host);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//你不用面对房东，直接面对中介</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>静态代理模式的好处：</p>
<ul>
<li>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务</li>
<li>公共也就交给代理角色！实现了业务的分工！</li>
<li>公共业务发生扩展的时候，方便集中管理！</li>
</ul>
<p>缺点：</p>
<ul>
<li>一个真实角色就会产生一个代理角色；</li>
<li>代码量会翻倍-开发效率会变低</li>
</ul>
<h3 id="10-2-、加深理解"><a href="#10-2-、加深理解" class="headerlink" title="10.2 、加深理解"></a>10.2 、加深理解</h3><p>代码：</p>
<ol>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>真实角色：改动原有的业务代码，在公司中是大忌！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//真实对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>需求来了，现在我们需要增加一个日志功能，怎么实现！</p>
<ul>
<li>思路1 ：在实现类上增加代码 【麻烦！】</li>
<li>思路2：使用代理来做，能够不改变原来的业务情况下，实现此功能就是最好的了！</li>
</ul>
</li>
<li><p>设置一个代理类来处理日志！代理角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserService</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;delete&quot;</span>);</span><br><span class="line">        userService.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;update&quot;</span>);</span><br><span class="line">        userService.update();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;query&quot;</span>);</span><br><span class="line">        userService.query();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//日志方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用了&quot;</span> + msg + <span class="string">&quot;方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>客户端访问代理角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line">        UserServiceProxy proxy = <span class="keyword">new</span> UserServiceProxy();</span><br><span class="line">        proxy.setUserService(userService);</span><br><span class="line"></span><br><span class="line">        proxy.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>我们在不改变原来的代码的情况下，实现了对原有功能的增强，这是AOP中最核心的思想</strong></p>
<p>聊聊AOP：纵向开发，横向开发</p>
<p><img data-src="9.png" alt="1078856-20170205160357354-490660449"></p>
<h3 id="10-3、动态代理"><a href="#10-3、动态代理" class="headerlink" title="10.3、动态代理"></a>10.3、动态代理</h3><ul>
<li>动态代理和静态代理角色一样</li>
<li>动态代理的代理类是动态生成的，不是 我们直接写好的！</li>
<li>动态代理分为两大类：基于接口的动态代理、基于类的动态代理<ul>
<li>基于接口：JDK动态代理【我们在这里使用】</li>
<li>基于类：cglib</li>
<li>java字节码实现：javasist</li>
</ul>
</li>
</ul>
<p>需要了解两个类：Proxy：代理，InvocationHandler：调用处理程序</p>
<p>动态代理的好处：</p>
<ul>
<li>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务</li>
<li>公共也就交给代理角色！实现了业务的分工！</li>
<li>公共业务发生扩展的时候，方便集中管理！</li>
<li>一个动态代理类代理的是一个接口，一般就是对应的一类业务</li>
<li>一个动态代理类可以代理多个类，只要是实现了同一个接口即可【核心】</li>
</ul>
<h2 id="11、AOP"><a href="#11、AOP" class="headerlink" title="11、AOP"></a>11、AOP</h2><h3 id="11-1、什么是AOP"><a href="#11-1、什么是AOP" class="headerlink" title="11.1、什么是AOP"></a>11.1、什么是AOP</h3><p>AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p>
<p><img data-src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JAeTYOaaH6rZ6WmLLgwQLHf5pmH30gj6mZm81PC7iauicFu55sicJtspU7K3vTCVdZCDTSHq7D5XHlw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p>
<h3 id="11-2、Aop在Spring中的作用"><a href="#11-2、Aop在Spring中的作用" class="headerlink" title="11.2、Aop在Spring中的作用"></a>11.2、Aop在Spring中的作用</h3><p><strong>提供声明式事务；允许用户自定义切面</strong></p>
<p>以下名词需要了解下：</p>
<ul>
<li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志 , 安全 , 缓存 , 事务等等 ….</li>
<li>切面（ASPECT）：横切关注点 被模块化 的特殊对象。即，它是一个类。<font color=red>Log</font></li>
<li>通知（Advice）：切面必须要完成的工作。即，它是类中的一个方法。<font color=red>Log方法</font></li>
<li>目标（Target）：被通知对象。<font color=red>接口</font></li>
<li>代理（Proxy）：向目标对象应用通知之后创建的对象。<font color=red>代理类</font></li>
<li>切入点（PointCut）：切面通知 执行的 “地点”的定义。<font color=red>method</font></li>
<li>连接点（JointPoint）：与切入点匹配的执行点。<font color=red>invoke</font></li>
</ul>
<p><img data-src="10.png" alt="1078856-20170205160357354-490660449"></p>
<p>SpringAOP中，通过Advice定义横切逻辑，Spring中支持5种类型的Advice:</p>
<table>
<thead>
<tr>
<th align="center">通知类型</th>
<th align="center">连接点</th>
<th align="center">实现接口</th>
</tr>
</thead>
<tbody><tr>
<td align="center">前置通知</td>
<td align="center">方法前</td>
<td align="center">org.springframework.aop.MethodBeforeAdvice</td>
</tr>
<tr>
<td align="center">后置通知</td>
<td align="center">方法后</td>
<td align="center">org.springframework.aop.AfterReturningAdvice</td>
</tr>
<tr>
<td align="center">环绕通知</td>
<td align="center">方法前后</td>
<td align="center">org.aopalliance.intercept.MethodInterceptor</td>
</tr>
<tr>
<td align="center">异常抛出通知</td>
<td align="center">方法抛出异常</td>
<td align="center">org.springframework.aop.ThrowsAdvice</td>
</tr>
<tr>
<td align="center">引介通知</td>
<td align="center">类中增加新的方法属性</td>
<td align="center">org.springframework.aop.IntroductionInterceptor</td>
</tr>
</tbody></table>
<p>即 Aop 在 不改变原有代码的情况下 , 去增加新的功能 .</p>
<h3 id="11-3、使用Spring实现Aop"><a href="#11-3、使用Spring实现Aop" class="headerlink" title="11.3、使用Spring实现Aop"></a>11.3、使用Spring实现Aop</h3><p>【重点】使用AOP织入，需要导入一个依赖包！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>方式一：使用Spring的API接口【主要SpringAPI接口实现】</p>
<ol>
<li><p>首先编写我们的业务接口和实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;增加用户&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;删除用户&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;更新用户&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;查询用户&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>写我们的增强类 , 我们编写两个 , 一个前置增强 一个后置增强</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//method : 要执行的目标对象的方法</span></span><br><span class="line">   <span class="comment">//objects : 被调用的方法的参数</span></span><br><span class="line">   <span class="comment">//Object : 目标对象</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] objects, Object o)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">       System.out.println( o.getClass().getName() + <span class="string">&quot;的&quot;</span> + method.getName() + <span class="string">&quot;方法被执行了&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterLog</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line">   <span class="comment">//returnValue 返回值</span></span><br><span class="line">   <span class="comment">//method被调用的方法</span></span><br><span class="line">   <span class="comment">//args 被调用的方法的对象的参数</span></span><br><span class="line">   <span class="comment">//target 被调用的目标对象</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;执行了&quot;</span> + target.getClass().getName()</span><br><span class="line">       +<span class="string">&quot;的&quot;</span>+method.getName()+<span class="string">&quot;方法,&quot;</span></span><br><span class="line">       +<span class="string">&quot;返回值：&quot;</span>+returnValue);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在spring的文件中注册 , 并实现aop切入实现 , 注意导入约束 .</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.log.Log&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--aop的配置--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--切入点 expression:表达式匹配要执行的方法--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* nuc.ss.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--执行环绕; advice-ref执行方法 . pointcut-ref切入点--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">       UserService userService = (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">       userService.select();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>Aop的重要性 : 很重要 . 一定要理解其中的思路 , 主要是思想的理解这一块 .</p>
<p>**Spring的Aop就是将公共的业务 (日志 , 安全等) 和领域业务结合起来 , 当执行领域业务时 , 将会把公共业务加进来 . 实现公共业务的重复利用 . 领域业务更纯粹 , 程序猿专注领域业务 , 其本质还是动态代理 . **</p>
<p>方式二：自定义来实现【主要是切面定义】</p>
<p>目标业务类不变依旧是userServiceImpl</p>
<ol>
<li><p>写我们自己的一个切入类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiyPointCut</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========方法执行前============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========方法执行后============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>去spring中配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式二：自定义类--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.diy.DiyPointCut&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--aop的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自定义切面，ref要引用的类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;point&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* nuc.ss.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    UserService userService = (UserService)context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line"></span><br><span class="line">    userService.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>方式三：使用注解实现！</p>
<ol>
<li><p>编写一个注解实现的增强类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式三：使用注解的方式实现AOP</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//标注这个类是一个切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationPointCut</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* nuc.ss.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========方法执行前============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* nuc.ss.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========方法执行后============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在环绕增强中，我们可以给定一个参数，代表我们要获取处理切入的点</span></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* nuc.ss.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========环绕前============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取签名</span></span><br><span class="line">        <span class="comment">//Signature signature = jp.getSignature();</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;signature:&quot; + signature);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        Object proceed = jp.proceed();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==========环绕后============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在Spring配置文件中，注册bean，并增加支持注解的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式三：注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationPointCut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.diy.AnnotationPointCut&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启注解支持: JDK（默认proxy-target-class=&quot;false&quot;） cglib--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="12、整合Mybatis"><a href="#12、整合Mybatis" class="headerlink" title="12、整合Mybatis"></a>12、整合Mybatis</h2><p>步骤：</p>
<ol>
<li><p>导入相关jar包</p>
<ul>
<li><p>junit</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>mybatis</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>mysql数据库：mysql-connector-java</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>spring相关的：spring-webmvc</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>aspectJ AOP 织入器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>mybatis-spring整合包【重点】</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependecy</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置Maven静态资源过滤问题！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>编写配置文件</p>
</li>
<li><p>测试</p>
</li>
</ol>
<h3 id="12-1、回忆mybatis"><a href="#12-1、回忆mybatis" class="headerlink" title="12.1、回忆mybatis"></a>12.1、回忆mybatis</h3><ol>
<li><p>编写实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写核心配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;nuc.ss.pojo&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;nuc.ss.dao&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;nuc.ss.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectUser</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">   String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">   InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">   SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">   SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">   UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">   List&lt;User&gt; userList = mapper.selectUser();</span><br><span class="line">   <span class="keyword">for</span> (User user: userList)&#123;</span><br><span class="line">       System.out.println(user);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="12-2、Mybatis-Spring"><a href="#12-2、Mybatis-Spring" class="headerlink" title="12.2、Mybatis-Spring"></a>12.2、Mybatis-Spring</h3><p>引入Spring之前需要了解mybatis-spring包中的一些重要类；</p>
<p><a href="http://www.mybatis.org/spring/zh/index.html">mybatis-spring官网</a></p>
<p><img data-src="13.png" alt="1078856-20170205160357354-490660449"></p>
<p><strong>什么是 MyBatis-Spring？</strong></p>
<p>MyBatis-Spring 会帮助你将 MyBatis 代码无缝地整合到 Spring 中。</p>
<p><strong>知识基础</strong></p>
<p>在开始使用 MyBatis-Spring 之前，你需要先熟悉 Spring 和 MyBatis 这两个框架和有关它们的术语。这很重要</p>
<p>MyBatis-Spring 需要以下版本：</p>
<table>
<thead>
<tr>
<th align="center">MyBatis-Spring</th>
<th align="center">MyBatis</th>
<th align="center">Spring 框架</th>
<th align="center">Spring Batch</th>
<th align="center">Java</th>
</tr>
</thead>
<tbody><tr>
<td align="center">2.0</td>
<td align="center">3.5+</td>
<td align="center">5.0+</td>
<td align="center">4.0+</td>
<td align="center">Java 8+</td>
</tr>
<tr>
<td align="center">1.3</td>
<td align="center">3.4+</td>
<td align="center">3.2.2+</td>
<td align="center">2.1+</td>
<td align="center">Java 6+</td>
</tr>
</tbody></table>
<p>如果使用 Maven 作为构建工具，仅需要在 pom.xml 中加入以下代码即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>整合方式一</strong></p>
<ol>
<li><p>引入配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写数据源配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置数据源：数据源有非常多，可以使用第三方的，也可使使用Spring的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>sqlSessionFactory</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置SqlSessionFactory--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--关联Mybatis--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:nuc/ss/dao/*.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>sqlSessionTemplate</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册sqlSessionTemplate , 关联sqlSessionFactory--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--利用构造器注入,没有set注入，只能使用构造器注入--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>需要给接口加实现类【新加的】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">   <span class="comment">//sqlSession不用我们自己创建了，Spring来管理</span></span><br><span class="line">   <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.sqlSession = sqlSession;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">       <span class="keyword">return</span> mapper.selectUser();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>将自己写的实现类，注入到Spring中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.dao.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试使用即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    UserMapper mapper = (UserMapper) context.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">    List&lt;User&gt; user = mapper.selectUser();</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>结果成功输出！现在我们的Mybatis配置文件的状态！发现都可以被Spring整合！</p>
<p>为了<font color=red>给mybatis-config.xml留点面子</font>(使用方便)，在其中将别名和设置留下来</p>
   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">          <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">          <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;nuc.ss.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- &lt;settings&gt;</span></span><br><span class="line"><span class="comment">    	&lt;setting&gt;&lt;/setting&gt;</span></span><br><span class="line"><span class="comment">    &lt;/settings&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>**整合实现二  **</p>
<p>mybatis-spring1.2.3版以上的才有这个 .</p>
<p>官方文档截图 :</p>
<p>dao继承Support类 , 直接利用 getSqlSession() 获得 , 然后直接注入SqlSessionFactory . 比起方式1 , 不需要管理SqlSessionTemplate , 而且对事务的支持更加友好 . 可跟踪源码查看</p>
<p><img data-src="12.png" alt="1078856-20170205160357354-490660449"></p>
<p>测试：</p>
<ol>
<li><p>将我们上面写的UserDaoImpl修改一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       UserMapper mapper = getSqlSession().getMapper(UserMapper.class);</span><br><span class="line">       <span class="keyword">return</span> mapper.selectUser();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>修改bean的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.dao.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">   ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">   UserMapper mapper = (UserMapper) context.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">   List&lt;User&gt; user = mapper.selectUser();</span><br><span class="line">   System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong><font color=red>总结 : 整合到spring以后可以完全不要mybatis的配置文件，除了这些方式可以实现整合之外，我们还可以使用注解来实现，这个等我们后面学习SpringBoot的时候还会测试整合！</font></strong></p>
<h2 id="13、声明式事务"><a href="#13、声明式事务" class="headerlink" title="13、声明式事务"></a>13、声明式事务</h2><h3 id="13-1、回顾事务"><a href="#13-1、回顾事务" class="headerlink" title="13.1、回顾事务"></a>13.1、回顾事务</h3><ul>
<li>把一组业务当成一个业务来做；要么都成功，要么都失败！</li>
<li>事务在项目开发中，十分重要，涉及到数据的一致性问题，不能马虎</li>
<li>确保完整性和一致性</li>
</ul>
<p><strong>事务的ACID原则</strong></p>
<ul>
<li>原子性（atomicity）<ul>
<li>事务是原子性操作，由一系列动作组成，事务的原子性确保动作要么全部完成，要么完全不起作用</li>
</ul>
</li>
<li>一致性（consistency）<ul>
<li>一旦所有事务动作完成，事务就要被提交。数据和资源处于一种满足业务规则的一致性状态中</li>
</ul>
</li>
<li>隔离性（isolation）<ul>
<li>多个业务可能操作同一个资源，防止数据损坏</li>
</ul>
</li>
<li>持久性（durability）<ul>
<li>事务一旦提交，无论系统发生什么问题，结果都不会再被影响，被持久化的写到存储器中！</li>
</ul>
</li>
</ul>
<h3 id="13-2、Spring中的事务管理"><a href="#13-2、Spring中的事务管理" class="headerlink" title="13.2、Spring中的事务管理"></a>13.2、Spring中的事务管理</h3><ul>
<li><p><strong>声明式事务</strong>：AOP</p>
<ul>
<li>一般情况下比编程式事务好用。</li>
<li>将事务管理代码从业务方法中分离出来，以声明的方式来实现事务管理。</li>
<li>将事务管理作为横切关注点，通过aop方法模块化。Spring中通过Spring AOP框架支持声明式事务管理</li>
</ul>
</li>
<li><p><strong>编程式事务</strong>：需要在代码中，进行事务的管理</p>
<ul>
<li>将事务管理代码嵌到业务方法中来控制事务的提交和回滚</li>
<li>缺点：必须在每个事务操作业务逻辑中包含额外的事务管理代码</li>
</ul>
</li>
<li><p><strong>使用Spring管理事务，注意头文件的约束导入 : tx</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line"></span><br><span class="line">http://www.springframework.org/schema/tx</span><br><span class="line">http://www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>事务管理器</strong></p>
<ul>
<li>无论使用Spring的哪种事务管理策略（编程式或者声明式）事务管理器都是必须的。</li>
<li>就是 Spring的核心事务管理抽象，管理封装了一组独立于技术的方法。</li>
</ul>
</li>
<li><p><strong>JDBC事务</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>配置事务的通知</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--配置哪些方法使用什么样的事务,配置事务的传播特性--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;search*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>spring事务传播特性：</strong></p>
<p>事务传播行为就是多个事务方法相互调用时，事务如何在这些方法间传播。spring支持7种事务传播行为：</p>
<ul>
<li><strong>propagation_requierd</strong>：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是最常见的选择。</li>
<li>propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。</li>
<li>propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。</li>
<li>propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。</li>
<li>propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li>
<li>propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。</li>
<li><strong>propagation_nested</strong>：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作</li>
</ul>
</li>
<li><p><strong>配置AOP</strong>（导入aop的头文件！）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置aop织入事务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* nuc.ss.dao.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>思考：</p>
<p>为什么需要事务？</p>
<ul>
<li>如果不配置，可能存在数据提交不一致的情况；</li>
<li>如果我们不在Spring中去配置声明式事务，我们需要在代码中手动配置事务！</li>
<li>事务在项目开发过程非常重要，涉及到数据的一致性的问题，不容马虎！</li>
</ul>
<h4 id="学习代码"><a href="#学习代码" class="headerlink" title="学习代码"></a>学习代码</h4><p><a href="Spring-Study.zip">点我下载</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>Spring</tag>
        <tag>SSH</tag>
        <tag>SSM</tag>
        <tag>MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/16112/</url>
    <content><![CDATA[<p>欢迎来到 <a href="https://hexo.io/">Hexo</a>！这是你的第一篇文章。查看 <a href="https://hexo.io/docs/">文档</a> 以获取更多信息。如果您在使用 Hexo 时遇到任何问题，可以在 <a href="https://hexo.io/docs/troubleshooting.html">故障排除中</a>找到答案，或者您可以在 <a href="https://github.com/hexojs/hexo/issues">GitHub</a>询问我。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装 Hexo 只需几分钟时间，若您在安装过程中遇到问题或无法找到解决方式，请<a href="https://github.com/hexojs/hexo/issues" title="提交问题">提交问题</a>，我会尽力解决您的问题。</p>
<span id="more"></span>

<h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：<br><a href="https://nodejs.org/" title="Node.js">Node.js</a><br><a href="https://git-scm.com/" title="Git">Git</a></p>
<p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。</p>
<!--more-->

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="创建一个新帖子"><a href="#创建一个新帖子" class="headerlink" title="创建一个新帖子"></a>创建一个新帖子</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new &quot;My New Post&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>更多信息: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>更多信息: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>更多信息: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>常用技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>npm</tag>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>咸鱼淘的二手主板到了</title>
    <url>/posts/36335/</url>
    <content><![CDATA[<p>我这个是一台比较老的台式机，但是我舍不得卖，不然我也可以在咸鱼、转转、拍拍等二手平台上拿去卖</p>
<h4 id="为什么买二手呢？"><a href="#为什么买二手呢？" class="headerlink" title="为什么买二手呢？"></a>为什么买二手呢？</h4><p>我这个是一台比较老的台式机，但是我舍不得卖，不然我也可以在咸鱼、转转、拍拍等二手平台上拿去卖，我这个本来是 <code>intel</code>的主板，但是不知道怎么回事竟然坏了，<span id="more"></span>可能是因为电压不稳定导致的具体的不知道情况,然后去过维修店里看过，店员告诉我要换主板，他让我上网淘一个，然后我就从某东上白条了一块 B75 的主板，结果拿来装上 2 天就出问题了，把我的网卡烧毁了，声卡也坏了。:tw-1f47f:真是倒霉。然后我爸妈又让我重新买台笔记本，我也想着这台随便用用算了，就去咸鱼淘了一个 B78M-PULS 现在用着还是挺不错的.</p>
<h4 id="一些图片"><a href="#一些图片" class="headerlink" title="一些图片"></a>一些图片</h4><p><img data-src="2.jpg" alt="原来的主板" title="原来的主板"><br><img data-src="a.jpg" alt="华硕B75" title="华硕B75"><br><img data-src="1.jpg" alt="烧坏的无线网卡" title="烧坏的无线网卡"></p>
<h4 id="恭喜恭喜自己"><a href="#恭喜恭喜自己" class="headerlink" title="恭喜恭喜自己"></a>恭喜恭喜自己</h4><p>明天我的小米游戏本就到了，等到了在写一个开箱体验文章，哈哈</p>
]]></content>
      <categories>
        <category>闲言碎语</category>
      </categories>
      <tags>
        <tag>华硕</tag>
        <tag>电脑</tag>
        <tag>主板</tag>
        <tag>咸鱼二手</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Markdown编辑器的基本语法</title>
    <url>/posts/41250/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><blockquote>
<h4 id="Markdown是什么？"><a href="#Markdown是什么？" class="headerlink" title="Markdown是什么？"></a>Markdown<em>是什么</em>？</h4><h4 id="谁创造了它？"><a href="#谁创造了它？" class="headerlink" title="谁创造了它？"></a><em>谁</em>创造了它？</h4><h4 id="为什么要使用它？"><a href="#为什么要使用它？" class="headerlink" title="为什么要使用它？"></a><em>为什么</em>要使用它？</h4><h4 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a><em>怎么</em>使用？</h4><h4 id="谁在用？"><a href="#谁在用？" class="headerlink" title="谁在用？"></a><em>谁</em>在用？</h4><h4 id="尝试一下"><a href="#尝试一下" class="headerlink" title="尝试一下"></a>尝试一下</h4></blockquote>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-Markdown是什么？"><a href="#1-Markdown是什么？" class="headerlink" title="1. Markdown是什么？"></a>1. Markdown<em>是什么</em>？</h3><p><strong>Markdown</strong>是一种轻量级<strong>标记语言</strong>，它以纯文本形式(<em>易读、易写、易更改</em>)编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。<span id="more"></span></p>
<h3 id="2-谁创造了它？"><a href="#2-谁创造了它？" class="headerlink" title="2. 谁创造了它？"></a>2. <em>谁</em>创造了它？</h3><p>它由<a href="http://www.aaronsw.com/"><strong>Aaron Swartz</strong></a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于去年（<em>2013年1月11日</em>）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。</p>
<p>他有着足以让你跪拜的人生经历：</p>
<ul>
<li><strong>14岁</strong>参与RSS 1.0规格标准的制订。</li>
<li><strong>2004</strong>年入读<strong>斯坦福</strong>，之后退学。</li>
<li><strong>2005</strong>年创建<a href="http://infogami.org/">Infogami</a>，之后与<a href="http://www.reddit.com/">Reddit</a>合并成为其合伙人。</li>
<li><strong>2010</strong>年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。</li>
<li><strong>2011</strong>年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。</li>
<li><strong>2013</strong>年1月自杀身亡。</li>
</ul>
<p><img data-src="Aaron_Swartz.jpg" alt="Aaron Swartz"></p>
<p>天才都有早逝的归途。</p>
<h3 id="3-为什么要使用它？"><a href="#3-为什么要使用它？" class="headerlink" title="3. 为什么要使用它？"></a>3. <em>为什么</em>要使用它？</h3><ul>
<li>它是易读（看起来舒服）、易写（语法简单）、易更改<strong>纯文本</strong>。处处体现着<strong>极简主义</strong>的影子。</li>
<li>兼容HTML，可以转换为HTML格式发布。</li>
<li>跨平台使用。</li>
<li>越来越多的网站支持Markdown。</li>
<li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li>
<li>摆脱Word（我不是认真的）。</li>
</ul>
<h3 id="4-怎么使用？"><a href="#4-怎么使用？" class="headerlink" title="4. 怎么使用？"></a>4. <em>怎么</em>使用？</h3><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。</p>
<p>Markdown语法主要分为如下几大部分：<br><strong>标题</strong>，<strong>段落</strong>，<strong>区块引用</strong>，<strong>代码区块</strong>，<strong>强调</strong>，<strong>列表</strong>，<strong>分割线</strong>，<strong>链接</strong>，<strong>图片</strong>，**反斜杠 <code>\</code><strong>，</strong>符号’`’**。</p>
<h4 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4.1 标题"></a>4.1 标题</h4><p>两种形式：1）使用 <code>=</code>和 <code>-</code>标记一级和二级标题。</p>
<blockquote>
<p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p>
</blockquote>
<p>效果：</p>
<blockquote>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p>二级标题</p>
<hr>
</blockquote>
<p>2）使用 <code>#</code>，可表示1-6级标题。</p>
<blockquote>
<p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题</p>
</blockquote>
<p>效果：</p>
<blockquote>
<h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote>
<h4 id="4-2-段落"><a href="#4-2-段落" class="headerlink" title="4.2 段落"></a>4.2 段落</h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p>
<h4 id="4-3-区块引用"><a href="#4-3-区块引用" class="headerlink" title="4.3 区块引用"></a>4.3 区块引用</h4><p>在段落的每行或者只在第一行使用符号 <code>&gt;</code>,还可使用多个嵌套引用，如：</p>
<blockquote>
<p>&gt; 区块引用<br>&gt;&gt; 嵌套引用</p>
</blockquote>
<p>效果：</p>
<blockquote>
<p>区块引用</p>
<blockquote>
<p>嵌套引用</p>
</blockquote>
</blockquote>
<h4 id="4-4-代码区块"><a href="#4-4-代码区块" class="headerlink" title="4.4 代码区块"></a>4.4 代码区块</h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p>
<p>void main()<br>{<br>printf(“Hello, Markdown.”);<br>}</p>
<p>代码区块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;Hello, Markdown.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>:需要和普通段落之间存在空行。</p>
<h4 id="4-5-强调"><a href="#4-5-强调" class="headerlink" title="4.5 强调"></a>4.5 强调</h4><p>在强调内容两侧分别加上 <code>*</code>或者 <code>_</code>，如：</p>
<blockquote>
<p>*斜体*，_斜体_<br>**粗体**，__粗体__</p>
</blockquote>
<p>效果：</p>
<blockquote>
<p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p>
</blockquote>
<h4 id="4-6-列表"><a href="#4-6-列表" class="headerlink" title="4.6 列表"></a>4.6 列表</h4><p>使用 <code>·</code>、<code>+</code>、或 <code>-</code>标记无序列表，如：</p>
<blockquote>
<p>-（+*） 第一项<br>-（+*） 第二项<br>- （+*）第三项</p>
</blockquote>
<p><strong>注意</strong>：标记后面最少有一个_空格_或_制表符_。若不在引用区块中，必须和前方段落之间存在空行。</p>
<p>效果：</p>
<blockquote>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
</blockquote>
<p>有序列表的标记方式是将上述的符号换成数字,并辅以 <code>.</code>，如：</p>
<blockquote>
<p>1 . 第一项<br>2 . 第二项<br>3 . 第三项</p>
</blockquote>
<p>效果：</p>
<blockquote>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
</blockquote>
<h4 id="4-7-分割线"><a href="#4-7-分割线" class="headerlink" title="4.7 分割线"></a>4.7 分割线</h4><p>分割线最常使用就是三个或以上 <code>*</code>，还可以使用 <code>-</code>和 <code>_</code>。</p>
<h4 id="4-8-链接"><a href="#4-8-链接" class="headerlink" title="4.8 链接"></a>4.8 链接</h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<strong>行内式</strong>：</p>
<blockquote>
<p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p>
</blockquote>
<p>效果：</p>
<blockquote>
<p><a href="https:://github.com/younghz/Markdown" title="Markdown">younghz的Markdown库</a>。</p>
</blockquote>
<p><strong>参考式</strong>：</p>
<blockquote>
<p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”</p>
</blockquote>
<p>效果：</p>
<blockquote>
<p><a href="https:://github.com/younghz/Markdown">younghz的Markdown库1</a><br><a href="https:://github.com/younghz/Markdown">younghz的Markdown库2</a></p>
</blockquote>
<p><strong>注意</strong>：上述的 <code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p>
<h4 id="4-9-图片"><a href="#4-9-图片" class="headerlink" title="4.9 图片"></a>4.9 图片</h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个 <code>！</code>。</p>
<h4 id="4-10-反斜杠"><a href="#4-10-反斜杠" class="headerlink" title="4.10 反斜杠 \"></a>4.10 反斜杠 <code>\</code></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p>
<h4 id="4-11-符号’-’"><a href="#4-11-符号’-’" class="headerlink" title="4.11 符号’`’"></a>4.11 符号’`’</h4><p>起到标记作用。如：</p>
<blockquote>
<p>`ctrl+a`</p>
</blockquote>
<p>效果：</p>
<blockquote>
<p><code>ctrl+a</code></p>
</blockquote>
<h4 id="5-谁在用？"><a href="#5-谁在用？" class="headerlink" title="5. 谁在用？"></a>5. <em>谁</em>在用？</h4><p>Markdown的使用者：</p>
<ul>
<li>GitHub</li>
<li>简书</li>
<li>Stack Overflow</li>
<li>Apollo</li>
<li>Moodle</li>
<li>Reddit</li>
<li>等等</li>
</ul>
<h4 id="6-尝试一下"><a href="#6-尝试一下" class="headerlink" title="6. 尝试一下"></a>6. 尝试一下</h4><ul>
<li><strong>Chrome</strong>下的插件诸如<code>stackedit</code>与<code>markdown-here</code>等非常方便，也不用担心平台受限。</li>
<li><strong>在线</strong>的dillinger.io评价也不错</li>
<li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。</li>
<li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li>
<li><strong>Linux</strong>下的ReText不错。</li>
</ul>
<p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p>
<hr>
<p><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/</a> )。</p>
<hr>
<p>以上基本是所有traditonal markdown的语法。</p>
<h3 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h3><p>列表的使用(非traditonal markdown)：</p>
<p>用 <code>|</code>表示表格纵向边界，表头和表内容用 <code>-</code>隔开，并可用 <code>:</code>进行对齐设置，两边都有 <code>:</code>则表示居中，若不加 <code>:</code>则默认左对齐。</p>
<table>
<thead>
<tr>
<th align="center">代码库</th>
<th>链接</th>
</tr>
</thead>
<tbody><tr>
<td align="center">MarkDown</td>
<td><a href="https://github.com/younghz/Markdown" title="Markdown">https://github.com/younghz/Markdown</a></td>
</tr>
<tr>
<td align="center">MarkDownCopy</td>
<td><a href="https://github.com/younghz/Markdown" title="Markdown">https://github.com/younghz/Markdown</a></td>
</tr>
</tbody></table>
<p>关于其它扩展语法可参见具体工具的使用说明。</p>
]]></content>
      <categories>
        <category>常用技术</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>编辑器</tag>
        <tag>标记语言</tag>
      </tags>
  </entry>
  <entry>
    <title>学习Golang笔记-基础知识一</title>
    <url>/posts/19895/</url>
    <content><![CDATA[<p>开启我学习新编程语言的篇章。笔记嘛，不多说，直入主题。</p>
<h2 id="什么是-Go"><a href="#什么是-Go" class="headerlink" title="什么是 Go?"></a>什么是 Go?</h2><p>Go 是谷歌支持的开源编程语言,易于学习和入门,内置并发和强大的标准库,不断发展的合作伙伴、社区和工具生态系统。</p>
<p><strong>官网：</strong><a href="https://go.dev/" title="https://go.dev/">https://go.dev/</a></p>
<span id="more"></span>

<p><img data-src="1639702840194.png" alt="官网" title="官网截图"></p>
<p><strong>文档地址:</strong> <a href="https://go.dev/doc/" title="https://go.dev/doc/">https://go.dev/doc/</a></p>
<p><strong>packages</strong>: <a href="https://pkg.go.dev/" title="https://pkg.go.dev/">https://pkg.go.dev/</a></p>
<h2 id="Golang-的安装"><a href="#Golang-的安装" class="headerlink" title="Golang 的安装"></a>Golang 的安装</h2><p>通过官网下载对应的包，下载地址：<a href="https://go.dev/dl/" title="https://go.dev/dl/">https://go.dev/dl/</a></p>
<h4 id="windows-系统下的安装"><a href="#windows-系统下的安装" class="headerlink" title="windows 系统下的安装"></a>windows 系统下的安装</h4><p>双击打开下载的 msi 可执行文件，估计提示进行安装即可，若不修改默认的安装为 <code>C:/Program Files/go</code>目录下，会自动添加系统环境变量。安装好之后打开命令执行 <code>go version </code>验证安装情况。</p>
<h4 id="Linux-系统下的安装"><a href="#Linux-系统下的安装" class="headerlink" title="Linux 系统下的安装"></a>Linux 系统下的安装</h4><p>将文件下载到到当前目录，然后使用命令 <code>mkdir /usr/local/go</code> 创建一个 go 目录，把文件直接解压缩到 go 目录下，或者解压缩到当前目录下并移动 <code>/usr/local/go</code>目录下，之后编辑当前用户目录下的./profile 或者 <code>/etc/profile</code>文件,在文件末尾添加如下环境变量，内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PATH=/usr/local/go/bin</span><br></pre></td></tr></table></figure>

<p>保存并退出之后在终端执行 <code>source</code>命令使配置生效,然后通过 <code>go version</code>验证是否成功。</p>
<h4 id="mac-系统下的安装"><a href="#mac-系统下的安装" class="headerlink" title="mac 系统下的安装"></a>mac 系统下的安装</h4><p>如果已经安装有 Homebrew 包管理软件，可以直接使用一下命令来安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install go</span><br></pre></td></tr></table></figure>

<p>如果没有则和一下 Linux 安装步骤一样。</p>
<h2 id="第一个-Golang-小程序"><a href="#第一个-Golang-小程序" class="headerlink" title="第一个 Golang 小程序"></a>第一个 Golang 小程序</h2><h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>在任意位置创建一个英文名的文件夹，在文件夹里创建一个 go 后缀的文件，列如：test.go,在 test.go 文件中输入一下内容:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主包，可执行文件所在包</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="comment">//导入包</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="comment">//主函数，入口函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>保存在命令行编译执行 <code>go run test.go</code>,便会在终端输出 <code>Hello World</code>字符。</p>
<h3 id="main-包的意义"><a href="#main-包的意义" class="headerlink" title="main 包的意义"></a>main 包的意义</h3><p>在 Go 语言里，命名为 <code>main</code> 的包具有特殊的含义。Go 语言的编译程序会试图把这种名字的包编译为二进制可执行文件。所有用 Go 语言编译的可执行程序都必须有一个名叫 <code>main</code> 的包。一个可执行程序有且仅有一个 <code>main</code> 包。当编译器发现某个包的名字为 <code>main</code> 时，它一定也会发现名为 <code>main()</code>的函数，否则不会创建可执行文件。main()函数是程序的入口，所以，如果没有这个函数，程序就没有办法开始执行。程序编译时，会使用声明 main 包的代码所在的目录的目录名作为二进制可执行文件的文件名。</p>
<h2 id="Go-基本常用的命令"><a href="#Go-基本常用的命令" class="headerlink" title="Go 基本常用的命令"></a>Go 基本常用的命令</h2><h4 id="基本-go-help-命令"><a href="#基本-go-help-命令" class="headerlink" title="基本 go help 命令"></a>基本 go help 命令</h4><ul>
<li>build: 编译包和依赖</li>
<li>clean: 移除对象文件</li>
<li>doc: 显示包或者符号的文档</li>
<li>env: 打印 go 的环境信息</li>
<li>bug: 启动错误报告</li>
<li>fix: 运行 go tool fix</li>
<li>fmt: 运行 gofmt 进行格式化</li>
<li>generate: 从 processing source 生成 go 文件</li>
<li>get: 下载并安装包和依赖</li>
<li>install: 编译并安装包和依赖</li>
<li>list: 列出包</li>
<li>run: 编译并运行 go 程序</li>
<li>test: 运行测试</li>
<li>tool: 运行 go 提供的工具</li>
<li>version: 显示 go 的版本</li>
<li>vet: 运行 go tool vet</li>
</ul>
<p>详细参考文档：<a href="https://golang.org/doc/cmd" title="https://golang.org/doc/cmd">https://golang.org/doc/cmd</a></p>
<h2 id="如何编写-golang-代码"><a href="#如何编写-golang-代码" class="headerlink" title="如何编写 golang 代码"></a>如何编写 golang 代码</h2><h3 id="代码组织"><a href="#代码组织" class="headerlink" title="代码组织"></a>代码组织</h3><p>go 应用使用<strong>包</strong>和<strong>模块</strong>来组织代码，包对应到文件系统就是文件夹，模块就是**.go**的 go 源文件。一个包中会有多个模块，或者多个子包。</p>
<h3 id="go-项目管理工具"><a href="#go-项目管理工具" class="headerlink" title="go 项目管理工具"></a>go 项目管理工具</h3><p>早期的 go 项目使用 gopath 来管理项目，不方便而且容易出错，从 golang 1.11 开始使用 gomod 管理项目，当然还有第三方模块例如 govendor，我们给大家结束 gomod 的使用</p>
<h3 id="创建一个应用"><a href="#创建一个应用" class="headerlink" title="创建一个应用"></a>创建一个应用</h3><ol>
<li><p>首先，创建一个模块路径，例如：<code>xiaobaibk.com/hello</code>，前缀一般为域名</p>
</li>
<li><p>在该目录中执行 <code>go mod init xiaobaibk.com/hello</code>，该命令会创建一个 go.mod 文件，内容如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">module xiaobaibk.com/hello</span><br><span class="line"><span class="keyword">go</span> <span class="number">1.17</span></span><br></pre></td></tr></table></figure></li>
<li><p>在 hello 文件夹中创建一个 test.go 文件内容如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;这是第一个Go的程序&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>构建并安装程序，执行如下命令，该命令会在 GOPATH 或者 GOBIN 环境变量下面创建一个 hello.exe 可执行文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go install xiaobaibk.com/hello/</span><br></pre></td></tr></table></figure></li>
<li><p>执行，输入 hello，运行结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是第一个Go的程序</span><br></pre></td></tr></table></figure></li>
<li><p>创建子包，创建一个 morestrings 子包，就是创建一个子文件夹，在 hello 目录下面</p>
</li>
<li><p>创建一个子模块，morestrings.go，内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package morestrings</span><br><span class="line"></span><br><span class="line">func ReverseRunes(s string) string &#123;</span><br><span class="line">r := []rune(s)</span><br><span class="line">for i, j := 0, len(r)-1; i &lt; len(r)/2; i, j = i+1, j-1 &#123;</span><br><span class="line">r[i], r[j] = r[j], r[i]</span><br><span class="line">&#125;</span><br><span class="line">return string(r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>切换到子包目录下面，执行编译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go build</span><br></pre></td></tr></table></figure></li>
<li><p>在 test.go 中导入子模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fmt.Println(morestrings.ReverseRunes(&quot;!oG ,olleH&quot;))</span><br></pre></td></tr></table></figure></li>
<li><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go install xiaobai.com/hello/</span><br></pre></td></tr></table></figure></li>
<li><p>执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello, Go!</span><br></pre></td></tr></table></figure></li>
<li><p>导入网络模块，查找地址：<code>https://pkg.go.dev/</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;xiaobai.com/hello/morestrings&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">&quot;github.com/google/go-cmp/cmp&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">fmt.Println(morestrings.ReverseRunes(&quot;!oG ,olleH&quot;))</span><br><span class="line">fmt.Println(cmp.Diff(&quot;Hello World&quot;, &quot;Hello Go&quot;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>执行命令，<code>go mod tidy</code>,查看 go.mod 变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module duoke360.com/hello</span><br><span class="line"></span><br><span class="line">go 1.17</span><br><span class="line"></span><br><span class="line">require github.com/google/go-cmp v0.5.6</span><br></pre></td></tr></table></figure></li>
<li><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go install xiaobaibk.com/hello/</span><br></pre></td></tr></table></figure></li>
<li><p>执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello, Go!</span><br><span class="line"> string(</span><br><span class="line">-       &quot;Hello World&quot;,</span><br><span class="line">+       &quot;Hello Go&quot;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Golang-变量"><a href="#Golang-变量" class="headerlink" title="Golang 变量"></a>Golang 变量</h2><p>变量是计算机语言中能<strong>储存</strong>计算结果或能表示值的抽象概念。不同的变量保存的数据类型可能会不一样。</p>
<h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><p>Go 语言中的变量需要声明后才能使用，同一作用域内不支持重复声明。并且 Go 语言的变量声明后必须使用。</p>
<p><strong>声明变量的语法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var identifier type</span><br></pre></td></tr></table></figure>

<p><code>var</code>：声明变量关键字</p>
<p><code>identifier</code>：变量名称</p>
<p><code>type</code>：变量类型</p>
<p><strong>例如</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> age <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> ok <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="批量声明"><a href="#批量声明" class="headerlink" title="批量声明"></a>批量声明</h3><p>使用一个 <code>var</code>关键字，把一些变量写在一个括号 <code>()</code>里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line">func main() &#123;</span><br><span class="line">var (</span><br><span class="line">name string</span><br><span class="line">age  int</span><br><span class="line">ok   bool</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="变量的初始化"><a href="#变量的初始化" class="headerlink" title="变量的初始化"></a>变量的初始化</h3><p>Go 语言在声明变量的时候，会自动对变量对应的内存区域进行初始化操作。每个变量会被初始化成其类型的默认值，例如：整型和浮点型变量的默认值为 <code>0</code>。字符串变量的默认值为空字符串 <code>“”</code>。布尔型变量默认为 <code>false</code>。切片、函数、指针变量的默认为 <code>nil</code>。</p>
<p><strong>变量初始化语法</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 类型 = 表达式</span><br></pre></td></tr></table></figure>

<p><strong>例如</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span> = <span class="string">&quot;yaowanyu&quot;</span></span><br><span class="line"><span class="keyword">var</span> site <span class="keyword">string</span> = <span class="string">&quot;xiaobaibk.com&quot;</span></span><br><span class="line"><span class="keyword">var</span> age <span class="keyword">int</span> = <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>类型推导</strong></p>
<p>我们在声明变量时，可以根据初始化值进行类型推导，从而省略类型。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;xiaoyu&quot;</span></span><br><span class="line"><span class="keyword">var</span> site = <span class="string">&quot;www.xiaobaibk.com&quot;</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>初始化多个变量</strong></p>
<p>可以一次初始化多个变量，中间用逗号分隔。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line">func main() &#123;</span><br><span class="line">var name, site, age = &quot;yaowanyu&quot;, &quot;www.xiaobaibk.com&quot;, 30</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="短变量声明"><a href="#短变量声明" class="headerlink" title="短变量声明"></a>短变量声明</h3><p>在函数内部，可以使用 <code>:=</code>运算符对变量进行声明和初始化。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">name := &quot;xiaoyu&quot;</span><br><span class="line">site := &quot;www.xiaobaibk.com&quot;</span><br><span class="line">age := 20</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：这种方法只适合在函数内部，函数外面不能使用。</p>
</blockquote>
<h3 id="匿名变量"><a href="#匿名变量" class="headerlink" title="匿名变量"></a>匿名变量</h3><p>如果我们接收到多个变量，有一些变量使用不到，可以使用下划线 <code>_</code>表示变量名称，这种变量叫做匿名变量。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func getNameAndAge() (string, int) &#123;</span><br><span class="line">return &quot;xiaoyao&quot;, 12</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">name, _ := getNameAndAge()</span><br><span class="line">fmt.Printf(&quot;name: %v\n&quot;, name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Golang-常量"><a href="#Golang-常量" class="headerlink" title="Golang 常量"></a>Golang 常量</h2><p>常量，就是在程序<strong>编译阶段</strong>就确定下来的值，而程序在<strong>运行时</strong>则无法改变该值。在 Go 程序中，常量可以是数值类型（包括整型、浮点型和复数类型）、布尔类型、字符串类型等。</p>
<h3 id="定义常量的语法"><a href="#定义常量的语法" class="headerlink" title="定义常量的语法"></a>定义常量的语法</h3><p>定义一个常量使用 const 关键字，语法格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const constantName [type]= value</span><br></pre></td></tr></table></figure>

<p><code>const</code>：定义常量关键字</p>
<p><code>constantName</code>：常量名称</p>
<p><code>type</code>：常量类型</p>
<p><code>value</code>：常量的值</p>
<p><strong>实例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">const PI float64 = 3.14</span><br><span class="line">const PI2 = 3.1415 // 可以省略类型</span><br><span class="line"></span><br><span class="line">const (</span><br><span class="line">width  = 100</span><br><span class="line">height = 200</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const i, j = 1, 2 // 多重赋值</span><br><span class="line">const a, b, c = 1, 2, &quot;foo&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>const</code>同时声明多个常量时，如果省略了值则表示和上面一行的值相同</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">const (</span><br><span class="line">a1 = 100</span><br><span class="line">a2</span><br><span class="line">a3</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fmt.Printf(&quot;a1: %v\n&quot;, a1)</span><br><span class="line">fmt.Printf(&quot;a2: %v\n&quot;, a2)</span><br><span class="line">fmt.Printf(&quot;a3: %v\n&quot;, a3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a1: 100</span><br><span class="line">a2: 100</span><br><span class="line">a3: 100</span><br></pre></td></tr></table></figure>

<p><strong>iota</strong></p>
<p>iota 比较特殊，可以被认为是一个可被编译器修改的常量，它默认开始值是 <code>0</code>，每调用一次加 <code>1</code>。遇到 <code>const</code> 关键字时被重置为 <code>0</code>。</p>
<p><strong>实例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">const (</span><br><span class="line">a1 = iota</span><br><span class="line">a2 = iota</span><br><span class="line">a3 = iota</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fmt.Printf(&quot;a1: %v\n&quot;, a1)</span><br><span class="line">fmt.Printf(&quot;a2: %v\n&quot;, a2)</span><br><span class="line">fmt.Printf(&quot;a3: %v\n&quot;, a3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a1: 0</span><br><span class="line">a2: 1</span><br><span class="line">a3: 2</span><br></pre></td></tr></table></figure>

<p><strong>使用 <code>_</code>跳过某些值</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">const (</span><br><span class="line">a1 = iota</span><br><span class="line">_</span><br><span class="line">a2 = iota</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fmt.Printf(&quot;a1: %v\n&quot;, a1)</span><br><span class="line">fmt.Printf(&quot;a2: %v\n&quot;, a2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a1: 0</span><br><span class="line">a2: 2</span><br></pre></td></tr></table></figure>

<p><strong><code>iota</code>声明中间插队</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">const (</span><br><span class="line">a1 = iota</span><br><span class="line">a2 = 100</span><br><span class="line">a3 = iota</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fmt.Printf(&quot;a1: %v\n&quot;, a1)</span><br><span class="line">fmt.Printf(&quot;a2: %v\n&quot;, a2)</span><br><span class="line">fmt.Printf(&quot;a3: %v\n&quot;, a3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a1: 0</span><br><span class="line">a2: 100</span><br><span class="line">a3: 2</span><br></pre></td></tr></table></figure>

<h2 id="Golang-布尔类型"><a href="#Golang-布尔类型" class="headerlink" title="Golang 布尔类型"></a>Golang 布尔类型</h2><p>go 语言中的布尔类型有两个常量值：<code>true</code>和 <code>false</code>。布尔类型经常用在<strong>条件判断</strong>语句，或者<strong>循环语句</strong>。也可以用在<strong>逻辑表达式</strong>中。</p>
<h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">var b1 bool = true</span><br><span class="line">var b2 bool = false</span><br><span class="line">var b3 = true</span><br><span class="line">var b4 = false</span><br><span class="line"></span><br><span class="line">b5 := true</span><br><span class="line">b6 := false</span><br><span class="line"></span><br><span class="line">fmt.Printf(&quot;b1: %v\n&quot;, b1)</span><br><span class="line">fmt.Printf(&quot;b2: %v\n&quot;, b2)</span><br><span class="line">fmt.Printf(&quot;b3: %v\n&quot;, b3)</span><br><span class="line">fmt.Printf(&quot;b4: %v\n&quot;, b4)</span><br><span class="line">fmt.Printf(&quot;b5: %v\n&quot;, b5)</span><br><span class="line">fmt.Printf(&quot;b6: %v\n&quot;, b6)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b1: true</span><br><span class="line">b2: false</span><br><span class="line">b3: true</span><br><span class="line">b4: false</span><br><span class="line">b5: true</span><br><span class="line">b6: false</span><br></pre></td></tr></table></figure>

<h3 id="用在条件判断中"><a href="#用在条件判断中" class="headerlink" title="用在条件判断中"></a>用在条件判断中</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">age := 18</span><br><span class="line">ok := age &gt;= 18</span><br><span class="line">if ok &#123;</span><br><span class="line">fmt.Println(&quot;你已经成年&quot;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">fmt.Println(&quot;你还未成年&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你已经成年</span><br></pre></td></tr></table></figure>

<h3 id="用在循环语句中"><a href="#用在循环语句中" class="headerlink" title="用在循环语句中"></a>用在循环语句中</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">count := 10</span><br><span class="line">for i := 0; i &lt; count; i++ &#123;</span><br><span class="line">fmt.Printf(&quot;i: %v\n&quot;, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="用在逻辑表达式中"><a href="#用在逻辑表达式中" class="headerlink" title="用在逻辑表达式中"></a>用在逻辑表达式中</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">age := 18</span><br><span class="line">gender := &quot;男&quot;</span><br><span class="line"></span><br><span class="line">if age &gt;= 18 &amp;&amp; gender == &quot;男&quot; &#123;</span><br><span class="line">fmt.Println(&quot;你是成年男子&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：不能使用 <code>0</code>和非 <code>0</code>表示真假</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">i := 1</span><br><span class="line">if i &#123;</span><br><span class="line">// 编译错误</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Golang-数字类型"><a href="#Golang-数字类型" class="headerlink" title="Golang 数字类型"></a>Golang 数字类型</h2><p>Go 语言支持整型和浮点型数字，并且原生支持复数，其中位的运算采用补码。</p>
<p>Go 也有基于架构的类型，例如：<code>int</code>、<code>uint</code> 和 <code>uintptr</code>。</p>
<p>这些类型的长度都是根据运行程序所在的操作系统类型所决定的：</p>
<ul>
<li><code>int</code> 和<code>uint</code> 在 32 位操作系统上，它们均使用 32 位（4 个字节），在 64 位操作系统上，它们均使用 64 位（8 个字节）。</li>
<li><code>uintptr</code> 的长度被设定为足够存放一个指针即可。</li>
</ul>
<p>Go 语言中没有 <code>float</code> 类型。（Go 语言中只有 <code>float32</code> 和 <code>float64</code>）没有 double 类型。</p>
<p>与操作系统架构无关的类型都有固定的大小，并在类型的名称中就可以看出来：</p>
<p>整数：</p>
<ul>
<li>int8（-128 -&gt; 127）</li>
<li>int16（-32768 -&gt; 32767）</li>
<li>int32（-2,147,483,648 -&gt; 2,147,483,647）</li>
<li>int64（-9,223,372,036,854,775,808 -&gt; 9,223,372,036,854,775,807）</li>
</ul>
<p>无符号整数：</p>
<ul>
<li>uint8（0 -&gt; 255）</li>
<li>uint16（0 -&gt; 65,535）</li>
<li>uint32（0 -&gt; 4,294,967,295）</li>
<li>uint64（0 -&gt; 18,446,744,073,709,551,615）</li>
</ul>
<p>浮点型（IEEE-754 标准）：</p>
<ul>
<li>float32（+- 1e-45 -&gt; +- 3.4 * 1e38）</li>
<li>float64（+- 5 _ 1e-324 -&gt; 107 _ 1e308）</li>
</ul>
<p>int 型是计算最快的一种类型。</p>
<p>整型的零值为 0，浮点型的零值为 0.0。</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>下面实例演示了，各个数字类型的长度和取值范围</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;math&quot;</span><br><span class="line">&quot;unsafe&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">var i8 int8</span><br><span class="line">var i16 int16</span><br><span class="line">var i32 int32</span><br><span class="line">var i64 int64</span><br><span class="line">var ui8 uint8</span><br><span class="line">var ui16 uint16</span><br><span class="line">var ui32 uint32</span><br><span class="line">var ui64 uint64</span><br><span class="line"></span><br><span class="line">fmt.Printf(&quot;%T %dB %v~%v\n&quot;, i8, unsafe.Sizeof(i8), math.MinInt8, math.MaxInt8)</span><br><span class="line">fmt.Printf(&quot;%T %dB %v~%v\n&quot;, i16, unsafe.Sizeof(i16), math.MinInt16, math.MaxInt16)</span><br><span class="line">fmt.Printf(&quot;%T %dB %v~%v\n&quot;, i32, unsafe.Sizeof(i32), math.MinInt32, math.MaxInt32)</span><br><span class="line">fmt.Printf(&quot;%T %dB %v~%v\n&quot;, i64, unsafe.Sizeof(i64), math.MinInt64, math.MaxInt64)</span><br><span class="line"></span><br><span class="line">fmt.Printf(&quot;%T %dB %v~%v\n&quot;, ui8, unsafe.Sizeof(ui8), 0, math.MaxUint8)</span><br><span class="line">fmt.Printf(&quot;%T %dB %v~%v\n&quot;, ui16, unsafe.Sizeof(ui16), 0, math.MaxUint16)</span><br><span class="line">fmt.Printf(&quot;%T %dB %v~%v\n&quot;, ui32, unsafe.Sizeof(ui32), 0, math.MaxUint32)</span><br><span class="line">fmt.Printf(&quot;%T %dB %v~%v\n&quot;, ui64, unsafe.Sizeof(ui64), 0, uint64(math.MaxUint64))</span><br><span class="line"></span><br><span class="line">var f32 float32</span><br><span class="line">var f64 float64</span><br><span class="line"></span><br><span class="line">fmt.Printf(&quot;%T %dB %v~%v\n&quot;, f32, unsafe.Sizeof(f32), -math.MaxFloat32, math.MaxFloat32)</span><br><span class="line">fmt.Printf(&quot;%T %dB %v~%v\n&quot;, f64, unsafe.Sizeof(f64), -math.MaxFloat64, math.MaxFloat64)</span><br><span class="line"></span><br><span class="line">var ui uint</span><br><span class="line">ui = uint(math.MaxUint64) //再+1会导致overflows错误</span><br><span class="line">fmt.Printf(&quot;%T %dB %v~%v\n&quot;, ui, unsafe.Sizeof(ui), 0, ui)</span><br><span class="line"></span><br><span class="line">var imax, imin int</span><br><span class="line">imax = int(math.MaxInt64) //再+1会导致overflows错误</span><br><span class="line">imin = int(math.MinInt64) //再-1会导致overflows错误</span><br><span class="line"></span><br><span class="line">fmt.Printf(&quot;%T %dB %v~%v\n&quot;, imax, unsafe.Sizeof(imax), imin, imax)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int8 1B -128~127</span><br><span class="line">int16 2B -32768~32767</span><br><span class="line">int32 4B -2147483648~2147483647</span><br><span class="line">int64 8B -9223372036854775808~9223372036854775807</span><br><span class="line">uint8 1B 0~255</span><br><span class="line">uint16 2B 0~65535</span><br><span class="line">uint32 4B 0~4294967295</span><br><span class="line">uint64 8B 0~18446744073709551615</span><br><span class="line">float32 4B -3.4028234663852886e+38~3.4028234663852886e+38</span><br><span class="line">float64 8B -1.7976931348623157e+308~1.7976931348623157e+308</span><br><span class="line">uint 8B 0~18446744073709551615</span><br><span class="line">int 8B -9223372036854775808~9223372036854775807</span><br></pre></td></tr></table></figure>

<h3 id="以二进制、八进制或十六进制浮点数的格式定义数字"><a href="#以二进制、八进制或十六进制浮点数的格式定义数字" class="headerlink" title="以二进制、八进制或十六进制浮点数的格式定义数字"></a>以二进制、八进制或十六进制浮点数的格式定义数字</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">// 十进制</span><br><span class="line">var a int = 10</span><br><span class="line">fmt.Printf(&quot;%d \n&quot;, a) // 10</span><br><span class="line">fmt.Printf(&quot;%b \n&quot;, a) // 1010 占位符%b表示二进制</span><br><span class="line"></span><br><span class="line">// 八进制 以0开头</span><br><span class="line">var b int = 077</span><br><span class="line">fmt.Printf(&quot;%o \n&quot;, b) // 77</span><br><span class="line"></span><br><span class="line">// 十六进制 以0x开头</span><br><span class="line">var c int = 0xff</span><br><span class="line">fmt.Printf(&quot;%x \n&quot;, c) // ff</span><br><span class="line">fmt.Printf(&quot;%X \n&quot;, c) // FF</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">1010</span><br><span class="line">77</span><br><span class="line">ff</span><br><span class="line">FF</span><br></pre></td></tr></table></figure>

<h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><p>Go 语言支持两种浮点型数：<code>float32</code>和 <code>float64</code>。这两种浮点型数据格式遵循 <code>IEEE 754</code>标准：<code>float32</code> 的浮点数的最大范围约为 <code>3.4e38</code>，可以使用常量定义：<code>math.MaxFloat32</code>。<code>float64</code> 的浮点数的最大范围约为 <code>1.8e308</code>，可以使用一个常量定义：<code>math.MaxFloat64</code>。</p>
<p>打印浮点数时，可以使用 <code>fmt</code>包配合动词 <code>%f</code>，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">       &quot;fmt&quot;</span><br><span class="line">       &quot;math&quot;</span><br><span class="line">)</span><br><span class="line">func main() &#123;</span><br><span class="line">       fmt.Printf(&quot;%f\n&quot;, math.Pi)</span><br><span class="line">       fmt.Printf(&quot;%.2f\n&quot;, math.Pi)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><p>complex64 和 complex128</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var c1 complex64</span><br><span class="line">c1 = 1 + 2i</span><br><span class="line">var c2 complex128</span><br><span class="line">c2 = 2 + 3i</span><br><span class="line">fmt.Println(c1)</span><br><span class="line">fmt.Println(c2)</span><br></pre></td></tr></table></figure>

<p>复数有实部和虚部，complex64 的实部和虚部为 32 位，complex128 的实部和虚部为 64 位。</p>
<h2 id="Golang-字符串"><a href="#Golang-字符串" class="headerlink" title="Golang 字符串"></a>Golang 字符串</h2><blockquote>
<p>一个 Go 语言字符串是一个任意字节的常量序列。</p>
</blockquote>
<p><strong>Go 语言字符串与其他语言（Java，C++，Python）字符串的不同点</strong> Go 语言中字符串的字节使用 UTF-8 编码表示 Unicode 文本，因此 Go 语言字符串是变宽字符序列，每一个字符都用一个或者多个字符表示，这跟其他的（C++，Java，Python 3）的字符串类型有着本质上的不同，后者为定宽字符序列。</p>
<p>其他语言的字符串中的单个字符可以被字节索引，而 Go 语言中只有在字符串只包含 7 位的 ASCII 字符（因为它们都是用一个单一的 UTF-8 字节表示）时才可以被字节索引。那么这是不是表示 Go 语言在字符串处理能力上就比其他语言弱呢？答案时否定的，应为 Go 语言支持一个字符一个字符的迭代，而且标准库中存在大量的字符串操作函数，最后我们还可以将 Go 语言的字符串转化为 Unicode 码点切片（类型为 <code>[]rune</code>），切片是支持直接索引的。</p>
<p>对于英文文本，Go 使用 8 位来表示每一个字节，而 Java 或 Python 则需要 16 位或更多。采用 UTF-8 编码，使得 Go 语言无需关系机器码的排列顺序，也无需编码解码来使用其他语言。</p>
<blockquote>
<p>注：每一个 Unicode 字符都有一个唯一的叫做“码点”的标识数字。在 Go 语言中，一个单一的码点在内存中以 <code>rune</code> 的形式表示，<code>rune</code>表示 int32 类型的别名</p>
</blockquote>
<h3 id="go-语言字符串字面量"><a href="#go-语言字符串字面量" class="headerlink" title="go 语言字符串字面量"></a>go 语言字符串字面量</h3><p>在 Go 语言中，字符串字面量使用双引号 <code>&quot;&quot;</code> 或者反引号 <code>&#39;</code> 来创建。双引号用来创建可解析的字符串，支持转义，但不能用来引用多行；反引号用来创建原生的字符串字面量，可能由多行组成，但不支持转义，并且可以包含除了反引号外其他所有字符。双引号创建可解析的字符串应用最广泛，反引号用来创建原生的字符串则多用于书写多行消息，HTML 以及正则表达式。</p>
<p><strong>实例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">var str1 string = &quot;hello world&quot;</span><br><span class="line">var html string =</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;hello golang&lt;/title&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">`</span><br><span class="line"></span><br><span class="line">fmt.Printf(&quot;str1: %v\n&quot;, str1)</span><br><span class="line">fmt.Printf(&quot;html: %v\n&quot;, html)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str1: hello world</span><br><span class="line">html:</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;hello golang&lt;/title&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="go-语言字符串连接"><a href="#go-语言字符串连接" class="headerlink" title="go 语言字符串连接"></a>go 语言字符串连接</h3><p><strong>使用加号</strong></p>
<p>虽然 Go 语言中的字符串是不可变的，但是字符串支持 <code>+</code> 级联操作和 <code>+=</code>追加操作，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">name := &quot;tom&quot;</span><br><span class="line">age := &quot;20&quot;</span><br><span class="line">msg := name + &quot; &quot; + age</span><br><span class="line">fmt.Printf(&quot;msg: %v\n&quot;, msg)</span><br><span class="line">fmt.Println(&quot;-------------&quot;)</span><br><span class="line">msg = &quot;&quot;</span><br><span class="line">msg += name</span><br><span class="line">msg += &quot; &quot;</span><br><span class="line">msg += age</span><br><span class="line">fmt.Printf(&quot;msg: %v\n&quot;, msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>golang 里面的字符串都是不可变的，每次运算都会产生一个新的字符串，所以会产生很多临时的无用的字符串，不仅没有用，还会给 gc 带来额外的负担，所以性能比较差</p>
</blockquote>
<p><strong>使用 <code>fmt.Sprintf()</code>函数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">name := &quot;tom&quot;</span><br><span class="line">age := &quot;20&quot;</span><br><span class="line">msg := fmt.Sprintf(&quot;%s,%s&quot;, name, age)</span><br><span class="line">fmt.Printf(&quot;msg: %v\n&quot;, msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msg: tom,20</span><br></pre></td></tr></table></figure>

<blockquote>
<p>内部使用 <code>[]byte</code> 实现，不像直接运算符这种会产生很多临时的字符串，但是内部的逻辑比较复杂，有很多额外的判断，还用到了 <code>interface</code>，所以性能也不是很好</p>
</blockquote>
<p><strong><code>strings.Join()</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;strings&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">name := &quot;tom&quot;</span><br><span class="line">age := &quot;20&quot;</span><br><span class="line">msg := strings.Join([]string&#123;name, age&#125;, &quot;,&quot;)</span><br><span class="line">fmt.Printf(&quot;msg: %v\n&quot;, msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msg: tom,20</span><br></pre></td></tr></table></figure>

<blockquote>
<p>join 会先根据字符串数组的内容，计算出一个拼接之后的长度，然后申请对应大小的内存，一个一个字符串填入，在已有一个数组的情况下，这种效率会很高，但是本来没有，去构造这个数据的代价也不小</p>
</blockquote>
<p><strong><code>buffer.WriteString()</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;bytes&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">var buffer bytes.Buffer</span><br><span class="line">buffer.WriteString(&quot;tom&quot;)</span><br><span class="line">buffer.WriteString(&quot;,&quot;)</span><br><span class="line">buffer.WriteString(&quot;20&quot;)</span><br><span class="line">fmt.Printf(&quot;buffer.String(): %v\n&quot;, buffer.String())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个比较理想，可以当成可变字符使用，对内存的增长也有优化，如果能预估字符串的长度，还可以用 <code>buffer.Grow()</code> 接口来设置 capacity</p>
</blockquote>
<h3 id="go-语言字符串转义字符"><a href="#go-语言字符串转义字符" class="headerlink" title="go 语言字符串转义字符"></a>go 语言字符串转义字符</h3><p>Go 语言的字符串常见转义符包含回车、换行、单双引号、制表符等，如下表所示。</p>
<table>
<thead>
<tr>
<th>转义符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>\r</code></td>
<td>回车符（返回行首）</td>
</tr>
<tr>
<td><code>\n</code></td>
<td>换行符（直接跳到下一行的同列位置）</td>
</tr>
<tr>
<td><code>\t</code></td>
<td>制表符</td>
</tr>
<tr>
<td><code>\&#39;</code></td>
<td>单引号</td>
</tr>
<tr>
<td><code>\&quot;</code></td>
<td>双引号</td>
</tr>
<tr>
<td><code>\\</code></td>
<td>反斜杠</td>
</tr>
</tbody></table>
<p><strong>实例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">fmt.Print(&quot;hello\tworld\n&quot;)</span><br><span class="line">fmt.Print(&quot;\&quot;c:\\test\\\&quot;&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helloworld</span><br><span class="line">&quot;c:\test\&quot;</span><br></pre></td></tr></table></figure>

<h3 id="go-语言字符串切片操作"><a href="#go-语言字符串切片操作" class="headerlink" title="go 语言字符串切片操作"></a>go 语言字符串切片操作</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">str := &quot;hello world&quot;</span><br><span class="line">n := 3</span><br><span class="line">m := 5</span><br><span class="line">fmt.Println(str[n])   //获取字符串索引位置为n的原始字节</span><br><span class="line">fmt.Println(str[n:m]) //截取得字符串索引位置为 n 到 m-1 的字符串</span><br><span class="line">fmt.Println(str[n:])  //截取得字符串索引位置为 n 到 len(s)-1 的字符串</span><br><span class="line">fmt.Println(str[:m])  //截取得字符串索引位置为 0 到 m-1 的字符串</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">108</span><br><span class="line">lo</span><br><span class="line">lo world</span><br><span class="line">hello</span><br></pre></td></tr></table></figure>

<h3 id="go-语言字符串常用方法"><a href="#go-语言字符串常用方法" class="headerlink" title="go 语言字符串常用方法"></a>go 语言字符串常用方法</h3><table>
<thead>
<tr>
<th>方法</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>len(str)</td>
<td>求长度</td>
</tr>
<tr>
<td>+或 fmt.Sprintf</td>
<td>拼接字符串</td>
</tr>
<tr>
<td>strings.Split</td>
<td>分割</td>
</tr>
<tr>
<td>strings.contains</td>
<td>判断是否包含</td>
</tr>
<tr>
<td>strings.HasPrefix,strings.HasSuffix</td>
<td>前缀/后缀判断</td>
</tr>
<tr>
<td>strings.Index(),strings.LastIndex()</td>
<td>子串出现的位置</td>
</tr>
<tr>
<td>strings.Join(a[]string, sep string)</td>
<td>join 操作</td>
</tr>
</tbody></table>
<p><strong>实例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;strings&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">s := &quot;hello world！&quot;</span><br><span class="line">fmt.Printf(&quot;len(s): %v\n&quot;, len(s))</span><br><span class="line">fmt.Printf(&quot;strings.Split(s, \&quot;\&quot;): %v\n&quot;, strings.Split(s, &quot; &quot;))</span><br><span class="line">fmt.Printf(&quot;strings.Contains(s, \&quot;hello\&quot;): %v\n&quot;, strings.Contains(s, &quot;hello&quot;))</span><br><span class="line">fmt.Printf(&quot;strings.HasPrefix(s, \&quot;hello\&quot;): %v\n&quot;, strings.HasPrefix(s, &quot;hello&quot;))</span><br><span class="line">fmt.Printf(&quot;strings.HasSuffix(s, \&quot;world！\&quot;): %v\n&quot;, strings.HasSuffix(s, &quot;world！&quot;))</span><br><span class="line">fmt.Printf(&quot;strings.Index(s, \&quot;l\&quot;): %v\n&quot;, strings.Index(s, &quot;l&quot;))</span><br><span class="line">fmt.Printf(&quot;strings.LastIndex(s, \&quot;l\&quot;): %v\n&quot;, strings.LastIndex(s, &quot;l&quot;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">len(s): 14</span><br><span class="line">strings.Split(s, &quot;&quot;): [hello world！]</span><br><span class="line">strings.Contains(s, &quot;hello&quot;): true</span><br><span class="line">strings.HasPrefix(s, &quot;hello&quot;): true</span><br><span class="line">strings.HasSuffix(s, &quot;world！&quot;): true</span><br><span class="line">strings.Index(s, &quot;l&quot;): 2</span><br><span class="line">strings.LastIndex(s, &quot;l&quot;): 9</span><br></pre></td></tr></table></figure>

<h3 id="byte-和-rune-类型"><a href="#byte-和-rune-类型" class="headerlink" title="byte 和 rune 类型"></a>byte 和 rune 类型</h3><p>组成每个字符串的元素叫做“字符”，可以通过遍历或者单个获取字符串元素获得字符。字符用单引号（’）包裹起来，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">var a = &#x27;华&#x27;</span><br><span class="line">var b = &#x27;a&#x27;</span><br><span class="line">fmt.Printf(&quot;a: %v,%c\n&quot;, a, a)</span><br><span class="line">fmt.Printf(&quot;b: %v,%c\n&quot;, b, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a: 21326,华</span><br><span class="line">b: 97,a</span><br></pre></td></tr></table></figure>

<p>Go 语言的字符有以下两种：</p>
<ol>
<li><code>uint8</code>类型，或者叫 byte 型，代表了<code>ASCII码</code>的一个字符。</li>
<li><code>rune</code>类型，代表一个<code>UTF-8字符</code>。</li>
</ol>
<p>当需要处理中文、日文或者其他复合字符时，则需要用到 <code>rune</code>类型。<code>rune</code>类型实际是一个 <code>int32</code>。</p>
<p>Go 使用了特殊的 rune 类型来处理 Unicode，让基于 Unicode 的文本处理更为方便，也可以使用 byte 型进行默认字符串处理，性能和扩展性都有照顾。</p>
<h2 id="Golang-格式化输出"><a href="#Golang-格式化输出" class="headerlink" title="Golang 格式化输出"></a>Golang 格式化输出</h2><p>下面实例使用到的结构体</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Website struct &#123;</span><br><span class="line">    Name string</span><br><span class="line">&#125;</span><br><span class="line">// 定义结构体变量</span><br><span class="line">var site = Website&#123;Name:&quot;yaowanyu&quot;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h3><h4 id="普通占位符"><a href="#普通占位符" class="headerlink" title="普通占位符"></a>普通占位符</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">占位符说明举例输出</span><br><span class="line">%v相应值的默认格式。Printf(&quot;%v&quot;, site)，Printf(&quot;%+v&quot;, site)&#123;yaowanyu&#125;，&#123;Name:yaowanyu&#125;</span><br><span class="line">在打印结构体时，“加号”标记（%+v）会添加字段名</span><br><span class="line">%#v相应值的Go语法表示Printf(&quot;#v&quot;, site)main.Website&#123;Name:&quot;yaowanyu&quot;&#125;</span><br><span class="line">%T相应值的类型的Go语法表示Printf(&quot;%T&quot;, site)main.Website</span><br><span class="line">%%字面上的百分号，并非值的占位符Printf(&quot;%%&quot;)%</span><br></pre></td></tr></table></figure>

<p><strong>布尔占位符</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">占位符说明举例输出</span><br><span class="line">%t单词 true 或 false。Printf(&quot;%t&quot;, true)true</span><br></pre></td></tr></table></figure>

<p><strong>整数占位符</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">占位符说明举例输出</span><br><span class="line">%b二进制表示Printf(&quot;%b&quot;, 5)101</span><br><span class="line">%c相应Unicode码点所表示的字符Printf(&quot;%c&quot;, 0x4E2D)中</span><br><span class="line">%d十进制表示Printf(&quot;%d&quot;, 0x12)18</span><br><span class="line">%o八进制表示Printf(&quot;%o&quot;, 10)12</span><br><span class="line">%q单引号围绕的字符字面值，由Go语法安全地转义Printf(&quot;%q&quot;, 0x4E2D)&#x27;中&#x27;</span><br><span class="line">%x十六进制表示，字母形式为小写 a-fPrintf(&quot;%x&quot;, 13)d</span><br><span class="line">%X十六进制表示，字母形式为大写 A-FPrintf(&quot;%x&quot;, 13)D</span><br><span class="line">%UUnicode格式：U+1234，等同于 &quot;U+%04X&quot;Printf(&quot;%U&quot;, 0x4E2D)U+4E2D</span><br></pre></td></tr></table></figure>

<p><strong>浮点数和复数的组成部分（实部和虚部）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">占位符说明举例输出</span><br><span class="line">%b无小数部分的，指数为二的幂的科学计数法，与 strconv.FormatFloat</span><br><span class="line">的 &#x27;b&#x27; 转换格式一致。例如 -123456p-78</span><br><span class="line">%e科学计数法，例如 -1234.456e+78Printf(&quot;%e&quot;, 10.2)1.020000e+01</span><br><span class="line">%E科学计数法，例如 -1234.456E+78Printf(&quot;%e&quot;, 10.2)1.020000E+01</span><br><span class="line">%f有小数点而无指数，例如 123.456Printf(&quot;%f&quot;, 10.2)10.200000</span><br><span class="line">%g根据情况选择 %e 或 %f 以产生更紧凑的（无末尾的0）输出Printf(&quot;%g&quot;, 10.20)10.2</span><br><span class="line">%G根据情况选择 %E 或 %f 以产生更紧凑的（无末尾的0）输出Printf(&quot;%G&quot;, 10.20+2i)(10.2+2i)</span><br></pre></td></tr></table></figure>

<p><strong>字符串与字节切片</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">占位符说明举例输出</span><br><span class="line">%s输出字符串表示（string类型或[]byte)Printf(&quot;%s&quot;, []byte(&quot;你好世界&quot;))你好世界</span><br><span class="line">%q双引号围绕的字符串，由Go语法安全地转义Printf(&quot;%q&quot;, &quot;你好世界&quot;)&quot;你好世界&quot;</span><br><span class="line">%x十六进制，小写字母，每字节两个字符Printf(&quot;%x&quot;, &quot;golang&quot;)676f6c616e67</span><br><span class="line">%X十六进制，大写字母，每字节两个字符Printf(&quot;%X&quot;, &quot;golang&quot;)676F6C616E67</span><br></pre></td></tr></table></figure>

<p><strong>指针</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">占位符说明举例输出</span><br><span class="line">%p十六进制表示，前缀 0xPrintf(&quot;%p&quot;, &amp;site)0x4f57f0</span><br></pre></td></tr></table></figure>

<h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type user struct &#123;</span><br><span class="line">name string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">u := user&#123;&quot;guo&quot;&#125;</span><br><span class="line">//Printf 格式化输出</span><br><span class="line">fmt.Printf(&quot;% + v\n&quot;, u)     //格式化输出结构</span><br><span class="line">fmt.Printf(&quot;%#v\n&quot;, u)       //输出值的 Go 语言表示方法</span><br><span class="line">fmt.Printf(&quot;%T\n&quot;, u)        //输出值的类型的 Go 语言表示</span><br><span class="line">fmt.Printf(&quot;%t\n&quot;, true)     //输出值的 true 或 false</span><br><span class="line">fmt.Printf(&quot;%b\n&quot;, 1024)     //二进制表示</span><br><span class="line">fmt.Printf(&quot;%c\n&quot;, 11111111) //数值对应的 Unicode 编码字符</span><br><span class="line">fmt.Printf(&quot;%d\n&quot;, 10)       //十进制表示</span><br><span class="line">fmt.Printf(&quot;%o\n&quot;, 8)        //八进制表示</span><br><span class="line">fmt.Printf(&quot;%q\n&quot;, 22)       //转化为十六进制并附上单引号</span><br><span class="line">fmt.Printf(&quot;%x\n&quot;, 1223)     //十六进制表示，用a-f表示</span><br><span class="line">fmt.Printf(&quot;%X\n&quot;, 1223)     //十六进制表示，用A-F表示</span><br><span class="line">fmt.Printf(&quot;%U\n&quot;, 1233)     //Unicode表示</span><br><span class="line">fmt.Printf(&quot;%b\n&quot;, 12.34)    //无小数部分，两位指数的科学计数法6946802425218990p-49</span><br><span class="line">fmt.Printf(&quot;%e\n&quot;, 12.345)   //科学计数法，e表示</span><br><span class="line">fmt.Printf(&quot;%E\n&quot;, 12.34455) //科学计数法，E表示</span><br><span class="line">fmt.Printf(&quot;%f\n&quot;, 12.3456)  //有小数部分，无指数部分</span><br><span class="line">fmt.Printf(&quot;%g\n&quot;, 12.3456)  //根据实际情况采用%e或%f输出</span><br><span class="line">fmt.Printf(&quot;%G\n&quot;, 12.3456)  //根据实际情况采用%E或%f输出</span><br><span class="line">fmt.Printf(&quot;%s\n&quot;, &quot;wqdew&quot;)  //直接输出字符串或者[]byte</span><br><span class="line">fmt.Printf(&quot;%q\n&quot;, &quot;dedede&quot;) //双引号括起来的字符串</span><br><span class="line">fmt.Printf(&quot;%x\n&quot;, &quot;abczxc&quot;) //每个字节用两字节十六进制表示，a-f表示</span><br><span class="line">fmt.Printf(&quot;%X\n&quot;, &quot;asdzxc&quot;) //每个字节用两字节十六进制表示，A-F表示</span><br><span class="line">fmt.Printf(&quot;%p\n&quot;, 0x123)    //0x开头的十六进制数表示</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC学习笔记-狂神</title>
    <url>/posts/18901/</url>
    <content><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="1、回顾MVC"><a href="#1、回顾MVC" class="headerlink" title="1、回顾MVC"></a>1、回顾MVC</h2><h3 id="1-1、什么是MVC"><a href="#1-1、什么是MVC" class="headerlink" title="1.1、什么是MVC"></a>1.1、什么是MVC</h3><ul>
<li>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。</li>
<li>是将业务逻辑、数据、显示分离的方法来组织代码。</li>
<li>MVC主要作用是<strong>降低了视图与业务逻辑间的双向偶合</strong>。</li>
<li>MVC不是一种设计模式，<strong>MVC是一种架构模式</strong>。当然不同的MVC存在差异。</li>
</ul>
<span id="more"></span>

<p><strong>Model（模型）：</strong>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p>
<p><strong>View（视图）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p>
<p><strong>Controller（控制器）：</strong>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作。</p>
<p><strong>最典型的MVC就是JSP + servlet + javabean的模式。</strong><img data-src="640.png" alt="640"></p>
<h3 id="1-2、Model1时代"><a href="#1-2、Model1时代" class="headerlink" title="1.2、Model1时代"></a>1.2、Model1时代</h3><ul>
<li>在web早期的开发中，通常采用的都是Model1。</li>
<li>Model1中，主要分为两层，视图层和模型层。</li>
</ul>
<p><img data-src="641.png"></p>
<p>Model1优点：架构简单，比较适合小型项目开发；</p>
<p>Model1缺点：JSP职责不单一，职责过重，不便于维护；</p>
<h3 id="1-3、Model2时代"><a href="#1-3、Model2时代" class="headerlink" title="1.3、Model2时代"></a>1.3、Model2时代</h3><p>Model2把一个项目分成三部分，包括<strong>视图、控制、模型。</strong></p>
<p><img data-src="642.webp"></p>
<ol>
<li>用户发请求</li>
<li>Servlet接收请求数据，并调用对应的业务逻辑方法</li>
<li>业务处理完毕，返回更新后的数据给servlet</li>
<li>servlet转向到JSP，由JSP来渲染页面</li>
<li>响应给前端更新后的页面</li>
</ol>
<p><strong>职责分析：</strong></p>
<p><strong>Controller：控制器</strong></p>
<ol>
<li>取得表单数据</li>
<li>调用业务逻辑</li>
<li>转向指定的页面</li>
</ol>
<p><strong>Model：模型</strong></p>
<ol>
<li>业务逻辑</li>
<li>保存数据的状态</li>
</ol>
<p><strong>View：视图</strong></p>
<ol>
<li>显示页面</li>
</ol>
<p>Model2这样不仅提高的代码的复用率与项目的扩展性，且大大降低了项目的维护成本。Model 1模式的实现比较简单，适用于快速开发小规模项目，Model1中JSP页面身兼View和Controller两种角色，将控制逻辑和表现逻辑混杂在一起，从而导致代码的重用性非常低，增加了应用的扩展性和维护的难度。Model2消除了Model1的缺点。</p>
<h3 id="1-4、回顾Servlet"><a href="#1-4、回顾Servlet" class="headerlink" title="1.4、回顾Servlet"></a>1.4、回顾Servlet</h3><ol>
<li><p>新建一个Maven工程当做父工程！pom依赖！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>建立一个Moudle：springmvc-01-servlet ， 添加Web app的支持！</p>
</li>
<li><p>导入servlet 和 jsp 的 jar 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写一个Servlet类，用来处理用户的请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.servlet;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现Servlet接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       <span class="comment">//取得参数</span></span><br><span class="line">       String method = req.getParameter(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (method.equals(<span class="string">&quot;add&quot;</span>))&#123;</span><br><span class="line">           req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;执行了add方法&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">if</span> (method.equals(<span class="string">&quot;delete&quot;</span>))&#123;</span><br><span class="line">           req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;执行了delete方法&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">//业务逻辑</span></span><br><span class="line">       <span class="comment">//视图跳转</span></span><br><span class="line">       req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/hello.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       doGet(req,resp);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写Hello.jsp，在WEB-INF目录下新建一个jsp的文件夹，新建hello.jsp</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Kuangshen<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在web.xml中注册Servlet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/user<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置Tomcat，并启动测试</p>
<ul>
<li>localhost:8080/user?method=add</li>
<li>localhost:8080/user?method=delete</li>
</ul>
</li>
</ol>
<p><strong>MVC框架要做哪些事情</strong></p>
<ol>
<li>将url映射到java类或java类的方法 .</li>
<li>封装用户提交的数据 .</li>
<li>处理请求–调用相关的业务处理–封装响应数据 .</li>
<li>将响应的数据进行渲染 . jsp / html 等表示层数据 .</li>
</ol>
<p><strong>说明：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常见的服务器端MVC框架有：Struts、Spring MVC、ASP.NET MVC、Zend Framework、JSF；常见前端MVC框架：vue、angularjs、react、backbone；由MVC演化出了另外一些模式如：MVP、MVVM 等等....</span><br></pre></td></tr></table></figure>


<h2 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h2><h3 id="2-1、概述"><a href="#2-1、概述" class="headerlink" title="2.1、概述"></a>2.1、概述</h3><p><img data-src="1594598769272.png" alt="1594598769272"></p>
<p><code>&lt;font color=red&gt;</code>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。<code>&lt;/font&gt;</code></p>
<p>查看官方文档：<a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web">https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a></p>
<p><strong>我们为什么要学习SpringMVC呢?</strong></p>
<p>Spring MVC的特点：</p>
<ol>
<li>轻量级，简单易学</li>
<li>高效 , 基于请求响应的MVC框架</li>
<li>与Spring兼容性好，无缝结合</li>
<li>约定优于配置</li>
<li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li>
<li>简洁灵活</li>
</ol>
<p>Spring的web框架围绕<strong>DispatcherServlet</strong> [ 调度Servlet ] 设计。</p>
<p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁；</p>
<p>正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用SpringIoC和Aop) , 使用约定优于配置 . 能够进行简单的junit测试 . 支持Restful风格 .异常处理 , 本地化 , 国际化 , 数据验证 , 类型转换 , 拦截器 等等……所以我们要学习 .</p>
<p><strong>最重要的一点还是用的人多 , 使用的公司多 .</strong></p>
<h3 id="2-2、中心控制器"><a href="#2-2、中心控制器" class="headerlink" title="2.2、中心控制器"></a>2.2、中心控制器</h3><ul>
<li><p>Spring的web框架围绕DispatcherServlet设计。DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解的controller声明方式。</p>
<p><img data-src="1594600307868.png" alt="1594600307868"></p>
<p>Spring MVC框架像许多其他MVC框架一样, <strong>以请求为驱动</strong> , <strong>围绕一个中心Servlet分派请求及提供其他功能</strong>，**DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)**。</p>
</li>
<li><p>SpringMVC的原理如下图所示：</p>
<p>当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p>
<p><code>&lt;font color=red&gt;</code>原图<code>&lt;/font&gt;</code></p>
<p><img data-src="mvc.png"></p>
</li>
</ul>
<p><code>&lt;font color=red&gt;</code>中文图<code>&lt;/font&gt;</code></p>
<p><img data-src="1594603929224.png" alt="1594603929224"></p>
<h3 id="2-3、SpringMVC执行原理"><a href="#2-3、SpringMVC执行原理" class="headerlink" title="2.3、SpringMVC执行原理"></a>2.3、SpringMVC执行原理</h3><p><img data-src="1594606134497.png" alt="1594606134497"></p>
<p>图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。</p>
<p><strong>简要分析执行流程</strong></p>
<ol>
<li><p>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。</p>
<ul>
<li>我们假设请求的url为 : <a href="http://localhost:8080/SpringMVC/hello">http://localhost:8080/SpringMVC/hello</a></li>
<li><strong>如上url拆分成三部分：</strong></li>
<li><a href="http://localhost:8080/">http://localhost:8080</a> ——&gt; 服务器域名</li>
<li>SpringMVC ——&gt; 部署在服务器上的web站点</li>
<li>hello ——&gt; 表示控制器</li>
<li>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</li>
</ul>
</li>
<li><p>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</p>
</li>
<li><p>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</p>
</li>
<li><p>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</p>
</li>
<li><p>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</p>
</li>
<li><p>Handler让具体的Controller执行。</p>
</li>
<li><p>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</p>
</li>
<li><p>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</p>
</li>
<li><p>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</p>
</li>
<li><p>视图解析器将解析的逻辑视图名传给DispatcherServlet。</p>
</li>
<li><p>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</p>
</li>
<li><p>最终视图呈现给用户。</p>
</li>
</ol>
<h2 id="3、第一个MVC程序"><a href="#3、第一个MVC程序" class="headerlink" title="3、第一个MVC程序"></a>3、第一个MVC程序</h2><h3 id="3-1、配置版"><a href="#3-1、配置版" class="headerlink" title="3.1、配置版"></a>3.1、配置版</h3><ol>
<li><p>新建一个Moudle ， springmvc-02-hello ， 添加web的支持！</p>
</li>
<li><p>确定导入了SpringMVC 的依赖！</p>
</li>
<li><p>配置web.xml  ， 注册DispatcherServlet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--1.注册DispatcherServlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--启动级别-1--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写SpringMVC 的 配置文件！名称：springmvc-servlet.xml  : [servletname]-servlet.xml</p>
<p>说明，这里的名称要求是按照官方来的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>添加 处理映射器（可省略）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>添加 处理器适配器（可省略）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>添加 视图解析器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写我们要操作业务Controller ，要么实现Controller接口，要么增加注解；需要返回一个ModelAndView，装数据，封视图；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：这里我们先导入Controller接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//ModelAndView 模型和视图</span></span><br><span class="line">       ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//封装对象，放在ModelAndView中。Model</span></span><br><span class="line">       mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloSpringMVC!&quot;</span>);</span><br><span class="line">       <span class="comment">//封装要跳转的视图，放在ModelAndView中</span></span><br><span class="line">       mv.setViewName(<span class="string">&quot;hello&quot;</span>); <span class="comment">//: /WEB-INF/jsp/hello.jsp</span></span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>将自己的类交给SpringIOC容器，注册bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Handler--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.controller.HelloController&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>写要跳转的jsp页面，显示ModelandView存放的数据，以及我们的正常页面；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Kuangshen<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置Tomcat 启动测试！</p>
</li>
</ol>
<p><img data-src="1595124994780.png" alt="1595124994780"></p>
<p><strong>可能遇到的问题：访问出现404，排查步骤：</strong></p>
<ol>
<li>查看控制台输出，看一下是不是缺少了什么jar包。</li>
<li>如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！</li>
<li>重启Tomcat 即可解决！</li>
</ol>
<p>小结：我们来看个注解版实现，这才是SpringMVC的精髓。</p>
<h3 id="3-2、注解版"><a href="#3-2、注解版" class="headerlink" title="3.2、注解版"></a>3.2、注解版</h3><ol>
<li><p><strong>新建一个Moudle，springmvc-03-hello-annotation 。添加web支持！</strong></p>
</li>
<li><p>由于Maven可能存在资源过滤的问题，我们将配置完善</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在pom.xml文件引入相关的依赖：主要有Spring框架核心库、Spring MVC、servlet , JSTL等。我们在父依赖中已经引入了！</p>
</li>
<li><p><strong>配置web.xml</strong></p>
<p>注意点：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--1.注册servlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>/ 和 /* 的区别：</strong></p>
<ul>
<li>&lt; url-pattern &gt; / &lt;/ url-pattern &gt; 不会匹配到.jsp， 只针对我们编写的请求；即：.jsp 不会进入spring的 DispatcherServlet类 。</li>
<li>&lt; url-pattern &gt; /* &lt;/ url-pattern &gt; 会匹配 *.jsp，会出现返回 jsp视图 时再次进入spring的DispatcherServlet 类，导致找不到对应的controller所以报404错。</li>
</ul>
</li>
<li><p><strong>添加Spring MVC配置文件</strong></p>
<p>在resource目录下添加springmvc-servlet.xml配置文件，配置的形式与Spring容器配置基本类似，为了支持基于注解的IOC，设置了自动扫描包的功能，具体配置信息如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;nuc.ss.controller&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 让Spring MVC不处理静态资源 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   支持mvc注解驱动</span></span><br><span class="line"><span class="comment">       在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">       要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">       必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">       和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">       这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">       而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>在视图解析器中我们把所有的视图都存放在/WEB-INF/目录下，这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问。</p>
<ul>
<li><p>让IOC的注解生效</p>
</li>
<li><p>静态资源过滤 ：HTML . JS . CSS . 图片 ， 视频 …..</p>
<ul>
<li>MVC的注解驱动</li>
<li>配置视图解析器</li>
</ul>
</li>
</ul>
<ol start="7">
<li><p><strong>创建Controller</strong></p>
<p>编写一个Java控制类：nuc.ss.controller.HelloController , 注意编码规范</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/HelloController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//真实访问地址 : 项目名/HelloController/hello</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">       <span class="comment">//向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span></span><br><span class="line">       model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello,SpringMVC&quot;</span>);</span><br><span class="line">       <span class="comment">//web-inf/jsp/hello.jsp</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@Controller是为了让Spring IOC容器初始化时自动扫描到；</li>
<li>@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是/HelloController/hello；</li>
<li>方法中声明Model类型的参数是为了把Action中的数据带到视图中；</li>
<li>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF/jsp/<strong>hello</strong>.jsp</li>
</ul>
</li>
<li><p><strong>创建视图层</strong></p>
<p>在WEB-INF/ jsp目录中创建hello.jsp ， 视图可以直接取出并展示从Controller带回的信息；</p>
<p>可以通过EL表示取出Model中存放的值，或者对象；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>配置Tomcat运行</strong></p>
<p>配置Tomcat ，  开启服务器 ， 访问 对应的请求路径！</p>
<p><img data-src="1594622304382.png" alt="1594622304382"></p>
<p><strong>OK，运行成功！</strong></p>
</li>
</ol>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>实现步骤其实非常的简单：</p>
<ol>
<li>新建一个web项目</li>
<li>导入相关jar包</li>
<li>编写web.xml , 注册DispatcherServlet</li>
<li>编写springmvc配置文件</li>
<li>接下来就是去创建对应的控制类 , controller</li>
<li>最后完善前端视图和controller之间的对应</li>
<li>测试运行调试.</li>
</ol>
<p><code>&lt;font color=red&gt;</code>使用springMVC必须配置的三大件<code>&lt;/font&gt;</code></p>
<p><strong><code>&lt;font color=red&gt;</code>处理器映射器、处理器适配器、视图解析器<code>&lt;/font&gt;</code></strong></p>
<p><code>&lt;font color=red&gt;</code>通常，我们只需要<strong>手动配置视图解析器</strong>，而<strong>处理器映射器</strong>和<strong>处理器适配器</strong>只需要开启<strong>注解驱动</strong>即可，而省去了大段的xml配置<code>&lt;/font&gt;</code></p>
<h2 id="4、RestFul和控制器"><a href="#4、RestFul和控制器" class="headerlink" title="4、RestFul和控制器"></a>4、RestFul和控制器</h2><h3 id="4-1、控制器Controller"><a href="#4-1、控制器Controller" class="headerlink" title="4.1、控制器Controller"></a>4.1、控制器Controller</h3><ul>
<li>控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。</li>
<li>控制器负责解析用户的请求并将其转换为一个模型。</li>
<li>在Spring MVC中一个控制器类可以包含多个方法</li>
<li>在Spring MVC中，对于Controller的配置方式有很多种</li>
</ul>
<h3 id="4-2、实现Controller接口"><a href="#4-2、实现Controller接口" class="headerlink" title="4.2、实现Controller接口"></a>4.2、实现Controller接口</h3><p>Controller是一个接口，在org.springframework.web.servlet.mvc包下，接口中只有一个方法；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现该接口的类获得控制器功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">   <span class="comment">//处理请求且返回一个模型与视图对象</span></span><br><span class="line">   <span class="function">ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest var1, HttpServletResponse var2)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<ol>
<li><p>新建一个Moudle，springmvc-04-controller！</p>
</li>
<li><ul>
<li>mvc的配置文件只留下 视图解析器！</li>
</ul>
</li>
<li><p>编写一个Controller类，ControllerTest1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义控制器</span></span><br><span class="line"><span class="comment">//注意点：不要导错包，实现Controller接口，重写方法；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest1</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">       ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">       mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;Test1Controller&quot;</span>);</span><br><span class="line">       mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写完毕后，去Spring配置文件中注册请求的bean；name对应请求路径，class对应处理请求的类</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;/t1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.controller.ControllerTest1&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写前端test.jsp，注意在WEB-INF/jsp目录下编写，对应我们的视图解析器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Kuangshen<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置Tomcat运行测试，我这里没有项目发布名配置的就是一个 / ，所以请求不用加项目名，OK！</p>
<p><img data-src="1595128496794.png" alt="1595128496794"></p>
</li>
</ol>
<p><strong>说明：</strong></p>
<ul>
<li>实现接口Controller定义控制器是较老的办法</li>
<li>缺点是：一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻烦；</li>
</ul>
<h3 id="使用注解-Controller"><a href="#使用注解-Controller" class="headerlink" title="使用注解@Controller"></a>使用注解@Controller</h3><ul>
<li><p>@Controller注解类型用于声明Spring类的实例是一个控制器（在讲IOC时还提到了另外3个注解）；</p>
</li>
<li><p>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;nuc.ss.controller&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>增加一个ControllerTest2类，使用注解实现；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Controller注解的类会自动添加到Spring上下文中</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest2</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//映射访问路径</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/t2&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">       <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">       model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;ControllerTest2&quot;</span>);</span><br><span class="line">       <span class="comment">//返回视图位置</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>运行tomcat测试</p>
<p><img data-src="1595128649687.png" alt="1595128649687"></p>
</li>
</ul>
<p><strong>可以发现，我们的两个请求都可以指向一个视图(test)，但是页面结果的结果是不一样的，从这里可以看出视图是被复用的，而控制器与视图之间是弱偶合关系。</strong></p>
<p><strong>注解方式是平时使用的最多的方式！</strong></p>
<h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h3><p><strong>@RequestMapping</strong></p>
<ul>
<li><p>@RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法。可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p>
</li>
<li><p>为了测试结论更加准确，我们可以加上一个项目名测试 myweb</p>
</li>
<li><p>只注解在方法上面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/h1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问路径：<a href="http://localhost:8080/">http://localhost:8080</a> / 项目名 / h1</p>
</li>
<li><p>同时注解类与方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/h1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问路径：<a href="http://localhost:8080/">http://localhost:8080</a> / 项目名/ admin /h1  , 需要先指定类的路径再指定方法的路径；</p>
</li>
</ul>
<h3 id="RestFul-风格"><a href="#RestFul-风格" class="headerlink" title="RestFul 风格"></a>RestFul 风格</h3><p><strong>概念</strong></p>
<p>Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p>
<p><strong>功能</strong></p>
<p>资源：互联网所有的事物都可以被抽象为资源</p>
<p>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</p>
<p>分别对应 添加、 删除、修改、查询。</p>
<p><strong>传统方式操作资源</strong>  ：通过不同的参数来实现不同的效果！方法单一，post 和 get</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/item/queryItem.action?id=1 查询,GET</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/item/saveItem.action 新增,POST</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/item/updateItem.action 更新,POST</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/item/deleteItem.action?id=1 删除,GET或POST</span><br></pre></td></tr></table></figure>


<p><strong>使用RESTful操作资源</strong> ：可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/item/1 查询,GET</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/item 新增,POST</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/item 更新,PUT</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/item/1 删除,DELETE</span><br></pre></td></tr></table></figure>


<p><strong>学习测试</strong></p>
<ol>
<li><p>在新建一个类 RestFulController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestFulController</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在Spring MVC中可以使用  @PathVariable 注解，让方法参数的值对应绑定到一个URI模板变量上。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestFulController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//映射访问路径</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/add/&#123;p1&#125;/&#123;p2&#125;&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> p1, <span class="meta">@PathVariable</span> <span class="keyword">int</span> p2, Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> result = p1+p2;</span><br><span class="line">       <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">       model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;结果：&quot;</span>+result);</span><br><span class="line">       <span class="comment">//返回视图位置</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>我们来测试请求查看下</p>
<p><img data-src="1595129216809.png" alt="1595129216809"></p>
</li>
<li><p>思考：使用路径变量的好处？</p>
<ul>
<li><p>使路径变得更加简洁；</p>
</li>
<li><p>获得参数更加方便，框架会自动进行类型转换。</p>
</li>
<li><p>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法，如这里访问是的路径是/add/1/a，则路径与方法不匹配，而不会是参数转换失败。</p>
<p><img data-src="1595129271494.png" alt="1595129271494"></p>
</li>
</ul>
</li>
<li><p>我们来修改下对应的参数类型，再次测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//映射访问路径</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/add/&#123;p1&#125;/&#123;p2&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> p1, <span class="meta">@PathVariable</span> String p2, Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   String result = p1+p2;</span><br><span class="line">   <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">   model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;结果：&quot;</span>+result);</span><br><span class="line">   <span class="comment">//返回视图位置</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="1595129577077.png" alt="1595129577077"></p>
</li>
</ol>
<p><strong>使用method属性指定请求类型</strong></p>
<p>用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等</p>
<p>我们来测试一下：</p>
<ul>
<li><p>增加一个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//映射访问路径,必须是POST请求</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.POST&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">   model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>我们使用浏览器地址栏进行访问默认是Get请求，会报错405：</p>
<p><img data-src="1595129829057.png" alt="1595129829057"></p>
</li>
<li><p>如果将POST修改为GET则正常了；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//映射访问路径,必须是Get请求</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.GET&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">   model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="1595129889298.png" alt="1595129889298"></p>
</li>
</ul>
<p><strong>小结：</strong></p>
<p>Spring MVC 的 @RequestMapping 注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以及 PATCH。</p>
<p><strong>所有的地址栏请求默认都会是 HTTP GET 类型的。</strong></p>
<p>方法级别的注解变体有如下几个：组合注解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@GetMapping</span><br><span class="line">@PostMapping</span><br><span class="line">@PutMapping</span><br><span class="line">@DeleteMapping</span><br><span class="line">@PatchMapping</span><br></pre></td></tr></table></figure>

<p>@GetMapping 是一个组合注解，平时使用的会比较多！</p>
<p>它所扮演的是 @RequestMapping(method =RequestMethod.GET) 的一个快捷方式。</p>
<h3 id="扩展：小黄鸭调试法"><a href="#扩展：小黄鸭调试法" class="headerlink" title="扩展：小黄鸭调试法"></a>扩展：小黄鸭调试法</h3><p>场景一：<em>我们都有过向别人（甚至可能向完全不会编程的人）提问及解释编程问题的经历，但是很多时候就在我们解释的过程中自己却想到了问题的解决方案，然后对方却一脸茫然。</em></p>
<p>场景二：你的同行跑来问你一个问题，但是当他自己把问题说完，或说到一半的时候就想出答案走了，留下一脸茫然的你。</p>
<p>其实上面两种场景现象就是所谓的小黄鸭调试法（Rubber Duck Debuging），又称橡皮鸭调试法，它是我们软件工程中最常使用调试方法之一。</p>
<p><img data-src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JOmNdhqNbrRK9XaseXIDsu4MibRVpZicicSVRRjb0lAblXjlHHppY3gSBn8iaTsa2oLEMO9S3bPCDHoA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p>
<p>此概念据说来自《程序员修炼之道》书中的一个故事，传说程序大师随身携带一只小黄鸭，在调试代码的时候会在桌上放上这只小黄鸭，然后详细地向鸭子解释每行代码，然后很快就将问题定位修复了。</p>
<h2 id="5、结果跳转方式"><a href="#5、结果跳转方式" class="headerlink" title="5、结果跳转方式"></a>5、结果跳转方式</h2><h3 id="5-1、ModelAndView"><a href="#5-1、ModelAndView" class="headerlink" title="5.1、ModelAndView"></a>5.1、ModelAndView</h3><p>设置ModelAndView对象 , 根据view的名称 , 和视图解析器跳到指定的页面 .</p>
<p>页面 : {视图解析器前缀} + viewName +{视图解析器后缀}</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对应的controller类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest1</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">       ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">       mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;ControllerTest1&quot;</span>);</span><br><span class="line">       mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-2、ServletAPI"><a href="#5-2、ServletAPI" class="headerlink" title="5.2、ServletAPI"></a>5.2、ServletAPI</h3><p>ServletAPI</p>
<p>通过设置ServletAPI , 不需要视图解析器 .</p>
<ol>
<li><p>通过HttpServletResponse进行输出</p>
</li>
<li><p>通过HttpServletResponse实现重定向</p>
</li>
<li><p>通过HttpServletResponse实现转发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultGo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       rsp.getWriter().println(<span class="string">&quot;Hello,Spring BY servlet API&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t2&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       rsp.sendRedirect(<span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t3&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       req.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;/result/t3&quot;</span>);</span><br><span class="line">       req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/test.jsp&quot;</span>).forward(req,rsp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="5-3、SpringMVC"><a href="#5-3、SpringMVC" class="headerlink" title="5.3、SpringMVC"></a>5.3、SpringMVC</h3><p><strong>通过SpringMVC来实现转发和重定向 - 无需视图解析器；</strong></p>
<p>测试前，需要将视图解析器注释掉</p>
<ul>
<li>默认为forward转发（<code>&lt;font color=red&gt;</code>也可以加上<code>&lt;/font&gt;</code>）</li>
<li>redirect转发需特别加</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSpringMVC</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm/t1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm/t2&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//转发二</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;forward:/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm/t3&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//重定向</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>通过SpringMVC来实现转发和重定向 - 有视图解析器；</strong></p>
<p>重定向 , 不需要视图解析器 , 本质就是重新请求一个新地方嘛 , 所以注意路径问题.</p>
<p>可以重定向到另外一个请求实现 .</p>
<ul>
<li>默认为forward转发（<code>&lt;font color=red&gt;</code>不可以加上<code>&lt;/font&gt;</code>）</li>
<li>redirect转发需特别加</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSpringMVC2</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm2/t1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm2/t2&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//重定向</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">       <span class="comment">//return &quot;redirect:hello.do&quot;; //hello.do为另一个请求/</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6、数据处理"><a href="#6、数据处理" class="headerlink" title="6、数据处理"></a>6、数据处理</h2><h3 id="6-1、处理提交数据"><a href="#6-1、处理提交数据" class="headerlink" title="6.1、处理提交数据"></a>6.1、处理提交数据</h3><p><strong>1、提交的域名称和处理方法的参数名一致</strong></p>
<p>提交数据 : <a href="http://localhost:8080/hello?name=kuangshen">http://localhost:8080/hello?name=kuangshen</a></p>
<p>处理方法 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台输出 : kuangshen</p>
<p><strong>2、提交的域名称和处理方法的参数名不一致</strong></p>
<p>提交数据 : <a href="http://localhost:8080/hello?username=kuangshen">http://localhost:8080/hello?username=kuangshen</a></p>
<p>处理方法 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@RequestParam(&quot;username&quot;) : username提交的域的名称 .</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台输出 : kuangshen</p>
<p><strong>3、提交的是一个对象</strong></p>
<p>要求提交的表单域和对象的属性名一致  , 参数使用对象即可</p>
<ol>
<li><p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">   <span class="comment">//构造</span></span><br><span class="line">   <span class="comment">//get/set</span></span><br><span class="line">   <span class="comment">//tostring()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>提交数据 : <a href="http://localhost:8080/mvc04/user?name=kuangshen&amp;id=1&amp;age=15">http://localhost:8080/mvc04/user?name=kuangshen&amp;id=1&amp;age=15</a></p>
</li>
<li><p>处理方法 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">   System.out.println(user);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>后台输出 : User { id=1, name=’kuangshen’, age=15 }</p>
<p>说明：如果使用对象的话，前端传递的<code>&lt;font color=red&gt;</code>参数名和对象名必须一致<code>&lt;/font&gt;</code>，否则就是null。</p>
<h3 id="6-2、数据显示到前端"><a href="#6-2、数据显示到前端" class="headerlink" title="6.2、数据显示到前端"></a>6.2、数据显示到前端</h3><p><strong>第一种 : 通过ModelAndView</strong></p>
<p>我们前面一直都是如此 . 就不过多解释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest1</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">       ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">       mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;ControllerTest1&quot;</span>);</span><br><span class="line">       mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第二种 : 通过ModelMap</strong></p>
<p>ModelMap</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, ModelMap modelMap)</span></span>&#123;</span><br><span class="line">   <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">   <span class="comment">//相当于req.setAttribute(&quot;name&quot;,name);</span></span><br><span class="line">   modelMap.addAttribute(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>第三种 : 通过Model</strong></p>
<p>Model</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/ct2/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, Model model)</span></span>&#123;</span><br><span class="line">   <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">   <span class="comment">//相当于req.setAttribute(&quot;name&quot;,name);</span></span><br><span class="line">   model.addAttribute(<span class="string">&quot;msg&quot;</span>,name);</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-3、对比"><a href="#6-3、对比" class="headerlink" title="6.3、对比"></a>6.3、对比</h3><p>就对于新手而言简单来说使用区别就是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Model 只有寥寥几个方法只适合用于储存数据，简化了新手对于Model对象的操作和理解；</span><br><span class="line">ModelMap 继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性；</span><br><span class="line">ModelAndView 可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。</span><br></pre></td></tr></table></figure>

<p>当然更多的以后开发考虑的更多的是性能和优化，就不能单单仅限于此的了解。</p>
<p><strong>请使用80%的时间打好扎实的基础，剩下18%的时间研究框架，2%的时间去学点英文，框架的官方文档永远是最好的教程。</strong></p>
<h2 id="7、乱码问题"><a href="#7、乱码问题" class="headerlink" title="7、乱码问题"></a>7、乱码问题</h2><p>测试步骤：</p>
<ol>
<li><p>我们可以在首页编写一个提交的表单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/e/t&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>后台编写对应的处理类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Encoding</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/e/t&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(Model model,String name)</span></span>&#123;</span><br><span class="line">       model.addAttribute(<span class="string">&quot;msg&quot;</span>,name); <span class="comment">//获取表单提交的值</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>; <span class="comment">//跳转到test页面显示输入的值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>输入中文测试，发现乱码</p>
<p><img data-src="1595131750549.png" alt="1595131750549"></p>
</li>
</ol>
<p>不得不说，乱码问题是在我们开发中十分常见的问题，也是让我们程序猿比较头大的问题！</p>
<p>以前乱码问题通过过滤器解决 , 而SpringMVC给我们提供了一个过滤器 , 可以在web.xml中配置 .</p>
<p>修改了xml文件需要重启服务器！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">filter&gt;</span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;font color=red&gt;</code>注意：这里写/*，写/的话过滤不了jsp页面，不能解决乱码<code>&lt;/font&gt;</code></p>
<p>但是我们发现 , 有些极端情况下.这个过滤器对get的支持不好 .</p>
<p>处理方法 :</p>
<ol>
<li><p>修改tomcat配置文件 ：设置编码！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">URIEncoding</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>自定义过滤器（万能解决）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 解决get和post请求 全部乱码的过滤器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">       <span class="comment">//处理response的字符编码</span></span><br><span class="line">       HttpServletResponse myResponse=(HttpServletResponse) response;</span><br><span class="line">       myResponse.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 转型为与协议相关对象</span></span><br><span class="line">       HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">       <span class="comment">// 对request包装增强</span></span><br><span class="line">       HttpServletRequest myrequest = <span class="keyword">new</span> MyRequest(httpServletRequest);</span><br><span class="line">       chain.doFilter(myrequest, response);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义request对象，HttpServletRequest的包装类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRequest</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line">   <span class="comment">//是否编码的标记</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> hasEncode;</span><br><span class="line">   <span class="comment">//定义一个可以传入HttpServletRequest对象的构造函数，以便对其进行装饰</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">MyRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(request);<span class="comment">// super必须写</span></span><br><span class="line">       <span class="keyword">this</span>.request = request;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 对需要增强方法 进行覆盖</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Map <span class="title">getParameterMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 先获得请求方式</span></span><br><span class="line">       String method = request.getMethod();</span><br><span class="line">       <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">&quot;post&quot;</span>)) &#123;</span><br><span class="line">           <span class="comment">// post请求</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">// 处理post乱码</span></span><br><span class="line">               request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">               <span class="keyword">return</span> request.getParameterMap();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">&quot;get&quot;</span>)) &#123;</span><br><span class="line">           <span class="comment">// get请求</span></span><br><span class="line">           Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">           <span class="keyword">if</span> (!hasEncode) &#123; <span class="comment">// 确保get手动编码逻辑只运行一次</span></span><br><span class="line">               <span class="keyword">for</span> (String parameterName : parameterMap.keySet()) &#123;</span><br><span class="line">                   String[] values = parameterMap.get(parameterName);</span><br><span class="line">                   <span class="keyword">if</span> (values != <span class="keyword">null</span>) &#123;</span><br><span class="line">                       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">                           <span class="keyword">try</span> &#123;</span><br><span class="line">                               <span class="comment">// 处理get乱码</span></span><br><span class="line">                               values[i] = <span class="keyword">new</span> String(values[i]</span><br><span class="line">                                      .getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                          &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                               e.printStackTrace();</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">               hasEncode = <span class="keyword">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">           <span class="keyword">return</span> parameterMap;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">super</span>.getParameterMap();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//取一个值</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">       Map&lt;String, String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">       String[] values = parameterMap.get(name);</span><br><span class="line">       <span class="keyword">if</span> (values == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">return</span> values[<span class="number">0</span>]; <span class="comment">// 取回参数的第一个值</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//取所有值</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">       Map&lt;String, String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">       String[] values = parameterMap.get(name);</span><br><span class="line">       <span class="keyword">return</span> values;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一般情况下，SpringMVC默认的乱码处理就已经能够很好的解决了！</p>
<p><strong>然后在web.xml中配置这个过滤器即可！</strong></p>
<p>乱码问题，需要平时多注意，在尽可能能设置编码的地方，都设置为统一编码 UTF-8！</p>
</li>
</ol>
<h2 id="8、Json交互处理"><a href="#8、Json交互处理" class="headerlink" title="8、Json交互处理"></a>8、Json交互处理</h2><h3 id="8-1、什么是JSON？"><a href="#8-1、什么是JSON？" class="headerlink" title="8.1、什么是JSON？"></a>8.1、什么是JSON？</h3><ul>
<li>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。</li>
<li>采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据。</li>
<li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</li>
<li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li>
</ul>
<p>在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：</p>
<ul>
<li>对象表示为键值对，数据由逗号分隔</li>
<li>花括号保存对象</li>
<li>方括号保存数组</li>
</ul>
<p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;QinJiang&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;age&quot;</span>: <span class="string">&quot;3&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>很多人搞不清楚 JSON 和 JavaScript 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：</p>
<p>JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="string">&#x27;Hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;World&#x27;</span>&#125;; <span class="comment">//这是一个对象，注意键名也是可以使用引号包裹的</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>; <span class="comment">//这是一个 JSON 字符串，本质是一个字符串</span></span><br></pre></td></tr></table></figure>

<h3 id="8-2、JSON-和-JavaScript-对象互转"><a href="#8-2、JSON-和-JavaScript-对象互转" class="headerlink" title="8.2、JSON 和 JavaScript 对象互转"></a>8.2、<strong>JSON 和 JavaScript 对象互转</strong></h3><p>要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(<span class="string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>);</span><br><span class="line"><span class="comment">//结果是 &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<p>要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> json = <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">a</span>: <span class="string">&#x27;Hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;World&#x27;</span>&#125;);</span><br><span class="line"><span class="comment">//结果是 &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>代码测试</strong></p>
<ol>
<li><p>新建一个module ，springmvc-05-json ， 添加web的支持</p>
</li>
<li><p>在web目录下新建一个 json-1.html ， 编写测试内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>JSON_秦疆<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">   <span class="comment">//编写一个js的对象</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> user = &#123;</span></span><br><span class="line"><span class="javascript">       <span class="attr">name</span>:<span class="string">&quot;秦疆&quot;</span>,</span></span><br><span class="line"><span class="javascript">       <span class="attr">age</span>:<span class="number">3</span>,</span></span><br><span class="line"><span class="javascript">       <span class="attr">sex</span>:<span class="string">&quot;男&quot;</span></span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript">   <span class="comment">//将js对象转换成json字符串</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> str = <span class="built_in">JSON</span>.stringify(user);</span></span><br><span class="line"><span class="javascript">   <span class="built_in">console</span>.log(str);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">   <span class="comment">//将json字符串转换为js对象</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> user2 = <span class="built_in">JSON</span>.parse(str);</span></span><br><span class="line"><span class="javascript">   <span class="built_in">console</span>.log(user2.age,user2.name,user2.sex);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在IDEA中使用浏览器打开，查看控制台输出！</p>
</li>
</ol>
<h3 id="8-3、Controller返回JSON数据"><a href="#8-3、Controller返回JSON数据" class="headerlink" title="8.3、Controller返回JSON数据"></a>8.3、Controller返回JSON数据</h3><ul>
<li><p>Jackson应该是目前比较好的json解析工具了</p>
</li>
<li><p>当然工具不止这一个，比如还有阿里巴巴的 fastjson 等等。</p>
</li>
<li><p>我们这里使用Jackson，使用它需要导入它的jar包；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置SpringMVC需要的配置</p>
<ul>
<li><p>（web.xml）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--1.注册servlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>springmvc-servlet.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>我们随便编写一个User的实体类，然后我们去编写我们的测试Controller；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>这里我们需要两个新东西，一个是@ResponseBody，一个是ObjectMapper对象，我们看下具体的用法</p>
<p>编写一个Controller；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/j1&quot;)</span></span><br><span class="line"> <span class="meta">@ResponseBody</span><span class="comment">//他就不会走视图解析器，会直接返回一个 字符串</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">     <span class="comment">//jackson,ObjectMapper</span></span><br><span class="line">     ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">     <span class="comment">//创建一个对象</span></span><br><span class="line">     User user = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;秦疆一号&quot;</span>, <span class="number">12</span>);</span><br><span class="line">     <span class="comment">//System.out.println(user);</span></span><br><span class="line"></span><br><span class="line">     String str = mapper.writeValueAsString(user);</span><br><span class="line">     <span class="keyword">return</span> str;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>此时输入中文会产生乱码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//produces:指定响应体返回类型和编码</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/json1&quot;,produces = &quot;application/json;charset=utf-8&quot;)</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置Tomcat ， 启动测试一下！<a href="http://localhost:8080/json1">http://localhost:8080/json1</a></p>
<p><img data-src="1595133634951.png" alt="1595133634951"></p>
</li>
</ul>
</li>
</ul>
<p><code>&lt;font color=red&gt;</code>【注意：使用json记得处理乱码问题】<code>&lt;/font&gt;</code></p>
<h3 id="8-4代码优化"><a href="#8-4代码优化" class="headerlink" title="8.4代码优化"></a>8.4代码优化</h3><p><strong>乱码统一解决</strong></p>
<p>上一种方法比较麻烦，如果项目中有许多请求则每一个都要添加，可以通过Spring配置统一指定，这样就不用每次都去处理了！</p>
<p>我们可以在springmvc的配置文件上添加一段消息StringHttpMessageConverter转换配置！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>返回json字符串统一解决</strong></p>
<ul>
<li><p>@ResponseBody解决（每个方法都得加，不建议使用）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">   <span class="comment">//produces:指定响应体返回类型和编码</span></span><br><span class="line">   <span class="meta">@RequestMapping(value = &quot;/json1&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">       <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">       ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">       <span class="comment">//创建一个对象</span></span><br><span class="line">       User user = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;秦疆一号&quot;</span>, <span class="number">12</span>);</span><br><span class="line">       <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">       String str = mapper.writeValueAsString(user);</span><br><span class="line">       <span class="comment">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span></span><br><span class="line">       <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>@RestController</strong>（直接加到类上即可）</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(value = &quot;/j1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">       <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">       ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">       <span class="comment">//创建一个对象</span></span><br><span class="line">       User user = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;秦疆一号&quot;</span>, <span class="number">12</span>);</span><br><span class="line">       <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">       String str = mapper.writeValueAsString(user);</span><br><span class="line">       <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-5、测试集合输出"><a href="#8-5、测试集合输出" class="headerlink" title="8.5、测试集合输出"></a>8.5、测试集合输出</h3><p>增加一个新的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/j2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="comment">//创建一个对象</span></span><br><span class="line">   	User user1 = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;秦疆1号&quot;</span>, <span class="number">12</span>);</span><br><span class="line">    User user2 = <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">&quot;秦疆2号&quot;</span>, <span class="number">12</span>);</span><br><span class="line">    User user3 = <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">&quot;秦疆3号&quot;</span>, <span class="number">12</span>);</span><br><span class="line">    User user4 = <span class="keyword">new</span> User(<span class="number">4</span>, <span class="string">&quot;秦疆4号&quot;</span>, <span class="number">12</span>);</span><br><span class="line">    User user5 = <span class="keyword">new</span> User(<span class="number">5</span>, <span class="string">&quot;秦疆5号&quot;</span>, <span class="number">12</span>);</span><br><span class="line">    List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">    list.add(user1);</span><br><span class="line">    list.add(user2);</span><br><span class="line">    list.add(user3);</span><br><span class="line">    list.add(user4);</span><br><span class="line">    list.add(user5);</span><br><span class="line">    <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">    String str = mapper.writeValueAsString(list);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果 : 十分完美，没有任何问题！</p>
<p><img data-src="1595133587875.png" alt="1595133587875"></p>
<h3 id="8-6、输出时间对象"><a href="#8-6、输出时间对象" class="headerlink" title="8.6、输出时间对象"></a>8.6、输出时间对象</h3><ul>
<li><p>增加一个新的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/j3&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json3</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line"></span><br><span class="line">   ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建时间一个对象，java.util.Date</span></span><br><span class="line">   Date date = <span class="keyword">new</span> Date();</span><br><span class="line">   <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">   String str = mapper.writeValueAsString(date);</span><br><span class="line">   <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>运行结果 :</p>
<p><img data-src="1595134256420.png" alt="1595134256420"></p>
</li>
<li><p>默认日期格式会变成一个数字，是1970年1月1日到当前日期的毫秒数！</p>
</li>
<li><p>Jackson 默认是会把时间转成timestamps形式</p>
</li>
</ul>
<p><strong>解决方案：取消timestamps形式 ， 自定义时间格式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/j3&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json4</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line"></span><br><span class="line">   ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//不使用时间戳的方式</span></span><br><span class="line">   mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="keyword">false</span>);</span><br><span class="line">   <span class="comment">//自定义日期格式对象</span></span><br><span class="line">   SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">   <span class="comment">//指定日期格式</span></span><br><span class="line">   mapper.setDateFormat(sdf);</span><br><span class="line"></span><br><span class="line">   Date date = <span class="keyword">new</span> Date();</span><br><span class="line">   String str = mapper.writeValueAsString(date);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果 : 成功的输出了时间！</p>
<p><img data-src="1595134398126.png" alt="1595134398126"></p>
<p><strong><code>&lt;font color=red&gt;</code>抽取为工具类<code>&lt;/font&gt;</code></strong></p>
<p><strong>如果要经常使用的话，这样是比较麻烦的，我们可以将这些代码封装到一个工具类中；我们去编写下</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJson</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getJson(object,<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJson</span><span class="params">(Object object, String dateFormat)</span> </span>&#123;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//java自定义日期格式</span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(dateFormat);</span><br><span class="line">        <span class="comment">//sdf.format(date)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用ObjectMapper 来格式化输出</span></span><br><span class="line">        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,<span class="keyword">false</span>);</span><br><span class="line">        mapper.setDateFormat(sdf);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//ObjectMapper,时间解析后的默认格式为：TImestamp.时间戳</span></span><br><span class="line">            <span class="keyword">return</span> mapper.writeValueAsString(object);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们使用工具类，代码就更加简洁了！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/j3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json3</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JsonUtils.getJson(date,<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大功告成！完美！</p>
<h3 id="8-7、FastJson"><a href="#8-7、FastJson" class="headerlink" title="8.7、FastJson"></a>8.7、FastJson</h3><ul>
<li>fastjson.jar是阿里开发的一款专门用于Java开发的包，</li>
<li>实现json对象与JavaBean对象的转换，</li>
<li>实现JavaBean对象与json字符串的转换，</li>
<li>实现json对象与json字符串的转换。</li>
<li>实现json的转换方法很多，最后的实现结果都是一样的。</li>
</ul>
<p>fastjson 的 pom依赖！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.60<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>fastjson 三个主要的类：</strong></p>
<ol>
<li>JSONObject  代表 json 对象<ul>
<li>JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。</li>
<li>JSONObject对应json对象，通过各种形式的get()方法可以获取json对象中的数据，也可利用诸如size()，isEmpty()等方法获取”键：值”对的个数和判断是否为空。其本质是通过实现Map接口并调用接口中的方法完成的。</li>
</ul>
</li>
<li>JSONArray   代表 json 对象数组<ul>
<li>内部是有List接口中的方法来完成操作的。</li>
</ul>
</li>
<li>JSON代表 JSONObject和JSONArray的转化<ul>
<li>JSON类源码分析与使用</li>
<li>仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间的相互转化。</li>
</ul>
</li>
</ol>
<p><strong>代码测试，我们新建一个FastJsonDemo 类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/j4&quot;)</span></span><br><span class="line">    <span class="comment">//@ResponseBody//他就不会走视图解析器，会直接返回一个 字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json4</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;秦疆1号&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">&quot;秦疆2号&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        User user3 = <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">&quot;秦疆3号&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        User user4 = <span class="keyword">new</span> User(<span class="number">4</span>, <span class="string">&quot;秦疆4号&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        User user5 = <span class="keyword">new</span> User(<span class="number">5</span>, <span class="string">&quot;秦疆5号&quot;</span>, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">        list.add(user1);</span><br><span class="line">        list.add(user2);</span><br><span class="line">        list.add(user3);</span><br><span class="line">        list.add(user4);</span><br><span class="line">        list.add(user5);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*******Java对象 转 JSON字符串*******&quot;</span>);</span><br><span class="line">        String str1 = JSON.toJSONString(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.toJSONString(list)==&gt;&quot;</span>+str1);</span><br><span class="line">        String str2 = JSON.toJSONString(user1);</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.toJSONString(user1)==&gt;&quot;</span>+str2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n****** JSON字符串 转 Java对象*******&quot;</span>);</span><br><span class="line">        User jp_user1=JSON.parseObject(str2,User.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.parseObject(str2,User.class)==&gt;&quot;</span>+jp_user1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n****** Java对象 转 JSON对象 ******&quot;</span>);</span><br><span class="line">        JSONObject jsonObject1 = (JSONObject) JSON.toJSON(user2);</span><br><span class="line">        System.out.println(<span class="string">&quot;(JSONObject) JSON.toJSON(user2)==&gt;&quot;</span>+jsonObject1.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n****** JSON对象 转 Java对象 ******&quot;</span>);</span><br><span class="line">        User to_java_user = JSON.toJavaObject(jsonObject1, User.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.toJavaObject(jsonObject1, User.class)==&gt;&quot;</span>+to_java_user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(list);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这种工具类，我们只需要掌握使用就好了，在使用的时候在根据具体的业务去找对应的实现。和以前的commons-io那种工具包一样，拿来用就好了！</p>
<h2 id="9、Ajax研究"><a href="#9、Ajax研究" class="headerlink" title="9、Ajax研究"></a>9、Ajax研究</h2><h3 id="9-1、简介"><a href="#9-1、简介" class="headerlink" title="9.1、简介"></a>9.1、简介</h3><ul>
<li><strong>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</strong></li>
<li>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</li>
<li><strong>Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。</strong></li>
<li>在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest能够自动帮你完成搜索单词。</li>
<li>Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</li>
<li>就和国内百度的搜索框一样!</li>
<li>传统的网页(即不用ajax技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。</li>
<li>使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</li>
<li>使用Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</li>
</ul>
<h3 id="9-2、伪造Ajax"><a href="#9-2、伪造Ajax" class="headerlink" title="9.2、伪造Ajax"></a>9.2、伪造Ajax</h3><p>我们可以使用前端的一个标签来伪造一个ajax的样子。iframe标签</p>
<ol>
<li><p>新建一个module ：sspringmvc-06-ajax ， 导入web支持！</p>
</li>
<li><p>编写一个 ajax-frame.html 使用 iframe 测试，感受下效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>kuangshen<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">   <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">       <span class="built_in">document</span>.getElementById(<span class="string">&#x27;currentTime&#x27;</span>).innerText = myDate.getTime();</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">   <span class="function"><span class="keyword">function</span> <span class="title">LoadPage</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> targetUrl =  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;url&#x27;</span>).value;</span></span><br><span class="line"><span class="javascript">       <span class="built_in">console</span>.log(targetUrl);</span></span><br><span class="line"><span class="javascript">       <span class="built_in">document</span>.getElementById(<span class="string">&quot;iframePosition&quot;</span>).src = targetUrl;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>请输入要加载的地址：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;currentTime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;url&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;https://www.baidu.com/&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;LoadPage()&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h3</span>&gt;</span>加载页面位置：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;iframePosition&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;height: 500px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用IDEA开浏览器测试一下！</p>
</li>
</ol>
<p><strong>利用AJAX可以做：</strong></p>
<ul>
<li>注册时，输入用户名自动检测用户是否已经存在。</li>
<li>登陆时，提示用户名密码错误</li>
<li>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。</li>
<li>….等等</li>
</ul>
<h3 id="9-3、jQuery-ajax"><a href="#9-3、jQuery-ajax" class="headerlink" title="9.3、jQuery.ajax"></a>9.3、jQuery.ajax</h3><ul>
<li>纯JS原生实现Ajax我们不去讲解这里，直接使用jquery提供的，方便学习和使用，避免重复造轮子，有兴趣的同学可以去了解下JS原生XMLHttpRequest ！</li>
<li>Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</li>
<li>jQuery 提供多个与 AJAX 有关的方法。</li>
<li>通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。</li>
<li>jQuery 不是生产者，而是大自然搬运工。</li>
<li>jQuery Ajax本质就是 XMLHttpRequest，对他进行了封装，方便调用！</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">jQuery.ajax(...)</span><br><span class="line">      部分参数：</span><br><span class="line">            url：请求地址</span><br><span class="line">            type：请求方式，GET、POST（<span class="number">1.9</span><span class="number">.0</span>之后用method）</span><br><span class="line">        headers：请求头</span><br><span class="line">            data：要发送的数据</span><br><span class="line">    contentType：即将发送信息至服务器的内容编码类型(默认: <span class="string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>)</span><br><span class="line">          <span class="keyword">async</span>：是否异步</span><br><span class="line">        timeout：设置请求超时时间（毫秒）</span><br><span class="line">      beforeSend：发送请求前执行的函数(全局)</span><br><span class="line">        complete：完成之后执行的回调函数(全局)</span><br><span class="line">        success：成功之后执行的回调函数(全局)</span><br><span class="line">          error：失败之后执行的回调函数(全局)</span><br><span class="line">        accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型</span><br><span class="line">        dataType：将服务器端返回的数据转换成指定类型</span><br><span class="line">          <span class="string">&quot;xml&quot;</span>: 将服务器端返回的内容转换成xml格式</span><br><span class="line">          <span class="string">&quot;text&quot;</span>: 将服务器端返回的内容转换成普通文本格式</span><br><span class="line">          <span class="string">&quot;html&quot;</span>: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。</span><br><span class="line">        <span class="string">&quot;script&quot;</span>: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式</span><br><span class="line">          <span class="string">&quot;json&quot;</span>: 将服务器端返回的内容转换成相应的JavaScript对象</span><br><span class="line">        <span class="string">&quot;jsonp&quot;</span>: JSONP 格式使用 JSONP 形式调用函数时，如 <span class="string">&quot;myurl?callback=?&quot;</span> jQuery 将自动替换 ? 为正确的函数名，以执行回调函数</span><br></pre></td></tr></table></figure>

<p><strong>我们来个简单的测试，使用最原始的HttpServletResponse处理 , .最简单 , 最通用</strong></p>
<ol>
<li><p>配置web.xml 和 springmvc的配置文件【记得静态资源过滤和注解驱动配置上】</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--静态资源过滤--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注解驱动配--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写一个AjaxController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/a1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ajax1</span><span class="params">(String name , HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(name))&#123;</span><br><span class="line">           response.getWriter().print(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           response.getWriter().print(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>导入jquery ， 可以使用在线的CDN ， 也可以下载导入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>编写index.jsp测试</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">   &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;%--&lt;script src=<span class="string">&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;--%&gt;</span><br><span class="line">   &lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       <span class="function">function <span class="title">a1</span><span class="params">()</span></span>&#123;</span><br><span class="line">           $.post(&#123;</span><br><span class="line">               url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a1&quot;</span>,</span><br><span class="line">               data:&#123;<span class="string">&#x27;name&#x27;</span>:$(<span class="string">&quot;#txtName&quot;</span>).val()&#125;,</span><br><span class="line">               success:function (data,status) &#123;</span><br><span class="line">                   alert(data);</span><br><span class="line">                   alert(status);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--onblur：失去焦点触发事件--%&gt;</span><br><span class="line">用户名:&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;txtName&quot;</span> onblur=<span class="string">&quot;a1()&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>启动tomcat测试！打开浏览器的控制台，当我们鼠标离开输入框的时候，可以看到发出了一个ajax的请求！是后台返回给我们的结果！测试成功！</p>
</li>
</ol>
<h3 id="9-4、Springmvc实现"><a href="#9-4、Springmvc实现" class="headerlink" title="9.4、Springmvc实现"></a>9.4、<strong>Springmvc实现</strong></h3><ol>
<li><p>实体类user（使用了lombok插件，可以自己写实现类方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">   <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>我们来获取一个集合对象，展示到前端页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/a2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">ajax2</span><span class="params">()</span></span>&#123;</span><br><span class="line">   List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">   list.add(<span class="keyword">new</span> User(<span class="string">&quot;秦疆1号&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">   list.add(<span class="keyword">new</span> User(<span class="string">&quot;秦疆2号&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">   list.add(<span class="keyword">new</span> User(<span class="string">&quot;秦疆3号&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">   <span class="keyword">return</span> list; <span class="comment">//由于@RestController注解，将list转成json格式返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>前端页面</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/static/js/jquery-3.4.1.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(function () &#123;</span><br><span class="line">            $(<span class="string">&quot;#btn&quot;</span>).click(function () &#123;</span><br><span class="line">                <span class="comment">// console.log(&#x27;点击事件成功&#x27;)</span></span><br><span class="line">                <span class="comment">// $.post(url,param,[可以省略],success)</span></span><br><span class="line">                $.post(<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a2&quot;</span>,function (data) &#123;</span><br><span class="line">                    console.log(data[<span class="number">0</span>].name);</span><br><span class="line">                    let html =  <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">for</span> (let i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">                        html += `&lt;tr&gt;</span><br><span class="line">                                    &lt;td&gt;$&#123;<span class="string">&quot;$&#123;data[i].name&#125;&quot;</span>&#125;&lt;/td&gt;</span><br><span class="line">                                    &lt;td&gt;$&#123;<span class="string">&quot;$&#123;data[i].age&#125;&quot;</span>&#125;&lt;/td&gt;</span><br><span class="line">                                    &lt;td&gt;$&#123;<span class="string">&quot;$&#123;data[i].sex&#125;&quot;</span>&#125;&lt;/td&gt;</span><br><span class="line">                                &lt;/tr&gt;`</span><br><span class="line">                    &#125;</span><br><span class="line">                    $(<span class="string">&quot;#content&quot;</span>).html(html)</span><br><span class="line">                    console.log(html)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;加载数据&quot;</span> id=<span class="string">&quot;btn&quot;</span>&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;年龄&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;性别&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody id=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">        &lt;%--数据：后台--%&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>成功实现了数据回显！可以体会一下Ajax的好处！</strong></p>
<h3 id="9-5、注册提示效果"><a href="#9-5、注册提示效果" class="headerlink" title="9.5、注册提示效果"></a>9.5、注册提示效果</h3><ol>
<li><p>我们写一个Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/a3&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">ajax3</span><span class="params">(String name,String pwd)</span></span>&#123;</span><br><span class="line">   String msg = <span class="string">&quot;&quot;</span>;</span><br><span class="line">   <span class="comment">//模拟数据库中存在数据</span></span><br><span class="line">   <span class="keyword">if</span> (name!=<span class="keyword">null</span>)&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(name))&#123;</span><br><span class="line">           msg = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           msg = <span class="string">&quot;用户名输入错误&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">if</span> (pwd!=<span class="keyword">null</span>)&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="string">&quot;123456&quot;</span>.equals(pwd))&#123;</span><br><span class="line">           msg = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           msg = <span class="string">&quot;密码输入有误&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">return</span> msg; <span class="comment">//由于@RestController注解，将msg转成json格式返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>前端页面 login.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;ajax&lt;/title&gt;</span><br><span class="line">   &lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line"></span><br><span class="line">       <span class="function">function <span class="title">a1</span><span class="params">()</span></span>&#123;</span><br><span class="line">           $.post(&#123;</span><br><span class="line">               url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a3&quot;</span>,</span><br><span class="line">               data:&#123;<span class="string">&#x27;name&#x27;</span>:$(<span class="string">&quot;#name&quot;</span>).val()&#125;,</span><br><span class="line">               success:function (data) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (data.toString()==<span class="string">&#x27;OK&#x27;</span>)&#123;</span><br><span class="line">                       $(<span class="string">&quot;#userInfo&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;green&quot;</span>);</span><br><span class="line">                  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                       $(<span class="string">&quot;#userInfo&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">                   $(<span class="string">&quot;#userInfo&quot;</span>).html(data);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="function">function <span class="title">a2</span><span class="params">()</span></span>&#123;</span><br><span class="line">           $.post(&#123;</span><br><span class="line">               url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a3&quot;</span>,</span><br><span class="line">               data:&#123;<span class="string">&#x27;pwd&#x27;</span>:$(<span class="string">&quot;#pwd&quot;</span>).val()&#125;,</span><br><span class="line">               success:function (data) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (data.toString()==<span class="string">&#x27;OK&#x27;</span>)&#123;</span><br><span class="line">                       $(<span class="string">&quot;#pwdInfo&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;green&quot;</span>);</span><br><span class="line">                  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                       $(<span class="string">&quot;#pwdInfo&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">                   $(<span class="string">&quot;#pwdInfo&quot;</span>).html(data);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">  用户名:&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;name&quot;</span> onblur=<span class="string">&quot;a1()&quot;</span>/&gt;</span><br><span class="line">   &lt;span id=<span class="string">&quot;userInfo&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">  密码:&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;pwd&quot;</span> onblur=<span class="string">&quot;a2()&quot;</span>/&gt;</span><br><span class="line">   &lt;span id=<span class="string">&quot;pwdInfo&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
<li><p><code>&lt;font color=red&gt;</code>记得处理json乱码问题<code>&lt;/font&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--JSON乱码问题配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>测试一下效果，动态请求响应，局部刷新，就是如此！</p>
<p><img data-src="1595137816208.png" alt="1595137816208"></p>
</li>
</ol>
<h3 id="9-6、获取baidu接口Demo"><a href="#9-6、获取baidu接口Demo" class="headerlink" title="9.6、获取baidu接口Demo"></a>9.6、获取baidu接口Demo</h3><ol>
<li><p>JSONP.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>JSONP百度搜索<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">       <span class="selector-id">#q</span>&#123;</span></span><br><span class="line"><span class="css">           <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">           <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">           <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="css">           <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">           <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">           <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">           <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">           <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">       <span class="selector-id">#ul</span>&#123;</span></span><br><span class="line"><span class="css">           <span class="attribute">width</span>: <span class="number">520px</span>;</span></span><br><span class="line"><span class="css">           <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">           <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">           <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">           <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="css">           <span class="attribute">margin-top</span>: -<span class="number">1px</span>;</span></span><br><span class="line"><span class="css">           <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">       <span class="selector-id">#ul</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">           <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">           <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">       <span class="selector-id">#ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">           <span class="attribute">background-color</span>: <span class="number">#f60</span>;</span></span><br><span class="line"><span class="css">           <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">       <span class="comment">// 2.步骤二</span></span></span><br><span class="line"><span class="javascript">       <span class="comment">// 定义demo函数 (分析接口、数据)</span></span></span><br><span class="line"><span class="javascript">       <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> Ul = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> html = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">           <span class="comment">// 如果搜索数据存在 把内容添加进去</span></span></span><br><span class="line"><span class="javascript">           <span class="keyword">if</span> (data.s.length) &#123;</span></span><br><span class="line"><span class="javascript">               <span class="comment">// 隐藏掉的ul显示出来</span></span></span><br><span class="line"><span class="javascript">               Ul.style.display = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="javascript">               <span class="comment">// 搜索到的数据循环追加到li里</span></span></span><br><span class="line"><span class="javascript">               <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;data.s.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">                   html += <span class="string">&#x27;&lt;li&gt;&#x27;</span>+data.s[i]+<span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">              &#125;</span></span><br><span class="line"><span class="javascript">               <span class="comment">// 循环的li写入ul</span></span></span><br><span class="line"><span class="javascript">               Ul.innerHTML = html;</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">       <span class="comment">// 1.步骤一</span></span></span><br><span class="line"><span class="javascript">       <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">           <span class="comment">// 获取输入框和ul</span></span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> Q = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;q&#x27;</span>);</span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> Ul = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">           <span class="comment">// 事件鼠标抬起时候</span></span></span><br><span class="line"><span class="javascript">           Q.onkeyup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">               <span class="comment">// 如果输入框不等于空</span></span></span><br><span class="line"><span class="javascript">               <span class="keyword">if</span> (<span class="built_in">this</span>.value != <span class="string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                   <span class="comment">// ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆JSONPz重点☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆</span></span></span><br><span class="line"><span class="javascript">                   <span class="comment">// 创建标签</span></span></span><br><span class="line"><span class="javascript">                   <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                   <span class="comment">//给定要跨域的地址 赋值给src</span></span></span><br><span class="line"><span class="javascript">                   <span class="comment">//这里是要请求的跨域的地址 我写的是百度搜索的跨域地址</span></span></span><br><span class="line"><span class="javascript">                   script.src = <span class="string">&#x27;https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=&#x27;</span>+<span class="built_in">this</span>.value+<span class="string">&#x27;&amp;cb=demo&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                   <span class="comment">// 将组合好的带src的script标签追加到body里</span></span></span><br><span class="line"><span class="javascript">                   <span class="built_in">document</span>.body.appendChild(script);</span></span><br><span class="line"><span class="javascript">              &#125;</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;q&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<p><img data-src="1595138107341.png" alt="1595138107341"></p>
</li>
</ol>
<h2 id="10、拦截器"><a href="#10、拦截器" class="headerlink" title="10、拦截器"></a>10、拦截器</h2><h3 id="10-1、概述"><a href="#10-1、概述" class="headerlink" title="10.1、概述"></a>10.1、概述</h3><ul>
<li>SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter,用于对处理器进行预处理和后处理。</li>
<li>开发者可以自己定义一些拦截器来实现特定的功能。</li>
</ul>
<p><strong>过滤器与拦截器的区别：</strong>拦截器是<code>&lt;font color=red&gt;</code>AOP思想<code>&lt;/font&gt;</code>的具体应用。</p>
<p><strong>过滤器</strong></p>
<ul>
<li>servlet规范中的一部分，任何javaweb工程都可以使用</li>
<li>在url-pattern中配置了/*之后，可以对所有要访问的资源进行拦截</li>
</ul>
<p><strong>拦截器</strong></p>
<ul>
<li>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</li>
<li>拦截器只会拦截访问的控制器方法， 如果访问的是jsp/html/css/image/js是不会进行拦截的</li>
</ul>
<h3 id="10-2、自定义拦截器"><a href="#10-2、自定义拦截器" class="headerlink" title="10.2、自定义拦截器"></a>10.2、自定义拦截器</h3><ol>
<li><p>新建一个Moudule ， springmvc-Interceptor  ， 添加web支持</p>
</li>
<li><p>配置web.xml 和 springmvc-servlet.xml 文件</p>
</li>
<li><p>编写一个拦截器（必须实现<code>&lt;font color=red&gt;</code> HandlerInterceptor 接口<code>&lt;/font&gt;</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//return true; 执行下一个拦截器，放行</span></span><br><span class="line">    <span class="comment">//return false; 不执行下一个拦截器，拦截</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===========处理前===========&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//日志</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===========处理后===========&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//日志</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===========清理===========&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>在springmvc的配置文件中配置拦截器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--拦截器配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--包括这个请求下面的所有请求--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.config.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写一个Controller，接收请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/t1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestController.test&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>启动tomcat 测试一下！(<a href="http://localhost:8888/t1">http://localhost:8888/t1</a>)</p>
</li>
</ol>
<h3 id="10-3、验证用户是否登录-认证用户"><a href="#10-3、验证用户是否登录-认证用户" class="headerlink" title="10.3、验证用户是否登录 (认证用户)"></a>10.3、验证用户是否登录 (认证用户)</h3><p><strong>实现思路</strong></p>
<ol>
<li>有一个登陆页面，需要写一个controller访问页面。</li>
<li>登陆页面有一提交表单的动作。需要在controller中处理。判断用户名密码是否正确。如果正确，向session中写入用户信息。<em>返回登陆成功。</em></li>
<li>拦截用户请求，判断用户是否登陆。如果用户已经登陆。放行， 如果用户未登陆，跳转到登陆页面</li>
</ol>
<p><strong>测试：</strong></p>
<ol>
<li><p>编写一个登陆页面  login.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;登录&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--在web-inf下面的所有页面或者资源，只能通过controller或者Servlet进行访问--%&gt;</span><br><span class="line">&lt;h1&gt;登录页面&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/login&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>编写一个Controller处理请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/main&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/goLogin&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpSession session, String username, String password, Model model)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把用户的信息存在session中</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;userLoginInfo&quot;</span>,username);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;password&quot;</span>,password);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/goOut&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">goOut</span><span class="params">(HttpSession sessionl)</span> </span>&#123;</span><br><span class="line">        sessionl.removeAttribute(<span class="string">&quot;userLoginInfo&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>编写一个登陆成功的页面 main.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;首页&lt;/h1&gt;</span><br><span class="line">&lt;span&gt;$&#123;password&#125;&lt;/span&gt;</span><br><span class="line">&lt;span&gt;$&#123;username&#125;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/goOut&quot;</span>&gt;注销&lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>在 index 页面上测试跳转！启动Tomcat 测试，未登录也可以进入主页！</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;index&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;&lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/goLogin&quot;</span>&gt;登录页面&lt;/a&gt;&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;&lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/main&quot;</span>&gt;首页&lt;/a&gt;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>编写用户登录拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="comment">//放行:判断什么情况下登录</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//登录页面也会放行</span></span><br><span class="line">        <span class="keyword">if</span> (request.getRequestURI().contains(<span class="string">&quot;goLogin&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (request.getRequestURI().contains(<span class="string">&quot;login&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (session.getAttribute(<span class="string">&quot;userLoginInfo&quot;</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断什么情况下没有登录</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/login.jsp&quot;</span>).forward(request,response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>在Springmvc的配置文件中注册拦截器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--关于拦截器的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;loginInterceptor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.interceptor.LoginInterceptor&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>再次重启Tomcat测试！</p>
</li>
</ol>
<p><strong>OK，测试登录拦截功能无误.</strong></p>
<p><img data-src="1595139309383.png" alt="1595139309383"></p>
<h2 id="11、文件上传和下载"><a href="#11、文件上传和下载" class="headerlink" title="11、文件上传和下载"></a>11、文件上传和下载</h2><h3 id="11-1、准备工作"><a href="#11-1、准备工作" class="headerlink" title="11.1、准备工作"></a>11.1、准备工作</h3><ul>
<li>文件上传是项目开发中最常见的功能之一 ,springMVC 可以很好的支持文件上传。</li>
<li>SpringMVC上下文中默认没有装配MultipartResolver，因此默认情况下其不能处理文件上传工作。如果想使用Spring的文件上传功能，则需要在上下文中配置MultipartResolver。</li>
<li>前端表单要求：为了能上传文件，必须将表单的method设置为POST，并将enctype设置为multipart/form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器；</li>
</ul>
<p><strong>对表单中的 enctype 属性做个详细的说明：</strong></p>
<ul>
<li>application/x-www=form-urlencoded：默认方式，只处理表单域中的 value 属性值，采用这种编码方式的表单会将表单域中的值处理成 URL 编码方式。</li>
<li>multipart/form-data：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。</li>
<li>text/plain：除了把空格转换为 “+” 号外，其他字符都不做编码处理，这种方式适用直接通过表单发送邮件。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一旦设置了enctype为multipart/form-data，浏览器即会采用二进制流的方式来处理表单数据，而对于文件上传的处理则涉及在服务器端解析原始的HTTP响应。在2003年，Apache Software Foundation发布了开源的Commons FileUpload组件，其很快成为Servlet/JSP程序员上传文件的最佳选择。</p>
<ul>
<li>Servlet3.0规范已经提供方法来处理文件上传，但这种上传需要在Servlet中完成。</li>
<li>而Spring MVC则提供了更简单的封装。</li>
<li>Spring MVC为文件上传提供了直接的支持，这种支持是用即插即用的MultipartResolver实现的。</li>
<li>Spring MVC使用Apache Commons FileUpload技术实现了一个MultipartResolver实现类：</li>
<li>CommonsMultipartResolver。因此，<code>&lt;font color=red&gt;</code>SpringMVC的文件上传还需要依赖Apache Commons FileUpload的组件。<code>&lt;/font&gt;</code></li>
</ul>
<h3 id="11-2、文件上传"><a href="#11-2、文件上传" class="headerlink" title="11.2、文件上传"></a>11.2、文件上传</h3><ol>
<li><p>导入文件上传的jar包，commons-fileupload ， Maven会自动帮我们导入他的依赖包 commons-io包；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet-api导入高版本的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置bean：multipartResolver</p>
<p><code>&lt;font color=red&gt;</code>【<strong>注意！！！这个bena的id必须为：multipartResolver ， 否则上传文件会报400的错误！在这里栽过坑,教训！</strong>】<code>&lt;/font&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40960&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CommonsMultipartFile 的 常用方法：</p>
<ul>
<li><strong>String getOriginalFilename()：获取上传文件的原名</strong></li>
<li><strong>InputStream getInputStream()：获取文件流</strong></li>
<li><strong>void transferTo(File dest)：将上传文件保存到一个目录文件中</strong></li>
</ul>
<p>我们去实际测试一下</p>
</li>
<li><p>编写前端页面</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/upload&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line"> &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>/&gt;</span><br><span class="line"> &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;upload&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Controller</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@RequestParam(&quot;file&quot;) 将name=file控件得到的文件封装成CommonsMultipartFile 对象</span></span><br><span class="line">    <span class="comment">//批量上传CommonsMultipartFile则为数组即可</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fileUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file , HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取文件名 : file.getOriginalFilename();</span></span><br><span class="line">        String uploadFileName = file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果文件名为空，直接回到首页！</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(uploadFileName))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;上传文件名 : &quot;</span>+uploadFileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上传路径保存设置</span></span><br><span class="line">        String path = request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">        <span class="comment">//如果路径不存在，创建一个</span></span><br><span class="line">        File realPath = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span> (!realPath.exists())&#123;</span><br><span class="line">            realPath.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;上传文件保存地址：&quot;</span>+realPath);</span><br><span class="line"></span><br><span class="line">        InputStream is = file.getInputStream(); <span class="comment">//文件输入流</span></span><br><span class="line">        OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(realPath,uploadFileName)); <span class="comment">//文件输出流</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取写出</span></span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            os.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 采用file.Transto 来保存上传的文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/upload2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String  <span class="title">fileUpload2</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上传路径保存设置</span></span><br><span class="line">        String path = request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">        File realPath = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span> (!realPath.exists())&#123;</span><br><span class="line">            realPath.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//上传文件地址</span></span><br><span class="line">        System.out.println(<span class="string">&quot;上传文件保存地址：&quot;</span>+realPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span></span><br><span class="line">        file.transferTo(<span class="keyword">new</span> File(realPath +<span class="string">&quot;/&quot;</span>+ file.getOriginalFilename()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/download&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">downloads</span><span class="params">(HttpServletResponse response , HttpServletRequest request)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//要下载的图片地址</span></span><br><span class="line">        String  path = request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">        String  fileName = <span class="string">&quot;bg1.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、设置response 响应头</span></span><br><span class="line">        response.reset(); <span class="comment">//设置页面不缓存,清空buffer</span></span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>); <span class="comment">//字符编码</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>); <span class="comment">//二进制传输数据</span></span><br><span class="line">        <span class="comment">//设置响应头</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,</span><br><span class="line">                <span class="string">&quot;attachment;fileName=&quot;</span>+ URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(path,fileName);</span><br><span class="line">        <span class="comment">//2、 读取文件--输入流</span></span><br><span class="line">        InputStream input=<span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        <span class="comment">//3、 写出文件--输出流</span></span><br><span class="line">        OutputStream out = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] buff =<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//4、执行 写出操作</span></span><br><span class="line">        <span class="keyword">while</span>((index= input.read(buff))!= -<span class="number">1</span>)&#123;</span><br><span class="line">            out.write(buff, <span class="number">0</span>, index);</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        out.close();</span><br><span class="line">        input.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>测试上传文件，OK！</p>
</li>
</ol>
<p><strong>采用file.Transto 来保存上传的文件</strong></p>
<ol>
<li><p>编写Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 采用file.Transto 来保存上传的文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/upload2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String  <span class="title">fileUpload2</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//上传路径保存设置</span></span><br><span class="line">   String path = request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">   File realPath = <span class="keyword">new</span> File(path);</span><br><span class="line">   <span class="keyword">if</span> (!realPath.exists())&#123;</span><br><span class="line">       realPath.mkdir();</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">//上传文件地址</span></span><br><span class="line">   System.out.println(<span class="string">&quot;上传文件保存地址：&quot;</span>+realPath);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span></span><br><span class="line">   file.transferTo(<span class="keyword">new</span> File(realPath +<span class="string">&quot;/&quot;</span>+ file.getOriginalFilename()));</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>前端表单提交地址修改</p>
</li>
<li><p>访问提交测试，OK！</p>
</li>
</ol>
<h3 id="11-3、文件下载"><a href="#11-3、文件下载" class="headerlink" title="11.3、文件下载"></a>11.3、文件下载</h3><p><strong>文件下载步骤：</strong></p>
<ol>
<li>设置 response 响应头</li>
<li>读取文件 – InputStream</li>
<li>写出文件 – OutputStream</li>
<li>执行操作</li>
<li>关闭流 （先开后关）</li>
</ol>
<p><strong>代码实现：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/download&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">downloads</span><span class="params">(HttpServletResponse response ,HttpServletRequest request)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">   <span class="comment">//要下载的图片地址</span></span><br><span class="line">   String  path = request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">   String  fileName = <span class="string">&quot;基础语法.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//1、设置response 响应头</span></span><br><span class="line">   response.reset(); <span class="comment">//设置页面不缓存,清空buffer</span></span><br><span class="line">   response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>); <span class="comment">//字符编码</span></span><br><span class="line">   response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>); <span class="comment">//二进制传输数据</span></span><br><span class="line">   <span class="comment">//设置响应头</span></span><br><span class="line">   response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,</span><br><span class="line">           <span class="string">&quot;attachment;fileName=&quot;</span>+URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">   File file = <span class="keyword">new</span> File(path,fileName);</span><br><span class="line">   <span class="comment">//2、 读取文件--输入流</span></span><br><span class="line">   InputStream input=<span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">   <span class="comment">//3、 写出文件--输出流</span></span><br><span class="line">   OutputStream out = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">byte</span>[] buff =<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">   <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">   <span class="comment">//4、执行 写出操作</span></span><br><span class="line">   <span class="keyword">while</span>((index= input.read(buff))!= -<span class="number">1</span>)&#123;</span><br><span class="line">       out.write(buff, <span class="number">0</span>, index);</span><br><span class="line">       out.flush();</span><br><span class="line">  &#125;</span><br><span class="line">   out.close();</span><br><span class="line">   input.close();</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前端</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;/download&quot;</span>&gt;点击下载&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>测试，文件下载OK</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>好不容易来更新一下文章，写写几个字</title>
    <url>/posts/18472/</url>
    <content><![CDATA[<p>网站做多了管理不过来怎么办？试过去站长资源网出售网站，但是审核没有通过，所以现在的打算是把网站程序源码发到二手平台上出售看看 <span id="more"></span></p>
<h3 id="有很多网站怎么办？"><a href="#有很多网站怎么办？" class="headerlink" title="有很多网站怎么办？"></a>有很多网站怎么办？</h3><p>网站做多了管理不过来怎么办？试过去站长资源网出售网站，但是审核没有通过，所以现在的打算是把网站程序源码发到二手平台上出售看看，当然还会出售别的网站程序源码，这些源码都是很不错的希望可以卖个好价钱</p>
<h3 id="wordpress的程序"><a href="#wordpress的程序" class="headerlink" title="wordpress的程序"></a>wordpress的程序</h3><p>这个博客程序还是很不错的，功能齐全，对搜索引擎特别友好，看这个截图就知道了<br><img data-src="1122.png" alt="惜文博客" title="惜文博客"></p>
<p>还有一些四方交易平台的源码，还是很优秀的</p>
<h3 id="近期"><a href="#近期" class="headerlink" title="近期"></a>近期</h3><p>最近我下铺想学习做网站，我决定把他交会了</p>
<p><em>想着让他使用hexo的博客系统，但是不知道怎么回事就是安装不算 <code>npm</code>,所以只能在本地使用 <code>phpstudy</code>搭建个 <code>typecho</code>的博客系统，这个博客系统是使用 <code>php</code>语言所编写的</em></p>
<p><code>typecho</code> 这个轻量级博客系统还是很好用的，哈哈<br>官网：<a href="http://typecho.org/" title="typecho">typecho</a><br>主题：<a href="https://typecho.me/" title="Themes">Themes</a><br>插件：<a href="https://plugins.typecho.me/" title="plugins">plugins</a></p>
<h3 id="尾"><a href="#尾" class="headerlink" title="尾"></a>尾</h3><p>哎呀，没什么好说的，~~~<br>强大的md编辑器呀</p>
]]></content>
      <categories>
        <category>闲言碎语</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>wordpress</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>小米游戏本开箱体验</title>
    <url>/posts/64043/</url>
    <content><![CDATA[<p>黑色包装箱上印制了小米游戏本的内部X光扫描线稿图，这一点有点新意。全金属机身设计，顶盖无 LOGO，“MI”被设计在显示屏的下方</p>
<p>黑色包装箱上印制了小米游戏本的内部 X 光扫描线稿图，这一点有点新意。<span id="more"></span><br>全金属机身设计，顶盖无 LOGO，“MI”被设计在显示屏的下方，整体造型属于看起来有点低调，但同时又能给你隐隐觉得“好像有点厉害”的感觉全金属机身设计，顶盖无 LOGO，“MI”被设计在显示屏的下方，整体造型属于看起来有点低调，但同时又能给你隐隐觉得“好像有点厉害”的感觉。</p>
<p><img data-src="xmyxb1.jpg" alt="外观1" title="外观 1"><br><img data-src="xmyxb2.jpg" alt="外观2" title="外观 2"><br><img data-src="xmyxb3.jpg" alt="外观3" title="外观 3"><br><img data-src="xmyxb4.jpg" alt="外观4" title="外观 4"><br><img data-src="xmyxb5.jpg" alt="外观5" title="外观 5"></p>
<h3 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h3><p>正如雷老板所说，确实是外观低调，内心澎湃。第一眼看上去就是标准的笔记本。但是当你打开灯效的时候又燥了起来。我还挺喜欢这种设计。</p>
<h3 id="续航"><a href="#续航" class="headerlink" title="续航"></a>续航</h3><p>经本人不严谨的测试，看了 3 个电影正好没电，耗时 6 个小时左右。</p>
<h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><p>重点来了，买游戏本的都奔着游戏来的，包括我。玩了几款游戏，绝地求生 魔兽世界 守望先锋 LOL 等，都是完美运行，没有出现卡顿，掉帧的现象。</p>
<p><img data-src="xmyxb6.jpg" alt="键盘" title="键盘"><br><img data-src="xmyxb8.jpg" alt="键盘" title="键盘"><br><img data-src="xmyxb9.jpg" alt="键盘" title="键盘"><br><img data-src="xmyxb7.jpg" alt="键盘" title="键盘"></p>
<h3 id="键盘"><a href="#键盘" class="headerlink" title="键盘"></a>键盘</h3><p>总体来说，个人觉得键盘手感不错，用起来挺舒适的，码字贼爽，<code>但是过几天我要买个青轴键盘</code>。</p>
<p><img data-src="xmyxb10.jpg" alt="屏幕" title="屏幕"></p>
<h3 id="屏幕"><a href="#屏幕" class="headerlink" title="屏幕"></a>屏幕</h3><p>我对屏幕不懂，看不出好还是不好，就不多说了。不过游戏本用 72%色域的屏幕，雷老板还是挺良心的。</p>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>确实接口很丰富，要啥有啥，不过我确实觉得 SD 卡的接口可以不要，还能省点成本。另外说下 HDMI 可以输出 4K，这个比较赞。</p>
<h3 id="散热"><a href="#散热" class="headerlink" title="散热"></a>散热</h3><p>真如发布会上所说，龙卷风确实很牛逼，再加上背面的超大散热面积，散热杠杠的，完全不用担心，并且有一键龙卷风按键，点击一下即开启，挺方便。</p>
<h3 id="音效"><a href="#音效" class="headerlink" title="音效"></a>音效</h3><p>外置喇叭声音还原非常好，层次清晰。耳机的话，支持杜比音效，音效确实不错。</p>
<h3 id="触摸板"><a href="#触摸板" class="headerlink" title="触摸板"></a>触摸板</h3><p>这个手感真的不错，是让人能愿意去用的。比我之前的 L 家的好太多。</p>
<h3 id="BIOS"><a href="#BIOS" class="headerlink" title="BIOS"></a>BIOS</h3><p>bios 界面全部是简体中文，这是我用过电脑里最喜欢的 BIOS。功能界面看着贼舒服。<br><img data-src="c182cd3ab582297b59a41a7c6a66757d.jpg" alt="BIOS" title="BIOS"></p>
]]></content>
      <categories>
        <category>闲言碎语</category>
      </categories>
      <tags>
        <tag>电脑</tag>
        <tag>开箱</tag>
        <tag>日常</tag>
        <tag>小米游戏本</tag>
        <tag>小米</tag>
        <tag>笔记本</tag>
      </tags>
  </entry>
  <entry>
    <title>整合SSM笔记-狂神</title>
    <url>/posts/31217/</url>
    <content><![CDATA[<h1 id="整合SSM框架"><a href="#整合SSM框架" class="headerlink" title="整合SSM框架"></a>整合SSM框架</h1><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><p>环境：</p>
<ul>
<li>IDEA</li>
<li>MySQL 5.7.19</li>
<li>Tomcat 9</li>
<li>Maven 3.6</li>
</ul>
<p> 要求：</p>
<ul>
<li>需要熟练掌握MySQL数据库，Spring，JavaWeb及MyBatis知识，简单的前端知识；</li>
</ul>
<h2 id="数据库环境"><a href="#数据库环境" class="headerlink" title="数据库环境"></a>数据库环境</h2><p>创建一个存放书籍数据的数据库表</p>
<span id="more"></span>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `ssmbuild`;</span><br><span class="line"></span><br><span class="line">USE `ssmbuild`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `books`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `books` (</span><br><span class="line">`bookID` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;书id&#x27;</span>,</span><br><span class="line">`bookName` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;书名&#x27;</span>,</span><br><span class="line">`bookCounts` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;数量&#x27;</span>,</span><br><span class="line">`detail` <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;描述&#x27;</span>,</span><br><span class="line">KEY `bookID` (`bookID`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> `books`(`bookID`,`bookName`,`bookCounts`,`detail`)<span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;从入门到放弃&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;MySQL&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;从删库到跑路&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;Linux&#x27;</span>,<span class="number">5</span>,<span class="string">&#x27;从进门到进牢&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="基本环境搭建"><a href="#基本环境搭建" class="headerlink" title="基本环境搭建"></a>基本环境搭建</h2><ol>
<li><p>新建一Maven项目！ssmbuild ， 添加web的支持</p>
</li>
<li><p>导入相关的pom依赖！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--Junit--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Servlet - JSP --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Mybatis--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Spring--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Maven资源过滤设置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>建立基本结构和配置框架！</p>
<ul>
<li><p>nuc.ss.pojo</p>
</li>
<li><p>nuc.ss.dao</p>
</li>
<li><p>nuc.ss.service</p>
</li>
<li><p>nuc.ss.controller</p>
</li>
<li><p>mybatis-config.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="Mybatis层编写"><a href="#Mybatis层编写" class="headerlink" title="Mybatis层编写"></a>Mybatis层编写</h2><ol>
<li><p>数据库配置文件 <strong>database.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">admin</span></span><br></pre></td></tr></table></figure>

<pre><code>2. IDEA关联数据库

3. 编写MyBatis的核心配置文件
</code></pre>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;nuc.ss.pojo&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;nuc/ss/dao/BookMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>4. 编写数据库对应的实体类 nuc.ss.pojo.Books（使用lombok插件！）
</code></pre>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Books</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> bookID;</span><br><span class="line">   <span class="keyword">private</span> String bookName;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> bookCounts;</span><br><span class="line">   <span class="keyword">private</span> String detail;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code>5. 编写Dao层的 Mapper接口！
</code></pre>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> nuc.ss.pojo.Books;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//增加一个Book</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//根据id删除一个Book</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//更新Book</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//根据id查询,返回一个Book</span></span><br><span class="line">   <span class="function">Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//查询全部Book,返回list集合</span></span><br><span class="line">   <span class="function">List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code>6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；
</code></pre>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;nuc.ss.dao.BookMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--增加一个Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">      insert into ssmbuild.books(bookName,bookCounts,detail)</span><br><span class="line">      values (#&#123;bookName&#125;, #&#123;bookCounts&#125;, #&#123;detail&#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--根据id删除一个Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBookById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">      delete from ssmbuild.books where bookID=#&#123;bookID&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--更新Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">      update ssmbuild.books</span><br><span class="line">      set bookName = #&#123;bookName&#125;,bookCounts = #&#123;bookCounts&#125;,detail = #&#123;detail&#125;</span><br><span class="line">      where bookID = #&#123;bookID&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--根据id查询,返回一个Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBookById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">      select * from ssmbuild.books</span><br><span class="line">      where bookID = #&#123;bookID&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--查询全部Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAllBook&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">      SELECT * from ssmbuild.books</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>7. 编写Service层的接口和实现类
</code></pre>
<p>  接口：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> nuc.ss.pojo.Books;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BookService:底下需要去实现,调用dao层</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">   <span class="comment">//增加一个Book</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line">   <span class="comment">//根据id删除一个Book</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">   <span class="comment">//更新Book</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line">   <span class="comment">//根据id查询,返回一个Book</span></span><br><span class="line">   <span class="function">Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">   <span class="comment">//查询全部Book,返回list集合</span></span><br><span class="line">   <span class="function">List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  实现类：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> nuc.ss.dao.BookMapper;</span><br><span class="line"><span class="keyword">import</span> nuc.ss.pojo.Books;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//调用dao层的操作，设置一个set接口，方便Spring管理</span></span><br><span class="line">   <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookMapper</span><span class="params">(BookMapper bookMapper)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.bookMapper = bookMapper;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> bookMapper.addBook(book);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> bookMapper.deleteBookById(id);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> bookMapper.updateBook(books);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> bookMapper.queryBookById(id);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> bookMapper.queryAllBook();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>OK，到此，底层需求操作编写完毕！</strong></p>
<h2 id="Spring层"><a href="#Spring层" class="headerlink" title="Spring层"></a>Spring层</h2><ol>
<li><p>配置<strong>Spring整合MyBatis</strong>，我们这里数据源使用c3p0连接池；</p>
</li>
<li><p>我们去编写Spring整合Mybatis的相关的配置文件；spring-dao.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置整合mybatis --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 1.关联数据库文件 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:database.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--数据库连接池</span></span><br><span class="line"><span class="comment">       dbcp 半自动化操作 不能自动连接</span></span><br><span class="line"><span class="comment">       c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面）</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置连接池属性 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoCommitOnClose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryAttempts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nuc.ss.dao&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>Spring整合service层</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 扫描service相关的bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;nuc.ss.service&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--BookServiceImpl注入到IOC容器中--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;BookServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.service.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookMapper&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="SpringMVC层"><a href="#SpringMVC层" class="headerlink" title="SpringMVC层"></a>SpringMVC层</h2><ol>
<li><p><strong>web.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--DispatcherServlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--一定要注意:我们这里加载的是总的配置文件，之前被这里坑了！--&gt;</span>  </span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--encodingFilter--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">          org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">       <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!--Session过期时间--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>spring-mvc.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">   https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置SpringMVC --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 2.静态资源默认servlet配置--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 4.扫描web相关的bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;nuc.ss.controller&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>Spring配置整合文件，applicationContext.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-service.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-mvc.xml&quot;</span>/&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>配置文件，暂时结束！</strong></p>
</li>
</ol>
<h2 id="Controller-和-视图层编写"><a href="#Controller-和-视图层编写" class="headerlink" title="Controller 和 视图层编写"></a>Controller 和 视图层编写</h2><ol>
<li><p>BookController 类编写 ， 方法一：查询全部书籍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="meta">@Qualifier(&quot;BookServiceImpl&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/allBook&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">       List&lt;Books&gt; list = bookService.queryAllBook();</span><br><span class="line">       model.addAttribute(<span class="string">&quot;list&quot;</span>, list);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;allBook&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写首页 <strong>index.jsp</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">   &lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">       a &#123;</span><br><span class="line">           text-decoration: none;</span><br><span class="line">           color: black;</span><br><span class="line">           font-size: 18px;</span><br><span class="line">      &#125;</span><br><span class="line">       h3 &#123;</span><br><span class="line">           width: 180px;</span><br><span class="line">           height: 38px;</span><br><span class="line">           margin: 100px auto;</span><br><span class="line">           text-align: center;</span><br><span class="line">           line-height: 38px;</span><br><span class="line">           background: deepskyblue;</span><br><span class="line">           border-radius: 4px;</span><br><span class="line">      &#125;</span><br><span class="line">   &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;</span><br><span class="line">   &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/allBook&quot;</span>&gt;点击进入列表页&lt;/a&gt;</span><br><span class="line">&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>书籍列表页面 <strong>allbook.jsp</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;书籍列表&lt;/title&gt;</span><br><span class="line">   &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">   &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">   &lt;link href=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">               &lt;h1&gt;</span><br><span class="line">                   &lt;small&gt;书籍列表 —— 显示所有书籍&lt;/small&gt;</span><br><span class="line">               &lt;/h1&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-4 column&quot;</span>&gt;</span><br><span class="line">           &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn btn-primary&quot;</span> href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/toAddBook&quot;</span>&gt;新增&lt;/a&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">           &lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;table table-hover table-striped&quot;</span>&gt;</span><br><span class="line">               &lt;thead&gt;</span><br><span class="line">               &lt;tr&gt;</span><br><span class="line">                   &lt;th&gt;书籍编号&lt;/th&gt;</span><br><span class="line">                   &lt;th&gt;书籍名字&lt;/th&gt;</span><br><span class="line">                   &lt;th&gt;书籍数量&lt;/th&gt;</span><br><span class="line">                   &lt;th&gt;书籍详情&lt;/th&gt;</span><br><span class="line">                   &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">               &lt;/tr&gt;</span><br><span class="line">               &lt;/thead&gt;</span><br><span class="line"></span><br><span class="line">               &lt;tbody&gt;</span><br><span class="line">               &lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;book&quot;</span> items=<span class="string">&quot;$&#123;requestScope.get(&#x27;list&#x27;)&#125;&quot;</span>&gt;</span><br><span class="line">                   &lt;tr&gt;</span><br><span class="line">                       &lt;td&gt;$&#123;book.getBookID()&#125;&lt;/td&gt;</span><br><span class="line">                       &lt;td&gt;$&#123;book.getBookName()&#125;&lt;/td&gt;</span><br><span class="line">                       &lt;td&gt;$&#123;book.getBookCounts()&#125;&lt;/td&gt;</span><br><span class="line">                       &lt;td&gt;$&#123;book.getDetail()&#125;&lt;/td&gt;</span><br><span class="line">                       &lt;td&gt;</span><br><span class="line">                           &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/toUpdateBook?id=$&#123;book.getBookID()&#125;&quot;</span>&gt;更改&lt;/a&gt; |</span><br><span class="line">                           &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/del/$&#123;book.getBookID()&#125;&quot;</span>&gt;删除&lt;/a&gt;</span><br><span class="line">                       &lt;/td&gt;</span><br><span class="line">                   &lt;/tr&gt;</span><br><span class="line">               &lt;/c:forEach&gt;</span><br><span class="line">               &lt;/tbody&gt;</span><br><span class="line">           &lt;/table&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>BookController 类编写 ， 方法二：添加书籍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toAddBook&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toAddPaper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;addBook&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/addBook&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addPaper</span><span class="params">(Books books)</span> </span>&#123;</span><br><span class="line">   System.out.println(books);</span><br><span class="line">   bookService.addBook(books);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBook&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>添加书籍页面：<strong>addBook.jsp</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;新增书籍&lt;/title&gt;</span><br><span class="line">   &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">   &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">   &lt;link href=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">               &lt;h1&gt;</span><br><span class="line">                   &lt;small&gt;新增书籍&lt;/small&gt;</span><br><span class="line">               &lt;/h1&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/addBook&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">      书籍名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookName&quot;</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">      书籍数量：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookCounts&quot;</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">      书籍详情：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;detail&quot;</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">       &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;添加&quot;</span>&gt;</span><br><span class="line">   &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>BookController 类编写 ， 方法三：修改书籍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toUpdateBook&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpdateBook</span><span class="params">(Model model, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">   Books books = bookService.queryBookById(id);</span><br><span class="line">   System.out.println(books);</span><br><span class="line">   model.addAttribute(<span class="string">&quot;book&quot;</span>,books );</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;updateBook&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/updateBook&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateBook</span><span class="params">(Model model, Books book)</span> </span>&#123;</span><br><span class="line">   System.out.println(book);</span><br><span class="line">   bookService.updateBook(book);</span><br><span class="line">   Books books = bookService.queryBookById(book.getBookID());</span><br><span class="line">   model.addAttribute(<span class="string">&quot;books&quot;</span>, books);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBook&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>修改书籍页面  <strong>updateBook.jsp</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;修改信息&lt;/title&gt;</span><br><span class="line">   &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">   &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">   &lt;link href=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">               &lt;h1&gt;</span><br><span class="line">                   &lt;small&gt;修改信息&lt;/small&gt;</span><br><span class="line">               &lt;/h1&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/updateBook&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">       &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;bookID&quot;</span> value=<span class="string">&quot;$&#123;book.getBookID()&#125;&quot;</span>/&gt;</span><br><span class="line">      书籍名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookName&quot;</span> value=<span class="string">&quot;$&#123;book.getBookName()&#125;&quot;</span>/&gt;</span><br><span class="line">      书籍数量：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookCounts&quot;</span> value=<span class="string">&quot;$&#123;book.getBookCounts()&#125;&quot;</span>/&gt;</span><br><span class="line">      书籍详情：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;detail&quot;</span> value=<span class="string">&quot;$&#123;book.getDetail() &#125;&quot;</span>/&gt;</span><br><span class="line">       &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">   &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>BookController 类编写 ， 方法四：删除书籍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/del/&#123;bookId&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteBook</span><span class="params">(<span class="meta">@PathVariable(&quot;bookId&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">   bookService.deleteBookById(id);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBook&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>配置Tomcat，进行运行！</strong></p>
</li>
</ol>
<h2 id="项目结构图"><a href="#项目结构图" class="headerlink" title="项目结构图"></a><strong>项目结构图</strong></h2><p><img data-src="1613995779183.png" alt="1613995779183"></p>
<p><img data-src="1613995792776.png" alt="1613995792776"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>先写dao层的业务，然后controller层去调用，接着转发到视图层。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Mybatis</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>最新HEXO博客NEXT主题隐藏文章方法</title>
    <url>/posts/27190/</url>
    <content><![CDATA[<p>其实方法很简单，打开主题首页对应的文件，添加一个判断即可</p>
<p>打开文件 <code>\themes\next\layout\index.njk</code>文件，大概在11行把</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123; partial(&#x27;_macro/post.njk&#x27;, &#123;post: post, is_index: true&#125;) &#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>替换为以下代码即可 <span id="more"></span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%- if post.hide != true %&#125;</span><br><span class="line">	&#123;&#123; partial(&#x27;_macro/post.njk&#x27;, &#123;post: post, is_index: true&#125;) &#125;&#125;</span><br><span class="line">&#123;%- endif %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如图</p>
<p><img data-src="2020-11-21203459.png" alt="代码页截图"></p>
<p>然后在post文章头中加入 <code>hide:true</code>即可实现首页文章隐藏，true为隐藏false或者不写则为显示</p>
<p>建议直接在 <code>/scaffolds/post.md</code>中直接添加 <code>hide:false</code>，即可实现新建文章自动添加</p>
<p>在分类或者标签中实现隐藏也是同理</p>
]]></content>
      <categories>
        <category>常用技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>node</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>瞧？这是啥？哈哈</title>
    <url>/posts/35134/</url>
    <content><![CDATA[<p>来源百度百科： 属蚌科。壳内面的铰齿板具有发达的铰齿，但有的种类并不具备铰齿。贝壳内面具有亮丽的珍珠光泽，壳皮甚</p>
<blockquote>
<p>来源百度百科： 属蚌科。壳内面的铰齿板具有发达的铰齿，但有的种类并不具备铰齿。贝壳内面具有亮丽的珍珠光泽，壳皮甚厚，壳顶区通常有雕刻存在</p>
</blockquote>
<span id="more"></span>

<p>别的废话不多说，上图<br><img data-src="IMG_20190216_104639.jpg" alt="田蚌1" title="田蚌"><br><img data-src="IMG_20190216_095835.jpg" alt="田蚌2" title="田蚌"><br><img data-src="IMG_20190216_100528.jpg" alt="田蚌3" title="田蚌"><br><img data-src="IMG_20190216_100535.jpg" alt="田蚌4" title="田蚌"><br><img data-src="IMG_20190216_101617.jpg" alt="田蚌5" title="田蚌"></p>
]]></content>
      <categories>
        <category>闲言碎语</category>
      </categories>
      <tags>
        <tag>蚌壳</tag>
        <tag>田蚌</tag>
      </tags>
  </entry>
  <entry>
    <title>本站主题安装和配置详情</title>
    <url>/posts/7434/</url>
    <content><![CDATA[<h1 id="本站主题安装和配置详情"><a href="#本站主题安装和配置详情" class="headerlink" title="本站主题安装和配置详情"></a>本站主题安装和配置详情</h1><p>本站主题是一款单栏响应式的[Hexo](<a href="https://hexo.io)主题;基于/">https://hexo.io)主题；基于</a> Hexo 3.0+ 制作，兼容移动端浏览；主题的代码托管在GitHub上</p>
<span id="more"></span>

<p><img data-src="1.jpg" alt="本站主题"></p>
<h3 id="一-主题简介"><a href="#一-主题简介" class="headerlink" title="一. 主题简介"></a>一. 主题简介</h3><p>  本站主题是一款单栏响应式的<a href="https://hexo.io/">Hexo</a>主题；基于 Hexo 3.0+ 制作，兼容移动端浏览；主题的代码托管在<a href="https://github.com/WongMinHo/hexo-theme-miho">GitHub</a>上，<br>欢迎 Star 和 Fork；如遇到问题或发表建议，可以提<a href="https://github.com/WongMinHo/hexo-theme-miho/issues">Issues</a>，也可以在博客中留言给我，另外,喜欢的话不妨给个 Star。</p>
<h3 id="二-安装"><a href="#二-安装" class="headerlink" title="二. 安装"></a>二. 安装</h3><h4 id="2-1-安装主题"><a href="#2-1-安装主题" class="headerlink" title="2.1 安装主题"></a>2.1 安装主题</h4><p><code>$ git clone https://github.com/WongMinHo/hexo-theme-miho.git themes/miho</code></p>
<p>MiHo 主题需要 Hexo 3.0 或以上版本，请先升级。</p>
<h4 id="2-2-更新"><a href="#2-2-更新" class="headerlink" title="2.2 更新"></a>2.2 更新</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd themes/miho</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>

<h4 id="2-3-依赖安装"><a href="#2-3-依赖安装" class="headerlink" title="2.3 依赖安装"></a>2.3 依赖安装</h4><p>如下依赖如果已经安装，请看配置介绍。</p>
<h5 id="Json-content"><a href="#Json-content" class="headerlink" title="Json-content"></a>Json-content</h5><p>生成站点文章静态数据，用于站内搜索。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-json-content --save</span><br></pre></td></tr></table></figure>

<h3 id="三-站点配置"><a href="#三-站点配置" class="headerlink" title="三. 站点配置"></a>三. 站点配置</h3><p>站点配置文件 <code>_config.yml</code>在 hexo 根目录下。</p>
<p>####3.1 启用主题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: miho</span><br></pre></td></tr></table></figure>

<h4 id="3-2-网站基本配置"><a href="#3-2-网站基本配置" class="headerlink" title="3.2 网站基本配置"></a>3.2 网站基本配置</h4><p>以下配置是站点的全局配置，更多配置，请<a href="https://hexo.io/zh-cn/docs/configuration.html">查看</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">title: Xiaobai&#x27;s Blog</span><br><span class="line">subtitle: 网站副标题</span><br><span class="line">description: 专注 WEB 开发的技术博客</span><br><span class="line">author: Xiaobai</span><br><span class="line">language: 网站使用的语言</span><br><span class="line">timezone: 网站时区</span><br></pre></td></tr></table></figure>

<h4 id="3-3-jsonContent-配置"><a href="#3-3-jsonContent-配置" class="headerlink" title="3.3 jsonContent 配置"></a>3.3 jsonContent 配置</h4><p>详细的配置请查看<a href="https://github.com/alexbruno/hexo-generator-json-content">hexo-generator-json-content</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jsonContent:</span><br><span class="line">  meta: false</span><br><span class="line">  pages: false</span><br><span class="line">  posts:</span><br><span class="line">    title: true</span><br><span class="line">    date: true</span><br><span class="line">    path: true</span><br><span class="line">    text: false</span><br><span class="line">    raw: false</span><br><span class="line">    content: false</span><br><span class="line">    slug: false</span><br><span class="line">    updated: false</span><br><span class="line">    comments: false</span><br><span class="line">    link: false</span><br><span class="line">    permalink: false</span><br><span class="line">    excerpt: false</span><br><span class="line">    categories: false</span><br><span class="line">    tags: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="四-主题配置"><a href="#四-主题配置" class="headerlink" title="四. 主题配置"></a>四. 主题配置</h3><p>编辑主题配置文件，<code>themes/miho/_config.yml</code>。</p>
<h4 id="4-1-属性"><a href="#4-1-属性" class="headerlink" title="4.1 属性"></a>4.1 属性</h4><p>下面将介绍几个比较重要的配置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># hexo-theme-miho</span><br><span class="line"># https://github.com/wongminho/hexo-theme-miho</span><br><span class="line"></span><br><span class="line"># Favicon of your site | 网站icon</span><br><span class="line">favicon: /favicon.ico</span><br><span class="line"></span><br><span class="line"># Header</span><br><span class="line"></span><br><span class="line"># Keywords of your site | 网站关键字</span><br><span class="line">keywords: Xiaobai,Xiaobai&#x27;s Blog</span><br><span class="line"># Head headline | 头部标题</span><br><span class="line">header_title: Xiaobai&#x27;s Blog</span><br><span class="line"># Head description | 头部描述</span><br><span class="line">header_description: 一个专注 WEB 开发的技术博客</span><br><span class="line"># Link to your logo | logo地址</span><br><span class="line">logo: images/logo.png</span><br><span class="line"># Link to your banner_img | 首页banner图地址</span><br><span class="line">banner_img: images/banner.jpg</span><br><span class="line"># Menu setting | 菜单设置</span><br><span class="line">#  name:                  Font Awesome icon | Font Awesome 图标</span><br><span class="line">#    title: Home          Title | 标题</span><br><span class="line">#    url: //19981115.xyz    Url, absolute or relative path | 链接，绝对或相对路径</span><br><span class="line">#    target: true         Whether to jump out | 是否跳出</span><br><span class="line">menu:</span><br><span class="line">  home:</span><br><span class="line">    title: Home</span><br><span class="line">    url: /</span><br><span class="line">    target: false</span><br><span class="line">  archive:</span><br><span class="line">    title: Archives</span><br><span class="line">    url: /archives</span><br><span class="line">    target: false</span><br><span class="line">  user:</span><br><span class="line">    title: About</span><br><span class="line">    url: /about</span><br><span class="line">    target: false</span><br><span class="line"># Social setting, use to display social information | 社交设置，用来展示社交信息</span><br><span class="line">#  name:                  Font Awesome icon | Font Awesome 图标</span><br><span class="line">#    title: Home          Icon title | 图标标题</span><br><span class="line">#    url: //19981115.xyz    Url, absolute or relative path | 链接，绝对或相对路径</span><br><span class="line">#    target: true         Whether to jump out | 是否跳出</span><br><span class="line">social:</span><br><span class="line">  home:</span><br><span class="line">    title: MinHow</span><br><span class="line">    url: //19981115.xyz</span><br><span class="line">    target: true</span><br><span class="line">  github:</span><br><span class="line">    title: Github</span><br><span class="line">    url: //github.com/xiaobai-git</span><br><span class="line">    target: true</span><br><span class="line">  weibo:</span><br><span class="line">    title: Weibo</span><br><span class="line">    url: //weibo.com/lovebaixuan</span><br><span class="line">    target: true</span><br><span class="line">  twitter:</span><br><span class="line">    title: Twitter</span><br><span class="line">    url: //twitter.com/</span><br><span class="line">    target: true</span><br><span class="line">  #qq:</span><br><span class="line">  #weixin:</span><br><span class="line">  #snapchat:</span><br><span class="line">  #telegram:</span><br><span class="line">  #mail:</span><br><span class="line">  #facebook:</span><br><span class="line">  #google:</span><br><span class="line">  #linkedin:</span><br><span class="line"></span><br><span class="line"># Content</span><br><span class="line"></span><br><span class="line"># Excerpt length | 摘录长度</span><br><span class="line">excerpt_length: 190</span><br><span class="line"># Excerpt link | 摘录链接</span><br><span class="line">excerpt_link: more&gt;&gt;</span><br><span class="line"># New window open link | 新窗口打开文章</span><br><span class="line">open_new_link: false</span><br><span class="line"># Article default cover picture，size：350*150 | 文章默认封面图，尺寸：350*150</span><br><span class="line">cover_picture: images/banner.jpg</span><br><span class="line"># Open background particles | 开启背景粒子</span><br><span class="line">open_bg_particle: true</span><br><span class="line"># Open animation in homepage and head | 开启主页及头部动画</span><br><span class="line">open_animation: true</span><br><span class="line"></span><br><span class="line"># Article</span><br><span class="line"></span><br><span class="line"># Open toc | 是否开启toc</span><br><span class="line">toc: true</span><br><span class="line"># Open share | 是否开启分享</span><br><span class="line">share: true</span><br><span class="line"></span><br><span class="line"># Style customization | 样式定制</span><br><span class="line">style:</span><br><span class="line">  # Main color tone | 主色调</span><br><span class="line">  main_color: &#x27;#0cc&#x27;</span><br><span class="line"></span><br><span class="line"># Comments | 评论</span><br><span class="line"></span><br><span class="line"># 畅言，输入appid和appkey</span><br><span class="line">changyan_appid: false</span><br><span class="line">changyan_appkey: false</span><br><span class="line"># 友言，输入id</span><br><span class="line">youyan_id: false</span><br><span class="line"># disqus</span><br><span class="line">disqus: false</span><br><span class="line"></span><br><span class="line"># Analytics | 分析</span><br><span class="line"># 站长分析，输入站点id</span><br><span class="line">cnzz_analytics: false</span><br><span class="line"># 百度分析，输入key值</span><br><span class="line">baidu_analytics: false</span><br><span class="line"># google analytics | google分析</span><br><span class="line">google_analytics: false</span><br><span class="line"></span><br><span class="line"># Footer</span><br><span class="line"></span><br><span class="line"># Access statistics | “不蒜子”访问量统计</span><br><span class="line">access_counter:</span><br><span class="line">  on: true</span><br><span class="line">  site_uv: 总访客数：</span><br><span class="line">  site_pv: 总访问量：</span><br><span class="line"></span><br><span class="line"># Copyright Information | 版权信息</span><br><span class="line">copyright: 2017 MinHow</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-2-文章封面图"><a href="#4-2-文章封面图" class="headerlink" title="4.2 文章封面图"></a>4.2 文章封面图</h4><p>文章默认封面图，尺寸：350*150，当文章基本配置没有 <code>cover_picture</code>时才显示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cover_picture: images/banner.jpg</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-3-开启背景粒子"><a href="#4-3-开启背景粒子" class="headerlink" title="4.3 开启背景粒子"></a>4.3 开启背景粒子</h4><p>是否开启背景粒子。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">open_bg_particle: true</span><br></pre></td></tr></table></figure>

<h4 id="4-4-开启主页及头部动画"><a href="#4-4-开启主页及头部动画" class="headerlink" title="4.4 开启主页及头部动画"></a>4.4 开启主页及头部动画</h4><p>是否开启主页及头部动画。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">open_animation: true</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-5-评论"><a href="#4-5-评论" class="headerlink" title="4.5 评论"></a>4.5 评论</h4><p>支持畅言、disqus。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 畅言，输入appid和appkey</span><br><span class="line">changyan_appid: false</span><br><span class="line">changyan_appkey: false</span><br><span class="line"># 友言，输入id</span><br><span class="line">youyan_id: false</span><br><span class="line"># disqus</span><br><span class="line">disqus: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-6-数据统计"><a href="#4-6-数据统计" class="headerlink" title="4.6 数据统计"></a>4.6 数据统计</h4><p>支持站长、百度、google 三种数据统计，正确填写配置信息即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 站长分析，输入站点id</span><br><span class="line">cnzz_analytics: false</span><br><span class="line"># 百度分析，输入key值</span><br><span class="line">baidu_analytics: false</span><br><span class="line"># google分析</span><br><span class="line">google_analytics: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-7-文章基本配置"><a href="#4-7-文章基本配置" class="headerlink" title="4.7 文章基本配置"></a>4.7 文章基本配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2017-06-18</span><br><span class="line">categories: First</span><br><span class="line">author: MinHow</span><br><span class="line">tags:</span><br><span class="line">    - First</span><br><span class="line">    - Second</span><br><span class="line">cover_picture: /images/banner.jpg</span><br><span class="line">---</span><br><span class="line"> MinHow-This is a summary</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li>需要注意<code>tags</code>和摘要的写法，不然首页不能正确显示标签和摘要；</li>
<li><code>cover_picture</code>文章封面图，不填默认显示<code>_config.yml</code>配置的图片。</li>
</ul>
<h2 id="解决博客图片问题"><a href="#解决博客图片问题" class="headerlink" title="解决博客图片问题"></a>解决博客图片问题</h2><h1 id="hexo-asset-image"><a href="#hexo-asset-image" class="headerlink" title="hexo-asset-image"></a>hexo-asset-image</h1><p>Give asset image in hexo a absolutely path automatically</p>
<h1 id="Usege"><a href="#Usege" class="headerlink" title="Usege"></a>Usege</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MacGesture2-Publish</span><br><span class="line">├── apppicker.jpg</span><br><span class="line">├── logo.jpg</span><br><span class="line">└── rules.jpg</span><br><span class="line">MacGesture2-Publish.md</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Make sure <code>post_asset_folder: true</code> in your <code>_config.yml</code>.</p>
<p>Just use <code>![logo](logo.jpg)</code> to insert <code>logo.jpg</code>.</p>
]]></content>
      <categories>
        <category>常用技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客</tag>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>纯代码屏蔽WordPress后台无用项让你的后台更加简洁</title>
    <url>/posts/32702/</url>
    <content><![CDATA[<p>WordPress 的功能十分强大，但是有些功能模块我们平时是用不到的，所以说一下如何使用代码将它们屏蔽掉,根据自己的需要，将下面代码添加到当前主题</p>
<span id="more"></span>

<p>WordPress 的功能十分强大，但是有些功能模块我们平时是用不到的，所以说一下如何使用代码将它们屏蔽掉<br>根据自己的需要，将下面代码添加到当前主题 <code>functions.php</code>或 <code>functions-diy.php</code>文件中<br>推荐在原 <code>functions.php</code>加入一个自定义文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">require get_template_directory() . &#x27;/functions-diy.php&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将我们自定义的代码加入到其中，无须担心更新主题时 <code>functions.php</code>被覆盖<br>那么我们从上至下开始清理吧</p>
<h3 id="顶部工具栏"><a href="#顶部工具栏" class="headerlink" title="顶部工具栏"></a>顶部工具栏</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function my_edit_toolbar($wp_toolbar) &#123;</span><br><span class="line">   $wp_toolbar-&gt;remove_node(&#x27;wp-logo&#x27;); // 去掉 WordPress LOGO</span><br><span class="line">   $wp_toolbar-&gt;remove_node(&#x27;site-name&#x27;); // 去掉网站名称</span><br><span class="line">   $wp_toolbar-&gt;remove_node(&#x27;updates&#x27;); // 去掉更新提醒</span><br><span class="line">   $wp_toolbar-&gt;remove_node(&#x27;comments&#x27;); // 去掉评论提醒</span><br><span class="line">   $wp_toolbar-&gt;remove_node(&#x27;new-content&#x27;); // 去掉新建文件</span><br><span class="line">   $wp_toolbar-&gt;remove_node(&#x27;top-secondary&#x27;); // 用户信息</span><br><span class="line">&#125;</span><br><span class="line">add_action(&#x27;admin_bar_menu&#x27;, &#x27;my_edit_toolbar&#x27;, 999);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="左侧顶级菜单"><a href="#左侧顶级菜单" class="headerlink" title="左侧顶级菜单"></a>左侧顶级菜单</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function remove_menus() &#123;</span><br><span class="line">   global $menu;</span><br><span class="line">   $restricted = array(</span><br><span class="line">      __(&#x27;Dashboard&#x27;), // 仪表盘</span><br><span class="line">      __(&#x27;Posts&#x27;), // 文章</span><br><span class="line">      __(&#x27;Media&#x27;), // 媒体</span><br><span class="line">      __(&#x27;Links&#x27;), // 链接</span><br><span class="line">      __(&#x27;Pages&#x27;), // 页面</span><br><span class="line">      __(&#x27;Appearance&#x27;), // 外观</span><br><span class="line">      __(&#x27;Tools&#x27;), // 工具</span><br><span class="line">      __(&#x27;Users&#x27;), // 用户</span><br><span class="line">      __(&#x27;Settings&#x27;), // 设置</span><br><span class="line">      __(&#x27;Comments&#x27;), // 评论</span><br><span class="line">      __(&#x27;Plugins&#x27;) // 插件</span><br><span class="line">   );</span><br><span class="line">   end ($menu);</span><br><span class="line">   while (prev($menu))&#123;</span><br><span class="line">      $value = explode(&#x27; &#x27;,$menu[key($menu)][0]);</span><br><span class="line">      if(strpos($value[0], &#x27;&lt;&#x27;) === FALSE) &#123;</span><br><span class="line">         if(in_array($value[0] != NULL ? $value[0]:&quot;&quot; , $restricted))&#123;</span><br><span class="line">            unset($menu[key($menu)]);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">         $value2 = explode(&#x27;&lt;&#x27;, $value[0]);</span><br><span class="line">         if(in_array($value2[0] != NULL ? $value2[0]:&quot;&quot; , $restricted))&#123;</span><br><span class="line">            unset($menu[key($menu)]);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 是后台的情况时</span><br><span class="line">if (is_admin())&#123;</span><br><span class="line">   add_action(&#x27;admin_menu&#x27;, &#x27;remove_menus&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果你只想删除用户和工具菜单，你只需改写以上代码第 <code>3</code> 行的 <code>$restricted</code>数组修改为如下代码即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$restricted = array(</span><br><span class="line">   __(&#x27;Tools&#x27;),</span><br><span class="line">   __(&#x27;Users&#x27;),</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="左侧子菜单"><a href="#左侧子菜单" class="headerlink" title="左侧子菜单"></a>左侧子菜单</h3><p>如果只想删除某个顶级菜单下的子菜单的话，可以这么写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function remove_submenu() &#123;</span><br><span class="line">   // 删除仪表盘下的首页</span><br><span class="line">   remove_submenu_page(&#x27;index.php&#x27;, &#x27;index.php&#x27;);</span><br><span class="line">   // 删除仪表盘下的更新</span><br><span class="line">   remove_submenu_page(&#x27;index.php&#x27;, &#x27;update-core.php&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">if (is_admin())&#123;</span><br><span class="line">   //删除子菜单</span><br><span class="line">   add_action(&#x27;admin_init&#x27;,&#x27;remove_submenu&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>具体的缩略名如何获取呢？这里举例说明：<br>我们点击仪表盘时 url 为 <code>/wp-admin/index.php</code>，点击首页时也是，点击更新时为 <code>/wp-admin/update-core.php</code>，其他的依次类推～<br>只需要获取顶级菜单和子菜单相应的缩略名，然后在 <code>remove_submenu()</code>函数内添加 <code>remove_submenu_page()</code>函数即可</p>
<h3 id="仪表盘无用模块"><a href="#仪表盘无用模块" class="headerlink" title="仪表盘无用模块"></a>仪表盘无用模块</h3><p>这个可以仪表盘右上角的显示选项中进行手动修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function example_remove_dashboard_widgets() &#123;</span><br><span class="line">   global $wp_meta_boxes;</span><br><span class="line">   // 以下这一行代码将删除 &quot;快速发布&quot; 模块</span><br><span class="line">   unset($wp_meta_boxes[&#x27;dashboard&#x27;][&#x27;side&#x27;][&#x27;core&#x27;][&#x27;dashboard_quick_press&#x27;]);</span><br><span class="line">   // 以下这一行代码将删除 &quot;引入链接&quot; 模块</span><br><span class="line">   unset($wp_meta_boxes[&#x27;dashboard&#x27;][&#x27;normal&#x27;][&#x27;core&#x27;][&#x27;dashboard_incoming_links&#x27;]);</span><br><span class="line">   // 以下这一行代码将删除 &quot;插件&quot; 模块</span><br><span class="line">   unset($wp_meta_boxes[&#x27;dashboard&#x27;][&#x27;normal&#x27;][&#x27;core&#x27;][&#x27;dashboard_plugins&#x27;]);</span><br><span class="line">   // 以下这一行代码将删除 &quot;近期评论&quot; 模块</span><br><span class="line">   unset($wp_meta_boxes[&#x27;dashboard&#x27;][&#x27;normal&#x27;][&#x27;core&#x27;][&#x27;dashboard_recent_comments&#x27;]);</span><br><span class="line">   // 以下这一行代码将删除 &quot;近期草稿&quot; 模块</span><br><span class="line">   unset($wp_meta_boxes[&#x27;dashboard&#x27;][&#x27;side&#x27;][&#x27;core&#x27;][&#x27;dashboard_recent_drafts&#x27;]);</span><br><span class="line">   // 以下这一行代码将删除 &quot;WordPress 开发日志&quot; 模块</span><br><span class="line">   unset($wp_meta_boxes[&#x27;dashboard&#x27;][&#x27;side&#x27;][&#x27;core&#x27;][&#x27;dashboard_primary&#x27;]);</span><br><span class="line">   // 以下这一行代码将删除 &quot;其它 WordPress 新闻&quot; 模块</span><br><span class="line">   unset($wp_meta_boxes[&#x27;dashboard&#x27;][&#x27;side&#x27;][&#x27;core&#x27;][&#x27;dashboard_secondary&#x27;]);</span><br><span class="line">   // 以下这一行代码将删除 &quot;概况&quot; 模块</span><br><span class="line">   unset($wp_meta_boxes[&#x27;dashboard&#x27;][&#x27;normal&#x27;][&#x27;core&#x27;][&#x27;dashboard_right_now&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line">add_action(&#x27;wp_dashboard_setup&#x27;, &#x27;example_remove_dashboard_widgets&#x27; );</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="显示选项和帮助选项卡"><a href="#显示选项和帮助选项卡" class="headerlink" title="显示选项和帮助选项卡"></a>显示选项和帮助选项卡</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function remove_screen_options()&#123; return false;&#125;</span><br><span class="line">add_filter(&#x27;screen_options_show_screen&#x27;, &#x27;remove_screen_options&#x27;);</span><br><span class="line">add_filter( &#x27;contextual_help&#x27;, &#x27;syz_remove_help&#x27;, 999, 3 );</span><br><span class="line">function syz_remove_help($old_help, $screen_id, $screen)&#123;</span><br><span class="line">   $screen-&gt;remove_help_tabs();</span><br><span class="line">   return $old_help;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="页脚版本信息"><a href="#页脚版本信息" class="headerlink" title="页脚版本信息"></a>页脚版本信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function change_footer_admin () &#123;return &#x27;&#x27;;&#125;</span><br><span class="line">add_filter(&#x27;admin_footer_text&#x27;, &#x27;change_footer_admin&#x27;, 9999);</span><br><span class="line">function change_footer_version() &#123;return &#x27;&#x27;;&#125;</span><br><span class="line">add_filter( &#x27;update_footer&#x27;, &#x27;change_footer_version&#x27;, 9999);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><p><img data-src="wp-admin.png" alt="后台页面" title="后台页面"></p>
]]></content>
      <categories>
        <category>常用技术</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>wordpress</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>要开始写笔记咯</title>
    <url>/posts/58320/</url>
    <content><![CDATA[<p>今天使用hexo和github搭建了一个无成本的博客，在搭建的时候遇到了很多坑，但最终还是解决了，平时不怎么用git命令所以还是有点不熟练<br>今天使用 hexo 和 github 搭建了一个无成本的博客，在搭建的时候遇到了很多坑，但最终还是解决了，平时不怎么用 git 命令所以还是有点不熟练，推荐看一下 git 基础，链接我就不贴出来了，过几天可能会换域名，所以不贴了，<code>&lt;!--more--&gt;</code>可能过久会更新本文章。哈哈<br>这个站点就是我发布日记什么，技术性的文章不在这发<br>如果想看技术文章可以关注 <a href="https://www.xiaobaibk.com/" title="www.xaiobaibk.com">www.xiaobaibk.com</a>这是我的一个站点</p>
<p>别的也不知道要说些什么了，哈哈<br>不说了，拜拜</p>
]]></content>
      <categories>
        <category>闲言碎语</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一下今天的糗事</title>
    <url>/posts/476/</url>
    <content><![CDATA[<p>本来今天在弄墨江信息网【一个地方的网站】，本来差不多要好了，可是我手残把 文件不小心删除了，而且删除的是主站的文件（diy 文件【discuz 系统做的分类信息网】）<span id="more"></span></p>
<blockquote>
<p>唉，今天糗了，好烦恼！<br><img data-src="1.PNG" alt="捕获" title="捕获1"></p>
</blockquote>
<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>本来今天在弄墨江信息网【一个地方的网站】，本来差不多要好了，可是我手残把 文件不小心删除了，而且删除的是主站的文件（diy文件【discuz系统做的分类信息网】）<br>真是太手残了，该打</p>
<h3 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h3><p>正在下载阿里云oss上的备份文件……<br>下载好了<br>但是并不可以得到解决<br>看来只能从数据库入手了</p>
<p>然后就恢复_common_block、_common_diy_data与_common_template_block数据表<br>以及data下diy的所有文件<br>做了以上步骤差不多已经好了，只是推荐用户模块丢失了，没办法只能自己重新写代码了<br>不过不错；</p>
<p><img data-src="2.PNG" alt="捕" title="捕获"></p>
<h3 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h3><p>DZ系统的模块数据不可以随便清理，有备份的不影响，现在我也要做一份备份了</p>
<p>说起来比着还糟糕，懒得打字，各位晚安！</p>
]]></content>
      <categories>
        <category>闲言碎语</category>
      </categories>
      <tags>
        <tag>网站</tag>
        <tag>失误</tag>
        <tag>文件</tag>
      </tags>
  </entry>
  <entry>
    <title>学习SpringBoot合并笔记-狂神</title>
    <url>/posts/21119/</url>
    <content><![CDATA[<h1 id="一"><a href="#一" class="headerlink" title="(一)"></a>(一)</h1><h2 id="1、SpringBoot简介"><a href="#1、SpringBoot简介" class="headerlink" title="1、SpringBoot简介"></a>1、SpringBoot简介</h2><h3 id="回顾什么是Spring"><a href="#回顾什么是Spring" class="headerlink" title="回顾什么是Spring"></a>回顾什么是Spring</h3><ul>
<li>Spring是一个开源框架，2003 年兴起的一个轻量级的Java 开发框架，作者：Rod Johnson  。</li>
<li><strong>Spring是为了解决企业级应用开发的复杂性而创建的，简化开发。</strong></li>
</ul>
<h3 id="Spring是如何简化Java开发的"><a href="#Spring是如何简化Java开发的" class="headerlink" title="Spring是如何简化Java开发的"></a>Spring是如何简化Java开发的</h3><p>为了降低Java开发的复杂性，Spring采用了以下4种关键策略：</p>
<p>1、基于POJO的轻量级和最小侵入性编程，所有东西都是bean；</p>
<p>2、通过IOC，依赖注入（DI）和面向接口实现松耦合；</p>
<p>3、基于切面（AOP）和惯例进行声明式编程；</p>
<p>4、通过切面和模版减少样式代码，RedisTemplate，xxxTemplate；</p>
<span id="more"></span>

<h3 id="什么是SpringBoot"><a href="#什么是SpringBoot" class="headerlink" title="什么是SpringBoot"></a>什么是SpringBoot</h3><ul>
<li>学过javaweb的同学就知道，开发一个web应用，从最初开始接触Servlet结合Tomcat, 跑出一个Hello Wolrld程序，是要经历特别多的步骤；后来就用了框架Struts，再后来是SpringMVC，到了现在的SpringBoot，过一两年又会有其他web框架出现；你们有经历过框架不断的演进，然后自己开发项目所有的技术也在不断的变化、改造吗？建议都可以去经历一遍；</li>
<li>言归正传，什么是SpringBoot呢，就是一个javaweb的开发框架，和SpringMVC类似，对比其他javaweb框架的好处，官方说是简化开发，约定大于配置，  you can “just run”，能迅速的开发web应用，几行代码开发一个http接口。</li>
<li>所有的技术框架的发展似乎都遵循了一条主线规律：从一个复杂应用场景 衍生 一种规范框架，人们只需要进行各种配置而不需要自己去实现它，这时候强大的配置功能成了优点；发展到一定程度之后，人们根据实际生产应用情况，选取其中实用功能和设计精华，重构出一些轻量级的框架；之后为了提高开发效率，嫌弃原先的各类配置过于麻烦，于是开始提倡“约定大于配置”，进而衍生出一些一站式的解决方案。</li>
<li>是的这就是Java企业级应用-&gt;J2EE-&gt;spring-&gt;springboot的过程。</li>
<li>随着 Spring 不断的发展，涉及的领域越来越多，项目整合开发需要配合各种各样的文件，慢慢变得不那么易用简单，违背了最初的理念，甚至人称配置地狱。Spring Boot 正是在这样的一个背景下被抽象出来的开发框架，目的为了让大家更容易的使用 Spring 、更容易的集成各种常用的中间件、开源软件；</li>
<li>Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。也就是说，它并不是用来替代 Spring 的解决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具。Spring Boot 以<strong>约定大于配置的核心思想</strong>，默认帮我们进行了很多设置，多数 Spring Boot 应用只需要很少的 Spring 配置。同时它集成了大量常用的第三方库配置（例如 Redis、MongoDB、Jpa、RabbitMQ、Quartz 等等），Spring Boot 应用中这些第三方库几乎可以零配置的开箱即用。</li>
<li>简单来说就是SpringBoot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，spring boot整合了所有的框架 。</li>
<li>Spring Boot 出生名门，从一开始就站在一个比较高的起点，又经过这几年的发展，生态足够完善，Spring Boot 已经当之无愧成为 Java 领域最热门的技术。</li>
</ul>
<p><strong>Spring Boot的主要优点：</strong></p>
<ul>
<li>为所有Spring开发者更快的入门</li>
<li><strong>开箱即用</strong>，提供各种默认配置来简化项目配置</li>
<li>内嵌式容器简化Web项目</li>
<li>没有冗余代码生成和XML配置的要求</li>
</ul>
<p>真的很爽，我们快速去体验开发个接口的感觉吧！</p>
<h2 id="2、第一个SpringBoot程序"><a href="#2、第一个SpringBoot程序" class="headerlink" title="2、第一个SpringBoot程序"></a>2、第一个SpringBoot程序</h2><h3 id="2-1、准备工作"><a href="#2-1、准备工作" class="headerlink" title="2.1、准备工作"></a>2.1、准备工作</h3><p>我们将学习如何快速的创建一个Spring Boot应用，并且实现一个简单的Http请求处理。通过这个例子对Spring Boot有一个初步的了解，并体验其结构简单、开发快速的特性。</p>
<p>我的环境准备：</p>
<ul>
<li>jdk1.8</li>
<li>Maven-3.6.1</li>
<li>SpringBoot 最新版</li>
<li>IDEA</li>
</ul>
<h3 id="2-2、创建基础项目说明"><a href="#2-2、创建基础项目说明" class="headerlink" title="2.2、创建基础项目说明"></a>2.2、创建基础项目说明</h3><p>Spring官方提供了非常方便的工具让我们快速构建应用</p>
<p>Spring Initializr：<a href="https://start.spring.io/">https://start.spring.io/</a></p>
<p><strong>项目创建方式一：</strong>在官网使用Spring Initializr 的 Web页面创建项目</p>
<p>1、打开  <a href="https://start.spring.io/">https://start.spring.io/</a></p>
<p>2、填写项目信息</p>
<p>3、点击”Generate Project“按钮生成项目；下载此项目</p>
<p>4、解压项目包，并用IDEA以Maven项目导入，一路下一步即可，直到项目导入完毕。</p>
<p>5、如果是第一次使用，可能速度会比较慢，包比较多、需要耐心等待一切就绪。</p>
<p><strong>项目创建方式二：</strong>使用 IDEA 直接创建项目</p>
<p>1、创建一个新项目</p>
<p>2、选择spring initalizr ， 可以看到默认就是去官网的快速构建工具那里实现</p>
<p>3、填写项目信息</p>
<p>4、选择初始化的组件（初学勾选 Web 即可）</p>
<p>5、填写项目路径</p>
<p>6、等待项目构建成功</p>
<p><strong>项目结构分析：</strong></p>
<p>通过上面步骤完成了基础项目的创建。就会自动生成以下文件。</p>
<p>1、程序的主启动类</p>
<p>2、一个 application.properties 配置文件</p>
<p>3、一个 测试类</p>
<p>4、一个 pom.xml</p>
<h3 id="2-3、pom-xml-分析"><a href="#2-3、pom-xml-分析" class="headerlink" title="2.3、pom.xml 分析"></a>2.3、pom.xml 分析</h3><p>打开pom.xml，看看Spring Boot项目的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- web场景启动器 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web依赖：tomcat,dispatcherServlet，xml...--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring-boot-starter：所有的springboot依赖都是使用这个开头的--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- springboot单元测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 剔除依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打包插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如上所示，主要有四个部分：</p>
<ul>
<li>项目元数据：创建时候输入的Project Metadata部分，也就是Maven项目的基本元素，包括：groupId、artifactId、version、name、description等</li>
<li>parent：继承 <code>spring-boot-starter-parent</code>的依赖管理，控制版本与打包等内容</li>
<li>dependencies：项目具体依赖，这里包含了 <code>spring-boot-starter-web</code>用于实现HTTP接口（该依赖中包含了Spring MVC），官网对它的描述是：使用Spring MVC构建Web（包括RESTful）应用程序的入门者，使用Tomcat作为默认嵌入式容器。<code>spring-boot-starter-test</code>用于编写单元测试的依赖包。更多功能模块的使用将在后面逐步展开。</li>
<li>build：构建配置部分。默认使用了 <code>spring-boot-maven-plugin</code>，配合 <code>spring-boot-starter-parent</code>就可以把Spring Boot应用打包成JAR来直接运行。</li>
</ul>
<h3 id="2-4、编写一个http接口"><a href="#2-4、编写一个http接口" class="headerlink" title="2.4、编写一个http接口"></a>2.4、编写一个http接口</h3><p>1、在主程序的同级目录下，新建一个controller包，一定要在同级目录下，否则识别不到</p>
<p><img data-src="1595396526609.png" alt="1595396526609"></p>
<p>2、在包中新建一个HelloController类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、编写完毕后，从主程序启动项目，浏览器发起请求，看页面返回；控制台输出了 Tomcat 访问的端口号！</p>
<p><img data-src="1595396173505.png" alt="1595396173505"></p>
<p>简单几步，就完成了一个web接口的开发，SpringBoot就是这么简单。所以我们常用它来建立我们的微服务项目！</p>
<h3 id="2-5、将项目打成jar包，点击-maven的-package"><a href="#2-5、将项目打成jar包，点击-maven的-package" class="headerlink" title="2.5、将项目打成jar包，点击 maven的 package"></a>2.5、将项目打成jar包，点击 maven的 package</h3><ul>
<li><p>如果打包成功，则会在target目录下生成一个 jar 包</p>
<p><img data-src="1595397063721.png" alt="1595397063721"></p>
</li>
<li><p>如果遇到以上②的错误，可以配置打包时跳过项目运行测试用例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    在工作中,很多情况下我们打包是不想执行测试用例的</span></span><br><span class="line"><span class="comment">    可能是测试用例不完事,或是测试用例会影响数据库数据</span></span><br><span class="line"><span class="comment">    跳过测试用例执</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--跳过项目运行测试用例--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>打成了jar包后，就可以在任何地方运行了！OK</p>
<p><img data-src="1595397745294.png" alt="1595397745294"></p>
<p>浏览器运行结果（上图第⑤步）：</p>
<p><img data-src="1595396173505.png" alt="1595396173505"></p>
</li>
</ul>
<h2 id="3、彩蛋"><a href="#3、彩蛋" class="headerlink" title="3、彩蛋"></a><strong>3、彩蛋</strong></h2><ol>
<li><p>更改端口号</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更改项目的端口号</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br></pre></td></tr></table></figure></li>
<li><p>如何更改启动时显示的字符拼成的字母，SpringBoot呢？也就是 banner 图案；</p>
<p>只需一步：到项目下的 resources 目录下新建一个banner.txt 即可。</p>
<p>图案可以到：<a href="https://www.bootschool.net/ascii">https://www.bootschool.net/ascii</a> 这个网站生成，然后拷贝到文件中即可！</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">![1595409428560](1595409428560.png)</span><br><span class="line"></span><br><span class="line">**SpringBoot这么简单的东西背后一定有故事，我们之后去进行一波源码分析！**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># （二）</span><br><span class="line"></span><br><span class="line">## 运行原理探究</span><br><span class="line"></span><br><span class="line">我们之前写的HelloSpringBoot，到底是怎么运行的呢，Maven项目，我们一般从pom.xml文件探究起；</span><br><span class="line"></span><br><span class="line">### 1、父依赖</span><br><span class="line"></span><br><span class="line">&gt; **pom.xml**</span><br><span class="line"></span><br><span class="line">- spring-boot-dependencies：核心依赖在父工程中！</span><br><span class="line">- 我们在写或者引入一些Springboot依赖的时候，不需要指定版本，就因为有这些版本仓库</span><br><span class="line"></span><br><span class="line">1、其中它主要是依赖一个父项目，主要是管理项目的资源过滤及插件！</span><br><span class="line"></span><br><span class="line">```xml</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.3.1.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;relativePath/&gt; </span><br><span class="line">    &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure>

<p>2、点进去，发现还有一个父依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、这里才是真正管理SpringBoot应用里面所有依赖版本的地方，SpringBoot的版本控制中心；</p>
<p><strong>4、以后我们导入依赖默认是不需要写版本；但是如果导入的包没有在依赖中管理着就需要手动配置版本了；</strong></p>
<h3 id="2、启动器-spring-boot-starter"><a href="#2、启动器-spring-boot-starter" class="headerlink" title="2、启动器 spring-boot-starter"></a>2、启动器 spring-boot-starter</h3><ul>
<li><p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>        								 <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>springboot-boot-starter-xxx</strong>，说白了就是Springboot的启动场景</p>
</li>
<li><p>比如<strong>spring-boot-starter-web</strong>，他就会帮我们自动导入web的所有依赖</p>
</li>
<li><p>springboot会将所有的功能场景，都变成一个个的启动器</p>
</li>
<li><p>我们要使用什么功能，就只需要找到对应的启动器就好了 <code>start</code></p>
</li>
</ul>
<h3 id="3、主程序"><a href="#3、主程序" class="headerlink" title="3、主程序"></a>3、主程序</h3><h4 id="3-1、默认的主启动类"><a href="#3-1、默认的主启动类" class="headerlink" title="3.1、默认的主启动类"></a>3.1、默认的主启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@SpringBootApplication 来标注一个主程序类</span></span><br><span class="line"><span class="comment">//说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootApplication</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//以为是启动了一个方法，没想到启动了一个服务</span></span><br><span class="line">      SpringApplication.run(SpringbootApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是<strong>一个简单的启动类并不简单！</strong>我们来分析一下这些注解都干了什么</p>
<h4 id="3-2、注解（-SpringBootApplication）"><a href="#3-2、注解（-SpringBootApplication）" class="headerlink" title="3.2、注解（@SpringBootApplication）"></a>3.2、注解（@SpringBootApplication）</h4><ul>
<li><p>作用：标注在某个类上说明这个类是SpringBoot的主配置</p>
</li>
<li><p>SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p>
</li>
<li><p>进入这个注解：可以看到上面还有很多其他注解！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">    excludeFilters = &#123;@Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">), @Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">)&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h5><ul>
<li>这个注解在Spring中很重要 ,它对应XML配置中的元素。</li>
<li>作用：自动扫描并加载符合条件的组件或者bean ， 将这个bean定义加载到IOC容器中</li>
</ul>
<h5 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h5><ul>
<li><p>作用：<code>&lt;font color=red&gt;</code>SpringBoot的配置类 <code>&lt;/font&gt;</code>，标注在某个类上 ， 表示这是一个SpringBoot的配置类；</p>
</li>
<li><p>我们继续进去这个注解查看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 点进去得到下面的 @Component</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Configuration &#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>这里的 <strong>@Configuration</strong>，说明这是一个<code>&lt;font color=red&gt;</code>spring的配置类<code>&lt;/font&gt;</code> ，配置类就是对应Spring的xml 配置文件；</p>
</li>
<li><p><strong>@Component</strong> 这就说明，启动类本身也是<code>&lt;font color=red&gt;</code>Spring中的一个组件<code>&lt;/font&gt;</code>而已，负责启动应用！</p>
</li>
<li><p>我们回到 SpringBootApplication 注解中继续看。</p>
</li>
</ul>
<h5 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h5><ul>
<li><p><strong><code>&lt;font color=red&gt;</code>开启自动配置功能<code>&lt;/font&gt;</code></strong></p>
<ul>
<li>以前我们需要自己配置的东西，而现在SpringBoot可以自动帮我们配置 ；</li>
<li>@EnableAutoConfiguration告诉SpringBoot开启自动配置功能，这样自动配置才能生效；</li>
</ul>
<p>点进注解接续查看：</p>
</li>
<li><p><strong>@AutoConfigurationPackage ：<code>&lt;font color=red&gt;</code>自动配置包<code>&lt;/font&gt;</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;Registrar.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>@import</strong> ：Spring底层注解@import ， 给容器中导入一个组件</li>
<li><strong>Registrar.class</strong> 作用：<code>&lt;font color=red&gt;</code>自动配置包注册<code>&lt;/font&gt;</code>，将主启动类的所在包及包下面所有子包里面的所有组件扫描到Spring容器 ；</li>
<li>这个分析完了，退到上一步，继续看</li>
</ul>
</li>
<li><p><strong>@Import({AutoConfigurationImportSelector.class}) ：给容器导入组件 ；</strong></p>
<ul>
<li><p><strong>AutoConfigurationImportSelector</strong> ：<code>&lt;font color=red&gt;</code>自动配置导入选择器<code>&lt;/font&gt;</code>，那么它会导入哪些组件的选择器呢？我们点击去这个类看源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p>// 获取所有的配置<br>List<code>&lt;String&gt;</code> configurations = this.getCandidateConfigurations(annotationMetadata, attributes);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 获得候选的配置</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) &#123;</span><br><span class="line">    // 和下面的方法对应</span><br><span class="line">    //这里的getSpringFactoriesLoaderFactoryClass（）方法</span><br><span class="line">    //返回的就是我们最开始看的启动自动导入配置文件的注解类；EnableAutoConfiguration</span><br><span class="line">  List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(), this.getBeanClassLoader());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Assert.notEmpty(configurations, &quot;No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;);</span><br><span class="line">    return configurations;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//和上面的类的方法loadFactoryNames里面的第一个参数对应</span><br><span class="line">//这里的getSpringFactoriesLoaderFactoryClass（）方法</span><br><span class="line">//返回的就是我们最开始看的启动自动导入配置文件的注解类；EnableAutoConfiguration</span><br><span class="line">protected Class&lt;?&gt; getSpringFactoriesLoaderFactoryClass() &#123;</span><br><span class="line">     return EnableAutoConfiguration.class;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>这个方法 <code>getCandidateConfigurations()</code>又调用了  <code>SpringFactoriesLoader</code> 类的静态方法！我们进入 <code>SpringFactoriesLoader</code>类loadFactoryNames() 方法，<code>&lt;font color=red&gt;</code>获取所有的加载配置<code>&lt;/font&gt;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryClass, <span class="meta">@Nullable</span> ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    String factoryClassName = factoryClass.getName();</span><br><span class="line">    <span class="comment">//这里它又调用了 loadSpringFactories 方法</span></span><br><span class="line">    <span class="keyword">return</span> (List)loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>我们继续点击查看 loadSpringFactories 方法</p>
<ul>
<li>项目资源:<code>META-INF/spring.factories</code></li>
<li>系统资源:<code>META-INF/spring.factories</code></li>
<li>从这些资源中配置了所有的nextElement（自动配置），分装成properties</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将所有的资源加载到配置类中（将下面的抽离出来分析，第15行）</span></span><br><span class="line">Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class="line">    <span class="comment">//获得classLoader ， 我们返回可以看到这里得到的就是EnableAutoConfiguration标注的类本身</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; result = (MultiValueMap)cache.get(classLoader);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//去获取一个资源 &quot;META-INF/spring.factories&quot;</span></span><br><span class="line">            Enumeration&lt;URL&gt; urls = classLoader != <span class="keyword">null</span> ? classLoader.getResources(<span class="string">&quot;META-INF/spring.factories&quot;</span>) : ClassLoader.getSystemResources(<span class="string">&quot;META-INF/spring.factories&quot;</span>);</span><br><span class="line">            LinkedMultiValueMap result = <span class="keyword">new</span> LinkedMultiValueMap();</span><br><span class="line">            <span class="comment">//判断有没有更多的元素，将读取到的资源循环遍历，封装成为一个Properties</span></span><br><span class="line">            <span class="keyword">while</span>(urls.hasMoreElements()) &#123;</span><br><span class="line">              URL url = (URL)urls.nextElement();</span><br><span class="line">                UrlResource resource = <span class="keyword">new</span> UrlResource(url);</span><br><span class="line">                Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">                Iterator var6 = properties.entrySet().iterator();</span><br><span class="line">                <span class="keyword">while</span>(var6.hasNext()) &#123;</span><br><span class="line">                    Entry&lt;?, ?&gt; entry = (Entry)var6.next();</span><br><span class="line">                    String factoryClassName = ((String)entry.getKey()).trim();</span><br><span class="line">                    String[] var9 = StringUtils.commaDelimitedListToStringArray((String)entry.getValue());</span><br><span class="line">                    <span class="keyword">int</span> var10 = var9.length;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> var11 = <span class="number">0</span>; var11 &lt; var10; ++var11) &#123;</span><br><span class="line">                        String factoryName = var9[var11];</span><br><span class="line">                        result.add(factoryClassName, factoryName.trim());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cache.put(classLoader, result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var13) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Unable to load factories from location [META-INF/spring.factories]&quot;</span>, var13);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>发现一个多次出现的文件：spring.factories，全局搜索它</p>
</li>
</ul>
</li>
</ul>
<h4 id="3-3、spring-factories"><a href="#3-3、spring-factories" class="headerlink" title="3.3、spring.factories"></a>3.3、spring.factories</h4><p>我们根据源头打开spring.factories ， 看到了很多自动配置的文件；这就是自动配置根源所在！</p>
<p><img data-src="1595415587435.png" alt="1595415587435"></p>
<p><strong>WebMvcAutoConfiguration</strong></p>
<p>我们在上面的自动配置类随便找一个打开看看，比如 ：<code>WebMvcAutoConfiguration</code></p>
<p><img data-src="1595416894611.png" alt="1595416894611"></p>
<p>可以看到这些一个个的都是JavaConfig配置类，而且都注入了一些Bean，可以找一些自己认识的类，看着熟悉一下！</p>
<p>所以，自动配置真正实现是从classpath中搜寻所有的 <code>META-INF/spring.factories</code>配置文件 ，并将其中对应的 <code>org.springframework.boot.autoconfigure</code>. 包下的配置项，通过反射实例化为对应标注了 <code> @Configuration的JavaConfig</code>形式的IOC容器配置类 ， 然后将这些都汇总成为一个实例并加载到IOC容器中。</p>
<h3 id="4、结论："><a href="#4、结论：" class="headerlink" title="4、结论："></a>4、结论：</h3><ol>
<li>SpringBoot在启动的时候从类路径下的<code>META-INF/spring.factories</code>中获取<code>EnableAutoConfiguration</code>指定的值</li>
<li>将这些值作为自动配置类导入容器 ， 自动配置类就生效 ， 帮我们进行自动配置工作；</li>
<li>以前我们需要自动配置的东西，现在springboot帮我们做了</li>
<li>整合JavaEE，整体解决方案和自动配置的东西都在<code>springboot-autoconfigure</code>的jar包中；</li>
<li>它会把所有需要导入的组件，以类名的方式返回，这些组件就会被添加到容器中</li>
<li>它会给容器中导入非常多的自动配置类 （xxxAutoConfiguration）, 就是给容器中导入这个场景需要的所有组件 ， 并自动配置，@Configuration（javaConfig） ；</li>
<li>有了自动配置类 ， 免去了我们手动编写配置注入功能组件等的工作；</li>
</ol>
<p><strong>现在大家应该大概的了解了下，SpringBoot的运行原理，后面我们还会深化一次！</strong></p>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><h3 id="1、不简单的方法"><a href="#1、不简单的方法" class="headerlink" title="1、不简单的方法"></a>1、不简单的方法</h3><p>我最初以为就是运行了一个main方法，没想到却开启了一个服务；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springboot01HellowordApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       	<span class="comment">//该方法返回一个ConfigurableApplicationContext对象</span></span><br><span class="line"> 		<span class="comment">//参数一：应用入口的类； 参数二：命令行参数  </span></span><br><span class="line">        SpringApplication.run(Springboot01HellowordApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SpringApplication.run分析</strong></p>
<ul>
<li>分析该方法主要分两部分</li>
<li>一是SpringApplication的实例化，</li>
<li>二是run方法的执行；</li>
</ul>
<h3 id="2、SpringApplication"><a href="#2、SpringApplication" class="headerlink" title="2、SpringApplication"></a>2、SpringApplication</h3><p><strong>这个类主要做了以下四件事情：</strong></p>
<ol>
<li>推断应用的类型是普通的项目还是Web项目</li>
<li>查找并加载所有可用初始化器 ， 设置到initializers属性中</li>
<li>找出所有的应用程序监听器，设置到listeners属性中</li>
<li>推断并设置main方法的定义类，找到运行的主类</li>
</ol>
<p><strong>查看构造器</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class... primarySources)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">    <span class="keyword">this</span>.setInitializers(<span class="keyword">this</span>.getSpringFactoriesInstances();</span><br><span class="line">    <span class="keyword">this</span>.setListeners(<span class="keyword">this</span>.getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">    <span class="keyword">this</span>.mainApplicationClass = <span class="keyword">this</span>.deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、run方法流程分析"><a href="#3、run方法流程分析" class="headerlink" title="3、run方法流程分析"></a>3、run方法流程分析</h3><p><img data-src="aHR0cHM6Ly9tbWJpei5xc.jpg" alt="img"></p>
<p>跟着源码和这幅图就可以一探究竟了！</p>
<h3 id="4、关于SpringBoot，谈谈关于你的理解"><a href="#4、关于SpringBoot，谈谈关于你的理解" class="headerlink" title="4、关于SpringBoot，谈谈关于你的理解;"></a>4、关于SpringBoot，谈谈关于你的理解;</h3><ul>
<li>自动装配</li>
<li>run()</li>
<li>全面接管SpringMVC的配置</li>
</ul>
<h1 id="（三）"><a href="#（三）" class="headerlink" title="（三）"></a>（三）</h1><h2 id="yaml语法学习"><a href="#yaml语法学习" class="headerlink" title="yaml语法学习"></a>yaml语法学习</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>SpringBoot使用一个全局的配置文件 ， 配置文件名称是固定的</p>
<ul>
<li>application.properties</li>
<li><ul>
<li>语法结构 ：key=value</li>
</ul>
</li>
<li>application.yaml</li>
<li><ul>
<li>语法结构 ：key：<code>&lt;font color=red&gt;</code>空格<code>&lt;/font&gt;</code> value</li>
</ul>
</li>
</ul>
<p><strong>配置文件的作用 ：</strong>修改SpringBoot自动配置的默认值，因为SpringBoot在底层都给我们自动配置好了；</p>
<p>比如我们可以在配置文件中修改Tomcat 默认启动的端口号！测试一下！</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>

<h3 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h3><h4 id="yaml概述"><a href="#yaml概述" class="headerlink" title="yaml概述"></a>yaml概述</h4><ul>
<li><p>YAML是 “YAML Ain’t a Markup Language” （YAML不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）</p>
</li>
<li><p>这种语言以<strong>数据</strong>作为中心，而不是以标记语言为重点！</p>
</li>
<li><p>以前的配置文件，大多数都是使用xml来配置；比如一个简单的端口配置，我们来对比下yaml和xml</p>
<ul>
<li><p>传统xml配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>yaml配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">server：</span></span><br><span class="line">  <span class="attr">prot:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="yaml基础语法"><a href="#yaml基础语法" class="headerlink" title="yaml基础语法"></a>yaml基础语法</h4><p><strong>说明：语法要求严格！</strong></p>
<ol>
<li>空格不能省略</li>
<li>以缩进来控制层级关系，只要是左边对齐的一列数据都是同一个层级的。</li>
<li>属性和值的大小写都是十分敏感的。</li>
</ol>
<p><strong>字面量：普通的值  [ 数字，布尔值，字符串  ]</strong></p>
<ul>
<li><p>字面量直接写在后面就可以 ， 字符串默认不用加上双引号或者单引号；<code>k: v</code></p>
<p>注意：</p>
<ul>
<li><p><code>&lt;font color=red&gt;</code>“ ” 双引号<code>&lt;/font&gt;</code>，不会转义字符串里面的特殊字符 ， 特殊字符会作为本身想表示的意思；</p>
<p>比如 ：name: “kuang \n shen”   输出 ：kuang  换行   shen</p>
</li>
<li><p><code>&lt;font color=red&gt;</code>‘’ 单引号<code>&lt;/font&gt;</code>，会转义特殊字符 ， 特殊字符最终会变成和普通字符一样输出</p>
<p>比如 ：name: ‘kuang \n shen’   输出 ：kuang  \n   shen</p>
</li>
</ul>
</li>
</ul>
<p><strong>对象、Map（键值对）</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对象、Map格式</span></span><br><span class="line"><span class="attr">k:</span> </span><br><span class="line">    <span class="attr">v1:</span></span><br><span class="line">    <span class="attr">v2:</span></span><br></pre></td></tr></table></figure>

<p>在下一行来写对象的属性和值得关系，注意缩进；比如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">student:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">qinjiang</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>行内写法</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">student:</span> &#123;<span class="attr">name:</span> <span class="string">qinjiang</span>,<span class="attr">age:</span> <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<p><strong>数组（ List、set ）</strong></p>
<p>用 - 值表示数组中的一个元素,比如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure>

<p>行内写法</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span> [<span class="string">cat</span>,<span class="string">dog</span>,<span class="string">pig</span>]</span><br></pre></td></tr></table></figure>

<p><strong>修改SpringBoot的默认端口号</strong></p>
<p>配置文件中添加，端口号的参数，就可以切换端口；</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br></pre></td></tr></table></figure>

<h2 id="注入配置文件"><a href="#注入配置文件" class="headerlink" title="注入配置文件"></a>注入配置文件</h2><ul>
<li>yaml文件更强大的地方在于，他可以给我们的实体类直接注入匹配值！</li>
</ul>
<h3 id="yaml注入配置文件"><a href="#yaml注入配置文件" class="headerlink" title="yaml注入配置文件"></a>yaml注入配置文件</h3><ol>
<li><p>在springboot项目中的resources目录下新建一个文件 application.yaml</p>
</li>
<li><p>编写一个实体类 Dog；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.pojo;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>  <span class="comment">//注册bean到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参无参构造、get、set方法、toString()方法  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>思考，我们原来是如何给bean注入属性值的！@Value，给狗狗类测试一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;阿黄&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;18&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在SpringBoot的测试类下注入狗狗输出一下；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot02ConfigApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(dog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果成功输出，@Value注入成功，这是我们原来的办法对吧。</p>
<p><img data-src="1595466913174.png" alt="1595466913174"></p>
</li>
<li><p>我们在编写一个复杂一点的实体类：Person 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean happy;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参无参构造、get、set方法、toString()方法  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>我们来使用yaml配置的方式进行注入，大家写的时候注意区别和优势，我们编写一个yaml配置！</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">qinjiang</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">happy:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2000</span><span class="string">/01/01</span></span><br><span class="line">  <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="string">v2</span>&#125;</span><br><span class="line">  <span class="attr">lists:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">code</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">girl</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">music</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">旺财</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><p>我们刚才已经把person这个对象的所有值都写好了，我们现在来注入到我们的类中！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@ConfigurationProperties作用：</span></span><br><span class="line"><span class="comment">将配置文件中配置的每一个属性的值，映射到这个组件中；</span></span><br><span class="line"><span class="comment">告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定</span></span><br><span class="line"><span class="comment">参数 prefix = “person” : 将配置文件中的person下面的所有属性一一对应</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean happy;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参无参构造、get、set方法、toString()方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>IDEA 提示，springboot配置注解处理器没有找到，让我们看文档，我们可以查看文档，找到一个依赖！</p>
<ul>
<li><p>注解@ConfigurationProperties(prefix = “person”)<img data-src="1595464671197.png" alt="1595464671197"></p>
<p>点击 open Decumentation进入官网<img data-src="1595465051557.png" alt="1595465051557"></p>
</li>
<li><p>在pom中导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>确认以上配置都OK之后，我们去测试类中测试一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot02ConfigApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果：所有值全部注入成功！</p>
<p><img data-src="1595467734622.png" alt="1595467734622"></p>
</li>
</ol>
<p><strong>yaml配置注入到实体类完全OK！</strong></p>
<h3 id="加载指定的配置文件"><a href="#加载指定的配置文件" class="headerlink" title="加载指定的配置文件"></a>加载指定的配置文件</h3><ul>
<li><strong>@PropertySource ：</strong>加载指定的配置文件；</li>
<li><strong>@configurationProperties</strong>：默认从全局配置文件中获取值；</li>
</ul>
<ol>
<li><p>我们去在resources目录下新建一个<strong>person.properties</strong>文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">name=kuangshen</span></span><br></pre></td></tr></table></figure></li>
<li><p>然后在我们的代码中指定加载person.properties文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:person.properties&quot;)</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    ......  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>再次输出测试一下：指定配置文件绑定成功！</p>
<p><img data-src="1595467980925.png" alt="1595467980925"></p>
</li>
</ol>
<h3 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符"></a>配置文件占位符</h3><p>配置文件还可以编写占位符生成随机数</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">qinjiang$&#123;random.uuid&#125;</span></span><br><span class="line">  <span class="attr">age:</span> <span class="string">$&#123;random.int&#125;</span></span><br><span class="line">  <span class="attr">happy:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2020</span><span class="string">/07/13</span></span><br><span class="line">  <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="string">v2</span>&#125;</span><br><span class="line">  <span class="attr">lists:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">code</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">music</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">girl</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$&#123;person.hell:hello&#125;_旺财</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="回顾properties配置"><a href="#回顾properties配置" class="headerlink" title="回顾properties配置"></a>回顾properties配置</h3><ul>
<li>我们上面采用的yaml方法都是最简单的方式，开发中最常用的；</li>
<li>也是springboot所推荐的！</li>
<li>那我们来唠唠其他的实现方式，道理都是相同的；写还是那样写；配置文件除了yml还有我们之前常用的properties ， 我们没有讲，我们来唠唠！</li>
</ul>
<p><code>&lt;font color=red&gt;</code>【注意】<code>&lt;/font&gt;properties</code>配置文件在写中文的时候，会有<code>&lt;font color=red&gt;</code>乱码 <code>&lt;/font&gt;</code>， 我们需要去IDEA中设置编码格式为UTF-8；settings–&gt;FileEncodings 中配置；</p>
<p><img data-src="1595468231075.png" alt="1595468231075"></p>
<h3 id="对比小结"><a href="#对比小结" class="headerlink" title="对比小结"></a>对比小结</h3><p>@Value这个使用起来并不友好！我们需要为每个属性单独注解赋值，比较麻烦；我们来看个功能对比图</p>
<table>
<thead>
<tr>
<th></th>
<th>@ConfigurationProperties</th>
<th>@Value</th>
</tr>
</thead>
<tbody><tr>
<td>功能</td>
<td>批量注入配置文件中的属性</td>
<td>一个个指定</td>
</tr>
<tr>
<td>松散绑定</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>SpEL</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>JSR303数据校验</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>复杂类型封装</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody></table>
<ol>
<li><code>@ConfigurationProperties</code>只需要写一次即可 ， @Value则需要每个字段都添加</li>
<li><code>&lt;font color=red&gt;</code>松散绑定<code>&lt;/font&gt;</code>：这个什么意思呢? 比如我的yml中写的last-name，这个和lastName是一样的， - 后面跟着的字母默认是大写的。这就是松散绑定。可以测试一下</li>
<li>JSR303数据校验 ， 这个就是我们可以在字段是增加一层过滤器验证 ， 可以保证数据的合法性</li>
<li>复杂类型封装，yml中可以封装对象 ， 使用value就不支持</li>
</ol>
<p><strong>结论：</strong></p>
<p>配置yml和配置properties都可以获取到值 ， **<code>&lt;font color=red&gt;</code>强烈推荐 yml<code>&lt;/font&gt;</code>**；</p>
<p>如果我们在某个业务中，只需要获取配置文件中的某个值，可以使用一下 @value；</p>
<p>如果说，我们专门编写了一个<strong>JavaBean来和配置文件进行一一映射</strong>，就直接**@configurationProperties**，不要犹豫！</p>
<h1 id="（四）"><a href="#（四）" class="headerlink" title="（四）"></a>（四）</h1><h2 id="JSR303数据校验"><a href="#JSR303数据校验" class="headerlink" title="JSR303数据校验"></a>JSR303数据校验</h2><h3 id="先看看如何使用"><a href="#先看看如何使用" class="headerlink" title="先看看如何使用"></a>先看看如何使用</h3><p>Springboot中可以用@validated来校验数据，如果数据异常则会统一抛出异常，方便异常中心统一处理。我们这里来写个注解让我们的name只能支持Email格式；</p>
<p>1、添加validation启动器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、@Email添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span>  <span class="comment">//数据校验</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Email(message=&quot;邮箱格式错误&quot;)</span> <span class="comment">//name必须是邮箱格式</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果 ：default message [不是一个合法的电子邮件地址];</p>
<p><img data-src="1595480159290.png" alt="1595480159290"></p>
<p><strong>使用数据校验，可以保证数据的正确性；</strong></p>
<h3 id="常见参数"><a href="#常见参数" class="headerlink" title="常见参数"></a>常见参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NotNull(message=&quot;名字不能为空&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="meta">@Max(value=120,message=&quot;年龄最大不能查过120&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="meta">@Email(message=&quot;邮箱格式错误&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">空检查</span><br><span class="line"><span class="meta">@Null</span>       验证对象是否为<span class="keyword">null</span></span><br><span class="line"><span class="meta">@NotNull</span>    验证对象是否不为<span class="keyword">null</span>, 无法查检长度为<span class="number">0</span>的字符串</span><br><span class="line"><span class="meta">@NotBlank</span>   检查约束字符串是不是Null还有被Trim的长度是否大于<span class="number">0</span>,只对字符串,且会去掉前后空格.</span><br><span class="line"><span class="meta">@NotEmpty</span>   检查约束元素是否为NULL或者是EMPTY.</span><br><span class="line">  </span><br><span class="line">Booelan检查</span><br><span class="line"><span class="meta">@AssertTrue</span>     验证 Boolean 对象是否为 <span class="keyword">true</span>  </span><br><span class="line"><span class="meta">@AssertFalse</span>    验证 Boolean 对象是否为 <span class="keyword">false</span>  </span><br><span class="line">  </span><br><span class="line">长度检查</span><br><span class="line"><span class="meta">@Size(min=, max=)</span> 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内  </span><br><span class="line"><span class="meta">@Length(min=, max=)</span> string is between min and max included.</span><br><span class="line"></span><br><span class="line">日期检查</span><br><span class="line"><span class="meta">@Past</span>       验证 Date 和 Calendar 对象是否在当前时间之前  </span><br><span class="line"><span class="meta">@Future</span>     验证 Date 和 Calendar 对象是否在当前时间之后  </span><br><span class="line"><span class="meta">@Pattern</span>    验证 String 对象是否符合正则表达式的规则</span><br><span class="line"></span><br><span class="line">.......等等</span><br><span class="line">除此以外，我们还可以自定义一些数据校验规则</span><br></pre></td></tr></table></figure>

<p><img data-src="1595480813196.png" alt="1595480813196"></p>
<h2 id="多环境切换"><a href="#多环境切换" class="headerlink" title="多环境切换"></a>多环境切换</h2><p>profile是Spring对不同环境提供不同配置功能的支持，可以通过激活不同的环境版本，实现快速切换环境；（不同位置的优先级如下图）</p>
<h3 id="多配置文件"><a href="#多配置文件" class="headerlink" title="多配置文件"></a>多配置文件</h3><p>我们在主配置文件编写的时候，文件名可以是 <code>application-&#123;profile&#125;.properties/yml </code>, 用来指定多个环境版本；</p>
<p><strong>例如：</strong></p>
<p>application-test.properties 代表测试环境配置</p>
<p>application-dev.properties 代表开发环境配置</p>
<p>但是Springboot并不会直接启动这些配置文件，它<strong>默认使用application.properties主配置文件</strong>；</p>
<p><img data-src="1595484043622.png" alt="1595484043622"></p>
<p>我们需要通过一个配置来选择需要激活的环境：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#比如在配置文件中指定使用dev环境，我们可以通过设置不同的端口号进行测试；</span></span><br><span class="line"><span class="comment">#我们启动SpringBoot，就可以看到已经切换到dev下的配置了；</span></span><br><span class="line"><span class="string">spring.profiles.active=dev</span></span><br></pre></td></tr></table></figure>

<h3 id="yaml的多文档块"><a href="#yaml的多文档块" class="headerlink" title="yaml的多文档块"></a>yaml的多文档块</h3><p>和properties配置文件中一样，但是使用yml去实现不需要创建多个配置文件，更加方便了 !</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="comment">#选择要激活那个环境块</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span> <span class="comment">#配置环境的名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span>  <span class="comment">#配置环境的名称</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：如果yml和properties同时都配置了端口，并且没有激活其他环境 ， 默认会使用properties配置文件的！</strong></p>
<h3 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a>配置文件加载位置</h3><p><strong>外部加载配置文件的方式十分多，我们选择最常用的即可，在开发的资源文件中进行配置！</strong></p>
<p>官方外部配置文件说明参考文档<a href="https://docs.spring.io/spring-boot/docs/2.3.1.RELEASE/reference/html/spring-boot-features.html#boot-features-logging-color-coded-output">https://docs.spring.io/spring-boot/docs/2.3.1.RELEASE/reference/html/spring-boot-features.html#boot-features-logging-color-coded-output</a></p>
<p><img data-src="1595484511936.png" alt="1595484511936"></p>
<p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件：</p>
<p><img data-src="1595482583892.png" alt="1595482583892"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">优先级1：项目路径下的config文件夹配置文件</span><br><span class="line">优先级2：项目路径下配置文件</span><br><span class="line">优先级3：资源路径下的config文件夹配置文件</span><br><span class="line">优先级4：资源路径下配置文件</span><br></pre></td></tr></table></figure>

<p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p>
<p><strong>SpringBoot会从这四个位置全部加载主配置文件；互补配置；</strong></p>
<p>我们在最低级的配置文件中设置一个项目访问路径的配置来测试互补问题；</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置项目的访问路径</span></span><br><span class="line"><span class="string">server.servlet.context-path=/ss</span></span><br></pre></td></tr></table></figure>

<h3 id="拓展，运维小技巧"><a href="#拓展，运维小技巧" class="headerlink" title="拓展，运维小技巧"></a>拓展，运维小技巧</h3><p>指定位置加载配置文件</p>
<p>我们还可以通过 <code>spring.config.location</code>来改变默认的配置文件位置</p>
<p>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；</p>
<p>这种情况，一般是后期运维做的多，相同配置，外部指定的配置文件优先级最高</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">java</span> <span class="string">-jar</span> <span class="string">spring-boot-config.jar</span> <span class="string">--spring.config.location=F:/application.properties</span></span><br></pre></td></tr></table></figure>


<h1 id="（五）"><a href="#（五）" class="headerlink" title="（五）"></a>（五）</h1><h2 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h2><p>配置文件到底能写什么？怎么写？<code>&lt;font color=red&gt;</code>—-联系—-<code>&lt;/font&gt;</code> <code>spring.factories</code></p>
<p>SpringBoot官方文档中有大量的配置，我们无法全部记住,官网：<a href="https://docs.spring.io/spring-boot/docs/2.3.1.RELEASE/reference/html/appendix-application-properties.html#core-properties">https://docs.spring.io/spring-boot/docs/2.3.1.RELEASE/reference/html/appendix-application-properties.html#core-properties</a></p>
<p><img data-src="1595493746481.png" alt="1595493746481"></p>
<h3 id="分析自动配置原理"><a href="#分析自动配置原理" class="headerlink" title="分析自动配置原理"></a>分析自动配置原理</h3><ol>
<li><p>SpringBoot启动的时候加载主配置类，开启了自动配置功能 @EnableAutoConfiguration</p>
</li>
<li><p>@EnableAutoConfiguration 作用</p>
<ul>
<li><p>利用EnableAutoConfigurationImportSelector给容器中导入一些组件</p>
</li>
<li><p>可以查看selectImports()方法的内容,他返回了一个autoConfigurationEnty,来自 <code>this.getAutoConfigurationEntry(autoConfigurationMetadata,annotationMetadata);</code>这个方法我们继续来跟踪：</p>
</li>
<li><p>这个方法有一个值：<code>List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</code>叫做获取候选的配置 ，我们点击继续跟踪</p>
<ul>
<li><code>SpringFactoriesLoader.loadFactoryNames()</code></li>
<li>扫描所有jar包类路径下<code>META-INF/spring.factories</code></li>
<li>把扫描到的这些文件的内容包装成properties对象</li>
<li>从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加在容器中</li>
</ul>
</li>
<li><p><code>&lt;font color=red&gt;</code>在类路径下,<code>META-INF/spring.factories</code>里面配置的所有EnableAutoConfiguration的值加入到容器中：<code>&lt;/font&gt;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># Initializers</span><br><span class="line">org.springframework.context.ApplicationContextInitializer=\</span><br><span class="line">org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\</span><br><span class="line">org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener</span><br><span class="line"></span><br><span class="line"># Application Listeners</span><br><span class="line">org.springframework.context.ApplicationListener=\</span><br><span class="line">org.springframework.boot.autoconfigure.BackgroundPreinitializer</span><br><span class="line"></span><br><span class="line"># Auto Configuration Import Listeners</span><br><span class="line">org.springframework.boot.autoconfigure.AutoConfigurationImportListener=\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportAutoConfigurationImportListener</span><br><span class="line"></span><br><span class="line"># Auto Configuration Import Filters</span><br><span class="line">org.springframework.boot.autoconfigure.AutoConfigurationImportFilter=\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.OnBeanCondition,\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.OnClassCondition,\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.OnWebApplicationCondition</span><br><span class="line"></span><br><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRestClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</span><br><span class="line"></span><br><span class="line"># Failure analyzers</span><br><span class="line">org.springframework.boot.diagnostics.FailureAnalyzer=\</span><br><span class="line">org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayMigrationScriptMissingFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceBeanCreationFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.HikariDriverConfigurationFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBeanCreationFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.NonUniqueSessionRepositoryFailureAnalyzer</span><br><span class="line"></span><br><span class="line"># Template availability providers</span><br><span class="line">org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider=\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerTemplateAvailabilityProvider,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheTemplateAvailabilityProvider,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAvailabilityProvider,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafTemplateAvailabilityProvider,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.JspTemplateAvailabilityProvider</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>每一个这样的 xxxAutoConfiguration类都是容器中的一个<strong>组件，都加入到容器中；用他们来做自动配置；</strong></p>
</li>
</ul>
</li>
<li><p>每一个自动配置类进行自动配置功能；</p>
</li>
<li><p>我们以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表示这是一个配置类，和以前编写的配置文件一样，也可以给容器中添加组件；</span></span><br><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//启动指定类的ConfigurationProperties功能；</span></span><br><span class="line">  <span class="comment">//进入这个HttpProperties查看，将配置文件中对应的值和HttpProperties绑定起来；</span></span><br><span class="line">  <span class="comment">//并把HttpProperties加入到ioc容器中</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;HttpProperties.class&#125;)</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//Spring底层@Conditional注解</span></span><br><span class="line">  <span class="comment">//根据不同的条件判断，如果满足指定的条件，整个配置类里面的配置就会生效；</span></span><br><span class="line">  <span class="comment">//这里的意思就是判断当前应用是否是web应用，如果是，当前配置类生效</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(</span></span><br><span class="line"><span class="meta">    type = Type.SERVLET</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;CharacterEncodingFilter.class&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断配置文件中是否存在某个配置：spring.http.encoding.enabled；</span></span><br><span class="line">  <span class="comment">//如果不存在，判断也是成立的</span></span><br><span class="line">  <span class="comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(</span></span><br><span class="line"><span class="meta">    prefix = &quot;spring.http.encoding&quot;,</span></span><br><span class="line"><span class="meta">    value = &#123;&quot;enabled&quot;&#125;,</span></span><br><span class="line"><span class="meta">    matchIfMissing = true</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">//他已经和SpringBoot的配置文件映射了</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Encoding properties;</span><br><span class="line">    <span class="comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties.getEncoding();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span> <span class="comment">//判断容器没有这个组件？</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">        filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">        filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.REQUEST));</span><br><span class="line">        filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.RESPONSE));</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//。。。。。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>一句话总结 ：根据当前不同的条件判断，决定这个配置类是否生效！</strong></p>
<ul>
<li><p>一但这个配置类生效；这个配置类就会给容器中添加各种组件；</p>
</li>
<li><p>这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</p>
</li>
<li><p>所有在配置文件中能配置的属性都是在xxxxProperties类中封装着；</p>
</li>
<li><p>配置文件能配置什么就可以参照某个功能对应的这个属性类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从配置文件中获取指定的值和bean的属性进行绑定</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.http&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpProperties</span> </span>&#123;</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>我们去配置文件里面试试前缀，看提示！</p>
<p><img data-src="1595493884773.png" alt="1595493884773"></p>
<p><strong>这就是自动装配的原理！</strong></p>
<h3 id="精髓"><a href="#精髓" class="headerlink" title="精髓"></a>精髓</h3><ol>
<li><p>SpringBoot启动会加载大量的自动配置类</p>
</li>
<li><p>我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中；</p>
</li>
<li><p>我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件存在在其中，我们就不需要再手动配置了）</p>
</li>
<li><p>给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可；</p>
<p><strong>xxxxAutoConfigurartion：自动配置类；</strong>给容器中添加组件</p>
<p><strong>xxxxProperties:封装配置文件中相关属性；</strong></p>
</li>
</ol>
<h2 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h2><p>了解完自动装配的原理后，我们来关注一个细节问题，<strong>自动配置类必须在一定的条件下才能生效；</strong></p>
<p><strong>@Conditional派生注解（<code>&lt;font color=red&gt;</code>Spring注解版原生的@Conditional作用<code>&lt;/font&gt;</code>）</strong></p>
<p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p>
<table>
<thead>
<tr>
<th>@Conditional扩展注解</th>
<th>作用(判断是否满足当前指定条件)</th>
</tr>
</thead>
<tbody><tr>
<td>@ConditionalOnJava</td>
<td>系统的java版本是否符合要求</td>
</tr>
<tr>
<td>@ConditionalOnJava</td>
<td>容器中存在指定Bean ;</td>
</tr>
<tr>
<td>@ConditionalOnMissingBean</td>
<td>容器中不存在指定Bean ;</td>
</tr>
<tr>
<td>@ConditionalOnExpression</td>
<td>满足SpEL表达式指定</td>
</tr>
<tr>
<td>@ConditionalOnClass</td>
<td>系统中有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnMissingClass</td>
<td>系统中没有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnSingleCandidate</td>
<td>容器中只有一个指定的Bean ,或者这个Bean是首选Bean</td>
</tr>
<tr>
<td>@ConditionalOnProperty</td>
<td>系统中指定的属性是否有指定的值</td>
</tr>
<tr>
<td>@ConditionalOnResource</td>
<td>类路径下是否存在指定资源文件</td>
</tr>
<tr>
<td>@ConditionalOnWebApplication</td>
<td>当前是web环境</td>
</tr>
<tr>
<td>@ConditionalOnNotWebApplication</td>
<td>当前不是web环境</td>
</tr>
<tr>
<td>@ConditionalOnJndi</td>
<td>JNDI存在指定项</td>
</tr>
</tbody></table>
<p><strong>那么多的自动配置类，必须在一定的条件下才能生效；也就是说，我们加载了这么多的配置类，但不是所有的都生效了。</strong></p>
<h3 id="自动配置类是否生效"><a href="#自动配置类是否生效" class="headerlink" title="自动配置类是否生效"></a>自动配置类是否生效</h3><p><strong>我们可以在application.properties通过启用 <code>debug=true</code>属性；</strong></p>
<p><strong>在控制台打印自动配置报告，这样我们就可以很方便的知道哪些自动配置类生效；</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启springboot的调试类</span></span><br><span class="line"><span class="string">debug=true</span> </span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Positive matches:（自动配置类启用的：正匹配）</strong></li>
<li><strong>Negative matches:（没有启动，没有匹配成功的自动配置类：负匹配）</strong></li>
<li><strong>Unconditional classes: （没有条件的类）</strong></li>
<li><strong>【演示：查看输出的日志】</strong></li>
</ul>
<h1 id="（六）"><a href="#（六）" class="headerlink" title="（六）"></a>（六）</h1><h2 id="自定义Starter"><a href="#自定义Starter" class="headerlink" title="自定义Starter"></a>自定义Starter</h2><p>我们分析完毕了源码以及自动装配的过程，我们可以尝试自定义一个启动器来玩玩！</p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>启动器模块是一个 空 jar 文件，仅提供辅助性依赖管理，这些依赖可能用于自动装配或者其他类库；</p>
<p><strong>命名归约：</strong></p>
<p>官方命名：</p>
<ul>
<li>前缀：spring-boot-starter-xxx</li>
<li>比如：spring-boot-starter-web….</li>
</ul>
<p>自定义命名：</p>
<ul>
<li>xxx-spring-boot-starter</li>
<li>比如：mybatis-spring-boot-starter</li>
</ul>
<h3 id="编写启动器"><a href="#编写启动器" class="headerlink" title="编写启动器"></a>编写启动器</h3><ol>
<li><p>在IDEA中新建一个空项目 spring-boot-starter-diy</p>
</li>
<li><p>新建一个普通Maven模块：kuang-spring-boot-starter</p>
</li>
<li><p>3</p>
</li>
<li><p>新建一个Springboot模块：kuang-spring-boot-starter-autoconfigure</p>
</li>
<li><p>5</p>
</li>
<li><p>点击apply即可，基本结构</p>
</li>
<li><p>7</p>
</li>
<li><p>在我们的 starter 中 导入  autoconfigure 的依赖！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 启动器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  引入自动配置模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kuang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kuang-spring-boot-starter-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>将 autoconfigure 项目下多余的文件都删掉，Pom中只留下一个 starter，这是所有的启动器基本配置！</p>
</li>
<li><p>10</p>
</li>
<li><p>我们编写一个自己的服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloProperties <span class="title">getHelloProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHelloProperties</span><span class="params">(HelloProperties helloProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloProperties = helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties.getPrefix() + name + helloProperties.getSuffix();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写 <code>HelloProperties</code> 配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前缀 kuang.hello</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;kuang.hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line">    <span class="keyword">private</span> String suffix;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSuffix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuffix</span><span class="params">(String suffix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.suffix = suffix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写我们的自动配置类并注入bean，测试！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> nuc.ss;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">//web应用生效</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HelloProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HelloService service = <span class="keyword">new</span> HelloService();</span><br><span class="line">        service.setHelloProperties(helloProperties);</span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在resources编写一个自己的 <code>META-INF\spring.factories</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">nuc.ss.HelloServiceAutoConfiguration</span><br></pre></td></tr></table></figure></li>
<li><p>编写完成后，可以安装到maven仓库中！</p>
</li>
<li><p>16</p>
</li>
</ol>
<h3 id="新建项目测试我们自己写的启动器"><a href="#新建项目测试我们自己写的启动器" class="headerlink" title="新建项目测试我们自己写的启动器"></a>新建项目测试我们自己写的启动器</h3><ol>
<li><p>新建一个SpringBoot 项目</p>
</li>
<li><p>导入我们自己写的启动器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>nuc.ss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ss-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写一个 <code>HelloController</code>  进行测试我们自己的写的接口！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloService.sayHello(<span class="string">&quot;zxc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写配置文件 <code>application.properties</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ss.hello.prefix=&quot;ppp&quot;</span><br><span class="line">ss.hello.suffix=&quot;sss&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>启动项目进行测试，结果成功 !</p>
</li>
</ol>
<p><strong>学完的东西一定要多下去实践！</strong></p>
<h1 id="（七）"><a href="#（七）" class="headerlink" title="（七）"></a>（七）</h1><h2 id="SpringData简介"><a href="#SpringData简介" class="headerlink" title="SpringData简介"></a>SpringData简介</h2><ul>
<li>对于数据访问层，无论是 SQL(关系型数据库) 还是 NOSQL(非关系型数据库)，Spring Boot 底层都是采用 Spring Data 的方式进行统一处理。</li>
<li>Spring Boot 底层都是采用 Spring Data 的方式进行统一处理各种数据库，Spring Data 也是 Spring 中与 Spring Boot、Spring Cloud 等齐名的知名项目。</li>
<li>Sping Data 官网：<a href="https://spring.io/projects/spring-data">https://spring.io/projects/spring-data</a></li>
<li>数据库相关的启动器 ：可以参考官方文档：<a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter</a></li>
</ul>
<h2 id="整合JDBC"><a href="#整合JDBC" class="headerlink" title="整合JDBC"></a>整合JDBC</h2><h3 id="创建测试项目测试数据源"><a href="#创建测试项目测试数据源" class="headerlink" title="创建测试项目测试数据源"></a>创建测试项目测试数据源</h3><ol>
<li><p>我去新建一个项目测试：springboot-data-jdbc ; 引入相应的模块！基础模块</p>
<p><img data-src="1595741635349.png" alt="1595741635349"></p>
</li>
<li><p>项目建好之后，发现自动帮我们导入了如下的启动器：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写yaml配置文件连接数据库；</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="comment">#?serverTimezone=UTC解决时区的报错</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置完这一些东西后，我们就可以直接去使用了，因为SpringBoot已经默认帮我们进行了自动配置；去测试类测试一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootDataJdbcApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DI注入数据源</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//看一下默认数据源</span></span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line">        <span class="comment">//获得连接</span></span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>结果：我们可以看到他默认给我们配置的数据源为 : class com.zaxxer.hikari.HikariDataSource ， 我们并没有手动配置</p>
<p>我们来全局搜索一下，找到数据源的所有自动配置都在 ：DataSourceAutoConfiguration文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(</span></span><br><span class="line"><span class="meta">    &#123;Hikari.class, Tomcat.class, Dbcp2.class, Generic.class, DataSourceJmxConfiguration.class&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PooledDataSourceConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">PooledDataSourceConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里导入的类都在 DataSourceConfiguration 配置类下，可以看出 Spring Boot 2.2.5 默认使用HikariDataSource 数据源，而以前版本，如 Spring Boot 1.5 默认使用 org.apache.tomcat.jdbc.pool.DataSource 作为数据源；</p>
<p><strong><code>&lt;font color=red&gt;</code>HikariDataSource 号称 Java WEB 当前速度最快的数据源，相比于传统的 C3P0 、DBCP、Tomcat jdbc 等连接池更加优秀；<code>&lt;/font&gt;</code></strong></p>
<p><strong>可以使用 spring.datasource.type 指定自定义的数据源类型，值为 要使用的连接池实现的完全限定名。</strong></p>
<p>关于数据源我们并不做介绍，有了数据库连接，显然就可以 CRUD 操作数据库了。但是我们需要先了解一个对象 JdbcTemplate</p>
<h3 id="JDBCTemplate"><a href="#JDBCTemplate" class="headerlink" title="JDBCTemplate"></a>JDBCTemplate</h3><ol>
<li>有了数据源(com.zaxxer.hikari.HikariDataSource)，然后可以拿到数据库连接(java.sql.Connection)，有了连接，就可以使用原生的 JDBC 语句来操作数据库；</li>
<li>即使不使用第三方第数据库操作框架，如 MyBatis等，Spring 本身也对原生的JDBC 做了轻量级的封装，即JdbcTemplate。</li>
<li>数据库操作的所有 CRUD 方法都在 JdbcTemplate 中。</li>
<li>Spring Boot 不仅提供了默认的数据源，同时默认已经配置好了 JdbcTemplate 放在了容器中，程序员只需自己注入即可使用</li>
<li>JdbcTemplate 的自动配置是依赖 org.springframework.boot.autoconfigure.jdbc 包下的 JdbcTemplateConfiguration 类</li>
</ol>
<p><strong>JdbcTemplate主要提供以下几类方法：</strong></p>
<ul>
<li>execute方法：可以用于执行任何SQL语句，一般用于执行DDL语句；</li>
<li>update方法及batchUpdate方法：update方法用于执行新增、修改、删除等语句；batchUpdate方法用于执行批处理相关语句；</li>
<li>query方法及queryForXXX方法：用于执行查询相关语句；</li>
<li>call方法：用于执行存储过程、函数相关语句。</li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>编写一个Controller，注入 jdbcTemplate，编写测试方法进行访问测试；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询数据库的所有信息</span></span><br><span class="line">    <span class="comment">// 没有实体类，获取数据库的东西，怎么获取？ Map</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/userList&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; userList() &#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(sql);</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/addUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;insert into mybatis.user(id, name, pwd) values(7,&#x27;小明&#x27;,&#x27;123456&#x27;)&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;update-ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/updateUser/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;update mybatis.user set name  = ?,pwd = ? where id = &quot;</span> + id;</span><br><span class="line">        <span class="comment">//封装</span></span><br><span class="line">        Object[] objects = <span class="keyword">new</span> Object[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        objects[<span class="number">0</span>] = <span class="string">&quot;小明2&quot;</span>;</span><br><span class="line">        objects[<span class="number">1</span>] = <span class="string">&quot;aaaaaaa&quot;</span>;</span><br><span class="line"></span><br><span class="line">        jdbcTemplate.update(sql,objects);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;update-ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/deleteUser/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;delete from mybatis.user where id = ?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql,id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;update-ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试请求，结果正常；</p>
<p>到此，CURD的基本操作，使用 JDBC 就搞定了。</p>
<h1 id="（八）"><a href="#（八）" class="headerlink" title="（八）"></a>（八）</h1><h2 id="集成Druid"><a href="#集成Druid" class="headerlink" title="集成Druid"></a>集成Druid</h2><h3 id="Druid简介"><a href="#Druid简介" class="headerlink" title="Druid简介"></a>Druid简介</h3><ul>
<li>Java程序很大一部分要操作数据库，为了提高性能操作数据库的时候，又不得不使用数据库连接池。</li>
<li>Druid 是阿里巴巴开源平台上一个数据库连接池实现，结合了 C3P0、DBCP 等 DB 池的优点，同时加入了日志监控。</li>
<li>Druid 可以很好的监控 DB 池连接和 SQL 的执行情况，天生就是针对监控而生的 DB 连接池。</li>
<li>Druid已经在阿里巴巴部署了超过600个应用，经过一年多生产环境大规模部署的严苛考验。</li>
<li>Spring Boot 2.0 以上默认使用 Hikari 数据源，可以说 Hikari 与 Driud 都是当前 Java Web 上最优秀的数据源，我们来重点介绍 Spring Boot 如何集成 Druid 数据源，如何实现数据库监控。</li>
<li>Github地址：<a href="https://github.com/alibaba/druid/">https://github.com/alibaba/druid/</a></li>
</ul>
<p><strong>com.alibaba.druid.pool.DruidDataSource 基本配置参数如下：</strong></p>
<table>
<thead>
<tr>
<th align="center"><strong>配置</strong></th>
<th align="center"><strong>缺省值</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">name</td>
<td align="center"></td>
<td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。 如果没有配置，将会生成一个名字，格式是：“DataSource-” + System.identityHashCode(this)</td>
</tr>
<tr>
<td align="center">jdbcUrl</td>
<td align="center"></td>
<td>连接数据库的url，不同数据库不一样。例如： mysql : jdbc:mysql://10.20.153.104:3306/druid2 oracle : jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td>
</tr>
<tr>
<td align="center">username</td>
<td align="center"></td>
<td>连接数据库的用户名</td>
</tr>
<tr>
<td align="center">password</td>
<td align="center"></td>
<td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td>
</tr>
<tr>
<td align="center">driverClassName</td>
<td align="center">根据url自动识别</td>
<td>这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td>
</tr>
<tr>
<td align="center">initialSize</td>
<td align="center">0</td>
<td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td>
</tr>
<tr>
<td align="center">maxActive</td>
<td align="center">8</td>
<td>最大连接池数量</td>
</tr>
<tr>
<td align="center">maxIdle</td>
<td align="center">8</td>
<td>已经不再使用，配置了也没效果</td>
</tr>
<tr>
<td align="center">minIdle</td>
<td align="center"></td>
<td>最小连接池数量</td>
</tr>
<tr>
<td align="center">maxWait</td>
<td align="center"></td>
<td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td>
</tr>
<tr>
<td align="center">poolPreparedStatements</td>
<td align="center">false</td>
<td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td>
</tr>
<tr>
<td align="center">maxOpenPreparedStatements</td>
<td align="center">-1</td>
<td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td>
</tr>
<tr>
<td align="center">validationQuery</td>
<td align="center"></td>
<td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td>
</tr>
<tr>
<td align="center">validationQueryTimeout</td>
<td align="center"></td>
<td>单位:秒，检测连接是否有效的超时时间。底层调用jdbc``Statement对象的void setQueryTimeout(int seconds)方法</td>
</tr>
<tr>
<td align="center">testOnBorrow</td>
<td align="center">true</td>
<td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td>
</tr>
<tr>
<td align="center">testOnReturn</td>
<td align="center">false</td>
<td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td>
</tr>
<tr>
<td align="center">testWhileIdle</td>
<td align="center">false</td>
<td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效</td>
</tr>
<tr>
<td align="center">timeBetweenEvictionRunsMillis</td>
<td align="center">1分钟``( 1.0.14 )</td>
<td>有两个含义： 1) Destroy线程会检测连接的间隔时间 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td>
</tr>
<tr>
<td align="center">numTestsPerEvictionRun</td>
<td align="center"></td>
<td>不再使用，一个DruidDataSource只支持一个EvictionRun</td>
</tr>
<tr>
<td align="center">minEvictableIdleTimeMillis</td>
<td align="center">30分钟``( 1.0.14 )</td>
<td>连接保持空闲而不被驱逐的最长时间</td>
</tr>
<tr>
<td align="center">connectionInitSqls</td>
<td align="center"></td>
<td>物理连接初始化的时候执行的sql</td>
</tr>
<tr>
<td align="center">exceptionSorter</td>
<td align="center">根据dbType自动识别</td>
<td>当数据库抛出一些不可恢复的异常时，抛弃连接</td>
</tr>
<tr>
<td align="center">filters</td>
<td align="center"></td>
<td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td>
</tr>
<tr>
<td align="center">proxyFilters</td>
<td align="center"></td>
<td>类型是List&lt;com.alibaba.druid.filter.Filter&gt;，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td>
</tr>
</tbody></table>
<h3 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h3><ol>
<li><p>添加上 Druid 数据源依赖，这个依赖可以从Maven仓库官网<a href="https://mvnrepository.com/artifact/com.alibaba/druid"><code>&lt;font color=red&gt;</code>Maven Respository<code>&lt;/font&gt;</code></a>中获取</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="image-20200727215315060.png" alt="image-20200727215315060"></p>
</li>
<li><p>切换数据源；之前已经说过 Spring Boot 2.0 以上默认使用 <code>com.zaxxer.hikari.HikariDataSource </code>数据源，但可以通过 <code>spring.datasource.type</code> 指定数据源。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    username: root</span><br><span class="line">    password: 123456</span><br><span class="line">    url: jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource # 自定义数据源</span><br></pre></td></tr></table></figure></li>
<li><p>数据源切换之后，在测试类中注入 DataSource，然后获取到它，输出一看便知是否成功切换；</p>
<p><img data-src="image-20200727222109497.png" alt="image-20200727222109497"></p>
</li>
<li><p>切换成功！既然切换成功，就可以设置数据源连接初始化大小、最大连接数、等待时间、最小连接数 等设置项；可以查看源码</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment">#?serverTimezone=UTC解决时区的报错</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure></li>
<li><p>导入Log4j 的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>现在需要程序员自己为 DruidDataSource 绑定全局配置文件中的参数，再添加到容器中，而不再使用 Spring Boot 的自动生成了；我们需要 自己添加 DruidDataSource 组件到容器中，并绑定属性；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       将自定义的 Druid数据源添加到容器中，不再让 Spring Boot 自动创建</span></span><br><span class="line"><span class="comment">       绑定全局配置文件中的 druid 数据源属性到 com.alibaba.druid.pool.DruidDataSource从而让它们生效</span></span><br><span class="line"><span class="comment">       @ConfigurationProperties(prefix = &quot;spring.datasource&quot;)：作用就是将 全局配置文件中</span></span><br><span class="line"><span class="comment">       前缀为 spring.datasource的属性值注入到 com.alibaba.druid.pool.DruidDataSource 的同名参数中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>去测试类中测试一下；看是否成功！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootDataJdbcApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DI注入数据源</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//看一下默认数据源</span></span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line">        <span class="comment">//获得连接</span></span><br><span class="line">        Connection connection =   dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line"></span><br><span class="line">        DruidDataSource druidDataSource = (DruidDataSource) dataSource;</span><br><span class="line">        System.out.println(<span class="string">&quot;druidDataSource 数据源最大连接数：&quot;</span> + druidDataSource.getMaxActive());</span><br><span class="line">        System.out.println(<span class="string">&quot;druidDataSource 数据源初始化连接数：&quot;</span> + druidDataSource.getInitialSize());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>输出结果 ：可见配置参数已经生效！</p>
<p><img data-src="image-20200727233746228.png" alt="image-20200727233746228"></p>
</li>
</ol>
<h3 id="配置Druid数据源监控"><a href="#配置Druid数据源监控" class="headerlink" title="配置Druid数据源监控"></a>配置Druid数据源监控</h3><p>Druid 数据源具有监控的功能，并提供了一个 web 界面方便用户查看，类似安装 路由器 时，人家也提供了一个默认的 web 页面。</p>
<p>所以第一步需要设置 Druid 的后台管理页面，比如 登录账号、密码 等；配置后台管理；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置 Druid 监控管理后台的Servlet；</span></span><br><span class="line"><span class="comment">//内置 Servlet 容器时没有web.xml文件，所以使用 Spring Boot 的注册 Servlet 方式</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这些参数可以在 com.alibaba.druid.support.http.StatViewServlet </span></span><br><span class="line">    <span class="comment">// 的父类 com.alibaba.druid.support.http.ResourceServlet 中找到</span></span><br><span class="line">    Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    initParams.put(<span class="string">&quot;loginUsername&quot;</span>, <span class="string">&quot;root&quot;</span>); <span class="comment">//后台管理界面的登录账号</span></span><br><span class="line">    initParams.put(<span class="string">&quot;loginPassword&quot;</span>, <span class="string">&quot;admin&quot;</span>); <span class="comment">//后台管理界面的登录密码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//后台允许谁可以访问</span></span><br><span class="line">    <span class="comment">//initParams.put(&quot;allow&quot;, &quot;localhost&quot;)：表示只有本机可以访问</span></span><br><span class="line">    <span class="comment">//initParams.put(&quot;allow&quot;, &quot;&quot;)：为空或者为null时，表示允许所有访问</span></span><br><span class="line">    initParams.put(<span class="string">&quot;allow&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">//deny：Druid 后台拒绝谁访问</span></span><br><span class="line">    <span class="comment">//initParams.put(&quot;kuangshen&quot;, &quot;192.168.1.20&quot;);表示禁止此ip访问</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置初始化参数</span></span><br><span class="line">    bean.setInitParameters(initParams);</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置完毕后，我们可以选择访问 ：<a href="http://localhost:8080/druid/login.html">http://localhost:8080/druid/login.html</a></p>
<p><img data-src="image-20200727233409312.png" alt="image-20200727233409312"></p>
<p>进入之后</p>
<p><img data-src="image-20200727233436583.png" alt="image-20200727233436583"></p>
<p><strong>配置 Druid web 监控 filter 过滤器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置 Druid 监控 之  web 监控的 filter</span></span><br><span class="line"><span class="comment">//WebStatFilter：用于配置Web和Druid数据源之间的管理关联监控统计</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">    bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//exclusions：设置哪些请求进行过滤排除掉，从而不进行统计</span></span><br><span class="line">    Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    initParams.put(<span class="string">&quot;exclusions&quot;</span>, <span class="string">&quot;*.js,*.css,/druid/*,/jdbc/*&quot;</span>);</span><br><span class="line">    bean.setInitParameters(initParams);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&quot;/*&quot; 表示过滤所有请求</span></span><br><span class="line">    bean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/*&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="（九）"><a href="#（九）" class="headerlink" title="（九）"></a>（九）</h1><h2 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h2><p>官方文档：<a href="http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/">http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p>
<p>Maven仓库地址：<a href="https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter/2.1.3">https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter/2.1.3</a></p>
<p><img data-src="image-20200728083023851.png" alt="image-20200728083023851"></p>
<h3 id="整合测试"><a href="#整合测试" class="headerlink" title="整合测试"></a>整合测试</h3><ol>
<li><p>导入 MyBatis 所需要的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置数据库连接信息（不变）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="comment">#?serverTimezone=UTC解决时区的报错</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>测试数据库是否连接成功！</strong></p>
</li>
<li><p><strong>创建实体类，导入 Lombok！</strong></p>
<p><code>User.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>创建mapper目录以及对应的 Mapper 接口</strong></p>
<p><code>UserMapper.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> nuc.ss.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个注解表示了这是一个 mybatis 的 mapper 类</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">queryUserList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">queryUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>对应的Mapper映射文件</strong></p>
<p><code>UserMapper.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace=绑定一个对应的Dao/Mapper接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;nuc.ss.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        insert into mybatis.user (id, name, pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        update mybatis.user set name=#&#123;name&#125;,pwd = #&#123;pwd&#125; where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from mybatis.user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>maven配置资源过滤问题</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>编写部门的 UserController 进行测试！</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/queryUserList&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.queryUserList();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//添加一个用户</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/addUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userMapper.addUser(<span class="keyword">new</span> User(<span class="number">7</span>,<span class="string">&quot;阿毛&quot;</span>,<span class="string">&quot;123456&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改一个用户</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/updateUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userMapper.updateUser(<span class="keyword">new</span> User(<span class="number">7</span>,<span class="string">&quot;阿毛&quot;</span>,<span class="string">&quot;123456&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/deleteUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userMapper.deleteUser(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>启动项目访问进行测试！</strong></p>
<h1 id="（十）"><a href="#（十）" class="headerlink" title="（十）"></a>（十）</h1><h2 id="Web开发探究"><a href="#Web开发探究" class="headerlink" title="Web开发探究"></a>Web开发探究</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>其实SpringBoot的东西用起来非常简单，因为SpringBoot最大的特点就是自动装配。</p>
<p><strong>使用SpringBoot的步骤：</strong></p>
<p>1、创建一个SpringBoot应用，选择我们需要的模块，SpringBoot就会默认将我们的需要的模块自动配置好</p>
<p>2、手动在配置文件中配置部分配置项目就可以运行起来了</p>
<p>3、专注编写业务代码，不需要考虑以前那样一大堆的配置了。</p>
<p>要熟悉掌握开发，之前学习的自动配置的原理一定要搞明白！</p>
<p>比如SpringBoot到底帮我们配置了什么？我们能不能修改？我们能修改哪些配置？我们能不能扩展？</p>
<ul>
<li>向容器中自动配置组件 ：*** Autoconfiguration</li>
<li>自动配置类，封装配置文件的内容：***Properties</li>
</ul>
<p>没事就找找类，看看自动装配原理！</p>
<h2 id="静态资源处理"><a href="#静态资源处理" class="headerlink" title="静态资源处理"></a>静态资源处理</h2><h3 id="静态资源映射规则"><a href="#静态资源映射规则" class="headerlink" title="静态资源映射规则"></a>静态资源映射规则</h3><p><strong>首先，我们搭建一个普通的SpringBoot项目，回顾一下HelloWorld程序！</strong></p>
<p>写请求非常简单，那我们要引入我们前端资源，我们项目中有许多的静态资源，比如css，js等文件，这个SpringBoot怎么处理呢？</p>
<p>如果我们是一个web应用，我们的main下会有一个webapp，我们以前都是将所有的页面导在这里面的，对吧！但是我们现在的pom呢，打包方式是为jar的方式，那么这种方式SpringBoot能不能来给我们写页面呢？当然是可以的，但是SpringBoot对于静态资源放置的位置，是有规定的！</p>
<p><strong>我们先来聊聊这个静态资源映射规则：</strong></p>
<ul>
<li><p>SpringBoot中，SpringMVC的web配置都在 WebMvcAutoConfiguration 这个配置类里面；</p>
</li>
<li><p>我们可以去看看 WebMvcAutoConfigurationAdapter 中有很多配置方法；</p>
</li>
<li><p>有一个方法：addResourceHandlers 添加资源处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        <span class="comment">// 已禁用默认资源处理</span></span><br><span class="line">        logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 缓存控制</span></span><br><span class="line">    Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">    CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">    <span class="comment">// webjars 配置</span></span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>)</span><br><span class="line">                                             .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)</span><br><span class="line">                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态资源配置</span></span><br><span class="line">    String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class="line">                                             .addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations()))</span><br><span class="line">                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>读一下源代码：比如所有的 <code> /webjars/**</code> ， 都需要去 <code>classpath:/META-INF/resources/webjars/</code> 找对应的资源；</p>
</li>
</ul>
<h3 id="什么是webjars-呢？"><a href="#什么是webjars-呢？" class="headerlink" title="什么是webjars 呢？"></a>什么是webjars 呢？</h3><p>Webjars本质就是以jar包的方式引入我们的静态资源 ， 我们以前要导入一个静态资源文件，直接导入即可。</p>
<h4 id="第一种静态资源映射规则"><a href="#第一种静态资源映射规则" class="headerlink" title="第一种静态资源映射规则"></a>第一种静态资源映射规则</h4><p>使用SpringBoot需要使用Webjars，我们可以去搜索一下：</p>
<p>网站：<a href="https://www.webjars.org/">https://www.webjars.org</a></p>
<p>要使用jQuery，我们只要要引入jQuery对应版本的pom依赖即可！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>导入完毕，查看webjars目录结构，并访问Jquery.js文件！</p>
<p><img data-src="1595506633980.png" alt="1595506633980"></p>
<p>访问：只要是静态资源，SpringBoot就会去对应的路径寻找资源，我们这里访问：<a href="http://localhost:8080/webjars/jquery/3.4.1/jquery.js">http://localhost:8080/webjars/jquery/3.4.1/jquery.js</a></p>
<p><img data-src="1595506019658.png" alt="1595506019658"></p>
<h4 id="第二种静态资源映射规则"><a href="#第二种静态资源映射规则" class="headerlink" title="第二种静态资源映射规则"></a>第二种静态资源映射规则</h4><p>1、那我们项目中要是使用自己的静态资源该怎么导入呢？我们看下一行代码；</p>
<p><img data-src="1595516976999.png" alt="1595516976999"></p>
<p>2、我们去找 <code>staticPathPattern</code>发现第二种映射规则 ：/** , 访问当前的项目任意资源，它会去找 <code>resourceProperties</code> 这个类，我们可以点进去看一下分析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 进入方法</span></span><br><span class="line"><span class="keyword">public</span> String[] getStaticLocations() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.staticLocations;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找到对应的值</span></span><br><span class="line"><span class="keyword">private</span> String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span><br><span class="line"><span class="comment">// 找到路径</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; </span><br><span class="line">    <span class="string">&quot;classpath:/META-INF/resources/&quot;</span>,</span><br><span class="line">  	<span class="string">&quot;classpath:/resources/&quot;</span>, </span><br><span class="line">    <span class="string">&quot;classpath:/static/&quot;</span>, </span><br><span class="line">    <span class="string">&quot;classpath:/public/&quot;</span> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>3、ResourceProperties 可以设置和我们静态资源有关的参数；这里面指向了它会去寻找资源的文件夹，即上面数组的内容。</p>
<p>4、所以得出结论，以下四个目录存放的静态资源可以被我们识别：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;classpath:/META-INF/resources/&quot;</span></span><br><span class="line"><span class="string">&quot;classpath:/resources/&quot;</span></span><br><span class="line"><span class="string">&quot;classpath:/static/&quot;</span></span><br><span class="line"><span class="string">&quot;classpath:/public/&quot;</span></span><br></pre></td></tr></table></figure>

<p>5、我们可以在resources根目录下新建对应的文件夹，都可以存放我们的静态文件；</p>
<p><img data-src="1595517831392.png" alt="1595517831392"></p>
<p>6、比如我们访问 <a href="http://localhost:8080/1.js">http://localhost:8080/1.js</a> , 他就会去这些文件夹中寻找对应的静态资源文件；</p>
<p><img data-src="1595517869049.png" alt="1595517869049"></p>
<h4 id="自定义静态资源路径"><a href="#自定义静态资源路径" class="headerlink" title="自定义静态资源路径"></a>自定义静态资源路径</h4><p>我们也可以自己通过配置文件来指定一下，哪些文件夹是需要我们放静态资源文件的，在application.properties中配置；</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.resources.static-locations</span>=<span class="string">classpath:/coding/,classpath:/ss/</span></span><br></pre></td></tr></table></figure>

<p><img data-src="1595518276475.png" alt="1595518276475"></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol>
<li>在springboot，我们可以使用一下方式处理静态资源<ul>
<li>webjars<code>localhost:8080/webjars/</code></li>
<li>public，static，/**，resources<code>localhost:8080/</code></li>
</ul>
</li>
<li>优先级：resources &gt; static（默认） &gt; public</li>
</ol>
<h2 id="首页处理"><a href="#首页处理" class="headerlink" title="首页处理"></a>首页处理</h2><p>静态资源文件夹说完后，我们继续向下看源码！可以看到一个欢迎页的映射，就是我们的首页！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                           FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;</span><br><span class="line">    WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(</span><br><span class="line">        <span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),</span><br><span class="line">        <span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">    welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">    welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());</span><br><span class="line">    <span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>点进去继续看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Optional&lt;Resource&gt; <span class="title">getWelcomePage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] locations = getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">    <span class="comment">// ::是java8 中新引入的运算符</span></span><br><span class="line">    <span class="comment">// Class::function的时候function是属于Class的，应该是静态方法。</span></span><br><span class="line">    <span class="comment">// this::function的funtion是属于这个对象的。</span></span><br><span class="line">    <span class="comment">// 简而言之，就是一种语法糖而已，是一种简写</span></span><br><span class="line">    <span class="keyword">return</span> Arrays.stream(locations).map(<span class="keyword">this</span>::getIndexHtml).filter(<span class="keyword">this</span>::isReadable).findFirst();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 欢迎页就是一个location下的的 index.html 而已</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Resource <span class="title">getIndexHtml</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.resourceLoader.getResource(location + <span class="string">&quot;index.html&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>截图说明</p>
<p><img data-src="1595550098734.png" alt="1595550098734"></p>
<ul>
<li><p>欢迎页，静态资源文件夹下的所有 index.html 页面；被 /** 映射。</p>
</li>
<li><p>比如我访问  <a href="http://localhost:8080/">http://localhost:8080/</a> ，就会找静态资源文件夹下的 index.html</p>
</li>
<li><p>新建一个 index.html ，在我们上面的3个目录中任意一个；然后访问测试  <a href="http://localhost:8080/">http://localhost:8080/</a>  看结果！</p>
<p><img data-src="1595550394178.png" alt="1595550394178"></p>
</li>
</ul>
<p>1、**<code>&lt;font color=red&gt;</code>关于网站图标说明<code>&lt;/font&gt;</code>**：</p>
<p><strong>欢迎页面(Welcome Page)</strong></p>
<blockquote>
<p>Spring Boot supports both static and templated welcome pages. It first looks for an <code>index.html</code> file in the configured static content locations. If one is not found, it then looks for an <code>index template</code>. If either is found, it is automatically used as the welcome page of the application.</p>
</blockquote>
<p><strong>自定义应用图标（Custom Facicon）</strong></p>
<blockquote>
<p>Spring Boot looks for a <code>favicon.ico</code> in the configured static content locations and the root of the classpath (in that order). If such a file is present, it is automatically used as the favicon of the application.</p>
</blockquote>
<p>2、<code>&lt;font color=red&gt;</code>首页图标<code>&lt;/font&gt;</code></p>
<p><strong>2.2.x之前的版本（<code>&lt;font color=red&gt;</code>如2.1.7<code>&lt;/font&gt;</code>）springboot是这样</strong></p>
<p>与其他静态资源一样，Spring Boot在配置的静态内容位置中查找 favicon.ico。如果存在这样的文件，它将自动用作应用程序的favicon。</p>
<ol>
<li><p>关闭SpringBoot默认图标</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关闭默认图标</span></span><br><span class="line"><span class="meta">spring.mvc.favicon.enabled</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure></li>
<li><p>自己放一个图标在静态资源目录下，我放在 public 目录下</p>
<p><img data-src="1595554357772.png" alt="1595554357772"></p>
</li>
<li><p>清除浏览器缓存 <code>Ctrl + F5</code>！刷新网页，发现图标已经变成自己的了！</p>
</li>
</ol>
<p><strong>2.2.x之后的版本（<code>&lt;font color=red&gt;</code>如2.3.0<code>&lt;/font&gt;</code>）直接执行2和3就可以了</strong></p>
<p><img data-src="1595554118099.png" alt="1595554118099"></p>
<h1 id="（十一）"><a href="#（十一）" class="headerlink" title="（十一）"></a>（十一）</h1><h2 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h2><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><ul>
<li>前端交给我们的页面，是html页面。如果是我们以前开发，我们需要把他们转成jsp页面，jsp好处就是当我们查出一些数据转发到JSP页面以后，我们可以用jsp轻松实现数据的显示，及交互等。</li>
<li>jsp支持非常强大的功能，包括能写Java代码，但是呢，我们现在的这种情况，SpringBoot这个项目首先是以jar的方式，不是war，像第二，我们用的还是嵌入式的Tomcat，所以呢，<strong>他现在默认是不支持jsp的</strong>。</li>
<li>那不支持jsp，如果我们直接用纯静态页面的方式，那给我们开发会带来非常大的麻烦，那怎么办呢？</li>
</ul>
<p><strong>SpringBoot推荐你可以来使用模板引擎：</strong></p>
<p>模板引擎，我们其实大家听到很多，其实jsp就是一个模板引擎，还有用的比较多的freemarker，包括SpringBoot给我们推荐的Thymeleaf，模板引擎有非常多，但再多的模板引擎，他们的思想都是一样的，什么样一个思想呢我们来看一下这张图：</p>
<p><img data-src="1595555521951.png" alt="1595555521951"></p>
<p>模板引擎的作用就是我们来写一个页面模板，比如有些值呢，是动态的，我们写一些表达式。而这些值，从哪来呢，就是我们在后台封装一些数据。然后把这个模板和这个数据交给我们模板引擎，模板引擎按照我们这个数据帮你把这表达式解析、填充到我们指定的位置，然后把这个数据最终生成一个我们想要的内容给我们写出去，这就是我们这个模板引擎，不管是jsp还是其他模板引擎，都是这个思想。只不过呢，就是说不同模板引擎之间，他们可能这个语法有点不一样。其他的我就不介绍了，我主要来介绍一下SpringBoot给我们推荐的Thymeleaf模板引擎，这模板引擎呢，是一个高级语言的模板引擎，他的这个语法更简单。而且呢，功能更强大。</p>
<p>我们呢，就来看一下这个模板引擎，那既然要看这个模板引擎。首先，我们来看SpringBoot里边怎么用。</p>
<h3 id="引入Thymeleaf"><a href="#引入Thymeleaf" class="headerlink" title="引入Thymeleaf"></a>引入Thymeleaf</h3><p>怎么引入呢，对于springboot来说，什么事情不都是一个start的事情嘛，我们去在项目中引入一下。给大家三个网址：</p>
<ul>
<li>Thymeleaf 官网：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a></li>
<li>Thymeleaf 在Github 的主页：<a href="https://github.com/thymeleaf/thymeleaf">https://github.com/thymeleaf/thymeleaf</a></li>
<li>Spring官方文档：找到我们对应的版本<a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter </a></li>
</ul>
<p>找到对应的pom依赖：可以适当点进源码看下本来的包！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--thymeleaf--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Maven会自动下载jar包，我们可以去看下下载的东西；</p>
<h3 id="Thymeleaf分析"><a href="#Thymeleaf分析" class="headerlink" title="Thymeleaf分析"></a>Thymeleaf分析</h3><p>前面呢，我们已经引入了Thymeleaf，那这个要怎么使用呢？</p>
<p>我们首先得按照SpringBoot的自动配置原理看一下我们这个Thymeleaf的自动配置规则，在按照那个规则，我们进行使用。</p>
<p>我们去找一下Thymeleaf的自动配置类：<code>ThymeleafProperties</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(</span></span><br><span class="line"><span class="meta">    prefix = &quot;spring.thymeleaf&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">&quot;.html&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplate = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplateLocation = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> String prefix = <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String suffix = <span class="string">&quot;.html&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String mode = <span class="string">&quot;HTML&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> Charset encoding;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以在其中看到默认的前缀和后缀！</p>
<p>我们只需要把我们的html页面放在类路径下的templates下，thymeleaf就可以帮我们自动渲染了。</p>
<p>使用thymeleaf什么都不需要配置，只需要将他放在指定的文件夹下即可！</p>
<p><strong><code>&lt;font color=red&gt;</code>测试<code>&lt;/font&gt;</code></strong></p>
<ol>
<li><p>编写一个TestController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//classpath:/templates/test.html</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写一个测试页面  test.html 放在 templates 目录下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Test页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>启动项目请求测试</p>
</li>
</ol>
<p><img data-src="1595557596160.png" alt="1595557596160"></p>
<h3 id="Thymeleaf-语法学习"><a href="#Thymeleaf-语法学习" class="headerlink" title="Thymeleaf 语法学习"></a>Thymeleaf 语法学习</h3><p>要学习语法，还是参考官网文档最为准确，我们找到对应的版本看一下；</p>
<p>Thymeleaf 官网：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a> ， 简单看一下官网！我们去下载Thymeleaf的官方文档！在线文档：<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html</a></p>
<h4 id="Thymeleaf入门"><a href="#Thymeleaf入门" class="headerlink" title="Thymeleaf入门"></a>Thymeleaf入门</h4><p><strong>我们做个最简单的练习 ：我们需要查出一些数据，在页面中展示</strong></p>
<ol>
<li><p>修改测试请求，增加数据传输；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/t1&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    <span class="comment">//存入数据</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;Hello,Thymeleaf&quot;</span>);</span><br><span class="line">    <span class="comment">//classpath:/templates/test.html</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>我们要使用thymeleaf，需要在html文件中导入命名空间的约束，方便提示。</p>
<p>我们可以去官方文档的#3中看一下命名空间拿来过来：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xmlns:th=&quot;http://www.thymeleaf.org&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>我们去编写下前端页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>狂神说<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--th:text就是将div中的内容设置为它指定的值，和之前学习的Vue一样--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>启动测试！</p>
<p><img data-src="1595558424003.png" alt="1595558424003"></p>
</li>
</ol>
<p><strong>OK，入门搞定，我们来认真研习一下Thymeleaf的使用语法！</strong></p>
<h4 id="Thymeleaf语法"><a href="#Thymeleaf语法" class="headerlink" title="Thymeleaf语法"></a>Thymeleaf语法</h4><p><strong>1、我们可以使用任意的 th:attr 来替换Html中原生属性的值！</strong></p>
<p><strong>2、我们能写哪些表达式呢？</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Simple expressions:（表达式语法）</span><br><span class="line">Variable Expressions: $&#123;...&#125;：获取变量值；OGNL；</span><br><span class="line">    1）、获取对象的属性、调用方法</span><br><span class="line">    2）、使用内置的基本对象：#18</span><br><span class="line">         #ctx : the context object.</span><br><span class="line">         #vars: the context variables.</span><br><span class="line">         #locale : the context locale.</span><br><span class="line">         #request : (only in Web Contexts) the HttpServletRequest object.</span><br><span class="line">         #response : (only in Web Contexts) the HttpServletResponse object.</span><br><span class="line">         #session : (only in Web Contexts) the HttpSession object.</span><br><span class="line">         #servletContext : (only in Web Contexts) the ServletContext object.</span><br><span class="line"></span><br><span class="line">    3）、内置的一些工具对象：</span><br><span class="line">　　　　　　#execInfo : information about the template being processed.</span><br><span class="line">　　　　　　#uris : methods for escaping parts of URLs/URIs</span><br><span class="line">　　　　　　#conversions : methods for executing the configured conversion service (if any).</span><br><span class="line">　　　　　　#dates : methods for java.util.Date objects: formatting, component extraction, etc.</span><br><span class="line">　　　　　　#calendars : analogous to #dates , but for java.util.Calendar objects.</span><br><span class="line">　　　　　　#numbers : methods for formatting numeric objects.</span><br><span class="line">　　　　　　#strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span><br><span class="line">　　　　　　#objects : methods for objects in general.</span><br><span class="line">　　　　　　#bools : methods for boolean evaluation.</span><br><span class="line">　　　　　　#arrays : methods for arrays.</span><br><span class="line">　　　　　　#lists : methods for lists.</span><br><span class="line">　　　　　　#sets : methods for sets.</span><br><span class="line">　　　　　　#maps : methods for maps.</span><br><span class="line">　　　　　　#aggregates : methods for creating aggregates on arrays or collections.</span><br><span class="line">==================================================================================</span><br><span class="line"></span><br><span class="line">  Selection Variable Expressions: *&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样；</span><br><span class="line">  Message Expressions: #&#123;...&#125;：获取国际化内容</span><br><span class="line">  Link URL Expressions: @&#123;...&#125;：定义URL；</span><br><span class="line">  Fragment Expressions: ~&#123;...&#125;：片段引用表达式</span><br><span class="line"></span><br><span class="line">Literals（字面量）</span><br><span class="line">      Text literals: &#x27;one text&#x27; , &#x27;Another one!&#x27; ,…</span><br><span class="line">      Number literals: 0 , 34 , 3.0 , 12.3 ,…</span><br><span class="line">      Boolean literals: true , false</span><br><span class="line">      Null literal: null</span><br><span class="line">      Literal tokens: one , sometext , main ,…</span><br><span class="line">    </span><br><span class="line">Text operations:（文本操作）</span><br><span class="line">    String concatenation: +</span><br><span class="line">    Literal substitutions: |The name is $&#123;name&#125;|</span><br><span class="line">  </span><br><span class="line">Arithmetic operations:（数学运算）</span><br><span class="line">    Binary operators: + , - , * , / , %</span><br><span class="line">    Minus sign (unary operator): -</span><br><span class="line">  </span><br><span class="line">Boolean operations:（布尔运算）</span><br><span class="line">    Binary operators: and , or</span><br><span class="line">    Boolean negation (unary operator): ! , not</span><br><span class="line">  </span><br><span class="line">Comparisons and equality:（比较运算）</span><br><span class="line">    Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span><br><span class="line">    Equality operators: == , != ( eq , ne )</span><br><span class="line">  </span><br><span class="line">Conditional operators:条件运算（三元运算符）</span><br><span class="line">    If-then: (if) ? (then)</span><br><span class="line">    If-then-else: (if) ? (then) : (else)</span><br><span class="line">    Default: (value) ?: (defaultvalue)</span><br><span class="line">  </span><br><span class="line">Special tokens:</span><br><span class="line">    No-Operation: _</span><br></pre></td></tr></table></figure>

<p><strong>练习测试：</strong></p>
<p>1、 我们编写一个Controller，放一些数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>&#123;</span><br><span class="line">    <span class="comment">//存入数据</span></span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;&lt;h1&gt;Hello&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;users&quot;</span>, Arrays.asList(<span class="string">&quot;qinjiang&quot;</span>,<span class="string">&quot;kuangshen&quot;</span>));</span><br><span class="line">    <span class="comment">//classpath:/templates/test.html</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、测试页面取出数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Test页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不转义--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--转义--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--遍历数据--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--th:each每次遍历都会生成当前这个标签：官网#9--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">th:each</span>=<span class="string">&quot;user:$&#123;users&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--行内写法：官网#12--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">th:each</span>=<span class="string">&quot;user:$&#123;users&#125;&quot;</span>&gt;</span>[[ $&#123;user&#125; ]]<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、启动项目测试！</p>
<p><img data-src="1595560097876.png" alt="1595560097876"></p>
<p><strong>我们看完语法，很多样式，我们即使现在学习了，也会忘记，所以我们在学习过程中，需要使用什么，根据官方文档来查询，才是最重要的，要熟练使用官方文档！</strong></p>
<h1 id="（十二）"><a href="#（十二）" class="headerlink" title="（十二）"></a>（十二）</h1><h2 id="MVC自动配置原理"><a href="#MVC自动配置原理" class="headerlink" title="MVC自动配置原理"></a>MVC自动配置原理</h2><h3 id="官网阅读"><a href="#官网阅读" class="headerlink" title="官网阅读"></a>官网阅读</h3><p>在进行项目编写前，我们还需要知道一个东西，就是SpringBoot对我们的SpringMVC还做了哪些配置，包括如何扩展，如何定制。</p>
<p>只有把这些都搞清楚了，我们在之后使用才会更加得心应手。途径一：源码分析，途径二：官方文档！</p>
<p>地址 ：<a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Spring MVC Auto-configuration</span><br><span class="line">// Spring Boot为Spring MVC提供了自动配置，它可以很好地与大多数应用程序一起工作。</span><br><span class="line">Spring Boot provides auto-configuration for Spring MVC that works well with most applications.</span><br><span class="line">// 自动配置在Spring默认设置的基础上添加了以下功能：</span><br><span class="line">The auto-configuration adds the following features on top of Spring’s defaults:</span><br><span class="line">// 包含视图解析器</span><br><span class="line">Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans.</span><br><span class="line">// 支持静态资源文件夹的路径，以及webjars</span><br><span class="line">Support for serving static resources, including support for WebJars </span><br><span class="line">// 自动注册了Converter：</span><br><span class="line">// 转换器，这就是我们网页提交数据到后台自动封装成为对象的东西，比如把&quot;1&quot;字符串自动转换为int类型</span><br><span class="line">// Formatter：【格式化器，比如页面给我们了一个2019-8-10，它会给我们自动格式化为Date对象】</span><br><span class="line">Automatic registration of Converter, GenericConverter, and Formatter beans.</span><br><span class="line">// HttpMessageConverters</span><br><span class="line">// SpringMVC用来转换Http请求和响应的的，比如我们要把一个User对象转换为JSON字符串，可以去看官网文档解释；</span><br><span class="line">Support for HttpMessageConverters (covered later in this document).</span><br><span class="line">// 定义错误代码生成规则的</span><br><span class="line">Automatic registration of MessageCodesResolver (covered later in this document).</span><br><span class="line">// 首页定制</span><br><span class="line">Static index.html support.</span><br><span class="line">// 图标定制</span><br><span class="line">Custom Favicon support (covered later in this document).</span><br><span class="line">// 初始化数据绑定器：帮我们把请求数据绑定到JavaBean中！</span><br><span class="line">Automatic use of a ConfigurableWebBindingInitializer bean (covered later in this document).</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">如果您希望保留Spring Boot MVC功能，并且希望添加其他MVC配置（拦截器、格式化程序、视图控制器和其他功能），则可以添加自己</span><br><span class="line">的@configuration类，类型为webmvcconfiguer，但不添加@EnableWebMvc。如果希望提供</span><br><span class="line">RequestMappingHandlerMapping、RequestMappingHandlerAdapter或ExceptionHandlerExceptionResolver的自定义</span><br><span class="line">实例，则可以声明WebMVCregistrationAdapter实例来提供此类组件。</span><br><span class="line">*/</span><br><span class="line">If you want to keep Spring Boot MVC features and you want to add additional MVC configuration </span><br><span class="line">(interceptors, formatters, view controllers, and other features), you can add your own </span><br><span class="line">@Configuration class of type WebMvcConfigurer but without @EnableWebMvc. If you wish to provide </span><br><span class="line">custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or </span><br><span class="line">ExceptionHandlerExceptionResolver, you can declare a WebMvcRegistrationsAdapter instance to provide such components.</span><br><span class="line"></span><br><span class="line">// 如果您想完全控制Spring MVC，可以添加自己的@Configuration，并用@EnableWebMvc进行注释。</span><br><span class="line">If you want to take complete control of Spring MVC, you can add your own @Configuration annotated with @EnableWebMvc.</span><br></pre></td></tr></table></figure>

<p>我们来仔细对照，看一下它怎么实现的，它告诉我们SpringBoot已经帮我们自动配置好了SpringMVC，然后自动配置了哪些东西呢？</p>
<h3 id="内容协商视图解析器"><a href="#内容协商视图解析器" class="headerlink" title="内容协商视图解析器"></a>内容协商视图解析器</h3><p><strong>ContentNegotiatingViewResolver</strong></p>
<ul>
<li><p>自动配置了ViewResolver，就是我们之前学习的SpringMVC的视图解析器；</p>
</li>
<li><p>即根据方法的返回值取得视图对象（View），然后由视图对象决定如何渲染（转发，重定向）。</p>
</li>
<li><p>我们去看看这里的源码：我们找到 <code>WebMvcAutoConfiguration</code> ， 然后搜索 <code>ContentNegotiatingViewResolver</code>。找到如下方法！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(ViewResolver.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;viewResolver&quot;, value = ContentNegotiatingViewResolver.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ContentNegotiatingViewResolver <span class="title">viewResolver</span><span class="params">(BeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">    ContentNegotiatingViewResolver resolver = <span class="keyword">new</span> ContentNegotiatingViewResolver();</span><br><span class="line">    resolver.setContentNegotiationManager(beanFactory.getBean(ContentNegotiationManager.class));</span><br><span class="line">    <span class="comment">// ContentNegotiatingViewResolver使用所有其他视图解析器来定位视图，因此它应该具有较高的优先级</span></span><br><span class="line">    resolver.setOrder(Ordered.HIGHEST_PRECEDENCE);</span><br><span class="line">    <span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>我们可以点进这类看看！找到对应的解析视图的代码；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span> <span class="comment">// 注解说明：@Nullable 即参数可为null</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    RequestAttributes attrs = RequestContextHolder.getRequestAttributes();</span><br><span class="line">    Assert.state(attrs <span class="keyword">instanceof</span> ServletRequestAttributes, <span class="string">&quot;No current ServletRequestAttributes&quot;</span>);</span><br><span class="line">    List&lt;MediaType&gt; requestedMediaTypes = <span class="keyword">this</span>.getMediaTypes(((ServletRequestAttributes)attrs).getRequest());</span><br><span class="line">    <span class="keyword">if</span> (requestedMediaTypes != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取候选的视图对象</span></span><br><span class="line">        List&lt;View&gt; candidateViews = <span class="keyword">this</span>.getCandidateViews(viewName, locale, requestedMediaTypes);</span><br><span class="line">        <span class="comment">// 选择一个最适合的视图对象，然后把这个对象返回</span></span><br><span class="line">        View bestView = <span class="keyword">this</span>.getBestView(candidateViews, requestedMediaTypes, attrs);</span><br><span class="line">        <span class="keyword">if</span> (bestView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> bestView;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>我们继续点进去看，他是怎么获得候选的视图的呢？</p>
<p>getCandidateViews中看到他是把所有的视图解析器拿来，进行while循环，挨个解析！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator var5 = <span class="keyword">this</span>.viewResolvers.iterator();</span><br></pre></td></tr></table></figure>

<p>所以得出结论：<strong>ContentNegotiatingViewResolver 这个视图解析器就是用来组合所有的视图解析器的</strong></p>
</li>
<li><p>我们再去研究下他的组合逻辑，看到有个属性viewResolvers，看看它是在哪里进行赋值的！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initServletContext</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里它是从beanFactory工具中获取容器中的所有视图解析器</span></span><br><span class="line">    <span class="comment">// ViewRescolver.class 把所有的视图解析器来组合的</span></span><br><span class="line">    Collection&lt;ViewResolver&gt; matchingBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(<span class="keyword">this</span>.obtainApplicationContext(), ViewResolver.class).values();</span><br><span class="line">    ViewResolver viewResolver;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.viewResolvers == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.viewResolvers = <span class="keyword">new</span> ArrayList(matchingBeans.size());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...............</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>既然它是在容器中去找视图解析器，我们是否可以猜想，我们就可以去实现一个视图解析器了呢？</p>
</li>
</ul>
<p><strong>自定义视图解析器</strong></p>
<p>我们可以自己给容器中去添加一个视图解析器；这个类就会帮我们自动的将它组合进来；<strong>我们去实现一下</strong></p>
<ol>
<li><p>我们在我们的主程序中去写一个视图解析器来试试；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//扩展 springmvc      DispatchServlet</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// public interface ViewResolver 实现了视图解析器接口的类，我们就可以吧它看做视图解析器</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">myViewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyViewResolver();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 自定义了一个自己的视图解析器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewResolver</span> <span class="keyword">implements</span> <span class="title">ViewResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String s, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>我们给 DispatcherServlet 中的 doDispatch方法 加个断点进行调试一下，因为所有的请求都会走到这个方法中</p>
<p><img data-src="1595564720595.png" alt="1595564720595"></p>
</li>
<li><p>我们启动我们的项目，然后随便访问一个页面，看一下Debug信息；</p>
<p>找到this(<code>&lt;font color=red&gt;</code>就是DispatcherServlet<code>&lt;/font&gt;</code>)</p>
<p><img data-src="1595564823239.png" alt="1595564823239"></p>
<p>找到视图解析器（<code>&lt;font color=red&gt;</code>viewResolvers<code>&lt;/font&gt;</code>），我们看到我们自己定义的就在这里了；</p>
<p><img data-src="1595564942873.png" alt="1595564942873"></p>
</li>
</ol>
<ul>
<li>所以说，我们如果想要使用自己定制化的东西，我们只需要给容器中添加这个组件就好了！剩下的事情SpringBoot就会帮我们做了！</li>
</ul>
<h3 id="转换器和格式化器"><a href="#转换器和格式化器" class="headerlink" title="转换器和格式化器"></a>转换器和格式化器</h3><ul>
<li><p>在 <code>WebMvcAutoConfiguration</code>中找到格式化转换器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FormattingConversionService <span class="title">mvcConversionService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 拿到配置文件中的格式化规则</span></span><br><span class="line">    WebConversionService conversionService = </span><br><span class="line">        <span class="keyword">new</span> WebConversionService(<span class="keyword">this</span>.mvcProperties.getDateFormat());</span><br><span class="line">    addFormatters(conversionService);</span><br><span class="line">    <span class="keyword">return</span> conversionService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>点击去：可以看到在我们的Properties文件中，我们可以进行自动配置它！</p>
<ul>
<li><p>2.2.x之前版本</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDateFormat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.dateFormat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Date format to use. For instance, `dd/MM/yyyy`. 默认的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String dateFormat;</span><br></pre></td></tr></table></figure></li>
<li><p>2.2.x之后的版本</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDateFormat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.format.getDate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	* Date format to use, for example `dd/MM/yyyy`.默认的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> String date;</span><br></pre></td></tr></table></figure></li>
<li><p>如果配置了自己的格式化方式，就会注册到Bean中生效，我们可以在配置文件中配置日期格式化的规则：</p>
<ul>
<li><p>2.2.x版本之前的</p>
<p>配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line"><span class="meta">spring.nvc.date-format</span>=<span class="string"></span></span><br></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDateFormat</span><span class="params">(String dateFormat)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dateFormat = dateFormat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>2.2.x版本之后的</p>
<p>配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.nvc.date</span>=<span class="string"></span></span><br></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDateFormat</span><span class="params">(String dateFormat)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.format.setDate(dateFormat);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(String date)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.date = date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p>其余的就不一一举例了，大家可以下去多研究探讨即可！</p>
<h3 id="修改SpringBoot的默认配置"><a href="#修改SpringBoot的默认配置" class="headerlink" title="修改SpringBoot的默认配置"></a>修改SpringBoot的默认配置</h3><ul>
<li><p>这么多的自动配置，原理都是一样的，通过这个WebMVC的自动配置原理分析，我们要学会一种学习方式，通过源码探究，得出结论；这个结论一定是属于自己的，而且一通百通。</p>
</li>
<li><p>SpringBoot的底层，大量用到了这些设计细节思想，所以，没事需要多阅读源码！得出结论；</p>
</li>
<li><p>SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（如果用户自己配置@bean），如果有就用用户配置的，如果没有就用自动配置的；</p>
</li>
<li><p>如果有些组件可以存在多个，比如我们的视图解析器，就将用户配置的和自己默认的组合起来！</p>
</li>
<li><p><strong>扩展使用SpringMVC</strong>  官方文档如下：</p>
<p>If you want to keep Spring Boot MVC features and you want to add additional MVC configuration (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> <code>&lt;font color=red&gt;</code><strong>but without</strong> <code>@EnableWebMvc&lt;/font&gt;</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, you can declare a WebMvcRegistrationsAdapter instance to provide such components.</p>
</li>
<li><p>我们要做的就是编写一个 <code>@Configuration</code>注解类，并且类型要为 <code>WebMvcConfigurer</code>，还不能标注 <code>@EnableWebMvc</code>注解；我们去自己写一个；</p>
</li>
<li><p>我们新建一个包叫config，写一个类MyMvcConfig；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果我们要扩展springmvc，官方建议我们这样去做@Configuration</span></span><br><span class="line"><span class="comment">//应为类型要求为WebMvcConfigurer，所以我们实现其接口</span></span><br><span class="line"><span class="comment">//扩展 springmvc      DispatchServlet</span></span><br><span class="line"><span class="comment">//@EnableWebMvc //这玩意就是导入了一个类，DelegatingWebMvcConfiguration，从容器中获取所有的webMvcConfig</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 浏览器发送/test ， 就会跳转到test页面；</span></span><br><span class="line">        registry.addViewController(<span class="string">&quot;/test2&quot;</span>).setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>我们去浏览器访问一下：</p>
<p><img data-src="1595584684727.png" alt="1595584684727"></p>
</li>
</ul>
<p><strong>确实也跳转过来了！所以说，我们要扩展SpringMVC，官方就推荐我们这么去使用，既保SpringBoot留所有的自动配置，也能用我们扩展的配置！</strong></p>
<p>我们可以去分析一下原理：</p>
<ol>
<li><p><code>WebMvcAutoConfiguration</code> 是 SpringMVC的自动配置类，里面有一个类 <code>WebMvcAutoConfigurationAdapter</code></p>
</li>
<li><p>这个类上有一个注解，在做其他自动配置时会导入：<code>@Import(EnableWebMvcConfiguration.class)</code></p>
</li>
<li><p>我们点进 <code>EnableWebMvcConfiguration</code>这个类看一下，它继承了一个父类：<code>DelegatingWebMvcConfiguration</code></p>
<p>这个父类中有这样一段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从容器中获取所有的webmvcConfigurer</span></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>我们可以在这个类中去寻找一个我们刚才设置的viewController当做参考，发现它调用了一个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.configurers.addViewControllers(registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>我们点进去看一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">    Iterator var2 = <span class="keyword">this</span>.delegates.iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(var2.hasNext()) &#123;</span><br><span class="line">        <span class="comment">// 将所有的WebMvcConfigurer相关配置来一起调用！包括我们自己配置的和Spring给我们配置的</span></span><br><span class="line">        WebMvcConfigurer delegate = (WebMvcConfigurer)var2.next();</span><br><span class="line">        delegate.addViewControllers(registry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>得出结论</strong>：所有的 <code>WebMvcConfiguration</code>都会被作用，不止Spring自己的配置类，我们自己的配置类当然也会被调用；</p>
<h3 id="全面接管SpringMVC"><a href="#全面接管SpringMVC" class="headerlink" title="全面接管SpringMVC"></a>全面接管SpringMVC</h3><ul>
<li><p>官方文档：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">If you want to take complete control of Spring MVC</span><br><span class="line">you can add your own @Configuration annotated with @EnableWebMvc.</span><br></pre></td></tr></table></figure></li>
<li><p>全面接管即：SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己去配置！</p>
</li>
<li><p>只需在我们的配置类中要加一个 <code>@EnableWebMvc</code>。</p>
</li>
<li><p>我们看下如果我们全面接管了SpringMVC了，我们之前SpringBoot给我们配置的静态资源映射一定会无效，我们可以去测试一下；</p>
</li>
<li><p>不加注解之前，访问首页：</p>
<p><img data-src="1595587645715.png" alt="1595587645715"></p>
</li>
<li><p>给配置类加上注解：<code>@EnableWebMvc</code></p>
<p>我们发现所有的SpringMVC自动配置都失效了！回归到了最初的样子；</p>
<p><img data-src="1595587533039.png" alt="1595587533039"></p>
</li>
</ul>
<p><strong>当然，我们开发中，不推荐使用全面接管SpringMVC</strong></p>
<p>思考问题？为什么加了一个注解，自动配置就失效了！我们看下源码：</p>
<ol>
<li><p>这里发现它是导入了一个类，我们可以继续进去看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;DelegatingWebMvcConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableWebMvc &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>它继承了一个父类 WebMvcConfigurationSupport</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>我们来回顾一下Webmvc自动配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span></span><br><span class="line"><span class="comment">// 这个注解的意思就是：容器中没有这个组件的时候，这个自动配置类才生效</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">    ValidationAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>总结：</strong></p>
<ul>
<li><code>@EnableWebMvc</code>将<code>WebMvcConfigurationSupport</code>组件导入进来了；</li>
<li>导入的<code>WebMvcConfigurationSupport</code>只是SpringMVC最基本的功能！</li>
<li><strong>在springboot中，有非常多的xxxxconfigure帮助我们进行扩展配置，只要看到这个东西就要注意了</strong></li>
</ul>
<h1 id="（十三）"><a href="#（十三）" class="headerlink" title="（十三）"></a>（十三）</h1><h2 id="页面国际化"><a href="#页面国际化" class="headerlink" title="页面国际化"></a>页面国际化</h2><p>有的时候，我们的网站会去涉及中英文甚至多语言的切换，这时候我们就需要学习国际化了！</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>先在IDEA中统一设置properties的编码问题！</p>
<p><img data-src="1595594403624.png" alt="1595594403624"></p>
<p>编写国际化配置文件，抽取页面需要显示的国际化页面消息。我们可以去登录页面查看一下，哪些内容我们需要编写国际化的配置！</p>
<h3 id="配置文件编写"><a href="#配置文件编写" class="headerlink" title="配置文件编写"></a>配置文件编写</h3><ol>
<li><p>我们在resources资源文件下新建一个i18n（internationalization缩写）目录，存放国际化配置文件</p>
</li>
<li><p>建立一个 <code>login.properties</code>文件，还有一个 <code>login_zh_CN.properties</code>；发现IDEA自动识别了我们要做国际化操作；文件夹变了！</p>
<p><img data-src="1595604595071.png" alt="1595604595071"></p>
</li>
<li><p>我们可以在这上面去新建一个文件；</p>
<p><img data-src="1595604664699.png" alt="1595604664699"></p>
<p>弹出如下页面：我们再添加一个英文的；</p>
<p><img data-src="1595605422294.png" alt="1595605422294"></p>
<p>这样就快捷多了！</p>
<p><img data-src="1595605442883.png" alt="1595605442883"></p>
</li>
<li><p><strong>接下来，我们就来编写配置，我们可以看到idea下面有另外一个视图；</strong></p>
<p><img data-src="1595605469344.png" alt="1595605469344"></p>
<p>这个视图我们点击 + 号就可以直接添加属性了；我们新建一个login.tip，可以看到边上有三个文件框可以输入</p>
<p><img data-src="1595605530046.png" alt="1595605530046"></p>
<p>然后依次添加其他页面内容即可！</p>
<p><img data-src="1595605552329.png" alt="1595605552329"></p>
<p>然后去查看我们的配置文件；</p>
<p>login.properties ：</p>
<p>默认</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">login.btn=登录</span><br><span class="line">login.password=密码</span><br><span class="line">login.remember=记住我</span><br><span class="line">login.tip=请登录</span><br><span class="line">login.username=用户名</span><br></pre></td></tr></table></figure>

<p>英文：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">login.btn=Sign in</span><br><span class="line">login.password=Password</span><br><span class="line">login.remember=Remember me</span><br><span class="line">login.tip=Please sign in</span><br><span class="line">login.username=Username</span><br></pre></td></tr></table></figure>

<p>中文：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">login.btn=登录</span><br><span class="line">login.password=密码</span><br><span class="line">login.remember=记住我</span><br><span class="line">login.tip=请登录</span><br><span class="line">login.username=用户名</span><br></pre></td></tr></table></figure>

<p>OK，配置文件步骤搞定！</p>
</li>
</ol>
<h3 id="配置文件生效探究"><a href="#配置文件生效探究" class="headerlink" title="配置文件生效探究"></a>配置文件生效探究</h3><p>我们去看一下SpringBoot对国际化的自动配置！这里又涉及到一个类：<code>MessageSourceAutoConfiguration</code></p>
<p>里面有一个方法，这里发现SpringBoot已经自动配置好了管理我们国际化资源文件的组件 <code>ResourceBundleMessageSource</code>；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 properties 传递过来的值进行判断</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">(MessageSourceProperties properties)</span> </span>&#123;</span><br><span class="line">    ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasText(properties.getBasename())) &#123;</span><br><span class="line">        <span class="comment">// 设置国际化文件的基础名（去掉语言国家代码的）</span></span><br><span class="line">        messageSource.setBasenames(</span><br><span class="line">            StringUtils.commaDelimitedListToStringArray(</span><br><span class="line">                                       StringUtils.trimAllWhitespace(properties.getBasename())));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (properties.getEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        messageSource.setDefaultEncoding(properties.getEncoding().name());</span><br><span class="line">    &#125;</span><br><span class="line">    messageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale());</span><br><span class="line">    Duration cacheDuration = properties.getCacheDuration();</span><br><span class="line">    <span class="keyword">if</span> (cacheDuration != <span class="keyword">null</span>) &#123;</span><br><span class="line">        messageSource.setCacheMillis(cacheDuration.toMillis());</span><br><span class="line">    &#125;</span><br><span class="line">    messageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat());</span><br><span class="line">    messageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage());</span><br><span class="line">    <span class="keyword">return</span> messageSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们真实 的情况是放在了i18n目录下，所以我们要去配置这个messages的路径；</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.messages.basename</span>=<span class="string">i18n.login</span></span><br></pre></td></tr></table></figure>

<h3 id="配置页面国际化值"><a href="#配置页面国际化值" class="headerlink" title="配置页面国际化值"></a>配置页面国际化值</h3><p>去页面获取国际化的值，查看Thymeleaf的文档，找到message取值操作为：#{…}。我们去页面测试下：</p>
<p>IDEA还有提示，非常智能的！</p>
<p><img data-src="1595606566975.png" alt="1595606566975"></p>
<p>我们可以去启动项目，访问一下，发现已经自动识别为中文的了！</p>
<p><img data-src="1595606666498.png" alt="1595606666498"></p>
<p><strong>但是我们想要更好！可以根据按钮自动切换中文英文！</strong></p>
<h3 id="配置国际化解析"><a href="#配置国际化解析" class="headerlink" title="配置国际化解析"></a>配置国际化解析</h3><p>在Spring中有一个国际化的Locale （区域信息对象）；里面有一个叫做 <code>LocaleResolver </code>（获取区域信息对象）的解析器！</p>
<p>我们去我们webmvc自动配置文件，寻找一下！看到SpringBoot默认配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;locale&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 容器中没有就自己配，有的话就用用户配置的</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 接收头国际化分解</span></span><br><span class="line">    AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">    localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">    <span class="keyword">return</span> localeResolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AcceptHeaderLocaleResolver</code> 这个类中有一个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    Locale defaultLocale = <span class="keyword">this</span>.getDefaultLocale();</span><br><span class="line">    <span class="comment">// 默认的就是根据请求头带来的区域信息获取Locale进行国际化</span></span><br><span class="line">    <span class="keyword">if</span> (defaultLocale != <span class="keyword">null</span> &amp;&amp; request.getHeader(<span class="string">&quot;Accept-Language&quot;</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> defaultLocale;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Locale requestLocale = request.getLocale();</span><br><span class="line">        List&lt;Locale&gt; supportedLocales = <span class="keyword">this</span>.getSupportedLocales();</span><br><span class="line">        <span class="keyword">if</span> (!supportedLocales.isEmpty() &amp;&amp; !supportedLocales.contains(requestLocale)) &#123;</span><br><span class="line">            Locale supportedLocale = <span class="keyword">this</span>.findSupportedLocale(request, supportedLocales);</span><br><span class="line">            <span class="keyword">if</span> (supportedLocale != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> supportedLocale;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> defaultLocale != <span class="keyword">null</span> ? defaultLocale : requestLocale;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> requestLocale;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那假如我们现在想点击链接让我们的国际化资源生效，就需要让我们自己的Locale生效！</p>
<p>我们去自己写一个自己的 <code>LocaleResolver</code>，可以在链接上携带区域信息！</p>
<p>修改一下前端页面的跳转连接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里传入参数不需要使用 ？使用 （key=value）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(l=&#x27;zh_CN&#x27;)&#125;&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(l=&#x27;en_US&#x27;)&#125;&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们去写一个处理的组件类！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.LocaleResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以在链接上携带区域信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//解析请求</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     String language = request.getParameter(<span class="string">&quot;l&quot;</span>);</span><br><span class="line">     Locale locale = Locale.getDefault(); <span class="comment">// 如果没有获取到就使用系统默认的</span></span><br><span class="line">     <span class="comment">//如果请求链接不为空</span></span><br><span class="line">     <span class="keyword">if</span> (!StringUtils.isEmpty(language))&#123;</span><br><span class="line">         <span class="comment">//分割请求参数</span></span><br><span class="line">         String[] split = language.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">         <span class="comment">//国家，地区</span></span><br><span class="line">         locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>],split[<span class="number">1</span>]);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> locale;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了让我们的区域化信息能够生效，我们需要再配置一下这个组件！在我们自己的 <code>MvcConofig</code>下添加 <code>bean</code>；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>我们重启项目，来访问一下，发现点击按钮可以实现成功切换！搞定收工！</strong></p>
<p><img data-src="1595666066757.png" alt="1595666066757"></p>
<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><ol>
<li>首页配置：<ul>
<li>注意点，所有页面的静态资源都需要使用thymeleaf接管</li>
<li>url:@{}</li>
</ul>
</li>
<li>页面国际化<ul>
<li>我们需要配置i18n文件</li>
<li>我们如果需要在项目中进行按钮自动切换，我们需要定义一个组件<code>LocalResolver</code></li>
<li>记得将自己写的组件配置到spring容器<code>@Bean</code></li>
<li>#{}</li>
</ul>
</li>
</ol>
<h1 id="（十四）"><a href="#（十四）" class="headerlink" title="（十四）"></a>（十四）</h1><h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><ul>
<li>了解Swagger的概念及作用</li>
<li>了解前后端分离</li>
<li>在springboot中集成swagger</li>
</ul>
<h3 id="Swagger简介"><a href="#Swagger简介" class="headerlink" title="Swagger简介"></a>Swagger简介</h3><p><strong>前后端分离</strong></p>
<p>Vue+SpringBoot</p>
<p>后端时代：前端只用管理静态页面；html==&gt;后端。模板引擎JSP=&gt;后端才是主力</p>
<p><strong>前后端分离时代</strong></p>
<ul>
<li>前端 -&gt; 前端控制层、视图层<ul>
<li>伪造后端数据，json。已经存在了，不需要后端，前端工程队依旧能够跑起来</li>
</ul>
</li>
<li>后端 -&gt; 后端控制层、服务层、数据访问层</li>
<li>前后端通过API进行交互</li>
<li>前后端相对独立且松耦合</li>
</ul>
<p><strong>产生的问题</strong></p>
<ul>
<li>前后端集成联调，前端或者后端无法做到“及时协商，尽早解决”，最终导致问题集中爆发</li>
</ul>
<p><strong>解决方案</strong></p>
<ul>
<li>首先定义schema [ 计划的提纲 ]，并实时跟踪最新的API，降低集成风险；</li>
<li>早些年：指定word计划文档；</li>
<li>前后端分离：<ul>
<li>前端测试后端接口：postman</li>
<li>后端提供接口，需要实时更新最新的消息及改动</li>
</ul>
</li>
</ul>
<h3 id="Swagger-1"><a href="#Swagger-1" class="headerlink" title="Swagger"></a>Swagger</h3><ul>
<li>号称世界上最流行的API框架</li>
<li>Restful Api 文档在线自动生成器 =&gt;<code>&lt;font color=red&gt;</code><strong>API 文档 与API 定义同步更新</strong><code>&lt;/font&gt;</code></li>
<li>直接运行，在线测试API</li>
<li>支持多种语言 （如：Java，PHP等）</li>
<li>官网：<a href="https://swagger.io/">https://swagger.io/</a></li>
</ul>
<h3 id="SpringBoot集成Swagger"><a href="#SpringBoot集成Swagger" class="headerlink" title="SpringBoot集成Swagger"></a>SpringBoot集成Swagger</h3><p><strong>SpringBoot集成Swagger</strong> =&gt; <strong>springfox</strong>，两个jar包</p>
<ul>
<li><strong><a href="https://mvnrepository.com/artifact/io.springfox/springfox-swagger2">Springfox-swagger2</a></strong></li>
<li><a href="https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui">springfox-swagger-ui</a></li>
</ul>
<p><strong>使用Swagger</strong></p>
<p>要求：jdk 1.8 + 否则swagger2无法运行</p>
<p>步骤：</p>
<ol>
<li><p>新建一个SpringBoot-web项目</p>
</li>
<li><p>添加Maven依赖（<code>&lt;font color=red&gt;</code>注意：2.9.2版本之前，之后的不行<code>&lt;/font&gt;</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;<span class="number">2.9</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;<span class="number">2.9</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>编写HelloController，测试确保运行成功！</p>
</li>
<li><p>要使用Swagger，我们需要编写一个配置类-SwaggerConfig来配置 Swagger</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span><span class="comment">// 开启Swagger2的自动配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>访问测试 ：<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a> ，可以看到swagger的界面；</p>
<p><img data-src="image-20200731132229265.png" alt="image-20200731132229265"></p>
</li>
</ol>
<h3 id="配置Swagger"><a href="#配置Swagger" class="headerlink" title="配置Swagger"></a>配置Swagger</h3><ol>
<li><p>Swagger实例Bean是Docket，所以通过配置Docket实例来配置Swaggger。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span> <span class="comment">//配置docket以配置Swagger具体参数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>可以通过apiInfo()属性配置文档信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置文档信息</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   Contact contact = <span class="keyword">new</span> Contact(<span class="string">&quot;联系人名字&quot;</span>, <span class="string">&quot;http://xxx.xxx.com/联系人访问链接&quot;</span>, <span class="string">&quot;联系人邮箱&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(</span><br><span class="line">           <span class="string">&quot;Swagger学习&quot;</span>, <span class="comment">// 标题</span></span><br><span class="line">           <span class="string">&quot;学习演示如何配置Swagger&quot;</span>, <span class="comment">// 描述</span></span><br><span class="line">           <span class="string">&quot;v1.0&quot;</span>, <span class="comment">// 版本</span></span><br><span class="line">           <span class="string">&quot;http://terms.service.url/组织链接&quot;</span>, <span class="comment">// 组织链接</span></span><br><span class="line">           contact, <span class="comment">// 联系人信息</span></span><br><span class="line">           <span class="string">&quot;Apach 2.0 许可&quot;</span>, <span class="comment">// 许可</span></span><br><span class="line">           <span class="string">&quot;许可链接&quot;</span>, <span class="comment">// 许可连接</span></span><br><span class="line">           <span class="keyword">new</span> ArrayList&lt;&gt;()<span class="comment">// 扩展</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Docket 实例关联上 apiInfo()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>重启项目，访问测试 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a>  看下效果；</p>
<p><img data-src="image-20200731161851136.png" alt="image-20200731161851136"></p>
</li>
</ol>
<h3 id="配置扫描接口"><a href="#配置扫描接口" class="headerlink" title="配置扫描接口"></a>配置扫描接口</h3><ol>
<li><p>构建Docket时通过select()方法配置怎么扫描接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">      .apiInfo(apiInfo())</span><br><span class="line">      .select()<span class="comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span></span><br><span class="line">      .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;nuc.ss.swagger.controller&quot;</span>))</span><br><span class="line">      .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>重启项目测试，由于我们配置根据包的路径扫描接口，所以我们只能看到一个类</p>
<p><img data-src="image-20200731165837391.png" alt="image-20200731165837391"></p>
</li>
<li><p>除了通过包路径配置扫描接口外，还可以通过配置其他方式扫描接口，这里注释一下所有的配置方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">basePackage(final String basePackage) // 根据包路径扫描接口</span><br><span class="line">any() // 扫描所有，项目中的所有接口都会被扫描到</span><br><span class="line">none() // 不扫描接口</span><br><span class="line">// 通过方法上的注解扫描，如withMethodAnnotation(GetMapping.class)只扫描get请求</span><br><span class="line">withMethodAnnotation(final Class&lt;? extends Annotation&gt; annotation)</span><br><span class="line">// 通过类上的注解扫描，如.withClassAnnotation(Controller.class)只扫描有controller注解的类中的接口</span><br><span class="line">withClassAnnotation(final Class&lt;? extends Annotation&gt; annotation)</span><br></pre></td></tr></table></figure></li>
<li><p>除此之外，我们还可以配置接口扫描过滤：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">      .apiInfo(apiInfo())</span><br><span class="line">      .select()</span><br><span class="line">      .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.kuang.swagger.controller&quot;</span>))</span><br><span class="line">       <span class="comment">// 配置如何通过path过滤,即这里只扫描请求以/ss开头的接口</span></span><br><span class="line">      .paths(PathSelectors.ant(<span class="string">&quot;/ss/**&quot;</span>))</span><br><span class="line">      .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>这里的可选值还有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">any() // 任何请求都扫描</span><br><span class="line">none() // 任何请求都不扫描</span><br><span class="line">regex(final String pathRegex) // 通过正则表达式控制</span><br><span class="line">ant(final String antPattern) // 通过ant()控制</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="配置Swagger开关"><a href="#配置Swagger开关" class="headerlink" title="配置Swagger开关"></a>配置Swagger开关</h3><ol>
<li><p>通过enable()方法配置是否启用swagger，如果是false，swagger将不能在浏览器中访问了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">      .apiInfo(apiInfo())</span><br><span class="line">      .enable(<span class="keyword">false</span>) <span class="comment">//配置是否启用Swagger，如果是false，在浏览器将无法访问</span></span><br><span class="line">      .select()</span><br><span class="line">      .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;nuc.ss.swagger.controller&quot;</span>))</span><br><span class="line">      .paths(PathSelectors.ant(<span class="string">&quot;/ss/**&quot;</span>))</span><br><span class="line">      .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img data-src="image-20200731190614381.png" alt="image-20200731190614381"></p>
<ol start="2">
<li><p>如何动态配置当项目处于test、dev环境时显示swagger，处于prod时不显示？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 设置要显示swagger的环境</span></span><br><span class="line">   Profiles of = Profiles.of(<span class="string">&quot;dev&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">   <span class="comment">// 判断当前是否处于该环境</span></span><br><span class="line">   <span class="comment">// 通过 enable() 接收此参数判断是否要显示</span></span><br><span class="line">   <span class="keyword">boolean</span> b = environment.acceptsProfiles(of);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">      .apiInfo(apiInfo())</span><br><span class="line">      .enable(b)</span><br><span class="line">      .select()</span><br><span class="line">      .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.kuang.swagger.controller&quot;</span>))</span><br><span class="line">      .paths(PathSelectors.ant(<span class="string">&quot;/ss/**&quot;</span>))</span><br><span class="line">      .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>可以在项目中增加配置文件</p>
<ul>
<li><p>dev测试环境</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br></pre></td></tr></table></figure>

<p><img data-src="image-20200731193109826.png" alt="image-20200731193109826"></p>
<p>项目运行结果</p>
<p><img data-src="image-20200731193425090.png" alt="image-20200731193425090"></p>
</li>
<li><p>pro测试环境</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8082</span></span><br></pre></td></tr></table></figure>

<p><img data-src="image-20200731194455510.png" alt="image-20200731194455510"></p>
<p>项目运行结果</p>
<p><img data-src="image-20200731194559290.png" alt="image-20200731194559290"></p>
</li>
</ul>
</li>
</ol>
<h3 id="配置API分组"><a href="#配置API分组" class="headerlink" title="配置API分组"></a>配置API分组</h3><ol>
<li><p>如果没有配置分组，默认是default。通过groupName()方法即可配置分组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo())</span><br><span class="line">      .groupName(<span class="string">&quot;狂神&quot;</span>) <span class="comment">// 配置分组</span></span><br><span class="line">       <span class="comment">// 省略配置....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>重启项目查看分组</p>
<p><img data-src="image-20200731195354714.png" alt="image-20200731195354714"></p>
</li>
<li><p>如何配置多个分组？配置多个分组只需要配置多个docket即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket1</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket2</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;group2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket3</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;group3&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>重启项目查看即可</p>
<p><img data-src="image-20200731195543102.png" alt="image-20200731195543102"></p>
</li>
</ol>
<h3 id="实体配置"><a href="#实体配置" class="headerlink" title="实体配置"></a>实体配置</h3><ol>
<li><p>新建一个实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Api(&quot;注释&quot;)</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;用户实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;密码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>只要这个实体在<strong>请求接口</strong>的返回值上（即使是泛型），都能映射到实体项中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//   /error默认错误请求</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只要我们的接口中，返回值中存在实体类，他就会被扫描到Swagger中</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>重启查看测试</p>
<p><img data-src="image-20200731200413725.png" alt="image-20200731200413725"></p>
</li>
</ol>
<p><code>&lt;font color=red&gt;</code>注：并不是因为@ApiModel这个注解让实体显示在这里了，而是只要出现在接口方法的返回值上的实体都会显示在这里，而@ApiModel和@ApiModelProperty这两个注解只是为实体添加注释的<code>&lt;/font&gt;</code>。</p>
<ul>
<li>@ApiModel为类添加注释</li>
<li>@ApiModelProperty为类属性添加注释</li>
</ul>
<p><strong>总结：</strong></p>
<ul>
<li>我们可以通过Swagger给一些比较难理解的接口或者属性，增加注释信息</li>
<li>接口文档实时更新</li>
<li>可以在线测试</li>
</ul>
<p>Swagger是一个优秀的工具，几乎所有大公司都有使用它</p>
<p><code>&lt;font color=red&gt;</code>【注意点】：在正式发布的时候，关闭Swagger！！！<code>&lt;/font&gt;</code></p>
<ul>
<li>出于安全考虑</li>
<li>而且节省内存</li>
</ul>
<h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><p>Swagger的所有注解定义在io.swagger.annotations包下</p>
<p>下面列一些经常用到的，未列举出来的可以另行查阅说明：</p>
<table>
<thead>
<tr>
<th>Swagger注解</th>
<th>简单说明</th>
</tr>
</thead>
<tbody><tr>
<td>@Api(tags = “xxx模块说明”)</td>
<td>作用在模块类上</td>
</tr>
<tr>
<td>@ApiOperation(“xxx接口说明”)</td>
<td>作用在接口方法上</td>
</tr>
<tr>
<td>@ApiModel(“xxxPOJO说明”)</td>
<td>作用在模型类上：如VO、BO</td>
</tr>
<tr>
<td>@ApiModelProperty(value = “xxx属性说明”,hidden = true)</td>
<td>作用在类方法和属性上，hidden设置为true可以隐藏该属性</td>
</tr>
<tr>
<td>@ApiParam(“xxx参数说明”)</td>
<td>作用在参数、方法和字段上，类似@ApiModelProperty</td>
</tr>
</tbody></table>
<p>我们也可以给请求的接口配置一些注释</p>
<ol>
<li><p>在HelloController控制类中的接口添加api接口注释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="meta">@ApiOperation(&quot;Hello控制接口&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello2</span><span class="params">(<span class="meta">@ApiParam(&quot;用户名&quot;)</span> String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span> + username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;get测试&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">hello2</span><span class="params">(<span class="meta">@ApiParam(&quot;用户&quot;)</span> User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="image-20200731201755001.png" alt="image-20200731201755001"></p>
</li>
<li><p>进行try it out测试</p>
<p><img data-src="image-20200731202958255.png" alt="image-20200731202958255"></p>
<p>测试结果</p>
<p><img data-src="image-20200731203034702.png" alt="image-20200731203034702"></p>
</li>
</ol>
<p><strong>总结：</strong></p>
<ol>
<li>这样的话，可以给一些比较难理解的属性或者接口，增加一些配置信息，让人更容易阅读！</li>
<li>相较于传统的Postman或Curl方式测试接口，使用swagger简直就是傻瓜式操作，不需要额外说明文档(写得好本身就是文档)而且更不容易出错，只需要录入数据然后点击Execute，如果再配合自动化框架，可以说基本就不需要人为操作了。</li>
<li>Swagger是个优秀的工具，现在国内已经有很多的中小型互联网公司都在使用它，相较于传统的要先出Word接口文档再测试的方式，显然这样也更符合现在的快速迭代开发行情。当然了，提醒下大家在正式环境要记得关闭Swagger，一来出于安全考虑二来也可以节省运行时内存。</li>
</ol>
<h3 id="拓展：其他皮肤"><a href="#拓展：其他皮肤" class="headerlink" title="拓展：其他皮肤"></a>拓展：其他皮肤</h3><p>我们可以导入不同的包实现不同的皮肤定义：</p>
<p>1、默认的  <strong>访问 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="image-20200731204929854.png" alt="image-20200731204929854"></p>
<p>2、bootstrap-ui  <strong>访问 <a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入swagger-bootstrap-ui包 /doc.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="image-20200731205550845.png" alt="image-20200731205550845"></p>
<p>3、Layui-ui  <strong>访问 <a href="http://localhost:8080/docs.html">http://localhost:8080/docs.html</a></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入swagger-ui-layer包 /docs.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.caspar-chen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-ui-layer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>&lt;font color=red&gt;</code>我这个测试没成功(Layui-ui)<code>&lt;/font&gt;</code></li>
</ul>
<p>4、mg-ui  <strong>访问 <a href="http://localhost:8080/document.html">http://localhost:8080/document.html</a></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入swagger-ui-layer包 /document.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zyplayer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-mg-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="image-20200731205723914.png" alt="image-20200731205723914"></p>
<h1 id="（十五）"><a href="#（十五）" class="headerlink" title="（十五）"></a>（十五）</h1><h2 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h2><ol>
<li><p>创建一个service包</p>
</li>
<li><p>创建一个类AsyncService</p>
<p>异步处理还是非常常用的，比如我们在网站上发送邮件，后台会去发送邮件，此时前台会造成响应不动，直到邮件发送完毕，响应才会成功，所以我们一般会采用多线程的方式去处理这些任务。</p>
<p>编写方法，假装正在处理数据，使用线程设置一些延时，模拟同步等待的情况；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;业务进行中....&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写controller包</p>
</li>
<li><p>编写AsyncController类</p>
<p>我们去写一个Controller测试一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   AsyncService asyncService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">       asyncService.hello();</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>访问<a href="http://localhost:8080/hello%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%EF%BC%8C3%E7%A7%92%E5%90%8E%E5%87%BA%E7%8E%B0OK%EF%BC%8C%E8%BF%99%E6%98%AF%E5%90%8C%E6%AD%A5%E7%AD%89%E5%BE%85%E7%9A%84%E6%83%85%E5%86%B5%E3%80%82">http://localhost:8080/hello进行测试，3秒后出现OK，这是同步等待的情况。</a></p>
<p>问题：我们如果想让用户直接得到消息，就在后台使用多线程的方式进行处理即可，但是每次都需要自己手动去编写多线程的实现的话，太麻烦了，我们只需要用一个简单的办法，在我们的方法上加一个简单的注解即可，如下：</p>
</li>
<li><p>给hello方法添加@Async注解；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//告诉Spring这是一个异步方法</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">   System.out.println(<span class="string">&quot;业务进行中....&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SpringBoot就会自己开一个线程池，进行调用！但是要让这个注解生效，我们还需要在主程序上添加一个注解@EnableAsync ，开启异步注解功能；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">//开启异步注解功能</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootTaskApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       SpringApplication.run(SpringbootTaskApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>7、重启测试，网页瞬间响应，后台代码依旧执行！</p>
<h2 id="邮件任务"><a href="#邮件任务" class="headerlink" title="邮件任务"></a>邮件任务</h2><p>邮件发送，在我们的日常开发中，也非常的多，Springboot也帮我们做了支持</p>
<ul>
<li>邮件发送需要引入spring-boot-start-mail</li>
<li>SpringBoot 自动配置MailSenderAutoConfiguration</li>
<li>定义MailProperties内容，配置在application.yml中</li>
<li>自动装配JavaMailSender</li>
<li>测试邮件发送</li>
</ul>
<p><strong>测试：</strong></p>
<ol>
<li><p>引入pom依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>看它引入的依赖，可以看到 jakarta.mail</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>查看自动配置类：MailSenderAutoConfiguration</p>
<p><img data-src="image-20200801104504309.png" alt="image-20200801104504309"></p>
<p>这个类中存在bean，JavaMailSenderImpl</p>
<p><img data-src="image-20200801104504309.png"></p>
<p>然后我们去看下配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.mail&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = StandardCharsets.UTF_8;</span><br><span class="line">	<span class="keyword">private</span> String host;</span><br><span class="line">	<span class="keyword">private</span> Integer port;</span><br><span class="line">	<span class="keyword">private</span> String username;</span><br><span class="line">	<span class="keyword">private</span> String password;</span><br><span class="line">	<span class="keyword">private</span> String protocol = <span class="string">&quot;smtp&quot;</span>;</span><br><span class="line">	<span class="keyword">private</span> Charset defaultEncoding = DEFAULT_CHARSET;</span><br><span class="line">	<span class="keyword">private</span> Map&lt;String, String&gt; properties = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">	<span class="keyword">private</span> String jndiName;</span><br><span class="line">	<span class="comment">//set、get方法省略。。。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>配置文件：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.mail.username</span>=<span class="string">1710841251@qq.com</span></span><br><span class="line"><span class="meta">spring.mail.password</span>=<span class="string">你的qq授权码</span></span><br><span class="line"><span class="meta">spring.mail.host</span>=<span class="string">smtp.qq.com</span></span><br><span class="line"><span class="comment"># qq需要配置ssl</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.smtp.ssl.enable</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<p>获取授权码：在QQ邮箱中的设置-&gt;账户-&gt;开启pop3和smtp服务</p>
<p><img data-src="image-20200801105503766.png" alt="image-20200801105503766"></p>
</li>
<li><p>Spring单元测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">JavaMailSenderImpl javaMailSender;</span><br><span class="line"><span class="meta">@Test</span><span class="comment">//邮件设置1：一个简单的邮件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SimpleMailMessage mailMessage = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">    mailMessage.setSubject(<span class="string">&quot;狂神，你好&quot;</span>);</span><br><span class="line">    mailMessage.setText(<span class="string">&quot;谢谢你的狂神说Java系列课程&quot;</span>);</span><br><span class="line"></span><br><span class="line">    mailMessage.setTo(<span class="string">&quot;24736743@qq.com&quot;</span>);</span><br><span class="line">    mailMessage.setFrom(<span class="string">&quot;1710841251@qq.com&quot;</span>);</span><br><span class="line">    javaMailSender.send(mailMessage);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span><span class="comment">// 一个复杂的邮件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads2</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    MimeMessage mimeMessage = javaMailSender.createMimeMessage();</span><br><span class="line">    <span class="comment">//组装</span></span><br><span class="line">    MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正文</span></span><br><span class="line">    helper.setSubject(<span class="string">&quot;狂神，你好~plus&quot;</span>);</span><br><span class="line">    helper.setText(<span class="string">&quot;&lt;p style=&#x27;color:red&#x27;&gt;谢谢你的狂神说Java系列课程&lt;/p&gt;&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//附件</span></span><br><span class="line">    helper.addAttachment(<span class="string">&quot;1.jpg&quot;</span>, <span class="keyword">new</span> File(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    helper.addAttachment(<span class="string">&quot;2.jpg&quot;</span>, <span class="keyword">new</span> File(<span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    helper.setTo(<span class="string">&quot;24736743@qq.com&quot;</span>);</span><br><span class="line">    helper.setFrom(<span class="string">&quot;1710841251@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">    javaMailSender.send(mimeMessage);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="image-20200801112646650.png" alt="image-20200801112646650"></p>
</li>
</ol>
<p>查看邮箱，邮件接收成功！</p>
<p>我们只需要使用Thymeleaf进行前后端结合即可开发自己网站邮件收发功能了！</p>
<h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>项目开发中经常需要执行一些定时任务，比如需要在每天凌晨的时候，分析一次前一天的日志信息，Spring为我们提供了异步执行任务调度的方式，提供了两个接口。</p>
<ul>
<li>TaskExecutor接口（任务执行者）</li>
<li>TaskScheduler接口（任务调度者）</li>
</ul>
<p>两个注解：</p>
<ul>
<li>@EnableScheduling——开启定时功能的注解</li>
<li>@Scheduled——什么时候执行</li>
</ul>
<p><strong>cron表达式：</strong></p>
<table>
<thead>
<tr>
<th>字段</th>
<th>允许值</th>
<th>允许特殊字符</th>
</tr>
</thead>
<tbody><tr>
<td>秒</td>
<td>0-59</td>
<td>, - * /</td>
</tr>
<tr>
<td>分</td>
<td>0-59</td>
<td>, - * /</td>
</tr>
<tr>
<td>小时</td>
<td>0-23</td>
<td>, - * /</td>
</tr>
<tr>
<td>日期</td>
<td>1-31</td>
<td>, - * / ? L W C</td>
</tr>
<tr>
<td>月份</td>
<td>1-12</td>
<td>, - * /</td>
</tr>
<tr>
<td>星期</td>
<td>0-1或SUN-SAT 0,7是SUN</td>
<td>, - * / ? L W C</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>特殊字符</th>
<th>代表含义</th>
</tr>
</thead>
<tbody><tr>
<td>,</td>
<td>枚举</td>
</tr>
<tr>
<td>-</td>
<td>区间</td>
</tr>
<tr>
<td>*</td>
<td>任意</td>
</tr>
<tr>
<td>/</td>
<td>步长</td>
</tr>
<tr>
<td>?</td>
<td>日/星期冲突匹配</td>
</tr>
<tr>
<td>L</td>
<td>最后</td>
</tr>
<tr>
<td>W</td>
<td>工作日</td>
</tr>
<tr>
<td>C</td>
<td>和calendar练习后计算过的值</td>
</tr>
<tr>
<td>#</td>
<td>星期，4#2 第二个星期三</td>
</tr>
</tbody></table>
<p><strong>测试步骤：</strong></p>
<p>1、创建一个ScheduledService</p>
<p>我们里面存在一个hello方法，他需要定时执行，怎么处理呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在一个特定的时间执行这个方法——Timer</span></span><br><span class="line">    <span class="comment">//cron表达式</span></span><br><span class="line">    <span class="comment">// 秒 分 时 日 月 周几</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        0 49 11 * * ?   每天的11点49分00秒执行</span></span><br><span class="line"><span class="comment">        0 0/5 11,12 * * ?   每天的11点和12点每个五分钟执行一次</span></span><br><span class="line"><span class="comment">        0 15 10 ? * 1-6     每个月的周一到周六的10点15分执行一次</span></span><br><span class="line"><span class="comment">        0/2 * * * * ?     每2秒执行一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/2 * * * * ?&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,你被执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、这里写完定时任务之后，我们需要在主程序上增加@EnableScheduling 开启定时任务功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">//开启异步注解功能</span></span><br><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">//开启基于注解的定时任务</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootTaskApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       SpringApplication.run(SpringbootTaskApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、我们来详细了解下cron表达式；</p>
<p><a href="http://www.bejson.com/othertools/cron/">http://www.bejson.com/othertools/cron/</a></p>
<p>4、常用的表达式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）0/2 * * * * ?   表示每2秒 执行任务</span><br><span class="line">（1）0 0/2 * * * ?   表示每2分钟 执行任务</span><br><span class="line">（1）0 0 2 1 * ?   表示在每月的1日的凌晨2点调整任务</span><br><span class="line">（2）0 15 10 ? * MON-FRI   表示周一到周五每天上午10:15执行作业</span><br><span class="line">（3）0 15 10 ? 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作</span><br><span class="line">（4）0 0 10,14,16 * * ?   每天上午10点，下午2点，4点</span><br><span class="line">（5）0 0/30 9-17 * * ?   朝九晚五工作时间内每半小时</span><br><span class="line">（6）0 0 12 ? * WED   表示每个星期三中午12点</span><br><span class="line">（7）0 0 12 * * ?   每天中午12点触发</span><br><span class="line">（8）0 15 10 ? * *   每天上午10:15触发</span><br><span class="line">（9）0 15 10 * * ?     每天上午10:15触发</span><br><span class="line">（10）0 15 10 * * ?   每天上午10:15触发</span><br><span class="line">（11）0 15 10 * * ? 2005   2005年的每天上午10:15触发</span><br><span class="line">（12）0 * 14 * * ?     在每天下午2点到下午2:59期间的每1分钟触发</span><br><span class="line">（13）0 0/5 14 * * ?   在每天下午2点到下午2:55期间的每5分钟触发</span><br><span class="line">（14）0 0/5 14,18 * * ?     在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</span><br><span class="line">（15）0 0-5 14 * * ?   在每天下午2点到下午2:05期间的每1分钟触发</span><br><span class="line">（16）0 10,44 14 ? 3 WED   每年三月的星期三的下午2:10和2:44触发</span><br><span class="line">（17）0 15 10 ? * MON-FRI   周一至周五的上午10:15触发</span><br><span class="line">（18）0 15 10 15 * ?   每月15日上午10:15触发</span><br><span class="line">（19）0 15 10 L * ?   每月最后一日的上午10:15触发</span><br><span class="line">（20）0 15 10 ? * 6L   每月的最后一个星期五上午10:15触发</span><br><span class="line">（21）0 15 10 ? * 6L 2002-2005   2002年至2005年的每月的最后一个星期五上午10:15触发</span><br><span class="line">（22）0 15 10 ? * 6#3   每月的第三个星期五上午10:15触发</span><br></pre></td></tr></table></figure>

<h1 id="（十六）"><a href="#（十六）" class="headerlink" title="（十六）"></a>（十六）</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>思考：我们平时在博客园，或者CSDN等平台进行写作的时候，有同学思考过他们的编辑器是怎么实现的吗？</p>
<p>在博客园后台的选项设置中，可以看到一个文本编辑器的选项：</p>
<p><img data-src="6401110.png" alt="图片"></p>
<p>其实这个就是富文本编辑器，市面上有许多非常成熟的富文本编辑器，比如：</p>
<ul>
<li><strong>Editor.md</strong>——功能非常丰富的编辑器，左端编辑，右端预览，非常方便，完全免费</li>
<li><ul>
<li>官网：<a href="https://pandao.github.io/editor.md/">https://pandao.github.io/editor.md/</a></li>
</ul>
</li>
<li><strong>wangEditor</strong>——基于javascript和css开发的 Web富文本编辑器， 轻量、简洁、界面美观、易用、开源免费。</li>
<li><ul>
<li>官网：<a href="http://www.wangeditor.com/">http://www.wangeditor.com/</a></li>
</ul>
</li>
<li><strong>TinyMCE</strong>——TinyMCE是一个轻量级的基于浏览器的所见即所得编辑器，由JavaScript写成。它对IE6+和Firefox1.5+都有着非常良好的支持。功能齐全，界面美观，就是文档是英文的，对开发人员英文水平有一定要求。</li>
<li><ul>
<li>官网：<a href="https://www.tiny.cloud/docs/demo/full-featured/">https://www.tiny.cloud/docs/demo/full-featured/</a></li>
<li>博客园</li>
</ul>
</li>
<li><strong>百度ueditor</strong>——UEditor是由百度web前端研发部开发所见即所得富文本web编辑器，具有轻量，功能齐全，可定制，注重用户体验等特点，开源基于MIT协议，允许自由使用和修改代码，缺点是已经没有更新了</li>
<li><ul>
<li>官网：<a href="https://ueditor.baidu.com/website/onlinedemo.html">https://ueditor.baidu.com/website/onlinedemo.html</a></li>
</ul>
</li>
<li><strong>kindeditor</strong>——界面经典。</li>
<li><ul>
<li>官网：<a href="http://kindeditor.net/demo.php">http://kindeditor.net/demo.php</a></li>
</ul>
</li>
<li><strong>Textbox</strong>——Textbox是一款极简但功能强大的在线文本编辑器，支持桌面设备和移动设备。主要功能包含内置的图像处理和存储、文件拖放、拼写检查和自动更正。此外，该工具还实现了屏幕阅读器等辅助技术，并符合WAI-ARIA可访问性标准。</li>
<li><ul>
<li>官网：<a href="https://textbox.io/">https://textbox.io/</a></li>
</ul>
</li>
<li><strong>CKEditor</strong>——国外的，界面美观。</li>
<li><ul>
<li>官网：<a href="https://ckeditor.com/ckeditor-5/demo/">https://ckeditor.com/ckeditor-5/demo/</a></li>
</ul>
</li>
<li><strong>quill</strong>——功能强大，还可以编辑公式等</li>
<li><ul>
<li>官网：<a href="https://quilljs.com/">https://quilljs.com/</a></li>
</ul>
</li>
<li><strong>simditor</strong>——界面美观，功能较全。</li>
<li><ul>
<li>官网：<a href="https://simditor.tower.im/">https://simditor.tower.im/</a></li>
</ul>
</li>
<li><strong>summernote</strong>——UI好看，精美</li>
<li><ul>
<li>官网：<a href="https://summernote.org/">https://summernote.org/</a></li>
</ul>
</li>
<li><strong>jodit</strong>——功能齐全</li>
<li><ul>
<li>官网：<a href="https://xdsoft.net/jodit/">https://xdsoft.net/jodit/</a></li>
</ul>
</li>
<li><strong>froala Editor</strong>——界面非常好看，功能非常强大，非常好用（非免费）</li>
<li><ul>
<li>官网：<a href="https://www.froala.com/wysiwyg-editor">https://www.froala.com/wysiwyg-editor</a></li>
</ul>
</li>
</ul>
<p>总之，目前可用的富文本编辑器有很多……这只是其中的一部分</p>
<h2 id="Editor-md"><a href="#Editor-md" class="headerlink" title="Editor.md"></a>Editor.md</h2><p>我这里使用的就是Editor.md，作为一个资深码农，Mardown必然是我们程序猿最喜欢的格式，看下面，就爱上了！</p>
<p><img data-src="6402222.png" alt="图片"></p>
<p>我们可以在官网下载它：<a href="https://pandao.github.io/editor.md/">https://pandao.github.io/editor.md/</a> ， 得到它的压缩包！</p>
<p>解压以后，在examples目录下面，可以看到他的很多案例使用！学习，其实就是看人家怎么写的，然后进行模仿就好了！</p>
<p>我们可以将整个解压的文件倒入我们的项目，将一些无用的测试和案例删掉即可！</p>
<h2 id="基础工程搭建"><a href="#基础工程搭建" class="headerlink" title="基础工程搭建"></a>基础工程搭建</h2><blockquote>
<p>数据库设计</p>
</blockquote>
<p>article：文章表</p>
<table>
<thead>
<tr>
<th>字段</th>
<th></th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>int</td>
<td>文章的唯一ID</td>
</tr>
<tr>
<td>author</td>
<td>varchar</td>
<td>作者</td>
</tr>
<tr>
<td>title</td>
<td>varchar</td>
<td>标题</td>
</tr>
<tr>
<td>content</td>
<td>longtext</td>
<td>文章的内容</td>
</tr>
</tbody></table>
<p>建表SQL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `article` (</span><br><span class="line">`id` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;int文章的唯一ID&#x27;</span>,</span><br><span class="line">`author` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;作者&#x27;</span>,</span><br><span class="line">`title` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;标题&#x27;</span>,</span><br><span class="line">`content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;文章的内容&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure>

<blockquote>
<p>基础项目搭建</p>
</blockquote>
<p>1、建一个SpringBoot项目配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">datasource:</span><br><span class="line">username: root</span><br><span class="line">password: 123456</span><br><span class="line">#?serverTimezone=UTC解决时区的报错</span><br><span class="line">url: jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="line">driver-class-name: com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文章类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id; <span class="comment">//文章的唯一ID</span></span><br><span class="line">   <span class="keyword">private</span> String author; <span class="comment">//作者名</span></span><br><span class="line">   <span class="keyword">private</span> String title; <span class="comment">//标题</span></span><br><span class="line">   <span class="keyword">private</span> String content; <span class="comment">//文章的内容</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、mapper接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleMapper</span> </span>&#123;</span><br><span class="line">   <span class="comment">//查询所有的文章</span></span><br><span class="line">   <span class="function">List&lt;Article&gt; <span class="title">queryArticles</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//新增一个文章</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">addArticle</span><span class="params">(Article article)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//根据文章id查询文章</span></span><br><span class="line">   <span class="function">Article <span class="title">getArticleById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//根据文章id删除文章</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">deleteArticleById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.mapper.ArticleMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryArticles&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Article&quot;</span>&gt;</span></span><br><span class="line">      select * from article</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getArticleById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Article&quot;</span>&gt;</span></span><br><span class="line">      select * from article where id = #&#123;id&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addArticle&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Article&quot;</span>&gt;</span></span><br><span class="line">      insert into article (author,title,content) values (#&#123;author&#125;,#&#123;title&#125;,#&#123;content&#125;);</span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteArticleById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">      delete from article where id = #&#123;id&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>既然已经提供了 myBatis 的映射配置文件，自然要告诉 spring boot 这些文件的位置**</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">mybatis:</span><br><span class="line">mapper-locations: classpath:com/kuang/mapper/*.xml</span><br><span class="line">type-aliases-package: com.kuang.pojo</span><br></pre></td></tr></table></figure>

<p>编写一个Controller测试下，是否ok；</p>
<h2 id="文章编辑整合（重点）"><a href="#文章编辑整合（重点）" class="headerlink" title="文章编辑整合（重点）"></a>文章编辑整合（重点）</h2><p>1、导入 editor.md 资源 ，删除多余文件</p>
<p>2、编辑文章页面 editor.html、需要引入 jQuery；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">class</span>=<span class="string">&quot;x-admin-sm&quot;</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>秦疆&#x27;Blog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;renderer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;webkit&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,user-scalable=yes, minimum-scale=0.4, initial-scale=0.8,target-densitydpi=low-dpi&quot;</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--Editor.md--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/editormd/css/editormd.css&#125;&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://pandao.github.io/editor.md/favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-fluid&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-row layui-col-space15&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-col-md12&quot;</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--博客表单--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;mdEditorForm&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                  标题：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                  作者：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;article-content&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--editormd--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/editormd/lib/jquery.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/editormd/editormd.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> testEditor;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">   <span class="comment">//window.onload = function()&#123; &#125;</span></span></span><br><span class="line"><span class="javascript">   $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       testEditor = editormd(<span class="string">&quot;article-content&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">           <span class="attr">width</span> : <span class="string">&quot;95%&quot;</span>,</span></span><br><span class="line"><span class="javascript">           <span class="attr">height</span> : <span class="number">400</span>,</span></span><br><span class="line"><span class="javascript">           <span class="attr">syncScrolling</span> : <span class="string">&quot;single&quot;</span>,</span></span><br><span class="line"><span class="javascript">           <span class="attr">path</span> : <span class="string">&quot;../editormd/lib/&quot;</span>,</span></span><br><span class="line"><span class="javascript">           <span class="attr">saveHTMLToTextarea</span> : <span class="literal">true</span>,    <span class="comment">// 保存 HTML 到 Textarea</span></span></span><br><span class="line"><span class="javascript">           <span class="attr">emoji</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">           <span class="attr">theme</span>: <span class="string">&quot;dark&quot;</span>,<span class="comment">//工具栏主题</span></span></span><br><span class="line"><span class="javascript">           <span class="attr">previewTheme</span>: <span class="string">&quot;dark&quot;</span>,<span class="comment">//预览主题</span></span></span><br><span class="line"><span class="javascript">           <span class="attr">editorTheme</span>: <span class="string">&quot;pastel-on-dark&quot;</span>,<span class="comment">//编辑主题</span></span></span><br><span class="line"><span class="javascript">           <span class="attr">tex</span> : <span class="literal">true</span>,                   <span class="comment">// 开启科学公式TeX语言支持，默认关闭</span></span></span><br><span class="line"><span class="javascript">           <span class="attr">flowChart</span> : <span class="literal">true</span>,             <span class="comment">// 开启流程图支持，默认关闭</span></span></span><br><span class="line"><span class="javascript">           <span class="attr">sequenceDiagram</span> : <span class="literal">true</span>,       <span class="comment">// 开启时序/序列图支持，默认关闭,</span></span></span><br><span class="line"><span class="javascript">           <span class="comment">//图片上传</span></span></span><br><span class="line"><span class="javascript">           <span class="attr">imageUpload</span> : <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">           <span class="attr">imageFormats</span> : [<span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;jpeg&quot;</span>, <span class="string">&quot;gif&quot;</span>, <span class="string">&quot;png&quot;</span>, <span class="string">&quot;bmp&quot;</span>, <span class="string">&quot;webp&quot;</span>],</span></span><br><span class="line"><span class="javascript">           <span class="attr">imageUploadURL</span> : <span class="string">&quot;/article/file/upload&quot;</span>,</span></span><br><span class="line"><span class="javascript">           <span class="attr">onload</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">               <span class="built_in">console</span>.log(<span class="string">&#x27;onload&#x27;</span>, <span class="built_in">this</span>);</span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">           <span class="comment">/*指定需要显示的功能按钮*/</span></span></span><br><span class="line"><span class="javascript">           <span class="attr">toolbarIcons</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">               <span class="keyword">return</span> [<span class="string">&quot;undo&quot;</span>,<span class="string">&quot;redo&quot;</span>,<span class="string">&quot;|&quot;</span>,</span></span><br><span class="line"><span class="javascript">                   <span class="string">&quot;bold&quot;</span>,<span class="string">&quot;del&quot;</span>,<span class="string">&quot;italic&quot;</span>,<span class="string">&quot;quote&quot;</span>,<span class="string">&quot;ucwords&quot;</span>,<span class="string">&quot;uppercase&quot;</span>,<span class="string">&quot;lowercase&quot;</span>,<span class="string">&quot;|&quot;</span>,</span></span><br><span class="line"><span class="javascript">                   <span class="string">&quot;h1&quot;</span>,<span class="string">&quot;h2&quot;</span>,<span class="string">&quot;h3&quot;</span>,<span class="string">&quot;h4&quot;</span>,<span class="string">&quot;h5&quot;</span>,<span class="string">&quot;h6&quot;</span>,<span class="string">&quot;|&quot;</span>,</span></span><br><span class="line"><span class="javascript">                   <span class="string">&quot;list-ul&quot;</span>,<span class="string">&quot;list-ol&quot;</span>,<span class="string">&quot;hr&quot;</span>,<span class="string">&quot;|&quot;</span>,</span></span><br><span class="line"><span class="javascript">                   <span class="string">&quot;link&quot;</span>,<span class="string">&quot;reference-link&quot;</span>,<span class="string">&quot;image&quot;</span>,<span class="string">&quot;code&quot;</span>,<span class="string">&quot;preformatted-text&quot;</span>,</span></span><br><span class="line"><span class="javascript">                   <span class="string">&quot;code-block&quot;</span>,<span class="string">&quot;table&quot;</span>,<span class="string">&quot;datetime&quot;</span>,<span class="string">&quot;emoji&quot;</span>,<span class="string">&quot;html-entities&quot;</span>,<span class="string">&quot;pagebreak&quot;</span>,<span class="string">&quot;|&quot;</span>,</span></span><br><span class="line"><span class="javascript">                   <span class="string">&quot;goto-line&quot;</span>,<span class="string">&quot;watch&quot;</span>,<span class="string">&quot;preview&quot;</span>,<span class="string">&quot;fullscreen&quot;</span>,<span class="string">&quot;clear&quot;</span>,<span class="string">&quot;search&quot;</span>,<span class="string">&quot;|&quot;</span>,</span></span><br><span class="line"><span class="javascript">                   <span class="string">&quot;help&quot;</span>,<span class="string">&quot;info&quot;</span>,<span class="string">&quot;releaseIcon&quot;</span>, <span class="string">&quot;index&quot;</span>]</span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">           <span class="comment">/*自定义功能按钮，下面我自定义了2个，一个是发布，一个是返回首页*/</span></span></span><br><span class="line"><span class="javascript">           <span class="attr">toolbarIconTexts</span> : &#123;</span></span><br><span class="line"><span class="javascript">               <span class="attr">releaseIcon</span> : <span class="string">&quot;&lt;span bgcolor=\&quot;gray\&quot;&gt;发布&lt;/span&gt;&quot;</span>,</span></span><br><span class="line"><span class="javascript">               <span class="attr">index</span> : <span class="string">&quot;&lt;span bgcolor=\&quot;red\&quot;&gt;返回首页&lt;/span&gt;&quot;</span>,</span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">           <span class="comment">/*给自定义按钮指定回调函数*/</span></span></span><br><span class="line"><span class="javascript">           <span class="attr">toolbarHandlers</span>:&#123;</span></span><br><span class="line"><span class="javascript">               <span class="attr">releaseIcon</span> : <span class="function"><span class="keyword">function</span>(<span class="params">cm, icon, cursor, selection</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                   <span class="comment">//表单提交</span></span></span><br><span class="line"><span class="javascript">                   mdEditorForm.method = <span class="string">&quot;post&quot;</span>;</span></span><br><span class="line"><span class="javascript">                   mdEditorForm.action = <span class="string">&quot;/article/addArticle&quot;</span>;<span class="comment">//提交至服务器的路径</span></span></span><br><span class="line"><span class="javascript">                   mdEditorForm.submit();</span></span><br><span class="line"><span class="javascript">              &#125;,</span></span><br><span class="line"><span class="javascript">               <span class="attr">index</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                   <span class="built_in">window</span>.location.href = <span class="string">&#x27;/&#x27;</span>;</span></span><br><span class="line"><span class="javascript">              &#125;,</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、编写Controller，进行跳转，以及保存文章</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/article&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/toEditor&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toEditor</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;editor&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@PostMapping(&quot;/addArticle&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">addArticle</span><span class="params">(Article article)</span></span>&#123;</span><br><span class="line">       articleMapper.addArticle(article);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;editor&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>图片上传问题</p>
</blockquote>
<p>1、前端js中添加配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//图片上传</span></span><br><span class="line"><span class="attr">imageUpload</span> : <span class="literal">true</span>,</span><br><span class="line"><span class="attr">imageFormats</span> : [<span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;jpeg&quot;</span>, <span class="string">&quot;gif&quot;</span>, <span class="string">&quot;png&quot;</span>, <span class="string">&quot;bmp&quot;</span>, <span class="string">&quot;webp&quot;</span>],</span><br><span class="line"><span class="attr">imageUploadURL</span> : <span class="string">&quot;/article/file/upload&quot;</span>, <span class="comment">// //这个是上传图片时的访问地址</span></span><br></pre></td></tr></table></figure>

<p>2、后端请求，接收保存这个图片, 需要导入 FastJson 的依赖！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//博客图片上传问题</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/file/upload&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JSONObject <span class="title">fileUpload</span><span class="params">(<span class="meta">@RequestParam(value = &quot;editormd-image-file&quot;, required = true)</span> MultipartFile file, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   <span class="comment">//上传路径保存设置</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//获得SpringBoot当前项目的路径：System.getProperty(&quot;user.dir&quot;)</span></span><br><span class="line">   String path = System.getProperty(<span class="string">&quot;user.dir&quot;</span>)+<span class="string">&quot;/upload/&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//按照月份进行分类：</span></span><br><span class="line">   Calendar instance = Calendar.getInstance();</span><br><span class="line">   String month = (instance.get(Calendar.MONTH) + <span class="number">1</span>)+<span class="string">&quot;月&quot;</span>;</span><br><span class="line">   path = path+month;</span><br><span class="line"></span><br><span class="line">   File realPath = <span class="keyword">new</span> File(path);</span><br><span class="line">   <span class="keyword">if</span> (!realPath.exists())&#123;</span><br><span class="line">       realPath.mkdir();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//上传文件地址</span></span><br><span class="line">   System.out.println(<span class="string">&quot;上传文件保存地址：&quot;</span>+realPath);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//解决文件名字问题：我们使用uuid;</span></span><br><span class="line">   String filename = <span class="string">&quot;ks-&quot;</span>+UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">   <span class="comment">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span></span><br><span class="line">   file.transferTo(<span class="keyword">new</span> File(realPath +<span class="string">&quot;/&quot;</span>+ filename));</span><br><span class="line"></span><br><span class="line">   <span class="comment">//给editormd进行回调</span></span><br><span class="line">   JSONObject res = <span class="keyword">new</span> JSONObject();</span><br><span class="line">   res.put(<span class="string">&quot;url&quot;</span>,<span class="string">&quot;/upload/&quot;</span>+month+<span class="string">&quot;/&quot;</span>+ filename);</span><br><span class="line">   res.put(<span class="string">&quot;success&quot;</span>, <span class="number">1</span>);</span><br><span class="line">   res.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;upload success!&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、解决文件回显显示的问题，设置虚拟目录映射！在我们自己拓展的MvcConfig中进行配置即可！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 文件保存在真实目录/upload/下，</span></span><br><span class="line">   <span class="comment">// 访问的时候使用虚路径/upload，比如文件名为1.png，就直接/upload/1.png就ok了。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">       registry.addResourceHandler(<span class="string">&quot;/upload/**&quot;</span>)</span><br><span class="line">          .addResourceLocations(<span class="string">&quot;file:&quot;</span>+System.getProperty(<span class="string">&quot;user.dir&quot;</span>)+<span class="string">&quot;/upload/&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>表情包问题</p>
</blockquote>
<p>自己手动下载，emoji 表情包，放到图片路径下：</p>
<p>修改editormd.js文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Emoji graphics files url path</span><br><span class="line">editormd.emoji     = &#123;</span><br><span class="line">   path : &quot;../editormd/plugins/emoji-dialog/emoji/&quot;,</span><br><span class="line">   ext   : &quot;.png&quot;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="文章展示"><a href="#文章展示" class="headerlink" title="文章展示"></a>文章展示</h2><p>1、Controller 中增加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id,Model model)</span></span>&#123;</span><br><span class="line">   Article article = articleMapper.getArticleById(id);</span><br><span class="line">   model.addAttribute(<span class="string">&quot;article&quot;</span>,article);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;article&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、编写页面 article.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;article.title&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--文章头部信息：标题，作者，最后更新日期，导航--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;margin: auto 0&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;article.title&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  作者：<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;float: left&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;article.author&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--文章主体内容--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;doc-content&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;markdown&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;article.content&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/editormd/css/editormd.preview.css&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/editormd/lib/jquery.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/editormd/lib/marked.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/editormd/lib/prettify.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/editormd/lib/raphael.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/editormd/lib/underscore.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/editormd/lib/sequence-diagram.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/editormd/lib/flowchart.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/editormd/lib/jquery.flowchart.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/editormd/editormd.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> testEditor;</span></span><br><span class="line"><span class="javascript">   $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       testEditor = editormd.markdownToHTML(<span class="string">&quot;doc-content&quot;</span>, &#123;<span class="comment">//注意：这里是上面DIV的id</span></span></span><br><span class="line"><span class="javascript">           <span class="attr">htmlDecode</span>: <span class="string">&quot;style,script,iframe&quot;</span>,</span></span><br><span class="line"><span class="javascript">           <span class="attr">emoji</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">           <span class="attr">taskList</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">           <span class="attr">tocm</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">           <span class="attr">tex</span>: <span class="literal">true</span>, <span class="comment">// 默认不解析</span></span></span><br><span class="line"><span class="javascript">           <span class="attr">flowChart</span>: <span class="literal">true</span>, <span class="comment">// 默认不解析</span></span></span><br><span class="line"><span class="javascript">           <span class="attr">sequenceDiagram</span>: <span class="literal">true</span>, <span class="comment">// 默认不解析</span></span></span><br><span class="line"><span class="javascript">           <span class="attr">codeFold</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">      &#125;);&#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>重启项目，访问进行测试！大功告成！</p>
<p>小结：</p>
<p>有了富文本编辑器，我们网站的功能就会又多一项，大家到了这里完全可以有时间写一个属于自己的博客网站了，根据所学的知识是完全没有任何问题的！</p>
<h1 id="（十七）"><a href="#（十七）" class="headerlink" title="（十七）"></a>（十七）</h1><h2 id="分布式理论"><a href="#分布式理论" class="headerlink" title="分布式理论"></a>分布式理论</h2><h3 id="什么是分布式系统？"><a href="#什么是分布式系统？" class="headerlink" title="什么是分布式系统？"></a><strong>什么是分布式系统？</strong></h3><p>在《分布式系统原理与范型》一书中有如下定义：“分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统”；</p>
<p>分布式系统是由一组通过网络进行通信、为了完成共同的任务而协调工作的计算机节点组成的系统。分布式系统的出现是为了用廉价的、普通的机器完成单个计算机无法完成的计算、存储任务。其目的是<strong>利用更多的机器，处理更多的数据</strong>。</p>
<p>分布式系统（distributed system）是建立在网络之上的软件系统。</p>
<p>首先需要明确的是，只有当单个节点的处理能力无法满足日益增长的计算、存储任务的时候，且硬件的提升（加内存、加磁盘、使用更好的CPU）高昂到得不偿失的时候，应用程序也不能进一步优化的时候，我们才需要考虑分布式系统。因为，分布式系统要解决的问题本身就是和单机系统一样的，而由于分布式系统多节点、通过网络通信的拓扑结构，会引入很多单机系统没有的问题，为了解决这些问题又会引入更多的机制、协议，带来更多的问题。。。</p>
<h3 id="Dubbo文档"><a href="#Dubbo文档" class="headerlink" title="Dubbo文档"></a>Dubbo文档</h3><p>随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，急需<strong>一个治理系统</strong>确保架构有条不紊的演进。</p>
<p>在Dubbo的官网文档有这样一张图</p>
<p><img data-src="dubbo-architecture-roadmap.jpg" alt="img"></p>
<h3 id="单一应用架构"><a href="#单一应用架构" class="headerlink" title="单一应用架构"></a>单一应用架构</h3><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p>
<p><img data-src="image-20200801133522303.png" alt="image-20200801133522303"></p>
<p>适用于小型网站，小型管理系统，将所有功能都部署到一个功能里，简单易用。</p>
<p><strong>缺点：</strong></p>
<p>1、性能扩展比较难</p>
<p>2、协同开发问题</p>
<p>3、不利于升级维护</p>
<h3 id="垂直应用架构"><a href="#垂直应用架构" class="headerlink" title="垂直应用架构"></a>垂直应用架构</h3><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p>
<p><img data-src="image-20200801133625663.png" alt="image-20200801133625663"></p>
<p>通过切分业务来实现各个模块独立部署，降低了维护和部署的难度，团队各司其职更易管理，性能扩展也更方便，更有针对性。</p>
<p>缺点：公用模块无法重复利用，开发性的浪费</p>
<h3 id="分布式服务架构"><a href="#分布式服务架构" class="headerlink" title="分布式服务架构"></a>分布式服务架构</h3><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的**分布式服务框架(RPC)**是关键。</p>
<p><img data-src="image-20200801133710784.png" alt="image-20200801133710784"></p>
<h3 id="流动计算架构"><a href="#流动计算架构" class="headerlink" title="流动计算架构"></a>流动计算架构</h3><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于<strong>提高机器利用率的资源调度和治理中心</strong>(SOA)[ Service Oriented Architecture]是关键。</p>
<p><img data-src="image-20200801133801873.png" alt="image-20200801133801873"></p>
<h2 id="什么是RPC"><a href="#什么是RPC" class="headerlink" title="什么是RPC"></a>什么是RPC</h2><p>RPC【Remote Procedure Call】是指远程过程调用，是一种进程间通信方式，他是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。</p>
<p>也就是说两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数/方法，由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。为什么要用RPC呢？就是无法在一个进程内，甚至一个计算机内通过本地调用的方式完成的需求，比如不同的系统间的通讯，甚至不同的组织间的通讯，由于计算能力需要横向扩展，需要在多台机器组成的集群上部署应用。RPC就是要像调用本地的函数一样去调远程函数；</p>
<p>推荐阅读文章：<a href="https://www.jianshu.com/p/2accc2840a1b">https://www.jianshu.com/p/2accc2840a1b</a></p>
<p><strong>RPC基本原理</strong></p>
<p><img data-src="image-20200801134404631.png" alt="image-20200801134404631"></p>
<p><img data-src="image-20200801134657756.png" alt="image-20200801134657756"></p>
<p>RPC两个核心模块：通讯，序列化。</p>
<h2 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h2><h3 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h3><p>Apache Dubbo |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p>
<p>dubbo官网 <a href="http://dubbo.apache.org/zh-cn/index.html">http://dubbo.apache.org/zh-cn/index.html</a></p>
<p>1.了解Dubbo的特性</p>
<p>2.查看官方文档</p>
<p><strong>dubbo基本概念</strong></p>
<p><img data-src="dubbo-architecture.jpg" alt="dubbo-architucture"></p>
<p><img data-src="architecture.png" alt="img"></p>
<p><strong>服务提供者</strong>（Provider）：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</p>
<p><strong>服务消费者</strong>（Consumer）：调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p>
<p><strong>注册中心</strong>（Registry）：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</p>
<p><strong>监控中心</strong>（Monitor）：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</p>
<p><strong>调用关系说明</strong></p>
<ul>
<li>服务容器负责启动，加载，运行服务提供者。</li>
<li>服务提供者在启动时，向注册中心注册自己提供的服务。</li>
<li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li>
<li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li>
<li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li>
<li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li>
</ul>
<h3 id="Dubbo环境搭建"><a href="#Dubbo环境搭建" class="headerlink" title="Dubbo环境搭建"></a>Dubbo环境搭建</h3><p>点进dubbo官方文档，推荐我们使用Zookeeper 注册中心</p>
<p><img data-src="image-20200801140529370.png" alt="image-20200801140529370"></p>
<p>什么是zookeeper呢？可以查看<a href="https://zookeeper.apache.org/">官方文档</a></p>
<h3 id="Window下安装zookeeper"><a href="#Window下安装zookeeper" class="headerlink" title="Window下安装zookeeper"></a>Window下安装zookeeper</h3><ol>
<li><p>下载zookeeper ：<a href="https://mirror.bit.edu.cn/apache/zookeeper/">地址</a>， 我们下载3.6.1， 最新版！解压zookeeper</p>
<p>下载带bin的</p>
<p><img data-src="image-20200801173958146.png" alt="image-20200801173958146"></p>
</li>
<li><p>运行/bin/zkServer.cmd ，初次运行会报错，没有zoo.cfg配置文件；</p>
<p>可能遇到问题：闪退 !</p>
<p><code>&lt;font color=red&gt;</code>解决方案<code>&lt;/font&gt;</code>：编辑zkServer.cmd文件末尾添加pause 。这样运行出错就不会退出，会提示错误信息，方便找到原因。</p>
<p><img data-src="image-20200801172648723.png" alt="image-20200801172648723"></p>
<p><img data-src="image-20200801173023636.png" alt="image-20200801173023636"></p>
</li>
<li><p>修改zoo.cfg配置文件</p>
<ul>
<li><p>将conf文件夹下面的zoo_sample.cfg复制一份改名为zoo.cfg即可。</p>
</li>
<li><p>注意几个重要位置：</p>
<p>dataDir=./  临时数据存储的目录（可写相对路径）</p>
<p><code>&lt;font color=red&gt;</code>clientPort=2181  zookeeper的端口号<code>&lt;/font&gt;</code></p>
</li>
<li><p>修改完成后再次启动zookeeper</p>
<p><img data-src="image-20200801174251778.png" alt="image-20200801174251778"></p>
</li>
</ul>
</li>
<li><p>使用zkCli.cmd测试</p>
<ul>
<li><p>ls /：列出zookeeper根下保存的所有节点</p>
<p><img data-src="image-20200801175746901.png" alt="image-20200801175746901"></p>
<p>报错别着急，多试几次就好了，我试了三次o(╥﹏╥)o，看报错信息</p>
<p><img data-src="image-20200801175928795.png" alt="image-20200801175928795"></p>
</li>
<li><p>create –e /kuangshen 123：创建一个kuangshen节点，值为123</p>
<p><img data-src="image-20200801180120251.png" alt="image-20200801180120251"></p>
</li>
<li><p>get /kuangshen：获取/kuangshen节点的值</p>
<p><img data-src="image-20200801180225001.png" alt="image-20200801180225001"></p>
</li>
<li><p>我们再来查看一下节点：ls /</p>
<p><img data-src="image-20200801180302890.png" alt="image-20200801180302890"></p>
</li>
</ul>
</li>
</ol>
<h3 id="window下安装dubbo-admin"><a href="#window下安装dubbo-admin" class="headerlink" title="window下安装dubbo-admin"></a>window下安装dubbo-admin</h3><ul>
<li>dubbo本身并不是一个服务软件。它其实就是一个jar包，能够帮你的java程序连接到zookeeper，并利用zookeeper消费、提供服务。</li>
<li>但是为了让用户更好的管理监控众多的dubbo服务，官方提供了一个可视化的监控程序dubbo-admin，不过这个监控即使不装也不影响使用。</li>
</ul>
<p>我们这里来安装一下：</p>
<p><strong>1、下载dubbo-admin</strong></p>
<p>地址 ：<a href="https://github.com/apache/dubbo-admin/tree/master">https://github.com/apache/dubbo-admin/tree/master</a></p>
<p><strong>2、解压进入目录</strong></p>
<p>修改 dubbo-admin\src\main\resources \application.properties 指定zookeeper地址</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server.port=<span class="number">7001</span></span><br><span class="line">spring.velocity.cache=<span class="keyword">false</span></span><br><span class="line">spring.velocity.charset=UTF-<span class="number">8</span></span><br><span class="line">spring.velocity.layout-url=/templates/<span class="keyword">default</span>.vm</span><br><span class="line">spring.messages.fallback-to-system-locale=<span class="keyword">false</span></span><br><span class="line">spring.messages.basename=i18n/message</span><br><span class="line">spring.root.password=root</span><br><span class="line">spring.guest.password=guest</span><br><span class="line"></span><br><span class="line">dubbo.registry.address=zookeeper:<span class="comment">//127.0.0.1:2181</span></span><br></pre></td></tr></table></figure>

<p><strong>3、在项目目录下</strong>打包dubbo-admin</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>

<p><strong>第一次打包的过程有点慢，需要耐心等待！直到成功！</strong></p>
<p><img data-src="image-20200801181825286.png" alt="image-20200801181825286"></p>
<p>4、执行 dubbo-admin\target 下的dubbo-admin-0.0.1-SNAPSHOT.jar</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar dubbo-admin-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<p>【注意：zookeeper的服务一定要打开！】</p>
<p>执行完毕，我们去访问一下 <a href="http://localhost:7001/">http://localhost:7001/</a> ， 这时候我们需要输入登录账户和密码，我们都是默认的root-root；</p>
<p><img data-src="image-20200801183043114.png" alt="image-20200801183043114"></p>
<p>登录成功后，查看界面</p>
<p><img data-src="image-20200801183113485.png" alt="image-20200801183113485"></p>
<p>安装完成！</p>
<p><strong>总结：</strong></p>
<ul>
<li>zookeeper :注册中心</li>
<li>dubbo-admin:是一 个监控管理后台-查看我们注册了哪些服务，哪些服务被消费了（可以不用）</li>
<li>Dubbo: jar包</li>
</ul>
<h2 id="SpringBoot-Dubbo-zookeeper"><a href="#SpringBoot-Dubbo-zookeeper" class="headerlink" title="SpringBoot + Dubbo + zookeeper"></a>SpringBoot + Dubbo + zookeeper</h2><h3 id="框架搭建"><a href="#框架搭建" class="headerlink" title="框架搭建"></a>框架搭建</h3><p><strong>1. 启动zookeeper ！</strong></p>
<p><strong>2. IDEA创建一个空项目；</strong></p>
<p><strong>3.创建一个模块，实现服务提供者：provider-server ， 选择web依赖即可</strong></p>
<p><strong>4.项目创建完毕，我们写一个服务，比如卖票的服务；</strong></p>
<p>编写接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TicketService</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketServiceImpl</span> <span class="keyword">implements</span> <span class="title">TicketService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;《狂神说Java》&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5.创建一个模块，实现服务消费者：consumer-server ， 选择web依赖即可</strong></p>
<p><strong>6.项目创建完毕，我们写一个服务，比如用户的服务；</strong></p>
<p>编写service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">   <span class="comment">//我们需要去拿去注册中心的服务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>需求：现在我们的用户想使用买票的服务，这要怎么弄呢 ？</strong></p>
<h3 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h3><p><strong>1、将服务提供者注册到注册中心，我们需要整合Dubbo和zookeeper，所以需要导包</strong></p>
<p><strong>我们从dubbo官网进入github，看下方的帮助文档，找到dubbo-springboot，找到依赖包</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Dubbo Spring Boot Starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br></pre></td></tr></table></figure>

<p><strong>zookeeper的包我们去maven仓库下载，zkclient；</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.sgroschupf/zkclient --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>【新版的坑】zookeeper及其依赖包，解决日志冲突，还需要剔除日志依赖；</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入zookeeper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--排除这个slf4j-log4j12--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2、在springboot配置文件中配置dubbo相关属性！</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#当前应用名字</span></span><br><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">provider-server</span></span><br><span class="line"><span class="comment">#注册中心地址</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://127.0.0.1:2181</span></span><br><span class="line"><span class="comment">#扫描指定包下服务</span></span><br><span class="line"><span class="meta">dubbo.scan.base-packages</span>=<span class="string">nuc.ss.service</span></span><br></pre></td></tr></table></figure>

<p><strong>3、在service的实现类中配置服务注解，发布服务！注意导包问题</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>    <span class="comment">//可以被扫描到，在项目一启动就自动注册到注册中心</span></span><br><span class="line"><span class="meta">@Component</span>  <span class="comment">//使用Dubbo后尽量不要用Service注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketServiceImpl</span> <span class="keyword">implements</span> <span class="title">TicketService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;《狂神说Java》&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>逻辑理解 ：应用启动起来，dubbo就会扫描指定的包下带有@component注解的服务，将它发布在指定的注册中心中！</strong></p>
<p><strong>4、运行测试</strong></p>
<p><img data-src="image-20200801204543375.png" alt="image-20200801204543375"></p>
<p><img data-src="image-20200801205620564.png" alt="image-20200801205620564"></p>
<p><img data-src="image-20200801205708690.png" alt="image-20200801205708690"></p>
<h3 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h3><p><strong>1、导入依赖，和之前的依赖一样；</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--dubbo--&gt;</span><br><span class="line">&lt;!-- Dubbo Spring Boot Starter --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;<span class="number">2.7</span><span class="number">.3</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--zookeeper--&gt;</span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/com.github.sgroschupf/zkclient --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;com.github.sgroschupf&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;zkclient&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;<span class="number">0.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 引入zookeeper --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;<span class="number">2.12</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;<span class="number">2.12</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;<span class="number">3.4</span><span class="number">.14</span>&lt;/version&gt;</span><br><span class="line">   &lt;!--排除这个slf4j-log4j12--&gt;</span><br><span class="line">   &lt;exclusions&gt;</span><br><span class="line">       &lt;exclusion&gt;</span><br><span class="line">           &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">       &lt;/exclusion&gt;</span><br><span class="line">   &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>2、<strong>配置参数</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8002</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#当前应用名字</span></span><br><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">consumer-server</span></span><br><span class="line"><span class="comment">#注册中心地址</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://127.0.0.1:2181</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 本来正常步骤是需要将服务提供者的接口打包，然后用pom文件导入，我们这里使用简单的方式，直接将服务的接口拿过来，路径必须保证正确，即和服务提供者相同；</strong></p>
<p><img data-src="image-20200801211028698.png" alt="image-20200801211028698"></p>
<p><strong>4. 完善消费者的服务类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span> <span class="comment">//注入到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 想拿到provider-server提供的票，要去注册中心拿到服务</span></span><br><span class="line">    <span class="meta">@Reference</span> <span class="comment">//引用，Pom坐标，可以定义路径相同的接口名</span></span><br><span class="line">            TicketService ticketService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bugTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String ticket = ticketService.getTicket();</span><br><span class="line">        System.out.println(<span class="string">&quot;在注册中心买到&quot;</span>+ticket);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5. 测试类编写；</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerServerApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   UserService userService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       userService.bugTicket();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><p><strong>1. 开启zookeeper</strong></p>
<p><strong>2. 打开dubbo-admin实现监控【可以不用做】</strong></p>
<p><strong>3. 开启服务者</strong></p>
<p><strong>4. 消费者消费测试，结果：</strong></p>
<p><img data-src="image-20200801221551593.png" alt="image-20200801221551593"></p>
<p><strong>监控中心 ：</strong></p>
<p><img data-src="image-20200801222026747.png" alt="image-20200801222026747"></p>
<p><strong>ok , 这就是SpingBoot + dubbo + zookeeper实现分布式开发的应用，其实就是一个服务拆分的思想；</strong></p>
<h1 id="（十八）"><a href="#（十八）" class="headerlink" title="（十八）"></a>（十八）</h1><h2 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h2><h3 id="安全简介"><a href="#安全简介" class="headerlink" title="安全简介"></a>安全简介</h3><p>1、在 Web 开发中，安全一直是非常重要的一个方面。安全虽然属于应用的非功能性需求，但是应该在应用开发的初期就考虑进来。如果在应用开发的后期才考虑安全的问题，就可能陷入一个两难的境地：一方面，应用存在严重的安全漏洞，无法满足用户的要求，并可能造成用户的隐私数据被攻击者窃取；另一方面，应用的基本架构已经确定，要修复安全漏洞，可能需要对系统的架构做出比较重大的调整，因而需要更多的开发时间，影响应用的发布进程。因此，从应用开发的第一天就应该把安全相关的因素考虑进来，并在整个应用的开发过程中。</p>
<p>2、市面上存在比较有名的：Shiro，Spring Security ！</p>
<p>3、这里需要阐述一下的是，每一个框架的出现都是为了解决某一问题而产生了，那么Spring Security框架的出现是为了解决什么问题呢？</p>
<p>4、首先我们看下它的官网介绍：Spring Security官网地址</p>
<p><code>Spring Security is a powerful and highly customizable authentication and access-control framework. It is the de-facto standard for securing Spring-based applications.</code></p>
<p><code>Spring Security is a framework that focuses on providing both authentication and authorization to Java applications. Like all Spring projects, the real power of Spring Security is found in how easily it can be extended to meet custom requirements</code></p>
<p>5、Spring Security是一个功能强大且高度可定制的身份验证和访问控制框架。它实际上是保护基于spring的应用程序的标准。</p>
<p>6、Spring Security是一个框架，侧重于为Java应用程序提供身份验证和授权。与所有Spring项目一样，Spring安全性的真正强大之处在于它可以轻松地扩展以满足定制需求</p>
<p>7、从官网的介绍中可以知道这是一个权限框架。想我们之前做项目是没有使用框架是怎么控制权限的？对于权限 一般会细分为功能权限，访问权限，和菜单权限。代码会写的非常的繁琐，冗余。</p>
<p>8、怎么解决之前写权限代码繁琐，冗余的问题，一些主流框架就应运而生而Spring Scecurity就是其中的一种。</p>
<p>9、Spring 是一个非常流行和成功的 Java 应用开发框架。Spring Security 基于 Spring 框架，提供了一套 Web 应用安全性的完整解决方案。一般来说，Web 应用的安全性包括用户认证（Authentication）和用户授权（Authorization）两个部分。</p>
<ul>
<li>用户认证指的是验证某个用户是否为系统中的合法主体，也就是说用户能否访问该系统。用户认证一般要求用户提供用户名和密码。系统通过校验用户名和密码来完成认证过程。</li>
<li>用户授权指的是验证某个用户是否有权限执行某个操作。在一个系统中，不同用户所具有的权限是不同的。比如对一个文件来说，有的用户只能进行读取，而有的用户可以进行修改。一般来说，系统会为不同的用户分配不同的角色，而每个角色则对应一系列的权限。</li>
</ul>
<p>10、对于上面提到的两种应用情景，Spring Security 框架都有很好的支持。</p>
<ul>
<li>在用户认证方面，Spring Security 框架支持主流的认证方式，包括 HTTP 基本认证、HTTP 表单验证、HTTP 摘要认证、OpenID 和 LDAP 等。</li>
<li>在用户授权方面，Spring Security 提供了基于角色的访问控制和访问控制列表（Access Control List，ACL），可以对应用中的领域对象进行细粒度的控制。</li>
</ul>
<h3 id="实战测试"><a href="#实战测试" class="headerlink" title="实战测试"></a>实战测试</h3><h4 id="实验环境搭建"><a href="#实验环境搭建" class="headerlink" title="实验环境搭建"></a>实验环境搭建</h4><ol>
<li><p>新建一个初始的springboot项目web模块，thymeleaf模块</p>
</li>
<li><p>导入静态资源</p>
<p><img data-src="image-20200728130501139.png" alt="image-20200728130501139"></p>
</li>
<li><p>controller跳转！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouterController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;,&quot;/index&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toLogin&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/level1/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">level1</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/level1/&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/level2/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">level2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/level2/&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/level3/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">level3</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/level3/&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试实验环境是否OK！</p>
<p>首页</p>
<p><img data-src="image-20200728130703899.png" alt="image-20200728130703899"></p>
<p>登录</p>
<p><img data-src="image-20200728130726820.png" alt="image-20200728130726820"></p>
<p>详情</p>
<p><img data-src="image-20200728130751338.png" alt="image-20200728130751338"></p>
</li>
</ol>
<h4 id="认识SpringSecurity"><a href="#认识SpringSecurity" class="headerlink" title="认识SpringSecurity"></a>认识SpringSecurity</h4><p>Spring Security 是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，他可以实现强大的Web安全控制，对于安全控制，我们仅需要引入 spring-boot-starter-security 模块，进行少量的配置，即可实现强大的安全管理！</p>
<p>记住几个类：</p>
<ul>
<li><code>WebSecurityConfigurerAdapter</code>：自定义Security策略</li>
<li><code>AuthenticationManagerBuilder</code>：自定义认证策略</li>
<li><code>@EnableWebSecurity</code>：开启WebSecurity模式</li>
</ul>
<p>Spring Security的两个主要目标是 “认证” 和 “授权”（访问控制）。</p>
<p><strong>“认证”（Authentication）</strong></p>
<p>身份验证是关于验证您的凭据，如用户名/用户ID和密码，以验证您的身份。</p>
<p>身份验证通常通过用户名和密码完成，有时与身份验证因素结合使用。</p>
<p><strong>“授权” （Authorization）</strong></p>
<p>授权发生在系统成功验证您的身份后，最终会授予您访问资源（如信息，文件，数据库，资金，位置，几乎任何内容）的完全权限。</p>
<p>这个概念是通用的，而不是只在Spring Security 中存在。</p>
<h4 id="认证和授权"><a href="#认证和授权" class="headerlink" title="认证和授权"></a>认证和授权</h4><p>目前，我们的测试环境，是谁都可以访问的，我们使用 Spring Security 增加上认证和授权的功能</p>
<ol>
<li><p>引入 Spring Security 模块</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="image-20200728175946604.png" alt="image-20200728175946604"></p>
</li>
<li><p>编写 Spring Security 配置类</p>
<ul>
<li><p>参考官网：<a href="https://spring.io/projects/spring-security">https://spring.io/projects/spring-security</a></p>
</li>
<li><p>查看我们自己项目中的版本，找到对应的帮助文档：<a href="https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/html5">https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/html5</a></p>
</li>
<li><p>servlet-applications 8.16.4</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">            .apply(customDsl())</span><br><span class="line">                .flag(<span class="keyword">true</span>)</span><br><span class="line">                .and()</span><br><span class="line">            ...;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="image-20200728175824524.png" alt="image-20200728175824524"></p>
</li>
</ul>
</li>
<li><p>编写基础配置类</p>
<p><img data-src="image-20200728180624787.png" alt="image-20200728180624787"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableWebSecurity</span><span class="comment">// 开启WebSecurity模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.configure(http);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>定制请求的授权规则</p>
<p>看源码</p>
<p><img data-src="image-20200728190605894.png" alt="image-20200728190605894"></p>
<p>仿写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链式编程</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 首页所有人都可以访问，功能也只有对应有权限的人才能访问到</span></span><br><span class="line">    <span class="comment">// 请求授权的规则</span></span><br><span class="line"></span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">        .antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">        .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">        .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">        .antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试一下：发现除了首页都进不去了！因为我们目前没有登录的角色，因为请求需要登录的角色拥有对应的权限才可以！</p>
<p><img data-src="image-20200728185841148.png" alt="image-20200728185841148"></p>
</li>
<li><p>在configure()方法中加入以下配置，开启自动配置的登录功能！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开启自动配置的登录功能</span></span><br><span class="line"><span class="comment">// /login 请求来到登录页</span></span><br><span class="line"><span class="comment">// /login?error 重定向到这里表示登录失败</span></span><br><span class="line">http.formLogin();</span><br></pre></td></tr></table></figure></li>
<li><p>测试一下：发现，没有权限的时候，会跳转到登录的页面！</p>
<p><img data-src="image-20200728190113670.png" alt="image-20200728190113670"></p>
</li>
<li><p>查看刚才登录页的注释信息；</p>
<p>我们可以定义认证规则，重写configure的另一个方法</p>
<p><img data-src="image-20200728190303746.png" alt="image-20200728190303746"></p>
<p>源码：</p>
<p><img data-src="image-20200728190840458.png" alt="image-20200728190840458"></p>
<p>仿写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 认证，springboot 2.1.x 可以直接使用</span></span><br><span class="line"><span class="comment">// 密码编码： PasswordEncoder</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这些数据正常应该中数据库中读</span></span><br><span class="line"></span><br><span class="line">    auth.inMemoryAuthentication()</span><br><span class="line">        .withUser(<span class="string">&quot;kuangshen&quot;</span>).password(<span class="string">&quot;123456&quot;</span>).roles(<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">        .and()</span><br><span class="line">        .withUser(<span class="string">&quot;root&quot;</span>).password(<span class="string">&quot;123456&quot;</span>).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">        .and()</span><br><span class="line">        .withUser(<span class="string">&quot;guest&quot;</span>).password(<span class="string">&quot;123456&quot;</span>).roles(<span class="string">&quot;vip1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试，我们可以使用这些账号登录进行测试！发现会报错！</p>
<p><code>There is no PasswordEncoder mapped for the id “null”</code></p>
<p><img data-src="image-20200728204515545.png" alt="image-20200728204515545"></p>
<p><img data-src="image-20200728204424570.png" alt="image-20200728204424570"></p>
</li>
<li><p>原因，我们要将前端传过来的密码进行某种方式加密，否则就无法登录，修改代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 认证，springboot 2.1.x 可以直接使用</span></span><br><span class="line"><span class="comment">// 密码编码： PasswordEncoder</span></span><br><span class="line"><span class="comment">// 在spring Secutiry 5.0+ 新增了很多加密方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这些数据正常应该中数据库中读</span></span><br><span class="line">    auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">        .withUser(<span class="string">&quot;kuangshen&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">        .and()</span><br><span class="line">        .withUser(<span class="string">&quot;root&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">        .and()</span><br><span class="line">        .withUser(<span class="string">&quot;guest&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试，发现，登录成功，并且每个角色只能访问自己认证下的规则！搞定</p>
</li>
</ol>
<h4 id="权限控制和注销"><a href="#权限控制和注销" class="headerlink" title="权限控制和注销"></a>权限控制和注销</h4><ol>
<li><p>开启自动配置的注销的功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定制请求的授权规则</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">//....</span></span><br><span class="line">   <span class="comment">//开启自动配置的注销的功能</span></span><br><span class="line">   <span class="comment">// /logout 注销请求</span></span><br><span class="line">   http.logout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>我们在前端，增加一个注销的按钮，<code>index.html </code>导航栏中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注销--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;sign-out icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 注销</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>我们可以去测试一下，登录成功后点击注销，发现注销完毕会跳转到登录页面！</p>
<p><img data-src="image-20200728210246562.png" alt="image-20200728210246562"></p>
<p><img data-src="image-20200728210323067.png" alt="image-20200728210323067"></p>
</li>
<li><p>但是，我们想让他注销成功后，依旧可以跳转到首页，该怎么处理呢？</p>
<p>源码：</p>
<p><img data-src="image-20200728211500366.png" alt="image-20200728211500366"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .logoutSuccessUrl(&quot;/&quot;); 注销成功来到首页</span></span><br><span class="line">http.logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>测试，注销完毕后，发现跳转到首页OK</p>
</li>
<li><p>我们现在又来一个需求：用户没有登录的时候，导航栏上只显示登录按钮，用户登录之后，导航栏可以显示登录的用户信息及注销按钮！还有就是，比如kuangshen这个用户，它只有 vip2，vip3功能，那么登录则只显示这两个功能，而vip1的功能菜单不显示！这个就是真实的网站情况了！该如何做呢？</p>
<p><code>&lt;font color=red&gt;</code>我们需要结合thymeleaf中的一些功能<code>&lt;/font&gt;</code></p>
<p><code>sec：authorize=&quot;isAuthenticated()&quot;</code>:是否认证登录！来显示不同的页面</p>
<p>Maven依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf.extras/thymeleaf-extras-springsecurity4 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>整合包4（springsecurity4）——springboot版本2.0.9</li>
<li>整合包5（springsecurity5）——springboot版本之后</li>
</ul>
</li>
<li><p>修改我们的前端页面</p>
<p>导入命名空间</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">&quot;http://www.thymeleaf.org/thymeleaf-extras-springsecurity5&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改导航栏，增加认证判断</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--登录注销--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right menu&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--如果未登录--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;!isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;address card icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 登录</span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--如果已登录--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;address card icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            用户名：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;principal.username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            角色：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;principal.authorities&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;sign-out  icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 注销</span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>重启测试，我们可以登录试试看，登录成功后确实，显示了我们想要的页面；</p>
<ul>
<li><p>未登录</p>
<p><img data-src="image-20200728213100804.png" alt="image-20200728213100804"></p>
</li>
<li><p>登录</p>
<p><img data-src="image-20200728213235625.png" alt="image-20200728213235625"></p>
</li>
</ul>
</li>
<li><p>点击注销产生的问题</p>
<ul>
<li><p>整合包4（springsecurity4）</p>
<p><img data-src="image-20200728220414292.png" alt="image-20200728220414292"></p>
</li>
<li><p>整合包5（springsecurity5）（不算问题，需要点击确定，才能回到首页）</p>
<p><img data-src="image-20200728220517534.png" alt="image-20200728220517534"></p>
<p><img data-src="image-20200728220531678.png" alt="image-20200728220531678"></p>
</li>
</ul>
<p><code>&lt;font color=red&gt;</code>解决问题：<code>&lt;/font&gt;</code></p>
<ul>
<li>它默认防止csrf跨站请求伪造，因为会产生安全问题</li>
<li>将请求改为post表单提交</li>
<li>在spring security中关闭csrf功能<code>http.csrf().disable();</code></li>
</ul>
<p>再次点击注销按钮之后（直接退出到首页）</p>
<p><img data-src="image-20200728220835347.png" alt="image-20200728220835347"></p>
</li>
<li><p>我们继续将下面的角色功能块认证完成！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--菜单根据用户的角色动态的实现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>  <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip1&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 1<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>  <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip2&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 2<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>  <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip3&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 3<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试一下！</p>
</li>
</ol>
<ul>
<li><p>用户首页未登录</p>
<p><img data-src="image-20200728221453455.png" alt="image-20200728221453455"></p>
</li>
<li><p>某个用户登录</p>
<p><img data-src="image-20200728221536116.png" alt="image-20200728221536116"></p>
</li>
<li><p>权限控制和注销搞定！</p>
</li>
</ul>
<h4 id="记住我"><a href="#记住我" class="headerlink" title="记住我"></a>记住我</h4><p>现在的情况，我们只要登录之后，关闭浏览器，再登录，就会让我们重新登录，但是很多网站的情况，就是有一个记住密码的功能，这个该如何实现呢？很简单</p>
<ol>
<li><p>开启记住我功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定制请求的授权规则</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//。。。。。。。。。。。</span></span><br><span class="line">   <span class="comment">//开启记住我功能: cookie,默认保存两周</span></span><br><span class="line">   http.rememberMe();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>我们再次启动项目测试一下</p>
<ul>
<li><p>发现登录页多了一个记住我功能</p>
<p><img data-src="image-20200728222312694.png" alt="image-20200728222312694"></p>
</li>
<li><p>我们登录之后关闭 浏览器，然后重新打开浏览器访问，发现用户依旧存在！</p>
<p><img data-src="image-20200728222406216.png" alt="image-20200728222406216"></p>
<p><code>&lt;font color=red&gt;</code>思考：如何实现的呢？其实非常简单<code>&lt;/font&gt;</code></p>
<p>我们可以查看浏览器的cookie</p>
<p><img data-src="image-20200728222706154.png" alt="image-20200728222706154"></p>
</li>
</ul>
</li>
<li><p>我们点击注销的时候，可以发现，spring security 帮我们自动删除了这个 cookie</p>
<p><img data-src="image-20200728223559077.png" alt="image-20200728223559077"></p>
</li>
<li><p>cookie发送给浏览器保存，以后登录带上这个cookie，只要通过检查就可以免登录了。如果点击注销，则会删除这个cookie，具体的原理我们在JavaWeb阶段都讲过了，这里就不在多说了！</p>
</li>
</ol>
<h4 id="定制登录页"><a href="#定制登录页" class="headerlink" title="定制登录页"></a>定制登录页</h4><p>现在这个登录页面都是spring security 默认的，怎么样可以使用我们自己写的Login界面呢？</p>
<ol>
<li><p>在刚才的登录页配置后面指定 loginpage</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有权限默认会到登录页面,需要开启登录的页面</span></span><br><span class="line">    <span class="comment">// /login页面</span></span><br><span class="line">    http.formLogin().loginPage(<span class="string">&quot;/toLogin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>然后前端也需要指向我们自己定义的 login请求</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;!isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;address card icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 登录</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>我们登录，需要将这些信息发送到哪里，我们也需要配置，login.html 配置提交请求及方式，方式必须为post:</p>
<p>在 loginPage()源码中的注释上有写明：</p>
<p><img data-src="image-20200728224246393.png" alt="image-20200728224246393"></p>
</li>
<li><p>这个请求提交上来，我们还需要验证处理，怎么做呢？我们可以查看formLogin()方法的源码！我们配置接收登录的用户名和密码的参数！</p>
<p><img data-src="image-20200728224831116.png" alt="image-20200728224831116"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有权限默认会到登录页面,需要开启登录的页面</span></span><br><span class="line">    <span class="comment">// /login页面</span></span><br><span class="line">    http.formLogin()</span><br><span class="line">      .usernameParameter(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">      .passwordParameter(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">      .loginPage(<span class="string">&quot;/toLogin&quot;</span>)</span><br><span class="line">      .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>); <span class="comment">// 登陆表单提交请求</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在登录页增加记住我的多选框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember&quot;</span>&gt;</span> 记住我</span><br></pre></td></tr></table></figure></li>
<li><p>后端验证处理！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    <span class="comment">//开启记住我功能: cookie,默认保存两周,自定义接收前端的参数</span></span><br><span class="line">    http.rememberMe().rememberMeParameter(<span class="string">&quot;remember&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试，OK</p>
</li>
</ol>
<h3 id="完整配置代码"><a href="#完整配置代码" class="headerlink" title="完整配置代码"></a>完整配置代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AOP:拦截器</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span>  <span class="comment">// 开启WebSecurity模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//链式编程</span></span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 首页所有人都可以访问，功能也只有对应有权限的人才能访问到</span></span><br><span class="line">        <span class="comment">// 请求授权的规则</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 没有权限默认会到登录页面,需要开启登录的页面</span></span><br><span class="line">        <span class="comment">// /login页面</span></span><br><span class="line">        http.formLogin()</span><br><span class="line">                .usernameParameter(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">                .passwordParameter(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">                .loginPage(<span class="string">&quot;/toLogin&quot;</span>)</span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注销,开启了注销功能,跳到首页</span></span><br><span class="line">        http.logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 防止网站工具：get，post</span></span><br><span class="line">        http.csrf().disable();<span class="comment">//关闭csrf功能，登录失败肯定存在的原因</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启记住我功能: cookie,默认保存两周,自定义接收前端的参数</span></span><br><span class="line">        http.rememberMe().rememberMeParameter(<span class="string">&quot;remember&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 认证，springboot 2.1.x 可以直接使用</span></span><br><span class="line">    <span class="comment">// 密码编码： PasswordEncoder</span></span><br><span class="line">    <span class="comment">// 在spring Secutiry 5.0+ 新增了很多加密方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这些数据正常应该中数据库中读</span></span><br><span class="line">        auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">                .withUser(<span class="string">&quot;kuangshen&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;root&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;guest&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="（十九）"><a href="#（十九）" class="headerlink" title="（十九）"></a>（十九）</h1><h2 id="1、Shiro简介"><a href="#1、Shiro简介" class="headerlink" title="1、Shiro简介"></a>1、Shiro简介</h2><h3 id="1-1、Shiro-是什么？"><a href="#1-1、Shiro-是什么？" class="headerlink" title="1.1、Shiro 是什么？"></a>1.1、Shiro 是什么？</h3><ul>
<li><p>Apache Shiro 是 Java 的一个安全（权限）框架。</p>
</li>
<li><p>Shiro 可以非常容易的开发出足够好的应用，其不仅可以用在 JavaSE 环境，也可以用在 JavaEE 环境。</p>
</li>
<li><p>Shiro 可以完成：认证、授权、加密、会话管理、与Web 集成、缓存等。</p>
</li>
<li><p>下载地址</p>
<ul>
<li>官网：<a href="http://shiro.apache.org/">http://shiro.apache.org/</a></li>
<li>github：<a href="https://github.com/apache/shiro">https://github.com/apache/shiro</a></li>
</ul>
</li>
</ul>
<h3 id="1-2、有哪些功能？"><a href="#1-2、有哪些功能？" class="headerlink" title="1.2、有哪些功能？"></a>1.2、有哪些功能？</h3><p><img data-src="image-20200729114647110.png" alt="image-20200729114647110"></p>
<ul>
<li>Authentication:身份认证/登录，验证用户是不是拥有相应的身份</li>
<li>Authorization:授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能进行什么操作，如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限</li>
<li>Session Management:会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通JavaSE环境，也可以是Web 环境的</li>
<li>Cryptography:加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储</li>
<li>Web Support:Web 支持，可以非常容易的集成到Web 环境</li>
<li>Caching:缓存，比如用户登录后，其用户信息、拥有的角色/权限不必每次去查，这样可以提高效率</li>
<li>Concurrency:Shiro支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去</li>
<li>Testing:提供测试支持</li>
<li>“Run As”:允许一个用户假装为另一个用户（如果他们允许）的身份进行访问</li>
<li>Remember Me:记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了</li>
</ul>
<h3 id="1-3、Shiro架构-外部"><a href="#1-3、Shiro架构-外部" class="headerlink" title="1.3、Shiro架构(外部)"></a>1.3、Shiro架构(外部)</h3><p>从外部来看Shiro，即从应用程序角度的来观察如何使用Shiro完成工作</p>
<p><img data-src="image-20200729114702566.png" alt="image-20200729114702566"></p>
<ul>
<li>Subject：应用代码直接交互的对象是Subject，也就是说Shiro的对外API 核心就是Subject。Subject 代表了当前“用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject，如网络爬虫，机器人等；与Subject 的所有交互都会委托给SecurityManager；Subject 其实是一个门面，SecurityManager才是实际的执行者</li>
<li>SecurityManager：安全管理器；即所有与安全有关的操作都会与SecurityManager交互；且其管理着所有Subject；可以看出它是Shiro的核心，它负责与Shiro的其他组件进行交互，它相当于SpringMVC中DispatcherServlet的角色</li>
<li>Realm：Shiro从Realm 获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm 获取相应的用户进行比较以确定用户身份是否合法；也需要从Realm 得到用户相应的角色/权限进行验证用户是否能进行操作；可以把Realm 看成DataSource</li>
</ul>
<h3 id="1-4、Shiro架构-内部"><a href="#1-4、Shiro架构-内部" class="headerlink" title="1.4、Shiro架构(内部)"></a>1.4、Shiro架构(内部)</h3><p><img data-src="image-20200729114720578.png" alt="image-20200729114720578"></p>
<ul>
<li>Subject：任何可以与应用交互的“用户”；</li>
<li>SecurityManager：相当于SpringMVC中的DispatcherServlet；是Shiro的心脏；所有具体的交互都通过SecurityManager进行控制；它管理着所有Subject、且负责进行认证、授权、会话及缓存的管理。</li>
<li>Authenticator：负责Subject 认证，是一个扩展点，可以自定义实现；可以使用认证策略（Authentication Strategy），即什么情况下算用户认证通过了；</li>
<li>Authorizer：授权器、即访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能；</li>
<li>Realm：可以有1 个或多个Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是JDBC 实现，也可以是内存实现等等；由用户提供；所以一般在应用中都需要实现自己的Realm；</li>
<li>SessionManager：管理Session 生命周期的组件；而Shiro并不仅仅可以用在Web 环境，也可以用在如普通的JavaSE环境<br>CacheManager：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少改变，放到缓存中后可以提高访问的性能</li>
<li>Cryptography：密码模块，Shiro提高了一些常见的加密组件用于如密码加密/解密。</li>
</ul>
<h2 id="2、Hello-World"><a href="#2、Hello-World" class="headerlink" title="2、Hello World"></a>2、Hello World</h2><h3 id="2-1、快速实践"><a href="#2-1、快速实践" class="headerlink" title="2.1、快速实践"></a>2.1、快速实践</h3><ul>
<li><p>查看官方文档：<a href="http://shiro.apache.org/tutorial.html">http://shiro.apache.org/tutorial.html</a></p>
</li>
<li><p>官方的quickstart : <a href="https://github.com/apache/shiro/tree/master/samples/quickstart/">https://github.com/apache/shiro/tree/master/samples/quickstart/</a></p>
<p><img data-src="image-20200729115148574.png" alt="image-20200729115148574"></p>
</li>
</ul>
<ol>
<li><p>创建一个maven父工程，用来学习Shiro,删掉不必要的部分</p>
</li>
<li><p>创建一个普通的Maven子工程：hell-shiro</p>
<p><img data-src="image-20200729120114648.png" alt="image-20200729120114648"></p>
</li>
<li><p>根据<a href="https://github.com/apache/shiro/blob/master/samples/quickstart/pom.xml">官方文档</a>，我们导入Shiro的依赖</p>
<p><img data-src="image-20200729120207730.png" alt="image-20200729120207730"></p>
<p><a href="https://mvnrepository.com/artifact/org.apache.shiro/shiro-core">版本号点击这里</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- configure logging --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>相关配置文件</p>
<ul>
<li><p>log4j.properties——<a href="https://github.com/apache/shiro/blob/master/samples/quickstart/src/main/resources/log4j.properties">官网</a></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">INFO, stdout</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%d %p [%c] - %m %n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># General Apache libraries</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache</span>=<span class="string">WARN</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Spring</span></span><br><span class="line"><span class="meta">log4j.logger.org.springframework</span>=<span class="string">WARN</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Default Shiro logging</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.shiro</span>=<span class="string">INFO</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Disable verbose logging</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.shiro.util.ThreadContext</span>=<span class="string">WARN</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.shiro.cache.ehcache.EhCache</span>=<span class="string">WARN</span></span><br></pre></td></tr></table></figure></li>
<li><p>shiro.ini——<a href="https://github.com/apache/shiro/blob/master/samples/quickstart/src/main/resources/shiro.ini">官网</a></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="comment"># user &#x27;root&#x27; with password &#x27;secret&#x27; and the &#x27;admin&#x27; role</span></span><br><span class="line"><span class="attr">root</span> = secret, admin</span><br><span class="line"><span class="comment"># user &#x27;guest&#x27; with the password &#x27;guest&#x27; and the &#x27;guest&#x27; role</span></span><br><span class="line"><span class="attr">guest</span> = guest, guest</span><br><span class="line"><span class="comment"># user &#x27;presidentskroob&#x27; with password &#x27;12345&#x27; (&quot;That&#x27;s the same combination on</span></span><br><span class="line"><span class="comment"># my luggage!!!&quot; ;)), and role &#x27;president&#x27;</span></span><br><span class="line"><span class="attr">presidentskroob</span> = <span class="number">12345</span>, president</span><br><span class="line"><span class="comment"># user &#x27;darkhelmet&#x27; with password &#x27;ludicrousspeed&#x27; and roles &#x27;darklord&#x27; and &#x27;schwartz&#x27;</span></span><br><span class="line"><span class="attr">darkhelmet</span> = ludicrousspeed, darklord, schwartz</span><br><span class="line"><span class="comment"># user &#x27;lonestarr&#x27; with password &#x27;vespa&#x27; and roles &#x27;goodguy&#x27; and &#x27;schwartz&#x27;</span></span><br><span class="line"><span class="attr">lonestarr</span> = vespa, goodguy, schwartz</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Roles with assigned permissions</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Each line conforms to the format defined in the</span></span><br><span class="line"><span class="comment"># org.apache.shiro.realm.text.TextConfigurationRealm#setRoleDefinitions JavaDoc</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="section">[roles]</span></span><br><span class="line"><span class="comment"># &#x27;admin&#x27; role has all permissions, indicated by the wildcard &#x27;*&#x27;</span></span><br><span class="line"><span class="attr">admin</span> = *</span><br><span class="line"><span class="comment"># The &#x27;schwartz&#x27; role can do anything (*) with any lightsaber:</span></span><br><span class="line"><span class="attr">schwartz</span> = lightsaber:*</span><br><span class="line"><span class="comment"># The &#x27;goodguy&#x27; role is allowed to &#x27;drive&#x27; (action) the winnebago (type) with</span></span><br><span class="line"><span class="comment"># license plate &#x27;eagle5&#x27; (instance specific id)</span></span><br><span class="line"><span class="attr">goodguy</span> = winnebago:drive:eagle5</span><br></pre></td></tr></table></figure></li>
<li><p>启动类 Quickstart——<a href="https://github.com/apache/shiro/blob/master/samples/quickstart/src/main/java/Quickstart.java">官网</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"> * or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment"> * distributed with this work for additional information</span></span><br><span class="line"><span class="comment"> * regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"> * &quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"> * with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing,</span></span><br><span class="line"><span class="comment"> * software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment"> * &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class="line"><span class="comment"> * KIND, either express or implied.  See the License for the</span></span><br><span class="line"><span class="comment"> * specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment"> * under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.config.IniSecurityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.Session;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.Factory;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple Quickstart application showing how to use Shiro&#x27;s API.</span></span><br><span class="line"><span class="comment"> * 简单入门Shiro使用API</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 0.9 RC2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quickstart</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">transient</span> Logger log = LoggerFactory.getLogger(Quickstart.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The easiest way to create a Shiro SecurityManager with configured</span></span><br><span class="line">        <span class="comment">// realms, users, roles and permissions is to use the simple INI config.</span></span><br><span class="line">        <span class="comment">// We&#x27;ll do that by using a factory that can ingest a .ini file and</span></span><br><span class="line">        <span class="comment">// return a SecurityManager instance:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use the shiro.ini file at the root of the classpath</span></span><br><span class="line">        <span class="comment">// (file: and url: prefixes load from files and urls respectively):</span></span><br><span class="line">        <span class="comment">// 读取配置文件:</span></span><br><span class="line">        Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(<span class="string">&quot;classpath:shiro.ini&quot;</span>);</span><br><span class="line">        SecurityManager securityManager = factory.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// for this simple example quickstart, make the SecurityManager</span></span><br><span class="line">        <span class="comment">// accessible as a JVM singleton.  Most applications wouldn&#x27;t do this</span></span><br><span class="line">        <span class="comment">// and instead rely on their container configuration or web.xml for</span></span><br><span class="line">        <span class="comment">// webapps.  That is outside the scope of this simple quickstart, so</span></span><br><span class="line">        <span class="comment">// we&#x27;ll just do the bare minimum so you can continue to get a feel</span></span><br><span class="line">        <span class="comment">// for things.</span></span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Now that a simple Shiro environment is set up, let&#x27;s see what you can do:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// get the currently executing user:</span></span><br><span class="line">        <span class="comment">// 获取当前的用户对象 Subject</span></span><br><span class="line">        Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do some stuff with a Session (no need for a web or EJB container!!!)</span></span><br><span class="line">        <span class="comment">//通过当前用户拿到Shiro的Session 可以脱离web存值取值</span></span><br><span class="line">        Session session = currentUser.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;someKey&quot;</span>, <span class="string">&quot;aValue&quot;</span>);</span><br><span class="line">        String value = (String) session.getAttribute(<span class="string">&quot;someKey&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (value.equals(<span class="string">&quot;aValue&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Retrieved the correct value! [&quot;</span> + value + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// let&#x27;s login the current user so we can check against roles and permissions:</span></span><br><span class="line">        <span class="comment">//判断当前的用户是否被认证</span></span><br><span class="line">        <span class="keyword">if</span> (!currentUser.isAuthenticated()) &#123;</span><br><span class="line">            <span class="comment">//Token 令牌</span></span><br><span class="line">            UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">&quot;lonestarr&quot;</span>, <span class="string">&quot;vespa&quot;</span>);</span><br><span class="line">            <span class="comment">//设置记住我</span></span><br><span class="line">            token.setRememberMe(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//执行登录操作</span></span><br><span class="line">                currentUser.login(token);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnknownAccountException uae) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;There is no user with username of &quot;</span> + token.getPrincipal());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IncorrectCredentialsException ice) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;Password for account &quot;</span> + token.getPrincipal() + <span class="string">&quot; was incorrect!&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (LockedAccountException lae) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;The account for username &quot;</span> + token.getPrincipal() + <span class="string">&quot; is locked.  &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Please contact your administrator to unlock it.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// ... catch more exceptions here (maybe custom ones specific to your application?</span></span><br><span class="line">            <span class="keyword">catch</span> (AuthenticationException ae) &#123;</span><br><span class="line">                <span class="comment">//unexpected condition?  error?</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//say who they are:</span></span><br><span class="line">        <span class="comment">//print their identifying principal (in this case, a username):</span></span><br><span class="line">        log.info(<span class="string">&quot;User [&quot;</span> + currentUser.getPrincipal() + <span class="string">&quot;] logged in successfully.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//test a role:</span></span><br><span class="line">        <span class="comment">// 检查角色</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.hasRole(<span class="string">&quot;schwartz&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;May the Schwartz be with you!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Hello, mere mortal.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//test a typed permission (not instance-level)</span></span><br><span class="line">        <span class="comment">//粗粒度</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;lightsaber:wield&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;You may use a lightsaber ring.  Use it wisely.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Sorry, lightsaber rings are for schwartz masters only.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//a (very powerful) Instance Level permission:</span></span><br><span class="line">        <span class="comment">//细粒度</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;winnebago:drive:eagle5&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;You are permitted to &#x27;drive&#x27; the winnebago with license plate (id) &#x27;eagle5&#x27;.  &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Here are the keys - have fun!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Sorry, you aren&#x27;t allowed to drive the &#x27;eagle5&#x27; winnebago!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//all done - log out!</span></span><br><span class="line">        <span class="comment">//注销</span></span><br><span class="line">        currentUser.logout();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//结束</span></span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="image-20200729130649625.png" alt="image-20200729130649625"></p>
</li>
<li><p>Spring Secutrry都有~（只是换了个名字）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取当前的用户对象 Subject</span></span><br><span class="line">Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line">Session session = currentUser.getSession();</span><br><span class="line">currentUser.isAuthenticated()</span><br><span class="line">    currentUser.getPrincipal()</span><br><span class="line">    currentUser.hasRole(<span class="string">&quot;schwartz&quot;</span>)</span><br><span class="line">    currentUser.isPermitted(<span class="string">&quot;lightsaber:wield&quot;</span>)</span><br><span class="line">    currentUser.logout();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="3、SpringBoot集成"><a href="#3、SpringBoot集成" class="headerlink" title="3、SpringBoot集成"></a>3、SpringBoot集成</h2><h3 id="3-1、SpringBoot整合Shiro环境搭建"><a href="#3-1、SpringBoot整合Shiro环境搭建" class="headerlink" title="3.1、SpringBoot整合Shiro环境搭建"></a>3.1、SpringBoot整合Shiro环境搭建</h3><ol>
<li><p>新建一个项目或模块，勾选依赖</p>
<p><img data-src="image-20200729174715011.png" alt="image-20200729174715011"></p>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--thymeleaf--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试环境是否正常</p>
<ul>
<li><p>新建一个controller页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;,&quot;/index&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toIndex</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello,Shiro&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user/add&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user/update&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>新建一个index.html页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/add&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span>   | <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/update&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>新建一个add.html页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>add<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>新建一个update.html页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>update<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>项目结构</p>
<p><img data-src="image-20200729190325307.png" alt="image-20200729190325307"></p>
</li>
<li><p>运行截图</p>
<p><img data-src="image-20200729190548307.png" alt="image-20200729190548307"></p>
</li>
</ul>
</li>
<li><p>导入shiro整合spring的包——<a href="https://mvnrepository.com/artifact/org.apache.shiro/shiro-spring">官网</a>,查看最新版本</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      Subject  用户</span></span><br><span class="line"><span class="comment">      SecurityManager 管理所有用户</span></span><br><span class="line"><span class="comment">      Realm 连接数据库</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--shiro整合spring的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写导入配置类</p>
<ul>
<li><p>编写一个自定义类UserRealm</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义的UserRealm</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了=&gt;授权doGetAuthorizationInfo&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了=&gt;认证doGetAuthorizationInfo&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写配置ShiroConfig</p>
<ul>
<li>创建realm对象，需要自定义类</li>
<li>DefaultWebSecurityManager</li>
<li>ShiroFilterFactoryBean</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. shiroFilterFactoryBean</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;getDefaultWebSecurityManager&quot;)</span> DefaultWebSecurityManager defaultWebSecurityManager)</span> </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean bean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        <span class="comment">// 设置安全管理器</span></span><br><span class="line">        bean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. DefaultWebSecurityManager</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">getDefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm)</span> </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关联userRealm</span></span><br><span class="line">        securityManager.setRealm(userRealm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1. 创建realm对象，需要自定义类</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserRealm <span class="title">userRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserRealm();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="3-2、Shiro实现登录拦截"><a href="#3-2、Shiro实现登录拦截" class="headerlink" title="3.2、Shiro实现登录拦截"></a>3.2、Shiro实现登录拦截</h3><ul>
<li><p>在 <code>ShiroConfig</code>中的 <code>getShiroFilterFactoryBean</code>方法中添加如下配置</p>
<ul>
<li>anon： 无需认证就可以访问</li>
<li>authc： 必须认证了才能访问</li>
<li>user： 必须拥有记住我功能才能用</li>
<li>perms： 拥有对某个资源的权限才能访问</li>
<li>role： 拥有某个角色权限</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">filterMap.put(<span class="string">&quot;/user/add&quot;</span>,<span class="string">&quot;authc&quot;</span>);</span><br><span class="line">filterMap.put(<span class="string">&quot;/user/update&quot;</span>,<span class="string">&quot;authc&quot;</span>);</span><br><span class="line">bean.setFilterChainDefinitionMap(filterMap);</span><br></pre></td></tr></table></figure></li>
<li><p>点击首页的add或者update之后</p>
<p><img data-src="image-20200729191619576.png" alt="image-20200729191619576"></p>
</li>
<li><p>添加拦截成功页面</p>
<ul>
<li><p>登录页面login.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在MyConfig中添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toLogin&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在 <code>ShiroConfig</code>中的 <code>getShiroFilterFactoryBean</code>方法中添加如下配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置登录的请求</span></span><br><span class="line">bean.setLoginUrl(<span class="string">&quot;/toLogin&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>拦截成功页面</p>
<p><img data-src="image-20200729192409085.png" alt="image-20200729192409085"></p>
</li>
</ul>
<h3 id="3-3、Shiro实现用户认证"><a href="#3-3、Shiro实现用户认证" class="headerlink" title="3.3、Shiro实现用户认证"></a>3.3、Shiro实现用户认证</h3><ol>
<li><p>在 <code>MyController</code>中编写用户提交表单之后处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username, String password, Model model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取一个用户</span></span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    <span class="comment">// 封装用户的登录数据</span></span><br><span class="line">    UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        subject.login(token);<span class="comment">//执行登录的方法，如果没有异常就说明ok了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;<span class="comment">//用户名不存在</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名错误&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IncorrectCredentialsException e) &#123;<span class="comment">//密码不存在</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>login.html的修改</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>用户输入登录信息</p>
<ul>
<li><p>页面</p>
<p><img data-src="image-20200729220647520.png" alt="image-20200729220647520"></p>
</li>
<li><p>控制台</p>
<p><img data-src="image-20200729220926500.png" alt="image-20200729220926500"></p>
</li>
</ul>
</li>
<li><p>用户认证编写 <code>UserRealm</code>中的认证（doGetAuthenticationInfo）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//认证</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了=&gt;认证doGetAuthorizationInfo&quot;</span>);</span><br><span class="line">    <span class="comment">// 用户名、密码， 数据中取</span></span><br><span class="line">    String name = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    String password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    UsernamePasswordToken userToken = (UsernamePasswordToken) token;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!userToken.getUsername().equals(name)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;<span class="comment">//抛出异常 UnknownAccountException</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 密码认证，shiro做</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(<span class="string">&quot;&quot;</span>,password,<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-4、Shiro整合Mybatis"><a href="#3-4、Shiro整合Mybatis" class="headerlink" title="3.4、Shiro整合Mybatis"></a>3.4、Shiro整合Mybatis</h3><ol>
<li><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入mybatis，这是MyBatis官方提供的适配spring Boot的，而不是spring Boot自己的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置文件application.yml的编写</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="comment">#?serverTimezone=UTC解决时区的报错</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">nuc.ss.pojo</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure></li>
<li><p>User类的编写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>UserMapper.xml映射</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">     <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace=绑定一个对应的Dao/Mapper接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;nuc.ss.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        insert into mybatis.user (id, name, pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        update mybatis.user set name=#&#123;name&#125;,pwd = #&#123;pwd&#125; where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from mybatis.user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>UserService接口实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>UserServiceImpl业务逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.queryUserByName(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>测试环境</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShiroSpringbootApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(userService.queryUserByName(<span class="string">&quot;狂神&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="image-20200730121720922.png" alt="image-20200730121720922"></p>
</li>
<li><p><code>UserRealm</code>连接真实数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//认证</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了=&gt;认证doGetAuthorizationInfo&quot;</span>);</span><br><span class="line"></span><br><span class="line">    UsernamePasswordToken userToken = (UsernamePasswordToken) token;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 真实数据库 用户名、密码， 数据中取</span></span><br><span class="line">    User user = userService.queryUserByName(userToken.getUsername());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;<span class="comment">//没有这个人</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 密码认证，shiro做</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(<span class="string">&quot;&quot;</span>,user.getPwd(),<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="image-20200730180019861.png" alt="image-20200730180019861"></p>
</li>
<li><p>断点测试密码加密类型</p>
<ul>
<li><p>打断点Debug</p>
<p><img data-src="image-20200730182621912.png" alt="image-20200730182621912"></p>
</li>
<li><p>默认是 <code>SimpleCredentialsMatcher</code>加密</p>
<p><img data-src="image-20200730181814293.png" alt="image-20200730181814293"></p>
</li>
<li><p>MD5加密——<a href="http://tool.chinaz.com/tools/md5.aspx">测试</a></p>
<p>123456——E10ADC3949BA59ABBE56E057F20F883E</p>
</li>
<li><p>MD5盐值加密</p>
</li>
<li><p>所有加密</p>
<p><img data-src="image-20200730181944253.png" alt="image-20200730181944253"></p>
</li>
</ul>
</li>
</ol>
<h3 id="3-5、Shiro实现用户授权"><a href="#3-5、Shiro实现用户授权" class="headerlink" title="3.5、Shiro实现用户授权"></a>3.5、Shiro实现用户授权</h3><ol>
<li><p><code>ShiroConfig</code>中的 <code>getShiroFilterFactoryBean</code>方法添加认证代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//授权，正常情况下，没有授权会跳转到为授权页面</span></span><br><span class="line">filterMap.put(<span class="string">&quot;/user/add&quot;</span>,<span class="string">&quot;perms[user:add]&quot;</span>);</span><br><span class="line">filterMap.put(<span class="string">&quot;/user/update&quot;</span>,<span class="string">&quot;perms[user:update]&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>登录之后点击add按钮会弹出如下页面</p>
<p><img data-src="image-20200730195133631.png" alt="image-20200730195133631"></p>
</li>
<li><p>添加为授权页面</p>
<ul>
<li><p>MyController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/noauto&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">unauthorized</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;未经授权，无法访问此页面&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>ShiroConfig</code>中的 <code>getShiroFilterFactoryBean</code>方法中添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为授权页面</span></span><br><span class="line">bean.setUnauthorizedUrl(<span class="string">&quot;/noauto&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>再次测试</p>
<p><img data-src="image-20200730195807437.png" alt="image-20200730195807437"></p>
<p><img data-src="image-20200730195946692.png" alt="image-20200730195946692"></p>
<p>所以需要在UserRealm中为用户进行真正授权</p>
</li>
<li><p>UserRealm类的修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义的UserRealm</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了=&gt;授权doGetAuthorizationInfo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拿到当前登录的这个对象</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        User currentUser = (User)subject.getPrincipal();<span class="comment">//拿到user对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置当前用户的权限</span></span><br><span class="line">        info.addStringPermission(currentUser.getPerms());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="comment">// 密码认证，shiro做</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user,user.getPwd(),<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>再次测试</p>
<p><img data-src="image-20200730202810034.png" alt="image-20200730202810034"></p>
</li>
</ol>
<h3 id="3-6、Shiro整合Thymeleaf"><a href="#3-6、Shiro整合Thymeleaf" class="headerlink" title="3.6、Shiro整合Thymeleaf"></a>3.6、Shiro整合Thymeleaf</h3><ol>
<li><p>shiro-thymeleaf整合包导入——<a href="https://mvnrepository.com/artifact/com.github.theborakompanioni/thymeleaf-extras-shiro">官网</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--shiro-thymeleaf整合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在ShiroConfig中整合ShiroDialect</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 整合ShiroDialect： 用来整合 Shiro thymeleaf</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroDialect <span class="title">getShiroDialect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ShiroDialect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>index.html页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:shiro</span>=<span class="string">&quot;http://www.thymeleaf.org/thymeleaf-extras-shiro&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--用session实现，配合UserRealm中的session实现--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;div th:if=&quot;$&#123;session.loginUser==null&#125;&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;a th:href=&quot;@&#123;/toLogin&#125;&quot;&gt;登录&lt;/a&gt;</span></span><br><span class="line"><span class="comment">    &lt;/div&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:notAuthenticated</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:add&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/add&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:update&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/update&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>页面显示</p>
<p><img data-src="image-20200730205736153.png" alt="image-20200730205736153"></p>
</li>
</ol>
<h3 id="3-7、所有代码"><a href="#3-7、所有代码" class="headerlink" title="3.7、所有代码"></a>3.7、所有代码</h3><ul>
<li><p>ShiroConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> at.pollux.thymeleaf.shiro.dialect.ShiroDialect;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//shiroFilterFactoryBean</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;getDefaultWebSecurityManager&quot;)</span> DefaultWebSecurityManager defaultWebSecurityManager)</span> </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean bean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        <span class="comment">// 设置安全管理器</span></span><br><span class="line">        bean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加shiro的内置过滤器</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            anon： 无需认证就可以访问</span></span><br><span class="line"><span class="comment">            authc： 必须认证了才能访问</span></span><br><span class="line"><span class="comment">            user： 必须拥有记住我功能才能用</span></span><br><span class="line"><span class="comment">            perms： 拥有对某个资源的权限才能访问</span></span><br><span class="line"><span class="comment">            role： 拥有某个角色权限</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//拦截</span></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//filterMap.put(&quot;/user/add&quot;,&quot;authc&quot;);</span></span><br><span class="line">        <span class="comment">//filterMap.put(&quot;/user/update&quot;,&quot;authc&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//授权，正常情况下，没有授权会跳转到为授权页面</span></span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/add&quot;</span>,<span class="string">&quot;perms[user:add]&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/update&quot;</span>,<span class="string">&quot;perms[user:update]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/*&quot;</span>,<span class="string">&quot;authc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        bean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置登录的请求</span></span><br><span class="line">        bean.setLoginUrl(<span class="string">&quot;/toLogin&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为授权页面</span></span><br><span class="line">        bean.setUnauthorizedUrl(<span class="string">&quot;/noauto&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DefaultWebSecurityManager</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">getDefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm)</span> </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关联userRealm</span></span><br><span class="line">        securityManager.setRealm(userRealm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建realm对象，需要自定义类</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserRealm <span class="title">userRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserRealm();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 整合ShiroDialect： 用来整合 Shiro thymeleaf</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroDialect <span class="title">getShiroDialect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShiroDialect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>UserRealm</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> nuc.ss.pojo.User;</span><br><span class="line"><span class="keyword">import</span> nuc.ss.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.Session;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义的UserRealm</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了=&gt;授权doGetAuthorizationInfo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//info.addStringPermission(&quot;user:add&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//拿到当前登录的这个对象</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        User currentUser = (User)subject.getPrincipal();<span class="comment">//拿到user对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置当前用户的权限</span></span><br><span class="line">        info.addStringPermission(currentUser.getPerms());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了=&gt;认证doGetAuthorizationInfo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        UsernamePasswordToken userToken = (UsernamePasswordToken) token;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 虚拟用户</span></span><br><span class="line">        <span class="comment">//String name = &quot;root&quot;;</span></span><br><span class="line">        <span class="comment">//String password = &quot;123456&quot;;</span></span><br><span class="line">        <span class="comment">//if (!userToken.getUsername().equals(name)) &#123;</span></span><br><span class="line">        <span class="comment">//    return null;//抛出异常 UnknownAccountException</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 真实数据库 用户名、密码， 数据中取</span></span><br><span class="line">        User user = userService.queryUserByName(userToken.getUsername());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;<span class="comment">//没有这个人</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//首页</span></span><br><span class="line">        <span class="comment">//Subject currentSubject = SecurityUtils.getSubject();</span></span><br><span class="line">        <span class="comment">//Session session = currentSubject.getSession();</span></span><br><span class="line">        <span class="comment">//session.setAttribute(&quot;loginUser&quot;,user);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 密码认证，shiro做</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user,user.getPwd(),<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>MyController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UnknownAccountException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;,&quot;/index&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toIndex</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello,Shiro&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user/add&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user/update&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toLogin&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username, String password, Model model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取一个用户</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">// 封装用户的登录数据</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token);<span class="comment">//执行登录的方法，如果没有异常就说明ok了</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;<span class="comment">//用户名不存在</span></span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IncorrectCredentialsException e) &#123;<span class="comment">//密码不存在</span></span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/noauto&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">unauthorized</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;未经授权，无法访问此页面&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>pom依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>nuc.ss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-springboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>shiro-springboot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            Subject  用户</span></span><br><span class="line"><span class="comment">            SecurityManager 管理所有用户</span></span><br><span class="line"><span class="comment">            Realm 连接数据库</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--shiro-thymeleaf整合--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.theborakompanioni/thymeleaf-extras-shiro --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--引入mybatis，这是MyBatis官方提供的适配spring Boot的，而不是spring Boot自己的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--shiro整合spring的包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--thymeleaf--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4、完美的解释"><a href="#4、完美的解释" class="headerlink" title="4、完美的解释"></a>4、完美的解释</h2><p><a href="https://www.infoq.cn/article/apache-shiro/?itm_source=infoq_en&itm_medium=link_on_en_item&itm_campaign=item_in_other_langs">让 Apache Shiro 保护你的应用</a></p>
<h1 id="（二十）"><a href="#（二十）" class="headerlink" title="（二十）"></a>（二十）</h1><h2 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h2><p>1、前端页面的放置</p>
<ul>
<li><p>将html页面放入templates目录</p>
</li>
<li><p>将css，js，img放入到static目录</p>
<p><img data-src="1595732299609.png" alt="1595732299609"></p>
</li>
</ul>
<p>2、实体类的编写</p>
<ul>
<li><p>Department</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//部门表</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String departmentName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Employee</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//员工表</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer gender; <span class="comment">//0:女，1：男</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Department department;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(Integer id, String lastName, String email, Integer gender, Department department)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">        <span class="keyword">this</span>.department = department;</span><br><span class="line">        <span class="comment">//默认的创建日期</span></span><br><span class="line">        <span class="keyword">this</span>.birth = <span class="keyword">new</span> Date();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>3、dao层模拟数据库</p>
<ul>
<li><p>DepartmentDao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//部门Dao</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟数据库数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Department&gt; departments = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        departments = <span class="keyword">new</span> HashMap&lt;Integer, Department&gt;();<span class="comment">//创建一个部门表</span></span><br><span class="line"></span><br><span class="line">        departments.put(<span class="number">101</span>,<span class="keyword">new</span> Department(<span class="number">101</span>,<span class="string">&quot;教学部&quot;</span>));</span><br><span class="line">        departments.put(<span class="number">102</span>,<span class="keyword">new</span> Department(<span class="number">102</span>,<span class="string">&quot;市场部&quot;</span>));</span><br><span class="line">        departments.put(<span class="number">103</span>,<span class="keyword">new</span> Department(<span class="number">103</span>,<span class="string">&quot;教研部&quot;</span>));</span><br><span class="line">        departments.put(<span class="number">104</span>,<span class="keyword">new</span> Department(<span class="number">104</span>,<span class="string">&quot;运营部&quot;</span>));</span><br><span class="line">        departments.put(<span class="number">105</span>,<span class="keyword">new</span> Department(<span class="number">105</span>,<span class="string">&quot;后勤部&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得所有部门信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Department&gt; <span class="title">getDepartment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departments.values();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过id得到部门</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDepartmentById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departments.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>EmployeeDao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//员工Dao</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟数据库数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//员工所属部门</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DepartmentDao departmentDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        employees = <span class="keyword">new</span> HashMap&lt;Integer, Employee&gt;();<span class="comment">//创建一个员工表</span></span><br><span class="line"></span><br><span class="line">        employees.put(<span class="number">1001</span>,<span class="keyword">new</span> Employee(<span class="number">1001</span>,<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;A123456@qq.com&quot;</span>,<span class="number">1</span>,<span class="keyword">new</span> Department(<span class="number">101</span>,<span class="string">&quot;教学部&quot;</span>)));</span><br><span class="line">        employees.put(<span class="number">1002</span>,<span class="keyword">new</span> Employee(<span class="number">1002</span>,<span class="string">&quot;BB&quot;</span>,<span class="string">&quot;B123456@qq.com&quot;</span>,<span class="number">0</span>,<span class="keyword">new</span> Department(<span class="number">102</span>,<span class="string">&quot;市场部&quot;</span>)));</span><br><span class="line">        employees.put(<span class="number">1003</span>,<span class="keyword">new</span> Employee(<span class="number">1003</span>,<span class="string">&quot;CC&quot;</span>,<span class="string">&quot;C123456@qq.com&quot;</span>,<span class="number">1</span>,<span class="keyword">new</span> Department(<span class="number">103</span>,<span class="string">&quot;教研部&quot;</span>)));</span><br><span class="line">        employees.put(<span class="number">1004</span>,<span class="keyword">new</span> Employee(<span class="number">1004</span>,<span class="string">&quot;DD&quot;</span>,<span class="string">&quot;D123456@qq.com&quot;</span>,<span class="number">0</span>,<span class="keyword">new</span> Department(<span class="number">104</span>,<span class="string">&quot;运营部&quot;</span>)));</span><br><span class="line">        employees.put(<span class="number">1005</span>,<span class="keyword">new</span> Employee(<span class="number">1005</span>,<span class="string">&quot;EE&quot;</span>,<span class="string">&quot;E123456@qq.com&quot;</span>,<span class="number">1</span>,<span class="keyword">new</span> Department(<span class="number">105</span>,<span class="string">&quot;后勤部&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主键自增</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer ininId = <span class="number">1006</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加一个员工</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (employee.getId() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            employee.setId(ininId++);</span><br><span class="line">        &#125;</span><br><span class="line">        employee.setDepartment(departmentDao.getDepartmentById(employee.getDepartment().getId()));</span><br><span class="line"></span><br><span class="line">        employees.put(employee.getId(),employee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询全部员工信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Employee&gt; <span class="title">getAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employees.values();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过id查询员工</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmployeeById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employees.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除员工通过id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        employees.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>4、目录结构</p>
<p><img data-src="1595732679388.png" alt="1595732679388"></p>
<h2 id="首页实现"><a href="#首页实现" class="headerlink" title="首页实现"></a>首页实现</h2><h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><p>创建一个 <code>IndexController</code>,写一个返回首页的方法（<code>&lt;font color=red&gt;</code>不建议使用<code>&lt;/font&gt;</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span></span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;,&quot;/index.html&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><p>创建一个 <code>config</code>目录，在里面写一个 <code>MyMvcConfig</code>,里面重写 <code>addViewControllers</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/index.html&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首页页面展示：</p>
<p><img data-src="1595733308730.png" alt="1595733308730"></p>
<h3 id="加载静态资源"><a href="#加载静态资源" class="headerlink" title="加载静态资源"></a>加载静态资源</h3><p>1、导入thymeleaf包</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、将所有页面的静态资源使用thymeleaf接管</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- css的导入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/css/bootstrap.min.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/css/signin.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 图片的导入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;mb-4&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/img/bootstrap-solid.svg&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;72&quot;</span> <span class="attr">height</span>=<span class="string">&quot;72&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- js导入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/jquery-3.2.1.slim.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/popper.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/bootstrap.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/feather.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/Chart.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>静态资源目录</p>
<p><img data-src="1595733680599.png" alt="1595733680599"></p>
<p>再次看一下首页页面</p>
<p><img data-src="1595733822534.png" alt="1595733822534"></p>
<h2 id="页面国际化-1"><a href="#页面国际化-1" class="headerlink" title="页面国际化"></a>页面国际化</h2><p>见页面国际化：<a href=""></a></p>
<h2 id="登录页面"><a href="#登录页面" class="headerlink" title="登录页面"></a>登录页面</h2><p>1、首页登录页面表单的修改</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-signin&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/user/login&#125;&quot;</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">&lt;!--如果msg的消息不为空，则显示这个消息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #strings.isEmpty(&#123;msg&#125;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">th:placeholder</span>=<span class="string">&quot;#&#123;login.username&#125;&quot;</span> <span class="attr">required</span>=<span class="string">&quot;&quot;</span> <span class="attr">autofocus</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">th:placeholder</span>=<span class="string">&quot;#&#123;login.password&#125;&quot;</span> <span class="attr">required</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">	......</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span>      </span><br></pre></td></tr></table></figure>

<p><code>&lt;font color=red&gt;</code>注意：<code>&lt;/font&gt;</code>登录失败时的信息显示的书写（第4行内容）</p>
<p>2、写一个LoginController登录验证</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="meta">@RequestParam(&quot;password&quot;)</span>String password,</span></span></span><br><span class="line"><span class="params"><span class="function">                        Model model,</span></span></span><br><span class="line"><span class="params"><span class="function">                        HttpSession session)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//具体的业务,登录成功跳转到dashboard页面</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(username) &amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(password)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;dashboard&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名或者密码错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>登录成功页面</p>
<p><img data-src="1595734605852.png" alt="1595734605852"></p>
<p>登录失败页面</p>
<p><img data-src="1595734687171.png" alt="1595734687171"></p>
<p>3、登录页面不友好（密码泄露）</p>
<p><img data-src="1595735421990.png" alt="1595735421990"></p>
<p>4、解决3的密码泄露问题</p>
<ul>
<li><p>加一个main映射在 <code>MyMvcConfig</code>中（第6行）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/index.html&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/main.html&quot;</span>).setViewName(<span class="string">&quot;dashboard&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>修改 <code>LoginController</code>跳转页面代码(redirect跳转)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user/login&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="meta">@RequestParam(&quot;password&quot;)</span>String password,</span></span></span><br><span class="line"><span class="params"><span class="function">                    Model model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//具体的业务,登录成功跳转到dashboard页面</span></span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(username) &amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(password)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/main.html&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名或者密码错误&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="1595735326186.png" alt="1595735326186"></p>
</li>
</ul>
<p>5、是否存在问题？(登录成功才可以进入main页面，否则直接输入<a href="http://localhost:8080/main.html%E5%B0%B1%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E9%A6%96%E9%A1%B5%E4%BA%86)%EF%BC%8C%E9%9C%80%E8%A6%81%E6%8B%A6%E6%88%AA%E5%99%A8%E5%AE%9E%E7%8E%B0">http://localhost:8080/main.html就可以访问首页了)，需要拦截器实现</a></p>
<h2 id="登录拦截器"><a href="#登录拦截器" class="headerlink" title="登录拦截器"></a>登录拦截器</h2><p>1、在 <code>LoginController</code>中添加一个session判断登录（第11行）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="meta">@RequestParam(&quot;password&quot;)</span>String password,</span></span></span><br><span class="line"><span class="params"><span class="function">                        Model model,</span></span></span><br><span class="line"><span class="params"><span class="function">                        HttpSession session)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//具体的业务,登录成功跳转到dashboard页面</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(username) &amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(password)) &#123;</span><br><span class="line">            session.setAttribute(<span class="string">&quot;loginUser&quot;</span>,username);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/main.html&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名或者密码错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、在 <code>config</code>页面写一个 <code>LoginHandlerInterceptor</code>拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 登录成功之后，应该有用户的session</span></span><br><span class="line">        Object loginUser = request.getSession().getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (loginUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;没有权限，请先登录&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/index.html&quot;</span>).forward(request,response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、<code>MyMvcConfig</code>页面重写拦截器方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor())</span><br><span class="line">        .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">        .excludePathPatterns(<span class="string">&quot;/index.html&quot;</span>,<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/user/login&quot;</span>,<span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;/js/**&quot;</span>,<span class="string">&quot;/img/**&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>&lt;font color=red&gt;</code>注意：<code>&lt;/font&gt;</code>静态资源的过滤，否则页面渲染效果会消失</p>
<p>4、在dashboard.html页面修改登录信息为session <code>[[ $&#123;session.loginUser&#125; ]]</code>，登录成功之后会显示用户名</p>
<p>5、页面的展示</p>
<p><img data-src="1595736334324.png" alt="1595736334324"></p>
<h3 id="员工列表展示"><a href="#员工列表展示" class="headerlink" title="员工列表展示"></a>员工列表展示</h3><h3 id="后台编写"><a href="#后台编写" class="headerlink" title="后台编写"></a>后台编写</h3><p>员工管理后台Controller编写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EmployeeDao employeeDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/emps&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        Collection&lt;Employee&gt; employees = employeeDao.getAll();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;emps&quot;</span>,employees);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;emp/list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="提取公共页面"><a href="#提取公共页面" class="headerlink" title="提取公共页面"></a>提取公共页面</h3><p>1、员工管理前端页面地址的修改（list.html和dashboard.html）<code>@&#123;/emps&#125;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/emps&#125;&quot;</span>&gt;</span></span><br><span class="line">        ......</span><br><span class="line">        员工管理</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、抽取公共的代码（list.html和dashboard.html）</p>
<ul>
<li><p>dashboard.html页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--顶部导航栏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0&quot;</span> <span class="attr">th:fragment</span>=<span class="string">&quot;topbar&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--...--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--侧边栏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 d-none d-md-block bg-light sidebar&quot;</span> <span class="attr">th:fragment</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--...--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>list.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--顶部导航栏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;~&#123;dashboard::topbar&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--侧边栏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;~&#123;dashboard::sidebar&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>3、进一步抽取公共的代码</p>
<ul>
<li><p>在 <code>templates</code>目录下面创建 <code>commons</code>目录，在 <code>commons</code>目录下面创建 <code>commons.html</code>放公共代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--只写改变的代码--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--顶部导航栏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0&quot;</span> <span class="attr">th:fragment</span>=<span class="string">&quot;topbar&quot;</span>&gt;</span></span><br><span class="line">    .............</span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--侧边栏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 d-none d-md-block bg-light sidebar&quot;</span> <span class="attr">th:fragment</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-sticky&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav flex-column&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link active&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html&#125;&quot;</span>&gt;</span></span><br><span class="line">                  	.............</span><br><span class="line">                    首页 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            .............</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/emps&#125;&quot;</span>&gt;</span></span><br><span class="line">                    .............</span><br><span class="line">                    员工管理</span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            .............</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        .............</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>dashboard.html和list.html页面一样</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--顶部导航栏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;~&#123;commons/commons::topbar&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--侧边栏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;~&#123;commons/commons::sidebar&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;font color=red&gt;</code>注意<code>&lt;/font&gt;</code>：replace和insert的效果一样，只不过insert会多套一层div</p>
</li>
</ul>
<p>4、添加侧边栏点中高亮</p>
<ul>
<li><p>在dashboard.html和list.html页面中侧边栏传参（在括号里面直接传参）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--侧边栏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;~&#123;commons/commons::sidebar(active=&#x27;list.html&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在commons.html中接收参数并判断</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--侧边栏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 d-none d-md-block bg-light sidebar&quot;</span> <span class="attr">th:fragment</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-sticky&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav flex-column&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:class</span>=<span class="string">&quot;$&#123;active==&#x27;main.html&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&#125;&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/main.html&#125;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                  	.............</span><br><span class="line">                    首页 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            .............</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">            	<span class="tag">&lt;<span class="name">a</span> <span class="attr">th:class</span>=<span class="string">&quot;$&#123;active==&#x27;list.html&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&#125;&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/emps&#125;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    .............</span><br><span class="line">                    员工管理</span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            .............</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        .............</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="列表循环展示"><a href="#列表循环展示" class="headerlink" title="列表循环展示"></a>列表循环展示</h3><p>员工列表循环（list.html）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--侧边栏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;~&#123;commons/commons::sidebar(active=&#x27;list.html&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">main</span> <span class="attr">role</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9 ml-sm-auto col-lg-10 pt-3 px-4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Section title<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;table-responsive&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-striped table-sm&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>department<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>birth<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;emp:$&#123;emps&#125;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.getLastName()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.getEmail()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.getGender()==0?&#x27;女&#x27;:&#x27;男&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.department.getDepartmentName()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(emp.getBirth(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-primary&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-danger&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>页面展示</p>
<p><img data-src="1595681333478.png" alt="1595681333478"></p>
<h2 id="添加员工信息"><a href="#添加员工信息" class="headerlink" title="添加员工信息"></a>添加员工信息</h2><h3 id="按钮提交"><a href="#按钮提交" class="headerlink" title="按钮提交"></a>按钮提交</h3><p>list.html页面编写</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-success&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/emp&#125;&quot;</span>&gt;</span>添加员工<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加的位置</p>
<p><img data-src="1595683472896.png" alt="1595683472896"></p>
<h3 id="跳转到添加页面"><a href="#跳转到添加页面" class="headerlink" title="跳转到添加页面"></a>跳转到添加页面</h3><p>1、后台页面的编写（跳转到add.html页面 ）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/emp&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toAddPage</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查出所有部门的信息</span></span><br><span class="line">    Collection&lt;Department&gt; department = departmentDao.getDepartment();</span><br><span class="line">    model.addAttribute(<span class="string">&quot;departments&quot;</span>,department);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;emp/add&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、add.html页面的编写（其他部分和list.html页面一样，只改main中的代码即可）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span> <span class="attr">role</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9 ml-sm-auto col-lg-10 pt-3 px-4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/emp&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;海绵宝宝&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;1176244270@qq.com&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;department.id&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--我们在controller接收的是一个Employee，所以我们需要提交的是其中的一个属性--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:each</span>=<span class="string">&quot;dept:$&#123;departments&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;dept.getDepartmentName()&#125;&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;dept.getId()&#125;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birth&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;2020/07/25 18:00:00&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;font color=red&gt;</code>注意：<code>&lt;/font&gt;</code>下拉框提交的时候应提交一个属性，因为其在controller接收的是一个Employee，否则会报错</p>
<p>页面：</p>
<p><img data-src="1595685749462.png" alt="1595685749462"></p>
<h3 id="添加员工成功"><a href="#添加员工成功" class="headerlink" title="添加员工成功"></a>添加员工成功</h3><p>后台页面的编写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">DepartmentDao departmentDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/emp&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addEmp</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">    employeeDao.save(employee);<span class="comment">//调用底层业务方法保存员工信息</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/emps&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加信息页面</p>
<p><img data-src="1595685916526.png" alt="1595685916526"></p>
<p>添加成功页面</p>
<p><img data-src="1595685951486.png" alt="1595685951486"></p>
<h3 id="日期格式的修改"><a href="#日期格式的修改" class="headerlink" title="日期格式的修改"></a>日期格式的修改</h3><p>1、如果输入的日期格式为2020-01-01，则报错</p>
<p><img data-src="1595686182138.png" alt="1595686182138"></p>
<p>2、application.properties文件中添加配置</p>
<ul>
<li><p>2.2.x版本之前</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.mvc.date-format</span>=<span class="string">yyyy-MM-dd</span></span><br></pre></td></tr></table></figure></li>
<li><p>2.2.x版本之后</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.mvc.format.date</span>=<span class="string">yyyy-MM-dd</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="修改员工信息"><a href="#修改员工信息" class="headerlink" title="修改员工信息"></a>修改员工信息</h2><h3 id="按钮提交-1"><a href="#按钮提交-1" class="headerlink" title="按钮提交"></a>按钮提交</h3><p>list.html页面编辑按钮的编写（’+‘ 报红别管）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-primary&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/emp/&#125;+$&#123;emp.getId()&#125;&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="跳转到修改页面"><a href="#跳转到修改页面" class="headerlink" title="跳转到修改页面"></a>跳转到修改页面</h3><p>1、后台页面的接收参数（Restful风格）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 去到员工的修改页面</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/emp/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpdateEmp</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, Model model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查出原来的数据</span></span><br><span class="line">    Employee employee = employeeDao.getEmployeeById(id);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;emp&quot;</span>,employee);</span><br><span class="line">    <span class="comment">//查出所有部门的信息</span></span><br><span class="line">    Collection&lt;Department&gt; department = departmentDao.getDepartment();</span><br><span class="line">    model.addAttribute(<span class="string">&quot;departments&quot;</span>,department);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;emp/update&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、update.html页面（main里面修改，其他和list.html页面一样）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span> <span class="attr">role</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9 ml-sm-auto col-lg-10 pt-3 px-4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/updateEmp&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;emp.getId()&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;emp.getLastName()&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;海绵宝宝&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;emp.getEmail()&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;1176244270@qq.com&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:checked</span>=<span class="string">&quot;$&#123;emp.getGender()==1&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:checked</span>=<span class="string">&quot;$&#123;emp.getGender()==0&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;department.id&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--我们在controller接收的是一个Employee，所以我们需要提交的是其中的一个属性--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:selected</span>=<span class="string">&quot;$&#123;dept.getId()==emp.getDepartment().getId()&#125;&quot;</span> <span class="attr">th:each</span>=<span class="string">&quot;dept:$&#123;departments&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;dept.getDepartmentName()&#125;&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;dept.getId()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;#dates.format(emp.getBirth(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birth&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;2020-07-25 00:00:00&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="1595730457032.png" alt="1595730457032"></p>
<h3 id="修改员工成功"><a href="#修改员工成功" class="headerlink" title="修改员工成功"></a>修改员工成功</h3><p>修改员工信息成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/updateEmp&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateEmp</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/emps&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="1595730489246.png" alt="1595730489246"></p>
<h2 id="删除员工信息"><a href="#删除员工信息" class="headerlink" title="删除员工信息"></a>删除员工信息</h2><h3 id="按钮提交-2"><a href="#按钮提交-2" class="headerlink" title="按钮提交"></a>按钮提交</h3><p>list.html页面删除按钮的修改</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-danger&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/delemp/&#125;+$&#123;emp.getId()&#125;&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="接收参数删除用工信息"><a href="#接收参数删除用工信息" class="headerlink" title="接收参数删除用工信息"></a>接收参数删除用工信息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除员工</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/delemp/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteEmp</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">    employeeDao.delete(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/emps&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h2><p>将404.html页面放入到templates目录下面的error目录中</p>
<p><img data-src="1595731466761.png" alt="1595731466761"></p>
<p>错误运行页面</p>
<p><img data-src="1595731494875.png" alt="1595731494875"></p>
<h3 id="注销功能的实现"><a href="#注销功能的实现" class="headerlink" title="注销功能的实现"></a>注销功能的实现</h3><p>1、在commons.html中修改注销按钮</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/logout&#125;&quot;</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、在 <code>LoginController.java</code>中编写注销页面代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user/logout&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">(HttpSession session)</span> </span>&#123;</span><br><span class="line">    session.invalidate();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/index.html&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="1595731955553.png" alt="1595731955553"></p>
<h2 id="如何写一个网站"><a href="#如何写一个网站" class="headerlink" title="如何写一个网站"></a>如何写一个网站</h2><ol>
<li>前端搞定：页面长什么样子</li>
<li><code>&lt;font color=red&gt;</code>设计数据库（数据库设计难点）<code>&lt;/font&gt;</code></li>
<li>前端让他能够自动运行，独立化工程</li>
<li>数据接口如何对接：json，对象，all in one！</li>
<li>前后端联调测试</li>
</ol>
<p>模板：</p>
<ol>
<li>有一套自己熟悉的后台模板：工作必要！x-admin</li>
<li>前端页面：至少自己能够通过前端框架，组合出来一个网站页面<ul>
<li>index</li>
<li>about</li>
<li>blog</li>
<li>post</li>
<li>user</li>
</ul>
</li>
<li>让这个网站能够独立运行！</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>MVC</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
</search>
